
rtvc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015890  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002db0  08015a90  08015a90  00016a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018840  08018840  0001a1cc  2**0
                  CONTENTS
  4 .ARM          00000008  08018840  08018840  00019840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018848  08018848  0001a1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018848  08018848  00019848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801884c  0801884c  0001984c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08018850  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  080188dc  0001a08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  0801897c  0001a12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000103ec  200001cc  08018a1c  0001a1cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200105b8  08018a1c  0001a5b8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0001a1cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00032482  00000000  00000000  0001a1fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007aca  00000000  00000000  0004c67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002720  00000000  00000000  00054148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001f04  00000000  00000000  00056868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00039301  00000000  00000000  0005876c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003a4dc  00000000  00000000  00091a6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001298ff  00000000  00000000  000cbf49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001f5848  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000abc0  00000000  00000000  001f588c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000059  00000000  00000000  0020044c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001cc 	.word	0x200001cc
 800021c:	00000000 	.word	0x00000000
 8000220:	08015a78 	.word	0x08015a78

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d0 	.word	0x200001d0
 800023c:	08015a78 	.word	0x08015a78

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4a07      	ldr	r2, [pc, #28]	@ (80005fc <vApplicationGetIdleTaskMemory+0x2c>)
 80005e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	4a06      	ldr	r2, [pc, #24]	@ (8000600 <vApplicationGetIdleTaskMemory+0x30>)
 80005e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005ee:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005f0:	bf00      	nop
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	200001e8 	.word	0x200001e8
 8000600:	2000023c 	.word	0x2000023c

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b5b0      	push	{r4, r5, r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800060a:	f000 fc11 	bl	8000e30 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f001 fb2a 	bl	8001c66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 f835 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000616:	f000 fb95 	bl	8000d44 <MX_GPIO_Init>
  MX_CAN1_Init();
 800061a:	f000 f8a3 	bl	8000764 <MX_CAN1_Init>
  MX_I2C1_Init();
 800061e:	f000 f8d5 	bl	80007cc <MX_I2C1_Init>
  MX_RTC_Init();
 8000622:	f000 f913 	bl	800084c <MX_RTC_Init>
  MX_TIM2_Init();
 8000626:	f000 f937 	bl	8000898 <MX_TIM2_Init>
  MX_TIM5_Init();
 800062a:	f000 f9a5 	bl	8000978 <MX_TIM5_Init>
  MX_UART4_Init();
 800062e:	f000 fa09 	bl	8000a44 <MX_UART4_Init>
  MX_UART5_Init();
 8000632:	f000 fa37 	bl	8000aa4 <MX_UART5_Init>
  MX_UART7_Init();
 8000636:	f000 fa65 	bl	8000b04 <MX_UART7_Init>
  MX_UART8_Init();
 800063a:	f000 fa93 	bl	8000b64 <MX_UART8_Init>
  MX_USART1_UART_Init();
 800063e:	f000 fac1 	bl	8000bc4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000642:	f000 faef 	bl	8000c24 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000646:	f000 fb1d 	bl	8000c84 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800064a:	f000 fb4b 	bl	8000ce4 <MX_USART6_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 800064e:	4b0a      	ldr	r3, [pc, #40]	@ (8000678 <main+0x74>)
 8000650:	1d3c      	adds	r4, r7, #4
 8000652:	461d      	mov	r5, r3
 8000654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000658:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800065c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f007 f954 	bl	8007912 <osThreadCreate>
 800066a:	4603      	mov	r3, r0
 800066c:	4a03      	ldr	r2, [pc, #12]	@ (800067c <main+0x78>)
 800066e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000670:	f007 f938 	bl	80078e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <main+0x70>
 8000678:	08015a9c 	.word	0x08015a9c
 800067c:	20000fb0 	.word	0x20000fb0

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b094      	sub	sp, #80	@ 0x50
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	2234      	movs	r2, #52	@ 0x34
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f014 fb4d 	bl	8014d2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a4:	4b2d      	ldr	r3, [pc, #180]	@ (800075c <SystemClock_Config+0xdc>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a8:	4a2c      	ldr	r2, [pc, #176]	@ (800075c <SystemClock_Config+0xdc>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b0:	4b2a      	ldr	r3, [pc, #168]	@ (800075c <SystemClock_Config+0xdc>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006bc:	4b28      	ldr	r3, [pc, #160]	@ (8000760 <SystemClock_Config+0xe0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a27      	ldr	r2, [pc, #156]	@ (8000760 <SystemClock_Config+0xe0>)
 80006c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006c6:	6013      	str	r3, [r2, #0]
 80006c8:	4b25      	ldr	r3, [pc, #148]	@ (8000760 <SystemClock_Config+0xe0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80006d4:	2309      	movs	r3, #9
 80006d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006de:	2301      	movs	r3, #1
 80006e0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e2:	2302      	movs	r3, #2
 80006e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006ec:	2319      	movs	r3, #25
 80006ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 80006f0:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 80006f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006fe:	2302      	movs	r3, #2
 8000700:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	4618      	mov	r0, r3
 8000708:	f003 fb06 	bl	8003d18 <HAL_RCC_OscConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000712:	f000 fbcb 	bl	8000eac <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000716:	f003 faaf 	bl	8003c78 <HAL_PWREx_EnableOverDrive>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000720:	f000 fbc4 	bl	8000eac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000724:	230f      	movs	r3, #15
 8000726:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000728:	2302      	movs	r3, #2
 800072a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000730:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000734:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000736:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800073a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	2107      	movs	r1, #7
 8000742:	4618      	mov	r0, r3
 8000744:	f003 fd96 	bl	8004274 <HAL_RCC_ClockConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800074e:	f000 fbad 	bl	8000eac <Error_Handler>
  }
}
 8000752:	bf00      	nop
 8000754:	3750      	adds	r7, #80	@ 0x50
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800
 8000760:	40007000 	.word	0x40007000

08000764 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000768:	4b16      	ldr	r3, [pc, #88]	@ (80007c4 <MX_CAN1_Init+0x60>)
 800076a:	4a17      	ldr	r2, [pc, #92]	@ (80007c8 <MX_CAN1_Init+0x64>)
 800076c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800076e:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <MX_CAN1_Init+0x60>)
 8000770:	2210      	movs	r2, #16
 8000772:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000774:	4b13      	ldr	r3, [pc, #76]	@ (80007c4 <MX_CAN1_Init+0x60>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800077a:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <MX_CAN1_Init+0x60>)
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000780:	4b10      	ldr	r3, [pc, #64]	@ (80007c4 <MX_CAN1_Init+0x60>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000786:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <MX_CAN1_Init+0x60>)
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800078c:	4b0d      	ldr	r3, [pc, #52]	@ (80007c4 <MX_CAN1_Init+0x60>)
 800078e:	2200      	movs	r2, #0
 8000790:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000792:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <MX_CAN1_Init+0x60>)
 8000794:	2200      	movs	r2, #0
 8000796:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000798:	4b0a      	ldr	r3, [pc, #40]	@ (80007c4 <MX_CAN1_Init+0x60>)
 800079a:	2200      	movs	r2, #0
 800079c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800079e:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <MX_CAN1_Init+0x60>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007a4:	4b07      	ldr	r3, [pc, #28]	@ (80007c4 <MX_CAN1_Init+0x60>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007aa:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <MX_CAN1_Init+0x60>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007b0:	4804      	ldr	r0, [pc, #16]	@ (80007c4 <MX_CAN1_Init+0x60>)
 80007b2:	f001 fab5 	bl	8001d20 <HAL_CAN_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80007bc:	f000 fb76 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000a3c 	.word	0x20000a3c
 80007c8:	40006400 	.word	0x40006400

080007cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000840 <MX_I2C1_Init+0x74>)
 80007d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000844 <MX_I2C1_Init+0x78>)
 80007d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000840 <MX_I2C1_Init+0x74>)
 80007d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000848 <MX_I2C1_Init+0x7c>)
 80007da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007dc:	4b18      	ldr	r3, [pc, #96]	@ (8000840 <MX_I2C1_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e2:	4b17      	ldr	r3, [pc, #92]	@ (8000840 <MX_I2C1_Init+0x74>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e8:	4b15      	ldr	r3, [pc, #84]	@ (8000840 <MX_I2C1_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007ee:	4b14      	ldr	r3, [pc, #80]	@ (8000840 <MX_I2C1_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007f4:	4b12      	ldr	r3, [pc, #72]	@ (8000840 <MX_I2C1_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007fa:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <MX_I2C1_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000800:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <MX_I2C1_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000806:	480e      	ldr	r0, [pc, #56]	@ (8000840 <MX_I2C1_Init+0x74>)
 8000808:	f003 f902 	bl	8003a10 <HAL_I2C_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000812:	f000 fb4b 	bl	8000eac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000816:	2100      	movs	r1, #0
 8000818:	4809      	ldr	r0, [pc, #36]	@ (8000840 <MX_I2C1_Init+0x74>)
 800081a:	f003 f995 	bl	8003b48 <HAL_I2CEx_ConfigAnalogFilter>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000824:	f000 fb42 	bl	8000eac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000828:	2100      	movs	r1, #0
 800082a:	4805      	ldr	r0, [pc, #20]	@ (8000840 <MX_I2C1_Init+0x74>)
 800082c:	f003 f9d7 	bl	8003bde <HAL_I2CEx_ConfigDigitalFilter>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000836:	f000 fb39 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000a64 	.word	0x20000a64
 8000844:	40005400 	.word	0x40005400
 8000848:	20404768 	.word	0x20404768

0800084c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000850:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <MX_RTC_Init+0x44>)
 8000852:	4a10      	ldr	r2, [pc, #64]	@ (8000894 <MX_RTC_Init+0x48>)
 8000854:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000856:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <MX_RTC_Init+0x44>)
 8000858:	2200      	movs	r2, #0
 800085a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800085c:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <MX_RTC_Init+0x44>)
 800085e:	227f      	movs	r2, #127	@ 0x7f
 8000860:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000862:	4b0b      	ldr	r3, [pc, #44]	@ (8000890 <MX_RTC_Init+0x44>)
 8000864:	22ff      	movs	r2, #255	@ 0xff
 8000866:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000868:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <MX_RTC_Init+0x44>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800086e:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <MX_RTC_Init+0x44>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000874:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <MX_RTC_Init+0x44>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800087a:	4805      	ldr	r0, [pc, #20]	@ (8000890 <MX_RTC_Init+0x44>)
 800087c:	f004 fb3a 	bl	8004ef4 <HAL_RTC_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000886:	f000 fb11 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000ab8 	.word	0x20000ab8
 8000894:	40002800 	.word	0x40002800

08000898 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	@ 0x28
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008aa:	463b      	mov	r3, r7
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
 80008b8:	615a      	str	r2, [r3, #20]
 80008ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008bc:	4b2d      	ldr	r3, [pc, #180]	@ (8000974 <MX_TIM2_Init+0xdc>)
 80008be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000974 <MX_TIM2_Init+0xdc>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000974 <MX_TIM2_Init+0xdc>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80008d0:	4b28      	ldr	r3, [pc, #160]	@ (8000974 <MX_TIM2_Init+0xdc>)
 80008d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80008d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d8:	4b26      	ldr	r3, [pc, #152]	@ (8000974 <MX_TIM2_Init+0xdc>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008de:	4b25      	ldr	r3, [pc, #148]	@ (8000974 <MX_TIM2_Init+0xdc>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008e4:	4823      	ldr	r0, [pc, #140]	@ (8000974 <MX_TIM2_Init+0xdc>)
 80008e6:	f004 fd3c 	bl	8005362 <HAL_TIM_PWM_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80008f0:	f000 fadc 	bl	8000eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	481c      	ldr	r0, [pc, #112]	@ (8000974 <MX_TIM2_Init+0xdc>)
 8000904:	f005 fb4c 	bl	8005fa0 <HAL_TIMEx_MasterConfigSynchronization>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800090e:	f000 facd 	bl	8000eac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000912:	2360      	movs	r3, #96	@ 0x60
 8000914:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000922:	463b      	mov	r3, r7
 8000924:	2200      	movs	r2, #0
 8000926:	4619      	mov	r1, r3
 8000928:	4812      	ldr	r0, [pc, #72]	@ (8000974 <MX_TIM2_Init+0xdc>)
 800092a:	f004 fef3 	bl	8005714 <HAL_TIM_PWM_ConfigChannel>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000934:	f000 faba 	bl	8000eac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000938:	463b      	mov	r3, r7
 800093a:	2208      	movs	r2, #8
 800093c:	4619      	mov	r1, r3
 800093e:	480d      	ldr	r0, [pc, #52]	@ (8000974 <MX_TIM2_Init+0xdc>)
 8000940:	f004 fee8 	bl	8005714 <HAL_TIM_PWM_ConfigChannel>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800094a:	f000 faaf 	bl	8000eac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800094e:	463b      	mov	r3, r7
 8000950:	220c      	movs	r2, #12
 8000952:	4619      	mov	r1, r3
 8000954:	4807      	ldr	r0, [pc, #28]	@ (8000974 <MX_TIM2_Init+0xdc>)
 8000956:	f004 fedd 	bl	8005714 <HAL_TIM_PWM_ConfigChannel>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000960:	f000 faa4 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000964:	4803      	ldr	r0, [pc, #12]	@ (8000974 <MX_TIM2_Init+0xdc>)
 8000966:	f000 fbdd 	bl	8001124 <HAL_TIM_MspPostInit>

}
 800096a:	bf00      	nop
 800096c:	3728      	adds	r7, #40	@ 0x28
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000ad8 	.word	0x20000ad8

08000978 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	@ 0x28
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800098a:	463b      	mov	r3, r7
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
 8000998:	615a      	str	r2, [r3, #20]
 800099a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800099c:	4b27      	ldr	r3, [pc, #156]	@ (8000a3c <MX_TIM5_Init+0xc4>)
 800099e:	4a28      	ldr	r2, [pc, #160]	@ (8000a40 <MX_TIM5_Init+0xc8>)
 80009a0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80009a2:	4b26      	ldr	r3, [pc, #152]	@ (8000a3c <MX_TIM5_Init+0xc4>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a8:	4b24      	ldr	r3, [pc, #144]	@ (8000a3c <MX_TIM5_Init+0xc4>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80009ae:	4b23      	ldr	r3, [pc, #140]	@ (8000a3c <MX_TIM5_Init+0xc4>)
 80009b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80009b4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b6:	4b21      	ldr	r3, [pc, #132]	@ (8000a3c <MX_TIM5_Init+0xc4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009bc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a3c <MX_TIM5_Init+0xc4>)
 80009be:	2200      	movs	r2, #0
 80009c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 80009c2:	481e      	ldr	r0, [pc, #120]	@ (8000a3c <MX_TIM5_Init+0xc4>)
 80009c4:	f004 fc76 	bl	80052b4 <HAL_TIM_OC_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 80009ce:	f000 fa6d 	bl	8000eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	4816      	ldr	r0, [pc, #88]	@ (8000a3c <MX_TIM5_Init+0xc4>)
 80009e2:	f005 fadd 	bl	8005fa0 <HAL_TIMEx_MasterConfigSynchronization>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80009ec:	f000 fa5e 	bl	8000eac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80009f0:	2300      	movs	r3, #0
 80009f2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a00:	463b      	mov	r3, r7
 8000a02:	2200      	movs	r2, #0
 8000a04:	4619      	mov	r1, r3
 8000a06:	480d      	ldr	r0, [pc, #52]	@ (8000a3c <MX_TIM5_Init+0xc4>)
 8000a08:	f004 fe0a 	bl	8005620 <HAL_TIM_OC_ConfigChannel>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8000a12:	f000 fa4b 	bl	8000eac <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a16:	463b      	mov	r3, r7
 8000a18:	220c      	movs	r2, #12
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4807      	ldr	r0, [pc, #28]	@ (8000a3c <MX_TIM5_Init+0xc4>)
 8000a1e:	f004 fdff 	bl	8005620 <HAL_TIM_OC_ConfigChannel>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8000a28:	f000 fa40 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000a2c:	4803      	ldr	r0, [pc, #12]	@ (8000a3c <MX_TIM5_Init+0xc4>)
 8000a2e:	f000 fb79 	bl	8001124 <HAL_TIM_MspPostInit>

}
 8000a32:	bf00      	nop
 8000a34:	3728      	adds	r7, #40	@ 0x28
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000b24 	.word	0x20000b24
 8000a40:	40000c00 	.word	0x40000c00

08000a44 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a48:	4b14      	ldr	r3, [pc, #80]	@ (8000a9c <MX_UART4_Init+0x58>)
 8000a4a:	4a15      	ldr	r2, [pc, #84]	@ (8000aa0 <MX_UART4_Init+0x5c>)
 8000a4c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	@ (8000a9c <MX_UART4_Init+0x58>)
 8000a50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a54:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a56:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <MX_UART4_Init+0x58>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <MX_UART4_Init+0x58>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <MX_UART4_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <MX_UART4_Init+0x58>)
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a9c <MX_UART4_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a74:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <MX_UART4_Init+0x58>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <MX_UART4_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a80:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <MX_UART4_Init+0x58>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	@ (8000a9c <MX_UART4_Init+0x58>)
 8000a88:	f005 fb36 	bl	80060f8 <HAL_UART_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000a92:	f000 fa0b 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000b70 	.word	0x20000b70
 8000aa0:	40004c00 	.word	0x40004c00

08000aa4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000aa8:	4b14      	ldr	r3, [pc, #80]	@ (8000afc <MX_UART5_Init+0x58>)
 8000aaa:	4a15      	ldr	r2, [pc, #84]	@ (8000b00 <MX_UART5_Init+0x5c>)
 8000aac:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000aae:	4b13      	ldr	r3, [pc, #76]	@ (8000afc <MX_UART5_Init+0x58>)
 8000ab0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ab4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <MX_UART5_Init+0x58>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <MX_UART5_Init+0x58>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <MX_UART5_Init+0x58>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <MX_UART5_Init+0x58>)
 8000aca:	220c      	movs	r2, #12
 8000acc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <MX_UART5_Init+0x58>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <MX_UART5_Init+0x58>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ada:	4b08      	ldr	r3, [pc, #32]	@ (8000afc <MX_UART5_Init+0x58>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <MX_UART5_Init+0x58>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000ae6:	4805      	ldr	r0, [pc, #20]	@ (8000afc <MX_UART5_Init+0x58>)
 8000ae8:	f005 fb06 	bl	80060f8 <HAL_UART_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000af2:	f000 f9db 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000bf8 	.word	0x20000bf8
 8000b00:	40005000 	.word	0x40005000

08000b04 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000b08:	4b14      	ldr	r3, [pc, #80]	@ (8000b5c <MX_UART7_Init+0x58>)
 8000b0a:	4a15      	ldr	r2, [pc, #84]	@ (8000b60 <MX_UART7_Init+0x5c>)
 8000b0c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000b0e:	4b13      	ldr	r3, [pc, #76]	@ (8000b5c <MX_UART7_Init+0x58>)
 8000b10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b14:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000b16:	4b11      	ldr	r3, [pc, #68]	@ (8000b5c <MX_UART7_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <MX_UART7_Init+0x58>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <MX_UART7_Init+0x58>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	@ (8000b5c <MX_UART7_Init+0x58>)
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b5c <MX_UART7_Init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b34:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <MX_UART7_Init+0x58>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <MX_UART7_Init+0x58>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b40:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <MX_UART7_Init+0x58>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000b46:	4805      	ldr	r0, [pc, #20]	@ (8000b5c <MX_UART7_Init+0x58>)
 8000b48:	f005 fad6 	bl	80060f8 <HAL_UART_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000b52:	f000 f9ab 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000c80 	.word	0x20000c80
 8000b60:	40007800 	.word	0x40007800

08000b64 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000b68:	4b14      	ldr	r3, [pc, #80]	@ (8000bbc <MX_UART8_Init+0x58>)
 8000b6a:	4a15      	ldr	r2, [pc, #84]	@ (8000bc0 <MX_UART8_Init+0x5c>)
 8000b6c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000b6e:	4b13      	ldr	r3, [pc, #76]	@ (8000bbc <MX_UART8_Init+0x58>)
 8000b70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b74:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000b76:	4b11      	ldr	r3, [pc, #68]	@ (8000bbc <MX_UART8_Init+0x58>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bbc <MX_UART8_Init+0x58>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000b82:	4b0e      	ldr	r3, [pc, #56]	@ (8000bbc <MX_UART8_Init+0x58>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	@ (8000bbc <MX_UART8_Init+0x58>)
 8000b8a:	220c      	movs	r2, #12
 8000b8c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bbc <MX_UART8_Init+0x58>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b94:	4b09      	ldr	r3, [pc, #36]	@ (8000bbc <MX_UART8_Init+0x58>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b9a:	4b08      	ldr	r3, [pc, #32]	@ (8000bbc <MX_UART8_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <MX_UART8_Init+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000ba6:	4805      	ldr	r0, [pc, #20]	@ (8000bbc <MX_UART8_Init+0x58>)
 8000ba8:	f005 faa6 	bl	80060f8 <HAL_UART_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_UART8_Init+0x52>
  {
    Error_Handler();
 8000bb2:	f000 f97b 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000d08 	.word	0x20000d08
 8000bc0:	40007c00 	.word	0x40007c00

08000bc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bc8:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <MX_USART1_UART_Init+0x58>)
 8000bca:	4a15      	ldr	r2, [pc, #84]	@ (8000c20 <MX_USART1_UART_Init+0x5c>)
 8000bcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bce:	4b13      	ldr	r3, [pc, #76]	@ (8000c1c <MX_USART1_UART_Init+0x58>)
 8000bd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <MX_USART1_UART_Init+0x58>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c1c <MX_USART1_UART_Init+0x58>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <MX_USART1_UART_Init+0x58>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <MX_USART1_UART_Init+0x58>)
 8000bea:	220c      	movs	r2, #12
 8000bec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bee:	4b0b      	ldr	r3, [pc, #44]	@ (8000c1c <MX_USART1_UART_Init+0x58>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf4:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <MX_USART1_UART_Init+0x58>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bfa:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <MX_USART1_UART_Init+0x58>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c00:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <MX_USART1_UART_Init+0x58>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c06:	4805      	ldr	r0, [pc, #20]	@ (8000c1c <MX_USART1_UART_Init+0x58>)
 8000c08:	f005 fa76 	bl	80060f8 <HAL_UART_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c12:	f000 f94b 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000d90 	.word	0x20000d90
 8000c20:	40011000 	.word	0x40011000

08000c24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c28:	4b14      	ldr	r3, [pc, #80]	@ (8000c7c <MX_USART2_UART_Init+0x58>)
 8000c2a:	4a15      	ldr	r2, [pc, #84]	@ (8000c80 <MX_USART2_UART_Init+0x5c>)
 8000c2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c2e:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <MX_USART2_UART_Init+0x58>)
 8000c30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c36:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <MX_USART2_UART_Init+0x58>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <MX_USART2_UART_Init+0x58>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <MX_USART2_UART_Init+0x58>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <MX_USART2_UART_Init+0x58>)
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <MX_USART2_UART_Init+0x58>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c54:	4b09      	ldr	r3, [pc, #36]	@ (8000c7c <MX_USART2_UART_Init+0x58>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <MX_USART2_UART_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c60:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <MX_USART2_UART_Init+0x58>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000c66:	4805      	ldr	r0, [pc, #20]	@ (8000c7c <MX_USART2_UART_Init+0x58>)
 8000c68:	f005 fa94 	bl	8006194 <HAL_HalfDuplex_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c72:	f000 f91b 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000e18 	.word	0x20000e18
 8000c80:	40004400 	.word	0x40004400

08000c84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c88:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <MX_USART3_UART_Init+0x58>)
 8000c8a:	4a15      	ldr	r2, [pc, #84]	@ (8000ce0 <MX_USART3_UART_Init+0x5c>)
 8000c8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c8e:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <MX_USART3_UART_Init+0x58>)
 8000c90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c96:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <MX_USART3_UART_Init+0x58>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <MX_USART3_UART_Init+0x58>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cdc <MX_USART3_UART_Init+0x58>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <MX_USART3_UART_Init+0x58>)
 8000caa:	220c      	movs	r2, #12
 8000cac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	@ (8000cdc <MX_USART3_UART_Init+0x58>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb4:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <MX_USART3_UART_Init+0x58>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cba:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <MX_USART3_UART_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <MX_USART3_UART_Init+0x58>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cc6:	4805      	ldr	r0, [pc, #20]	@ (8000cdc <MX_USART3_UART_Init+0x58>)
 8000cc8:	f005 fa16 	bl	80060f8 <HAL_UART_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000cd2:	f000 f8eb 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000ea0 	.word	0x20000ea0
 8000ce0:	40004800 	.word	0x40004800

08000ce4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ce8:	4b14      	ldr	r3, [pc, #80]	@ (8000d3c <MX_USART6_UART_Init+0x58>)
 8000cea:	4a15      	ldr	r2, [pc, #84]	@ (8000d40 <MX_USART6_UART_Init+0x5c>)
 8000cec:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000cee:	4b13      	ldr	r3, [pc, #76]	@ (8000d3c <MX_USART6_UART_Init+0x58>)
 8000cf0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cf4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <MX_USART6_UART_Init+0x58>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d3c <MX_USART6_UART_Init+0x58>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <MX_USART6_UART_Init+0x58>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <MX_USART6_UART_Init+0x58>)
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <MX_USART6_UART_Init+0x58>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d14:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <MX_USART6_UART_Init+0x58>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d1a:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <MX_USART6_UART_Init+0x58>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <MX_USART6_UART_Init+0x58>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000d26:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <MX_USART6_UART_Init+0x58>)
 8000d28:	f005 f9e6 	bl	80060f8 <HAL_UART_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000d32:	f000 f8bb 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000f28 	.word	0x20000f28
 8000d40:	40011400 	.word	0x40011400

08000d44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b089      	sub	sp, #36	@ 0x24
 8000d48:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d4a:	4b33      	ldr	r3, [pc, #204]	@ (8000e18 <MX_GPIO_Init+0xd4>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	4a32      	ldr	r2, [pc, #200]	@ (8000e18 <MX_GPIO_Init+0xd4>)
 8000d50:	f043 0320 	orr.w	r3, r3, #32
 8000d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d56:	4b30      	ldr	r3, [pc, #192]	@ (8000e18 <MX_GPIO_Init+0xd4>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	f003 0320 	and.w	r3, r3, #32
 8000d5e:	61fb      	str	r3, [r7, #28]
 8000d60:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d62:	4b2d      	ldr	r3, [pc, #180]	@ (8000e18 <MX_GPIO_Init+0xd4>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	4a2c      	ldr	r2, [pc, #176]	@ (8000e18 <MX_GPIO_Init+0xd4>)
 8000d68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6e:	4b2a      	ldr	r3, [pc, #168]	@ (8000e18 <MX_GPIO_Init+0xd4>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d76:	61bb      	str	r3, [r7, #24]
 8000d78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7a:	4b27      	ldr	r3, [pc, #156]	@ (8000e18 <MX_GPIO_Init+0xd4>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	4a26      	ldr	r2, [pc, #152]	@ (8000e18 <MX_GPIO_Init+0xd4>)
 8000d80:	f043 0304 	orr.w	r3, r3, #4
 8000d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d86:	4b24      	ldr	r3, [pc, #144]	@ (8000e18 <MX_GPIO_Init+0xd4>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	f003 0304 	and.w	r3, r3, #4
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	4b21      	ldr	r3, [pc, #132]	@ (8000e18 <MX_GPIO_Init+0xd4>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	4a20      	ldr	r2, [pc, #128]	@ (8000e18 <MX_GPIO_Init+0xd4>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000e18 <MX_GPIO_Init+0xd4>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000daa:	4b1b      	ldr	r3, [pc, #108]	@ (8000e18 <MX_GPIO_Init+0xd4>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	4a1a      	ldr	r2, [pc, #104]	@ (8000e18 <MX_GPIO_Init+0xd4>)
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db6:	4b18      	ldr	r3, [pc, #96]	@ (8000e18 <MX_GPIO_Init+0xd4>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc2:	4b15      	ldr	r3, [pc, #84]	@ (8000e18 <MX_GPIO_Init+0xd4>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	4a14      	ldr	r2, [pc, #80]	@ (8000e18 <MX_GPIO_Init+0xd4>)
 8000dc8:	f043 0308 	orr.w	r3, r3, #8
 8000dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dce:	4b12      	ldr	r3, [pc, #72]	@ (8000e18 <MX_GPIO_Init+0xd4>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	f003 0308 	and.w	r3, r3, #8
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dda:	4b0f      	ldr	r3, [pc, #60]	@ (8000e18 <MX_GPIO_Init+0xd4>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dde:	4a0e      	ldr	r2, [pc, #56]	@ (8000e18 <MX_GPIO_Init+0xd4>)
 8000de0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de6:	4b0c      	ldr	r3, [pc, #48]	@ (8000e18 <MX_GPIO_Init+0xd4>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000df2:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <MX_GPIO_Init+0xd4>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	4a08      	ldr	r2, [pc, #32]	@ (8000e18 <MX_GPIO_Init+0xd4>)
 8000df8:	f043 0310 	orr.w	r3, r3, #16
 8000dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfe:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <MX_GPIO_Init+0xd4>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	f003 0310 	and.w	r3, r3, #16
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e0a:	bf00      	nop
 8000e0c:	3724      	adds	r7, #36	@ 0x24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40023800 	.word	0x40023800

08000e1c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000e24:	f005 fe8c 	bl	8006b40 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e28:	2001      	movs	r0, #1
 8000e2a:	f006 fdca 	bl	80079c2 <osDelay>
 8000e2e:	e7fb      	b.n	8000e28 <StartDefaultTask+0xc>

08000e30 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e36:	463b      	mov	r3, r7
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000e42:	f001 f94b 	bl	80020dc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e46:	2301      	movs	r3, #1
 8000e48:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000e52:	231f      	movs	r3, #31
 8000e54:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000e56:	2387      	movs	r3, #135	@ 0x87
 8000e58:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000e62:	2301      	movs	r3, #1
 8000e64:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e66:	2301      	movs	r3, #1
 8000e68:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e72:	463b      	mov	r3, r7
 8000e74:	4618      	mov	r0, r3
 8000e76:	f001 f969 	bl	800214c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e7a:	2004      	movs	r0, #4
 8000e7c:	f001 f946 	bl	800210c <HAL_MPU_Enable>

}
 8000e80:	bf00      	nop
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a04      	ldr	r2, [pc, #16]	@ (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d101      	bne.n	8000e9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e9a:	f000 fef1 	bl	8001c80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40000400 	.word	0x40000400

08000eac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb0:	b672      	cpsid	i
}
 8000eb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <Error_Handler+0x8>

08000eb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ebe:	4b11      	ldr	r3, [pc, #68]	@ (8000f04 <HAL_MspInit+0x4c>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec2:	4a10      	ldr	r2, [pc, #64]	@ (8000f04 <HAL_MspInit+0x4c>)
 8000ec4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eca:	4b0e      	ldr	r3, [pc, #56]	@ (8000f04 <HAL_MspInit+0x4c>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ece:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f04 <HAL_MspInit+0x4c>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eda:	4a0a      	ldr	r2, [pc, #40]	@ (8000f04 <HAL_MspInit+0x4c>)
 8000edc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ee0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ee2:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <HAL_MspInit+0x4c>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	210f      	movs	r1, #15
 8000ef2:	f06f 0001 	mvn.w	r0, #1
 8000ef6:	f001 f8c7 	bl	8002088 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40023800 	.word	0x40023800

08000f08 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	@ 0x28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a17      	ldr	r2, [pc, #92]	@ (8000f84 <HAL_CAN_MspInit+0x7c>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d128      	bne.n	8000f7c <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f2a:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <HAL_CAN_MspInit+0x80>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2e:	4a16      	ldr	r2, [pc, #88]	@ (8000f88 <HAL_CAN_MspInit+0x80>)
 8000f30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f36:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <HAL_CAN_MspInit+0x80>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <HAL_CAN_MspInit+0x80>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	4a10      	ldr	r2, [pc, #64]	@ (8000f88 <HAL_CAN_MspInit+0x80>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f88 <HAL_CAN_MspInit+0x80>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f5a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f6c:	2309      	movs	r3, #9
 8000f6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	4805      	ldr	r0, [pc, #20]	@ (8000f8c <HAL_CAN_MspInit+0x84>)
 8000f78:	f002 fb9e 	bl	80036b8 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000f7c:	bf00      	nop
 8000f7e:	3728      	adds	r7, #40	@ 0x28
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40006400 	.word	0x40006400
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020000 	.word	0x40020000

08000f90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b0ae      	sub	sp, #184	@ 0xb8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2290      	movs	r2, #144	@ 0x90
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f013 febc 	bl	8014d2e <memset>
  if(hi2c->Instance==I2C1)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a21      	ldr	r2, [pc, #132]	@ (8001040 <HAL_I2C_MspInit+0xb0>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d13b      	bne.n	8001038 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fc0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000fc4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f003 fb68 	bl	80046a4 <HAL_RCCEx_PeriphCLKConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000fda:	f7ff ff67 	bl	8000eac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	4b19      	ldr	r3, [pc, #100]	@ (8001044 <HAL_I2C_MspInit+0xb4>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	4a18      	ldr	r2, [pc, #96]	@ (8001044 <HAL_I2C_MspInit+0xb4>)
 8000fe4:	f043 0302 	orr.w	r3, r3, #2
 8000fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fea:	4b16      	ldr	r3, [pc, #88]	@ (8001044 <HAL_I2C_MspInit+0xb4>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ff6:	23c0      	movs	r3, #192	@ 0xc0
 8000ff8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ffc:	2312      	movs	r3, #18
 8000ffe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001008:	2303      	movs	r3, #3
 800100a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800100e:	2304      	movs	r3, #4
 8001010:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001014:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001018:	4619      	mov	r1, r3
 800101a:	480b      	ldr	r0, [pc, #44]	@ (8001048 <HAL_I2C_MspInit+0xb8>)
 800101c:	f002 fb4c 	bl	80036b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001020:	4b08      	ldr	r3, [pc, #32]	@ (8001044 <HAL_I2C_MspInit+0xb4>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001024:	4a07      	ldr	r2, [pc, #28]	@ (8001044 <HAL_I2C_MspInit+0xb4>)
 8001026:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800102a:	6413      	str	r3, [r2, #64]	@ 0x40
 800102c:	4b05      	ldr	r3, [pc, #20]	@ (8001044 <HAL_I2C_MspInit+0xb4>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001030:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001038:	bf00      	nop
 800103a:	37b8      	adds	r7, #184	@ 0xb8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40005400 	.word	0x40005400
 8001044:	40023800 	.word	0x40023800
 8001048:	40020400 	.word	0x40020400

0800104c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b0a6      	sub	sp, #152	@ 0x98
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001054:	f107 0308 	add.w	r3, r7, #8
 8001058:	2290      	movs	r2, #144	@ 0x90
 800105a:	2100      	movs	r1, #0
 800105c:	4618      	mov	r0, r3
 800105e:	f013 fe66 	bl	8014d2e <memset>
  if(hrtc->Instance==RTC)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a0e      	ldr	r2, [pc, #56]	@ (80010a0 <HAL_RTC_MspInit+0x54>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d114      	bne.n	8001096 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800106c:	2320      	movs	r3, #32
 800106e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001070:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001074:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001076:	f107 0308 	add.w	r3, r7, #8
 800107a:	4618      	mov	r0, r3
 800107c:	f003 fb12 	bl	80046a4 <HAL_RCCEx_PeriphCLKConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001086:	f7ff ff11 	bl	8000eac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800108a:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <HAL_RTC_MspInit+0x58>)
 800108c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800108e:	4a05      	ldr	r2, [pc, #20]	@ (80010a4 <HAL_RTC_MspInit+0x58>)
 8001090:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001094:	6713      	str	r3, [r2, #112]	@ 0x70

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001096:	bf00      	nop
 8001098:	3798      	adds	r7, #152	@ 0x98
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40002800 	.word	0x40002800
 80010a4:	40023800 	.word	0x40023800

080010a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010b8:	d10b      	bne.n	80010d2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010ba:	4b09      	ldr	r3, [pc, #36]	@ (80010e0 <HAL_TIM_PWM_MspInit+0x38>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010be:	4a08      	ldr	r2, [pc, #32]	@ (80010e0 <HAL_TIM_PWM_MspInit+0x38>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010c6:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <HAL_TIM_PWM_MspInit+0x38>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80010d2:	bf00      	nop
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40023800 	.word	0x40023800

080010e4 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM5)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a0a      	ldr	r2, [pc, #40]	@ (800111c <HAL_TIM_OC_MspInit+0x38>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d10b      	bne.n	800110e <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80010f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001120 <HAL_TIM_OC_MspInit+0x3c>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fa:	4a09      	ldr	r2, [pc, #36]	@ (8001120 <HAL_TIM_OC_MspInit+0x3c>)
 80010fc:	f043 0308 	orr.w	r3, r3, #8
 8001100:	6413      	str	r3, [r2, #64]	@ 0x40
 8001102:	4b07      	ldr	r3, [pc, #28]	@ (8001120 <HAL_TIM_OC_MspInit+0x3c>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001106:	f003 0308 	and.w	r3, r3, #8
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM5_MspInit 1 */

  }

}
 800110e:	bf00      	nop
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40000c00 	.word	0x40000c00
 8001120:	40023800 	.word	0x40023800

08001124 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	@ 0x28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001144:	d139      	bne.n	80011ba <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	4b2f      	ldr	r3, [pc, #188]	@ (8001204 <HAL_TIM_MspPostInit+0xe0>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	4a2e      	ldr	r2, [pc, #184]	@ (8001204 <HAL_TIM_MspPostInit+0xe0>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6313      	str	r3, [r2, #48]	@ 0x30
 8001152:	4b2c      	ldr	r3, [pc, #176]	@ (8001204 <HAL_TIM_MspPostInit+0xe0>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	4b29      	ldr	r3, [pc, #164]	@ (8001204 <HAL_TIM_MspPostInit+0xe0>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	4a28      	ldr	r2, [pc, #160]	@ (8001204 <HAL_TIM_MspPostInit+0xe0>)
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	6313      	str	r3, [r2, #48]	@ 0x30
 800116a:	4b26      	ldr	r3, [pc, #152]	@ (8001204 <HAL_TIM_MspPostInit+0xe0>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001176:	2320      	movs	r3, #32
 8001178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001186:	2301      	movs	r3, #1
 8001188:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	481d      	ldr	r0, [pc, #116]	@ (8001208 <HAL_TIM_MspPostInit+0xe4>)
 8001192:	f002 fa91 	bl	80036b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001196:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800119a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011a8:	2301      	movs	r3, #1
 80011aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4619      	mov	r1, r3
 80011b2:	4816      	ldr	r0, [pc, #88]	@ (800120c <HAL_TIM_MspPostInit+0xe8>)
 80011b4:	f002 fa80 	bl	80036b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80011b8:	e020      	b.n	80011fc <HAL_TIM_MspPostInit+0xd8>
  else if(htim->Instance==TIM5)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a14      	ldr	r2, [pc, #80]	@ (8001210 <HAL_TIM_MspPostInit+0xec>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d11b      	bne.n	80011fc <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <HAL_TIM_MspPostInit+0xe0>)
 80011c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001204 <HAL_TIM_MspPostInit+0xe0>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001204 <HAL_TIM_MspPostInit+0xe0>)
 80011d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80011dc:	2309      	movs	r3, #9
 80011de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80011ec:	2302      	movs	r3, #2
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	4804      	ldr	r0, [pc, #16]	@ (8001208 <HAL_TIM_MspPostInit+0xe4>)
 80011f8:	f002 fa5e 	bl	80036b8 <HAL_GPIO_Init>
}
 80011fc:	bf00      	nop
 80011fe:	3728      	adds	r7, #40	@ 0x28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40023800 	.word	0x40023800
 8001208:	40020000 	.word	0x40020000
 800120c:	40020400 	.word	0x40020400
 8001210:	40000c00 	.word	0x40000c00

08001214 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b0bc      	sub	sp, #240	@ 0xf0
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800122c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001230:	2290      	movs	r2, #144	@ 0x90
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f013 fd7a 	bl	8014d2e <memset>
  if(huart->Instance==UART4)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4ab8      	ldr	r2, [pc, #736]	@ (8001520 <HAL_UART_MspInit+0x30c>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d13e      	bne.n	80012c2 <HAL_UART_MspInit+0xae>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001244:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001248:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800124a:	2300      	movs	r3, #0
 800124c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001250:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001254:	4618      	mov	r0, r3
 8001256:	f003 fa25 	bl	80046a4 <HAL_RCCEx_PeriphCLKConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001260:	f7ff fe24 	bl	8000eac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001264:	4baf      	ldr	r3, [pc, #700]	@ (8001524 <HAL_UART_MspInit+0x310>)
 8001266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001268:	4aae      	ldr	r2, [pc, #696]	@ (8001524 <HAL_UART_MspInit+0x310>)
 800126a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800126e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001270:	4bac      	ldr	r3, [pc, #688]	@ (8001524 <HAL_UART_MspInit+0x310>)
 8001272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001274:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001278:	64bb      	str	r3, [r7, #72]	@ 0x48
 800127a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800127c:	4ba9      	ldr	r3, [pc, #676]	@ (8001524 <HAL_UART_MspInit+0x310>)
 800127e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001280:	4aa8      	ldr	r2, [pc, #672]	@ (8001524 <HAL_UART_MspInit+0x310>)
 8001282:	f043 0304 	orr.w	r3, r3, #4
 8001286:	6313      	str	r3, [r2, #48]	@ 0x30
 8001288:	4ba6      	ldr	r3, [pc, #664]	@ (8001524 <HAL_UART_MspInit+0x310>)
 800128a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	647b      	str	r3, [r7, #68]	@ 0x44
 8001292:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001294:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001298:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a8:	2303      	movs	r3, #3
 80012aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80012ae:	2308      	movs	r3, #8
 80012b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012b8:	4619      	mov	r1, r3
 80012ba:	489b      	ldr	r0, [pc, #620]	@ (8001528 <HAL_UART_MspInit+0x314>)
 80012bc:	f002 f9fc 	bl	80036b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80012c0:	e20c      	b.n	80016dc <HAL_UART_MspInit+0x4c8>
  else if(huart->Instance==UART5)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a99      	ldr	r2, [pc, #612]	@ (800152c <HAL_UART_MspInit+0x318>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d15f      	bne.n	800138c <HAL_UART_MspInit+0x178>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80012cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80012d2:	2300      	movs	r3, #0
 80012d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012d8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80012dc:	4618      	mov	r0, r3
 80012de:	f003 f9e1 	bl	80046a4 <HAL_RCCEx_PeriphCLKConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80012e8:	f7ff fde0 	bl	8000eac <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80012ec:	4b8d      	ldr	r3, [pc, #564]	@ (8001524 <HAL_UART_MspInit+0x310>)
 80012ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f0:	4a8c      	ldr	r2, [pc, #560]	@ (8001524 <HAL_UART_MspInit+0x310>)
 80012f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80012f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f8:	4b8a      	ldr	r3, [pc, #552]	@ (8001524 <HAL_UART_MspInit+0x310>)
 80012fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001300:	643b      	str	r3, [r7, #64]	@ 0x40
 8001302:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001304:	4b87      	ldr	r3, [pc, #540]	@ (8001524 <HAL_UART_MspInit+0x310>)
 8001306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001308:	4a86      	ldr	r2, [pc, #536]	@ (8001524 <HAL_UART_MspInit+0x310>)
 800130a:	f043 0304 	orr.w	r3, r3, #4
 800130e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001310:	4b84      	ldr	r3, [pc, #528]	@ (8001524 <HAL_UART_MspInit+0x310>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800131a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800131c:	4b81      	ldr	r3, [pc, #516]	@ (8001524 <HAL_UART_MspInit+0x310>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001320:	4a80      	ldr	r2, [pc, #512]	@ (8001524 <HAL_UART_MspInit+0x310>)
 8001322:	f043 0308 	orr.w	r3, r3, #8
 8001326:	6313      	str	r3, [r2, #48]	@ 0x30
 8001328:	4b7e      	ldr	r3, [pc, #504]	@ (8001524 <HAL_UART_MspInit+0x310>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132c:	f003 0308 	and.w	r3, r3, #8
 8001330:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001334:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001338:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133c:	2302      	movs	r3, #2
 800133e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001348:	2303      	movs	r3, #3
 800134a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800134e:	2308      	movs	r3, #8
 8001350:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001354:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001358:	4619      	mov	r1, r3
 800135a:	4873      	ldr	r0, [pc, #460]	@ (8001528 <HAL_UART_MspInit+0x314>)
 800135c:	f002 f9ac 	bl	80036b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001360:	2304      	movs	r3, #4
 8001362:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001372:	2303      	movs	r3, #3
 8001374:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001378:	2308      	movs	r3, #8
 800137a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001382:	4619      	mov	r1, r3
 8001384:	486a      	ldr	r0, [pc, #424]	@ (8001530 <HAL_UART_MspInit+0x31c>)
 8001386:	f002 f997 	bl	80036b8 <HAL_GPIO_Init>
}
 800138a:	e1a7      	b.n	80016dc <HAL_UART_MspInit+0x4c8>
  else if(huart->Instance==UART7)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a68      	ldr	r2, [pc, #416]	@ (8001534 <HAL_UART_MspInit+0x320>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d13d      	bne.n	8001412 <HAL_UART_MspInit+0x1fe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001396:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800139a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800139c:	2300      	movs	r3, #0
 800139e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013a2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80013a6:	4618      	mov	r0, r3
 80013a8:	f003 f97c 	bl	80046a4 <HAL_RCCEx_PeriphCLKConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 80013b2:	f7ff fd7b 	bl	8000eac <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80013b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001524 <HAL_UART_MspInit+0x310>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ba:	4a5a      	ldr	r2, [pc, #360]	@ (8001524 <HAL_UART_MspInit+0x310>)
 80013bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80013c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013c2:	4b58      	ldr	r3, [pc, #352]	@ (8001524 <HAL_UART_MspInit+0x310>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80013ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80013cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ce:	4b55      	ldr	r3, [pc, #340]	@ (8001524 <HAL_UART_MspInit+0x310>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	4a54      	ldr	r2, [pc, #336]	@ (8001524 <HAL_UART_MspInit+0x310>)
 80013d4:	f043 0320 	orr.w	r3, r3, #32
 80013d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013da:	4b52      	ldr	r3, [pc, #328]	@ (8001524 <HAL_UART_MspInit+0x310>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	f003 0320 	and.w	r3, r3, #32
 80013e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80013e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013e6:	23c0      	movs	r3, #192	@ 0xc0
 80013e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ec:	2302      	movs	r3, #2
 80013ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f8:	2303      	movs	r3, #3
 80013fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80013fe:	2308      	movs	r3, #8
 8001400:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001404:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001408:	4619      	mov	r1, r3
 800140a:	484b      	ldr	r0, [pc, #300]	@ (8001538 <HAL_UART_MspInit+0x324>)
 800140c:	f002 f954 	bl	80036b8 <HAL_GPIO_Init>
}
 8001410:	e164      	b.n	80016dc <HAL_UART_MspInit+0x4c8>
  else if(huart->Instance==UART8)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a49      	ldr	r2, [pc, #292]	@ (800153c <HAL_UART_MspInit+0x328>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d13d      	bne.n	8001498 <HAL_UART_MspInit+0x284>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 800141c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001420:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8001422:	2300      	movs	r3, #0
 8001424:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001428:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800142c:	4618      	mov	r0, r3
 800142e:	f003 f939 	bl	80046a4 <HAL_RCCEx_PeriphCLKConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <HAL_UART_MspInit+0x228>
      Error_Handler();
 8001438:	f7ff fd38 	bl	8000eac <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 800143c:	4b39      	ldr	r3, [pc, #228]	@ (8001524 <HAL_UART_MspInit+0x310>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001440:	4a38      	ldr	r2, [pc, #224]	@ (8001524 <HAL_UART_MspInit+0x310>)
 8001442:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001446:	6413      	str	r3, [r2, #64]	@ 0x40
 8001448:	4b36      	ldr	r3, [pc, #216]	@ (8001524 <HAL_UART_MspInit+0x310>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001450:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001454:	4b33      	ldr	r3, [pc, #204]	@ (8001524 <HAL_UART_MspInit+0x310>)
 8001456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001458:	4a32      	ldr	r2, [pc, #200]	@ (8001524 <HAL_UART_MspInit+0x310>)
 800145a:	f043 0310 	orr.w	r3, r3, #16
 800145e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001460:	4b30      	ldr	r3, [pc, #192]	@ (8001524 <HAL_UART_MspInit+0x310>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001464:	f003 0310 	and.w	r3, r3, #16
 8001468:	62bb      	str	r3, [r7, #40]	@ 0x28
 800146a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800146c:	2303      	movs	r3, #3
 800146e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147e:	2303      	movs	r3, #3
 8001480:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001484:	2308      	movs	r3, #8
 8001486:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800148a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800148e:	4619      	mov	r1, r3
 8001490:	482b      	ldr	r0, [pc, #172]	@ (8001540 <HAL_UART_MspInit+0x32c>)
 8001492:	f002 f911 	bl	80036b8 <HAL_GPIO_Init>
}
 8001496:	e121      	b.n	80016dc <HAL_UART_MspInit+0x4c8>
  else if(huart->Instance==USART1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a29      	ldr	r2, [pc, #164]	@ (8001544 <HAL_UART_MspInit+0x330>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d154      	bne.n	800154c <HAL_UART_MspInit+0x338>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014a2:	2340      	movs	r3, #64	@ 0x40
 80014a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014a6:	2300      	movs	r3, #0
 80014a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ac:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80014b0:	4618      	mov	r0, r3
 80014b2:	f003 f8f7 	bl	80046a4 <HAL_RCCEx_PeriphCLKConfig>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <HAL_UART_MspInit+0x2ac>
      Error_Handler();
 80014bc:	f7ff fcf6 	bl	8000eac <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80014c0:	4b18      	ldr	r3, [pc, #96]	@ (8001524 <HAL_UART_MspInit+0x310>)
 80014c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c4:	4a17      	ldr	r2, [pc, #92]	@ (8001524 <HAL_UART_MspInit+0x310>)
 80014c6:	f043 0310 	orr.w	r3, r3, #16
 80014ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80014cc:	4b15      	ldr	r3, [pc, #84]	@ (8001524 <HAL_UART_MspInit+0x310>)
 80014ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d0:	f003 0310 	and.w	r3, r3, #16
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80014d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d8:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <HAL_UART_MspInit+0x310>)
 80014da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014dc:	4a11      	ldr	r2, [pc, #68]	@ (8001524 <HAL_UART_MspInit+0x310>)
 80014de:	f043 0302 	orr.w	r3, r3, #2
 80014e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001524 <HAL_UART_MspInit+0x310>)
 80014e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	623b      	str	r3, [r7, #32]
 80014ee:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80014f0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80014f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001504:	2303      	movs	r3, #3
 8001506:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800150a:	2304      	movs	r3, #4
 800150c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001510:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001514:	4619      	mov	r1, r3
 8001516:	480c      	ldr	r0, [pc, #48]	@ (8001548 <HAL_UART_MspInit+0x334>)
 8001518:	f002 f8ce 	bl	80036b8 <HAL_GPIO_Init>
}
 800151c:	e0de      	b.n	80016dc <HAL_UART_MspInit+0x4c8>
 800151e:	bf00      	nop
 8001520:	40004c00 	.word	0x40004c00
 8001524:	40023800 	.word	0x40023800
 8001528:	40020800 	.word	0x40020800
 800152c:	40005000 	.word	0x40005000
 8001530:	40020c00 	.word	0x40020c00
 8001534:	40007800 	.word	0x40007800
 8001538:	40021400 	.word	0x40021400
 800153c:	40007c00 	.word	0x40007c00
 8001540:	40021000 	.word	0x40021000
 8001544:	40011000 	.word	0x40011000
 8001548:	40020400 	.word	0x40020400
  else if(huart->Instance==USART2)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a64      	ldr	r2, [pc, #400]	@ (80016e4 <HAL_UART_MspInit+0x4d0>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d13c      	bne.n	80015d0 <HAL_UART_MspInit+0x3bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001556:	2380      	movs	r3, #128	@ 0x80
 8001558:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800155a:	2300      	movs	r3, #0
 800155c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001560:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001564:	4618      	mov	r0, r3
 8001566:	f003 f89d 	bl	80046a4 <HAL_RCCEx_PeriphCLKConfig>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <HAL_UART_MspInit+0x360>
      Error_Handler();
 8001570:	f7ff fc9c 	bl	8000eac <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001574:	4b5c      	ldr	r3, [pc, #368]	@ (80016e8 <HAL_UART_MspInit+0x4d4>)
 8001576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001578:	4a5b      	ldr	r2, [pc, #364]	@ (80016e8 <HAL_UART_MspInit+0x4d4>)
 800157a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800157e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001580:	4b59      	ldr	r3, [pc, #356]	@ (80016e8 <HAL_UART_MspInit+0x4d4>)
 8001582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001584:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001588:	61fb      	str	r3, [r7, #28]
 800158a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800158c:	4b56      	ldr	r3, [pc, #344]	@ (80016e8 <HAL_UART_MspInit+0x4d4>)
 800158e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001590:	4a55      	ldr	r2, [pc, #340]	@ (80016e8 <HAL_UART_MspInit+0x4d4>)
 8001592:	f043 0308 	orr.w	r3, r3, #8
 8001596:	6313      	str	r3, [r2, #48]	@ 0x30
 8001598:	4b53      	ldr	r3, [pc, #332]	@ (80016e8 <HAL_UART_MspInit+0x4d4>)
 800159a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159c:	f003 0308 	and.w	r3, r3, #8
 80015a0:	61bb      	str	r3, [r7, #24]
 80015a2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015a4:	2320      	movs	r3, #32
 80015a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015aa:	2312      	movs	r3, #18
 80015ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b6:	2303      	movs	r3, #3
 80015b8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015bc:	2307      	movs	r3, #7
 80015be:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015c6:	4619      	mov	r1, r3
 80015c8:	4848      	ldr	r0, [pc, #288]	@ (80016ec <HAL_UART_MspInit+0x4d8>)
 80015ca:	f002 f875 	bl	80036b8 <HAL_GPIO_Init>
}
 80015ce:	e085      	b.n	80016dc <HAL_UART_MspInit+0x4c8>
  else if(huart->Instance==USART3)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a46      	ldr	r2, [pc, #280]	@ (80016f0 <HAL_UART_MspInit+0x4dc>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d13e      	bne.n	8001658 <HAL_UART_MspInit+0x444>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015de:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015e6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80015ea:	4618      	mov	r0, r3
 80015ec:	f003 f85a 	bl	80046a4 <HAL_RCCEx_PeriphCLKConfig>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_UART_MspInit+0x3e6>
      Error_Handler();
 80015f6:	f7ff fc59 	bl	8000eac <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015fa:	4b3b      	ldr	r3, [pc, #236]	@ (80016e8 <HAL_UART_MspInit+0x4d4>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fe:	4a3a      	ldr	r2, [pc, #232]	@ (80016e8 <HAL_UART_MspInit+0x4d4>)
 8001600:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001604:	6413      	str	r3, [r2, #64]	@ 0x40
 8001606:	4b38      	ldr	r3, [pc, #224]	@ (80016e8 <HAL_UART_MspInit+0x4d4>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001612:	4b35      	ldr	r3, [pc, #212]	@ (80016e8 <HAL_UART_MspInit+0x4d4>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	4a34      	ldr	r2, [pc, #208]	@ (80016e8 <HAL_UART_MspInit+0x4d4>)
 8001618:	f043 0308 	orr.w	r3, r3, #8
 800161c:	6313      	str	r3, [r2, #48]	@ 0x30
 800161e:	4b32      	ldr	r3, [pc, #200]	@ (80016e8 <HAL_UART_MspInit+0x4d4>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800162a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800162e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001644:	2307      	movs	r3, #7
 8001646:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800164a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800164e:	4619      	mov	r1, r3
 8001650:	4826      	ldr	r0, [pc, #152]	@ (80016ec <HAL_UART_MspInit+0x4d8>)
 8001652:	f002 f831 	bl	80036b8 <HAL_GPIO_Init>
}
 8001656:	e041      	b.n	80016dc <HAL_UART_MspInit+0x4c8>
  else if(huart->Instance==USART6)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a25      	ldr	r2, [pc, #148]	@ (80016f4 <HAL_UART_MspInit+0x4e0>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d13c      	bne.n	80016dc <HAL_UART_MspInit+0x4c8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001662:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001666:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001668:	2300      	movs	r3, #0
 800166a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800166e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001672:	4618      	mov	r0, r3
 8001674:	f003 f816 	bl	80046a4 <HAL_RCCEx_PeriphCLKConfig>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_UART_MspInit+0x46e>
      Error_Handler();
 800167e:	f7ff fc15 	bl	8000eac <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001682:	4b19      	ldr	r3, [pc, #100]	@ (80016e8 <HAL_UART_MspInit+0x4d4>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001686:	4a18      	ldr	r2, [pc, #96]	@ (80016e8 <HAL_UART_MspInit+0x4d4>)
 8001688:	f043 0320 	orr.w	r3, r3, #32
 800168c:	6453      	str	r3, [r2, #68]	@ 0x44
 800168e:	4b16      	ldr	r3, [pc, #88]	@ (80016e8 <HAL_UART_MspInit+0x4d4>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001692:	f003 0320 	and.w	r3, r3, #32
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800169a:	4b13      	ldr	r3, [pc, #76]	@ (80016e8 <HAL_UART_MspInit+0x4d4>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	4a12      	ldr	r2, [pc, #72]	@ (80016e8 <HAL_UART_MspInit+0x4d4>)
 80016a0:	f043 0304 	orr.w	r3, r3, #4
 80016a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a6:	4b10      	ldr	r3, [pc, #64]	@ (80016e8 <HAL_UART_MspInit+0x4d4>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016b2:	23c0      	movs	r3, #192	@ 0xc0
 80016b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c4:	2303      	movs	r3, #3
 80016c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80016ca:	2308      	movs	r3, #8
 80016cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80016d4:	4619      	mov	r1, r3
 80016d6:	4808      	ldr	r0, [pc, #32]	@ (80016f8 <HAL_UART_MspInit+0x4e4>)
 80016d8:	f001 ffee 	bl	80036b8 <HAL_GPIO_Init>
}
 80016dc:	bf00      	nop
 80016de:	37f0      	adds	r7, #240	@ 0xf0
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40004400 	.word	0x40004400
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40020c00 	.word	0x40020c00
 80016f0:	40004800 	.word	0x40004800
 80016f4:	40011400 	.word	0x40011400
 80016f8:	40020800 	.word	0x40020800

080016fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08e      	sub	sp, #56	@ 0x38
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001704:	2300      	movs	r3, #0
 8001706:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001708:	2300      	movs	r3, #0
 800170a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800170c:	4b33      	ldr	r3, [pc, #204]	@ (80017dc <HAL_InitTick+0xe0>)
 800170e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001710:	4a32      	ldr	r2, [pc, #200]	@ (80017dc <HAL_InitTick+0xe0>)
 8001712:	f043 0302 	orr.w	r3, r3, #2
 8001716:	6413      	str	r3, [r2, #64]	@ 0x40
 8001718:	4b30      	ldr	r3, [pc, #192]	@ (80017dc <HAL_InitTick+0xe0>)
 800171a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001724:	f107 0210 	add.w	r2, r7, #16
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	4611      	mov	r1, r2
 800172e:	4618      	mov	r0, r3
 8001730:	f002 ff86 	bl	8004640 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001734:	6a3b      	ldr	r3, [r7, #32]
 8001736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800173a:	2b00      	cmp	r3, #0
 800173c:	d103      	bne.n	8001746 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800173e:	f002 ff57 	bl	80045f0 <HAL_RCC_GetPCLK1Freq>
 8001742:	6378      	str	r0, [r7, #52]	@ 0x34
 8001744:	e004      	b.n	8001750 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001746:	f002 ff53 	bl	80045f0 <HAL_RCC_GetPCLK1Freq>
 800174a:	4603      	mov	r3, r0
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001752:	4a23      	ldr	r2, [pc, #140]	@ (80017e0 <HAL_InitTick+0xe4>)
 8001754:	fba2 2303 	umull	r2, r3, r2, r3
 8001758:	0c9b      	lsrs	r3, r3, #18
 800175a:	3b01      	subs	r3, #1
 800175c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 800175e:	4b21      	ldr	r3, [pc, #132]	@ (80017e4 <HAL_InitTick+0xe8>)
 8001760:	4a21      	ldr	r2, [pc, #132]	@ (80017e8 <HAL_InitTick+0xec>)
 8001762:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001764:	4b1f      	ldr	r3, [pc, #124]	@ (80017e4 <HAL_InitTick+0xe8>)
 8001766:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800176a:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800176c:	4a1d      	ldr	r2, [pc, #116]	@ (80017e4 <HAL_InitTick+0xe8>)
 800176e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001770:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001772:	4b1c      	ldr	r3, [pc, #112]	@ (80017e4 <HAL_InitTick+0xe8>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001778:	4b1a      	ldr	r3, [pc, #104]	@ (80017e4 <HAL_InitTick+0xe8>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177e:	4b19      	ldr	r3, [pc, #100]	@ (80017e4 <HAL_InitTick+0xe8>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8001784:	4817      	ldr	r0, [pc, #92]	@ (80017e4 <HAL_InitTick+0xe8>)
 8001786:	f003 fcbb 	bl	8005100 <HAL_TIM_Base_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001790:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001794:	2b00      	cmp	r3, #0
 8001796:	d11b      	bne.n	80017d0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8001798:	4812      	ldr	r0, [pc, #72]	@ (80017e4 <HAL_InitTick+0xe8>)
 800179a:	f003 fd13 	bl	80051c4 <HAL_TIM_Base_Start_IT>
 800179e:	4603      	mov	r3, r0
 80017a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80017a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d111      	bne.n	80017d0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017ac:	201d      	movs	r0, #29
 80017ae:	f000 fc87 	bl	80020c0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b0f      	cmp	r3, #15
 80017b6:	d808      	bhi.n	80017ca <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80017b8:	2200      	movs	r2, #0
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	201d      	movs	r0, #29
 80017be:	f000 fc63 	bl	8002088 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017c2:	4a0a      	ldr	r2, [pc, #40]	@ (80017ec <HAL_InitTick+0xf0>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6013      	str	r3, [r2, #0]
 80017c8:	e002      	b.n	80017d0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80017d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3738      	adds	r7, #56	@ 0x38
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40023800 	.word	0x40023800
 80017e0:	431bde83 	.word	0x431bde83
 80017e4:	20000fb4 	.word	0x20000fb4
 80017e8:	40000400 	.word	0x40000400
 80017ec:	20000004 	.word	0x20000004

080017f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <NMI_Handler+0x4>

080017f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <HardFault_Handler+0x4>

08001800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001804:	bf00      	nop
 8001806:	e7fd      	b.n	8001804 <MemManage_Handler+0x4>

08001808 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <BusFault_Handler+0x4>

08001810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <UsageFault_Handler+0x4>

08001818 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800182c:	4802      	ldr	r0, [pc, #8]	@ (8001838 <TIM3_IRQHandler+0x10>)
 800182e:	f003 fdef 	bl	8005410 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000fb4 	.word	0x20000fb4

0800183c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001840:	4802      	ldr	r0, [pc, #8]	@ (800184c <ETH_IRQHandler+0x10>)
 8001842:	f001 f851 	bl	80028e8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200059e8 	.word	0x200059e8

08001850 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return 1;
 8001854:	2301      	movs	r3, #1
}
 8001856:	4618      	mov	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <_kill>:

int _kill(int pid, int sig)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800186a:	4b05      	ldr	r3, [pc, #20]	@ (8001880 <_kill+0x20>)
 800186c:	2216      	movs	r2, #22
 800186e:	601a      	str	r2, [r3, #0]
  return -1;
 8001870:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001874:	4618      	mov	r0, r3
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	20010468 	.word	0x20010468

08001884 <_exit>:

void _exit (int status)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800188c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff ffe5 	bl	8001860 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001896:	bf00      	nop
 8001898:	e7fd      	b.n	8001896 <_exit+0x12>

0800189a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b086      	sub	sp, #24
 800189e:	af00      	add	r7, sp, #0
 80018a0:	60f8      	str	r0, [r7, #12]
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	e00a      	b.n	80018c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018ac:	f3af 8000 	nop.w
 80018b0:	4601      	mov	r1, r0
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	1c5a      	adds	r2, r3, #1
 80018b6:	60ba      	str	r2, [r7, #8]
 80018b8:	b2ca      	uxtb	r2, r1
 80018ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	3301      	adds	r3, #1
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	dbf0      	blt.n	80018ac <_read+0x12>
  }

  return len;
 80018ca:	687b      	ldr	r3, [r7, #4]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	e009      	b.n	80018fa <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	60ba      	str	r2, [r7, #8]
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	3301      	adds	r3, #1
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	429a      	cmp	r2, r3
 8001900:	dbf1      	blt.n	80018e6 <_write+0x12>
  }
  return len;
 8001902:	687b      	ldr	r3, [r7, #4]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <_close>:

int _close(int file)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001914:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001934:	605a      	str	r2, [r3, #4]
  return 0;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <_isatty>:

int _isatty(int file)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800194c:	2301      	movs	r3, #1
}
 800194e:	4618      	mov	r0, r3
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800195a:	b480      	push	{r7}
 800195c:	b085      	sub	sp, #20
 800195e:	af00      	add	r7, sp, #0
 8001960:	60f8      	str	r0, [r7, #12]
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001974:	b480      	push	{r7}
 8001976:	b087      	sub	sp, #28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800197c:	4a14      	ldr	r2, [pc, #80]	@ (80019d0 <_sbrk+0x5c>)
 800197e:	4b15      	ldr	r3, [pc, #84]	@ (80019d4 <_sbrk+0x60>)
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001988:	4b13      	ldr	r3, [pc, #76]	@ (80019d8 <_sbrk+0x64>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d102      	bne.n	8001996 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001990:	4b11      	ldr	r3, [pc, #68]	@ (80019d8 <_sbrk+0x64>)
 8001992:	4a12      	ldr	r2, [pc, #72]	@ (80019dc <_sbrk+0x68>)
 8001994:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001996:	4b10      	ldr	r3, [pc, #64]	@ (80019d8 <_sbrk+0x64>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d205      	bcs.n	80019b0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80019a4:	4b0e      	ldr	r3, [pc, #56]	@ (80019e0 <_sbrk+0x6c>)
 80019a6:	220c      	movs	r2, #12
 80019a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019ae:	e009      	b.n	80019c4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b0:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <_sbrk+0x64>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019b6:	4b08      	ldr	r3, [pc, #32]	@ (80019d8 <_sbrk+0x64>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	4a06      	ldr	r2, [pc, #24]	@ (80019d8 <_sbrk+0x64>)
 80019c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019c2:	68fb      	ldr	r3, [r7, #12]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	371c      	adds	r7, #28
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	20080000 	.word	0x20080000
 80019d4:	00000400 	.word	0x00000400
 80019d8:	20001000 	.word	0x20001000
 80019dc:	200105b8 	.word	0x200105b8
 80019e0:	20010468 	.word	0x20010468

080019e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019e8:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <SystemInit+0x20>)
 80019ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019ee:	4a05      	ldr	r2, [pc, #20]	@ (8001a04 <SystemInit+0x20>)
 80019f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a40 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a0c:	f7ff ffea 	bl	80019e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a10:	480c      	ldr	r0, [pc, #48]	@ (8001a44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a12:	490d      	ldr	r1, [pc, #52]	@ (8001a48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a14:	4a0d      	ldr	r2, [pc, #52]	@ (8001a4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a18:	e002      	b.n	8001a20 <LoopCopyDataInit>

08001a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a1e:	3304      	adds	r3, #4

08001a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a24:	d3f9      	bcc.n	8001a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a26:	4a0a      	ldr	r2, [pc, #40]	@ (8001a50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a28:	4c0a      	ldr	r4, [pc, #40]	@ (8001a54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a2c:	e001      	b.n	8001a32 <LoopFillZerobss>

08001a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a30:	3204      	adds	r2, #4

08001a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a34:	d3fb      	bcc.n	8001a2e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001a36:	f013 f9c9 	bl	8014dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a3a:	f7fe fde3 	bl	8000604 <main>
  bx  lr    
 8001a3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a40:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a48:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001a4c:	08018850 	.word	0x08018850
  ldr r2, =_sbss
 8001a50:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8001a54:	200105b8 	.word	0x200105b8

08001a58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a58:	e7fe      	b.n	8001a58 <ADC_IRQHandler>

08001a5a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00b      	beq.n	8001a82 <LAN8742_RegisterBusIO+0x28>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d007      	beq.n	8001a82 <LAN8742_RegisterBusIO+0x28>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <LAN8742_RegisterBusIO+0x28>
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d102      	bne.n	8001a88 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a86:	e014      	b.n	8001ab2 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	68da      	ldr	r2, [r3, #12]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b086      	sub	sp, #24
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d139      	bne.n	8001b4e <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d002      	beq.n	8001ae8 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2220      	movs	r2, #32
 8001aec:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	e01c      	b.n	8001b2e <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	f107 020c 	add.w	r2, r7, #12
 8001afc:	2112      	movs	r1, #18
 8001afe:	6978      	ldr	r0, [r7, #20]
 8001b00:	4798      	blx	r3
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	da03      	bge.n	8001b10 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001b08:	f06f 0304 	mvn.w	r3, #4
 8001b0c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001b0e:	e00b      	b.n	8001b28 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 031f 	and.w	r3, r3, #31
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d105      	bne.n	8001b28 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001b22:	2300      	movs	r3, #0
 8001b24:	613b      	str	r3, [r7, #16]
         break;
 8001b26:	e005      	b.n	8001b34 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	2b1f      	cmp	r3, #31
 8001b32:	d9df      	bls.n	8001af4 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b1f      	cmp	r3, #31
 8001b3a:	d902      	bls.n	8001b42 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001b3c:	f06f 0302 	mvn.w	r3, #2
 8001b40:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d102      	bne.n	8001b4e <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001b4e:	693b      	ldr	r3, [r7, #16]
 }
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6810      	ldr	r0, [r2, #0]
 8001b6c:	f107 020c 	add.w	r2, r7, #12
 8001b70:	2101      	movs	r1, #1
 8001b72:	4798      	blx	r3
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	da02      	bge.n	8001b80 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001b7a:	f06f 0304 	mvn.w	r3, #4
 8001b7e:	e06e      	b.n	8001c5e <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	6810      	ldr	r0, [r2, #0]
 8001b88:	f107 020c 	add.w	r2, r7, #12
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	4798      	blx	r3
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	da02      	bge.n	8001b9c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001b96:	f06f 0304 	mvn.w	r3, #4
 8001b9a:	e060      	b.n	8001c5e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e059      	b.n	8001c5e <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6810      	ldr	r0, [r2, #0]
 8001bb2:	f107 020c 	add.w	r2, r7, #12
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4798      	blx	r3
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	da02      	bge.n	8001bc6 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001bc0:	f06f 0304 	mvn.w	r3, #4
 8001bc4:	e04b      	b.n	8001c5e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d11b      	bne.n	8001c08 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d006      	beq.n	8001be8 <LAN8742_GetLinkState+0x90>
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001be4:	2302      	movs	r3, #2
 8001be6:	e03a      	b.n	8001c5e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e033      	b.n	8001c5e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001c00:	2304      	movs	r3, #4
 8001c02:	e02c      	b.n	8001c5e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001c04:	2305      	movs	r3, #5
 8001c06:	e02a      	b.n	8001c5e <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6810      	ldr	r0, [r2, #0]
 8001c10:	f107 020c 	add.w	r2, r7, #12
 8001c14:	211f      	movs	r1, #31
 8001c16:	4798      	blx	r3
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	da02      	bge.n	8001c24 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001c1e:	f06f 0304 	mvn.w	r3, #4
 8001c22:	e01c      	b.n	8001c5e <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001c2e:	2306      	movs	r3, #6
 8001c30:	e015      	b.n	8001c5e <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f003 031c 	and.w	r3, r3, #28
 8001c38:	2b18      	cmp	r3, #24
 8001c3a:	d101      	bne.n	8001c40 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	e00e      	b.n	8001c5e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f003 031c 	and.w	r3, r3, #28
 8001c46:	2b08      	cmp	r3, #8
 8001c48:	d101      	bne.n	8001c4e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e007      	b.n	8001c5e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f003 031c 	and.w	r3, r3, #28
 8001c54:	2b14      	cmp	r3, #20
 8001c56:	d101      	bne.n	8001c5c <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001c58:	2304      	movs	r3, #4
 8001c5a:	e000      	b.n	8001c5e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001c5c:	2305      	movs	r3, #5
    }
  }
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c6a:	2003      	movs	r0, #3
 8001c6c:	f000 fa01 	bl	8002072 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c70:	200f      	movs	r0, #15
 8001c72:	f7ff fd43 	bl	80016fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c76:	f7ff f91f 	bl	8000eb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c84:	4b06      	ldr	r3, [pc, #24]	@ (8001ca0 <HAL_IncTick+0x20>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <HAL_IncTick+0x24>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	4a04      	ldr	r2, [pc, #16]	@ (8001ca4 <HAL_IncTick+0x24>)
 8001c92:	6013      	str	r3, [r2, #0]
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20000008 	.word	0x20000008
 8001ca4:	20001004 	.word	0x20001004

08001ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return uwTick;
 8001cac:	4b03      	ldr	r3, [pc, #12]	@ (8001cbc <HAL_GetTick+0x14>)
 8001cae:	681b      	ldr	r3, [r3, #0]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20001004 	.word	0x20001004

08001cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cc8:	f7ff ffee 	bl	8001ca8 <HAL_GetTick>
 8001ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001cd8:	d005      	beq.n	8001ce6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cda:	4b0a      	ldr	r3, [pc, #40]	@ (8001d04 <HAL_Delay+0x44>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ce6:	bf00      	nop
 8001ce8:	f7ff ffde 	bl	8001ca8 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d8f7      	bhi.n	8001ce8 <HAL_Delay+0x28>
  {
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	bf00      	nop
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000008 	.word	0x20000008

08001d08 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8001d0c:	4b03      	ldr	r3, [pc, #12]	@ (8001d1c <HAL_GetREVID+0x14>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	0c1b      	lsrs	r3, r3, #16
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e0042000 	.word	0xe0042000

08001d20 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e0ed      	b.n	8001f0e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d102      	bne.n	8001d44 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff f8e2 	bl	8000f08 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 0201 	orr.w	r2, r2, #1
 8001d52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d54:	f7ff ffa8 	bl	8001ca8 <HAL_GetTick>
 8001d58:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d5a:	e012      	b.n	8001d82 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d5c:	f7ff ffa4 	bl	8001ca8 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b0a      	cmp	r3, #10
 8001d68:	d90b      	bls.n	8001d82 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2205      	movs	r2, #5
 8001d7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e0c5      	b.n	8001f0e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0e5      	beq.n	8001d5c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0202 	bic.w	r2, r2, #2
 8001d9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001da0:	f7ff ff82 	bl	8001ca8 <HAL_GetTick>
 8001da4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001da6:	e012      	b.n	8001dce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001da8:	f7ff ff7e 	bl	8001ca8 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b0a      	cmp	r3, #10
 8001db4:	d90b      	bls.n	8001dce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2205      	movs	r2, #5
 8001dc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e09f      	b.n	8001f0e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1e5      	bne.n	8001da8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	7e1b      	ldrb	r3, [r3, #24]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d108      	bne.n	8001df6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	e007      	b.n	8001e06 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	7e5b      	ldrb	r3, [r3, #25]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d108      	bne.n	8001e20 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	e007      	b.n	8001e30 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	7e9b      	ldrb	r3, [r3, #26]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d108      	bne.n	8001e4a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0220 	orr.w	r2, r2, #32
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	e007      	b.n	8001e5a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0220 	bic.w	r2, r2, #32
 8001e58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	7edb      	ldrb	r3, [r3, #27]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d108      	bne.n	8001e74 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0210 	bic.w	r2, r2, #16
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	e007      	b.n	8001e84 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0210 	orr.w	r2, r2, #16
 8001e82:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7f1b      	ldrb	r3, [r3, #28]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d108      	bne.n	8001e9e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0208 	orr.w	r2, r2, #8
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	e007      	b.n	8001eae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0208 	bic.w	r2, r2, #8
 8001eac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	7f5b      	ldrb	r3, [r3, #29]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d108      	bne.n	8001ec8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f042 0204 	orr.w	r2, r2, #4
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	e007      	b.n	8001ed8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0204 	bic.w	r2, r2, #4
 8001ed6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	ea42 0103 	orr.w	r1, r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	1e5a      	subs	r2, r3, #1
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f28:	4b0b      	ldr	r3, [pc, #44]	@ (8001f58 <__NVIC_SetPriorityGrouping+0x40>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f34:	4013      	ands	r3, r2
 8001f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f40:	4b06      	ldr	r3, [pc, #24]	@ (8001f5c <__NVIC_SetPriorityGrouping+0x44>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f46:	4a04      	ldr	r2, [pc, #16]	@ (8001f58 <__NVIC_SetPriorityGrouping+0x40>)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	60d3      	str	r3, [r2, #12]
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000ed00 	.word	0xe000ed00
 8001f5c:	05fa0000 	.word	0x05fa0000

08001f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f64:	4b04      	ldr	r3, [pc, #16]	@ (8001f78 <__NVIC_GetPriorityGrouping+0x18>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	0a1b      	lsrs	r3, r3, #8
 8001f6a:	f003 0307 	and.w	r3, r3, #7
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	db0b      	blt.n	8001fa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	f003 021f 	and.w	r2, r3, #31
 8001f94:	4907      	ldr	r1, [pc, #28]	@ (8001fb4 <__NVIC_EnableIRQ+0x38>)
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	095b      	lsrs	r3, r3, #5
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000e100 	.word	0xe000e100

08001fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	6039      	str	r1, [r7, #0]
 8001fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	db0a      	blt.n	8001fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	490c      	ldr	r1, [pc, #48]	@ (8002004 <__NVIC_SetPriority+0x4c>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	0112      	lsls	r2, r2, #4
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	440b      	add	r3, r1
 8001fdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe0:	e00a      	b.n	8001ff8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4908      	ldr	r1, [pc, #32]	@ (8002008 <__NVIC_SetPriority+0x50>)
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	3b04      	subs	r3, #4
 8001ff0:	0112      	lsls	r2, r2, #4
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	761a      	strb	r2, [r3, #24]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000e100 	.word	0xe000e100
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	@ 0x24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f1c3 0307 	rsb	r3, r3, #7
 8002026:	2b04      	cmp	r3, #4
 8002028:	bf28      	it	cs
 800202a:	2304      	movcs	r3, #4
 800202c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3304      	adds	r3, #4
 8002032:	2b06      	cmp	r3, #6
 8002034:	d902      	bls.n	800203c <NVIC_EncodePriority+0x30>
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3b03      	subs	r3, #3
 800203a:	e000      	b.n	800203e <NVIC_EncodePriority+0x32>
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002040:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43da      	mvns	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	401a      	ands	r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002054:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	fa01 f303 	lsl.w	r3, r1, r3
 800205e:	43d9      	mvns	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	4313      	orrs	r3, r2
         );
}
 8002066:	4618      	mov	r0, r3
 8002068:	3724      	adds	r7, #36	@ 0x24
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff ff4c 	bl	8001f18 <__NVIC_SetPriorityGrouping>
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
 8002094:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800209a:	f7ff ff61 	bl	8001f60 <__NVIC_GetPriorityGrouping>
 800209e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	68b9      	ldr	r1, [r7, #8]
 80020a4:	6978      	ldr	r0, [r7, #20]
 80020a6:	f7ff ffb1 	bl	800200c <NVIC_EncodePriority>
 80020aa:	4602      	mov	r2, r0
 80020ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b0:	4611      	mov	r1, r2
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff ff80 	bl	8001fb8 <__NVIC_SetPriority>
}
 80020b8:	bf00      	nop
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff ff54 	bl	8001f7c <__NVIC_EnableIRQ>
}
 80020d4:	bf00      	nop
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80020e0:	f3bf 8f5f 	dmb	sy
}
 80020e4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80020e6:	4b07      	ldr	r3, [pc, #28]	@ (8002104 <HAL_MPU_Disable+0x28>)
 80020e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ea:	4a06      	ldr	r2, [pc, #24]	@ (8002104 <HAL_MPU_Disable+0x28>)
 80020ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020f0:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80020f2:	4b05      	ldr	r3, [pc, #20]	@ (8002108 <HAL_MPU_Disable+0x2c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	605a      	str	r2, [r3, #4]
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	e000ed00 	.word	0xe000ed00
 8002108:	e000ed90 	.word	0xe000ed90

0800210c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002114:	4a0b      	ldr	r2, [pc, #44]	@ (8002144 <HAL_MPU_Enable+0x38>)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800211e:	4b0a      	ldr	r3, [pc, #40]	@ (8002148 <HAL_MPU_Enable+0x3c>)
 8002120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002122:	4a09      	ldr	r2, [pc, #36]	@ (8002148 <HAL_MPU_Enable+0x3c>)
 8002124:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002128:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800212a:	f3bf 8f4f 	dsb	sy
}
 800212e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002130:	f3bf 8f6f 	isb	sy
}
 8002134:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	e000ed90 	.word	0xe000ed90
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	785a      	ldrb	r2, [r3, #1]
 8002158:	4b1b      	ldr	r3, [pc, #108]	@ (80021c8 <HAL_MPU_ConfigRegion+0x7c>)
 800215a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800215c:	4b1a      	ldr	r3, [pc, #104]	@ (80021c8 <HAL_MPU_ConfigRegion+0x7c>)
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	4a19      	ldr	r2, [pc, #100]	@ (80021c8 <HAL_MPU_ConfigRegion+0x7c>)
 8002162:	f023 0301 	bic.w	r3, r3, #1
 8002166:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002168:	4a17      	ldr	r2, [pc, #92]	@ (80021c8 <HAL_MPU_ConfigRegion+0x7c>)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	7b1b      	ldrb	r3, [r3, #12]
 8002174:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	7adb      	ldrb	r3, [r3, #11]
 800217a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800217c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	7a9b      	ldrb	r3, [r3, #10]
 8002182:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002184:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	7b5b      	ldrb	r3, [r3, #13]
 800218a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800218c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	7b9b      	ldrb	r3, [r3, #14]
 8002192:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002194:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	7bdb      	ldrb	r3, [r3, #15]
 800219a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800219c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	7a5b      	ldrb	r3, [r3, #9]
 80021a2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80021a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	7a1b      	ldrb	r3, [r3, #8]
 80021aa:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80021ac:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	7812      	ldrb	r2, [r2, #0]
 80021b2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021b4:	4a04      	ldr	r2, [pc, #16]	@ (80021c8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80021b6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021b8:	6113      	str	r3, [r2, #16]
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	e000ed90 	.word	0xe000ed90

080021cc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e086      	b.n	80022ec <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d106      	bne.n	80021f6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2223      	movs	r2, #35	@ 0x23
 80021ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f005 f8ff 	bl	80073f4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f6:	4b3f      	ldr	r3, [pc, #252]	@ (80022f4 <HAL_ETH_Init+0x128>)
 80021f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fa:	4a3e      	ldr	r2, [pc, #248]	@ (80022f4 <HAL_ETH_Init+0x128>)
 80021fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002200:	6453      	str	r3, [r2, #68]	@ 0x44
 8002202:	4b3c      	ldr	r3, [pc, #240]	@ (80022f4 <HAL_ETH_Init+0x128>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002206:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800220e:	4b3a      	ldr	r3, [pc, #232]	@ (80022f8 <HAL_ETH_Init+0x12c>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	4a39      	ldr	r2, [pc, #228]	@ (80022f8 <HAL_ETH_Init+0x12c>)
 8002214:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002218:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800221a:	4b37      	ldr	r3, [pc, #220]	@ (80022f8 <HAL_ETH_Init+0x12c>)
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	4935      	ldr	r1, [pc, #212]	@ (80022f8 <HAL_ETH_Init+0x12c>)
 8002224:	4313      	orrs	r3, r2
 8002226:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002228:	4b33      	ldr	r3, [pc, #204]	@ (80022f8 <HAL_ETH_Init+0x12c>)
 800222a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002242:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002244:	f7ff fd30 	bl	8001ca8 <HAL_GetTick>
 8002248:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800224a:	e011      	b.n	8002270 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800224c:	f7ff fd2c 	bl	8001ca8 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800225a:	d909      	bls.n	8002270 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2204      	movs	r2, #4
 8002260:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	22e0      	movs	r2, #224	@ 0xe0
 8002268:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e03d      	b.n	80022ec <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1e4      	bne.n	800224c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 ff5c 	bl	8003140 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f001 f807 	bl	800329c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f001 f85d 	bl	800334e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	461a      	mov	r2, r3
 800229a:	2100      	movs	r1, #0
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 ffc5 	bl	800322c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80022b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	4b0f      	ldr	r3, [pc, #60]	@ (80022fc <HAL_ETH_Init+0x130>)
 80022c0:	430b      	orrs	r3, r1
 80022c2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80022d6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2210      	movs	r2, #16
 80022e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40013800 	.word	0x40013800
 80022fc:	00020060 	.word	0x00020060

08002300 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800230e:	2b10      	cmp	r3, #16
 8002310:	d15f      	bne.n	80023d2 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2223      	movs	r2, #35	@ 0x23
 8002316:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2204      	movs	r2, #4
 8002324:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f9f6 	bl	8002718 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002334:	2001      	movs	r0, #1
 8002336:	f7ff fcc3 	bl	8001cc0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002354:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002358:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	f043 0302 	orr.w	r3, r3, #2
 800236c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002370:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 fd80 	bl	8002e78 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0208 	orr.w	r2, r2, #8
 8002386:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002390:	2001      	movs	r0, #1
 8002392:	f7ff fc95 	bl	8001cc0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f042 0204 	orr.w	r2, r2, #4
 80023ac:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023b6:	69d9      	ldr	r1, [r3, #28]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4b07      	ldr	r3, [pc, #28]	@ (80023dc <HAL_ETH_Start_IT+0xdc>)
 80023be:	430b      	orrs	r3, r1
 80023c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023c4:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2223      	movs	r2, #35	@ 0x23
 80023ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80023ce:	2300      	movs	r3, #0
 80023d0:	e000      	b.n	80023d4 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
  }
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	0001a0c1 	.word	0x0001a0c1

080023e0 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023ee:	2b23      	cmp	r3, #35	@ 0x23
 80023f0:	d16e      	bne.n	80024d0 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2223      	movs	r2, #35	@ 0x23
 80023f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002402:	69d9      	ldr	r1, [r3, #28]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4b34      	ldr	r3, [pc, #208]	@ (80024dc <HAL_ETH_Stop_IT+0xfc>)
 800240a:	400b      	ands	r3, r1
 800240c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002410:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6812      	ldr	r2, [r2, #0]
 8002420:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002424:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002428:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	f023 0302 	bic.w	r3, r3, #2
 800243c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002440:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 0204 	bic.w	r2, r2, #4
 8002450:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800245a:	2001      	movs	r0, #1
 800245c:	f7ff fc30 	bl	8001cc0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 fd05 	bl	8002e78 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0208 	bic.w	r2, r2, #8
 800247c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002486:	2001      	movs	r0, #1
 8002488:	f7ff fc1a 	bl	8001cc0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	e00e      	b.n	80024b8 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	3212      	adds	r2, #18
 80024a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a4:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	3301      	adds	r3, #1
 80024b6:	617b      	str	r3, [r7, #20]
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	2b03      	cmp	r3, #3
 80024bc:	d9ed      	bls.n	800249a <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2210      	movs	r2, #16
 80024c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80024cc:	2300      	movs	r3, #0
 80024ce:	e000      	b.n	80024d2 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
  }
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	fffe5f3e 	.word	0xfffe5f3e

080024e0 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d109      	bne.n	8002504 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f6:	f043 0201 	orr.w	r2, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e045      	b.n	8002590 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800250a:	2b23      	cmp	r3, #35	@ 0x23
 800250c:	d13f      	bne.n	800258e <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002516:	2201      	movs	r2, #1
 8002518:	6839      	ldr	r1, [r7, #0]
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 ff86 	bl	800342c <ETH_Prepare_Tx_Descriptors>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d009      	beq.n	800253a <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800252c:	f043 0202 	orr.w	r2, r3, #2
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e02a      	b.n	8002590 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 800253a:	f3bf 8f4f 	dsb	sy
}
 800253e:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	629a      	str	r2, [r3, #40]	@ 0x28
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254e:	2b03      	cmp	r3, #3
 8002550:	d904      	bls.n	800255c <HAL_ETH_Transmit_IT+0x7c>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002556:	1f1a      	subs	r2, r3, #4
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00d      	beq.n	800258a <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002576:	461a      	mov	r2, r3
 8002578:	2304      	movs	r3, #4
 800257a:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002584:	461a      	mov	r2, r3
 8002586:	2300      	movs	r3, #0
 8002588:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	e000      	b.n	8002590 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
  }
}
 8002590:	4618      	mov	r0, r3
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b088      	sub	sp, #32
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d109      	bne.n	80025c4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025b6:	f043 0201 	orr.w	r2, r3, #1
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0a4      	b.n	800270e <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025ca:	2b23      	cmp	r3, #35	@ 0x23
 80025cc:	d001      	beq.n	80025d2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e09d      	b.n	800270e <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	69fa      	ldr	r2, [r7, #28]
 80025dc:	3212      	adds	r2, #18
 80025de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025e2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025e8:	f1c3 0304 	rsb	r3, r3, #4
 80025ec:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80025ee:	e066      	b.n	80026be <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d007      	beq.n	800260c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	69da      	ldr	r2, [r3, #28]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	699a      	ldr	r2, [r3, #24]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002614:	2b00      	cmp	r3, #0
 8002616:	d103      	bne.n	8002620 <HAL_ETH_ReadData+0x88>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800261c:	2b00      	cmp	r3, #0
 800261e:	d03c      	beq.n	800269a <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	0c1b      	lsrs	r3, r3, #16
 800263e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002642:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800264c:	2b00      	cmp	r3, #0
 800264e:	d005      	beq.n	800265c <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8002658:	2301      	movs	r3, #1
 800265a:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002674:	461a      	mov	r2, r3
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	b29b      	uxth	r3, r3
 800267a:	f005 f887 	bl	800778c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002682:	1c5a      	adds	r2, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	441a      	add	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	2200      	movs	r2, #0
 8002698:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3301      	adds	r3, #1
 800269e:	61fb      	str	r3, [r7, #28]
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	2b03      	cmp	r3, #3
 80026a4:	d902      	bls.n	80026ac <HAL_ETH_ReadData+0x114>
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	3b04      	subs	r3, #4
 80026aa:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69fa      	ldr	r2, [r7, #28]
 80026b0:	3212      	adds	r2, #18
 80026b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026b6:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	3301      	adds	r3, #1
 80026bc:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	db06      	blt.n	80026d4 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d202      	bcs.n	80026d4 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80026ce:	7cfb      	ldrb	r3, [r7, #19]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d08d      	beq.n	80025f0 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	441a      	add	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f815 	bl	8002718 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69fa      	ldr	r2, [r7, #28]
 80026f2:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80026f4:	7cfb      	ldrb	r3, [r7, #19]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d108      	bne.n	800270c <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002708:	2300      	movs	r3, #0
 800270a:	e000      	b.n	800270e <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
}
 800270e:	4618      	mov	r0, r3
 8002710:	3720      	adds	r7, #32
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002720:	2300      	movs	r3, #0
 8002722:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002724:	2301      	movs	r3, #1
 8002726:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800272c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69fa      	ldr	r2, [r7, #28]
 8002732:	3212      	adds	r2, #18
 8002734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002738:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800273e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002740:	e042      	b.n	80027c8 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d112      	bne.n	8002770 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800274a:	f107 0308 	add.w	r3, r7, #8
 800274e:	4618      	mov	r0, r3
 8002750:	f004 ffec 	bl	800772c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d102      	bne.n	8002760 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800275a:	2300      	movs	r3, #0
 800275c:	74fb      	strb	r3, [r7, #19]
 800275e:	e007      	b.n	8002770 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	461a      	mov	r2, r3
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	461a      	mov	r2, r3
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002770:	7cfb      	ldrb	r3, [r7, #19]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d028      	beq.n	80027c8 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277a:	2b00      	cmp	r3, #0
 800277c:	d106      	bne.n	800278c <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695a      	ldr	r2, [r3, #20]
 8002782:	4b26      	ldr	r3, [pc, #152]	@ (800281c <ETH_UpdateDescriptor+0x104>)
 8002784:	4313      	orrs	r3, r2
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	6053      	str	r3, [r2, #4]
 800278a:	e005      	b.n	8002798 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	3301      	adds	r3, #1
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d902      	bls.n	80027b6 <ETH_UpdateDescriptor+0x9e>
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	3b04      	subs	r3, #4
 80027b4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69fa      	ldr	r2, [r7, #28]
 80027ba:	3212      	adds	r2, #18
 80027bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c0:	617b      	str	r3, [r7, #20]
      desccount--;
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d002      	beq.n	80027d4 <ETH_UpdateDescriptor+0xbc>
 80027ce:	7cfb      	ldrb	r3, [r7, #19]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1b6      	bne.n	8002742 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d01a      	beq.n	8002814 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	3301      	adds	r3, #1
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80027e8:	f3bf 8f5f 	dmb	sy
}
 80027ec:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6919      	ldr	r1, [r3, #16]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	18ca      	adds	r2, r1, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002806:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69fa      	ldr	r2, [r7, #28]
 800280c:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002814:	bf00      	nop
 8002816:	3720      	adds	r7, #32
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	80004000 	.word	0x80004000

08002820 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3318      	adds	r3, #24
 800282c:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002832:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002838:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800283a:	2301      	movs	r3, #1
 800283c:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800283e:	e047      	b.n	80028d0 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8002840:	2301      	movs	r3, #1
 8002842:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	3b01      	subs	r3, #1
 8002848:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	3304      	adds	r3, #4
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10a      	bne.n	8002870 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	3301      	adds	r3, #1
 800285e:	613b      	str	r3, [r7, #16]
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	2b03      	cmp	r3, #3
 8002864:	d902      	bls.n	800286c <HAL_ETH_ReleaseTxPacket+0x4c>
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	3b04      	subs	r3, #4
 800286a:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002870:	7bbb      	ldrb	r3, [r7, #14]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d02c      	beq.n	80028d0 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68d9      	ldr	r1, [r3, #12]
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	440b      	add	r3, r1
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	db1f      	blt.n	80028cc <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	3304      	adds	r3, #4
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	4618      	mov	r0, r3
 800289a:	f004 ffb9 	bl	8007810 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	3304      	adds	r3, #4
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	2200      	movs	r2, #0
 80028aa:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	3301      	adds	r3, #1
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	d902      	bls.n	80028be <HAL_ETH_ReleaseTxPacket+0x9e>
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	3b04      	subs	r3, #4
 80028bc:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80028ca:	e001      	b.n	80028d0 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <HAL_ETH_ReleaseTxPacket+0xbc>
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1b1      	bne.n	8002840 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f6:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8002910:	4b4b      	ldr	r3, [pc, #300]	@ (8002a40 <HAL_ETH_IRQHandler+0x158>)
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00e      	beq.n	800293e <HAL_ETH_IRQHandler+0x56>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002926:	2b00      	cmp	r3, #0
 8002928:	d009      	beq.n	800293e <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002932:	461a      	mov	r2, r3
 8002934:	4b43      	ldr	r3, [pc, #268]	@ (8002a44 <HAL_ETH_IRQHandler+0x15c>)
 8002936:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f004 fa6f 	bl	8006e1c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00f      	beq.n	8002968 <HAL_ETH_IRQHandler+0x80>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00a      	beq.n	8002968 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800295a:	461a      	mov	r2, r3
 800295c:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002960:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f004 fa6a 	bl	8006e3c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d042      	beq.n	80029f8 <HAL_ETH_IRQHandler+0x110>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d03d      	beq.n	80029f8 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002982:	f043 0208 	orr.w	r2, r3, #8
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d01a      	beq.n	80029cc <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800299e:	695a      	ldr	r2, [r3, #20]
 80029a0:	4b29      	ldr	r3, [pc, #164]	@ (8002a48 <HAL_ETH_IRQHandler+0x160>)
 80029a2:	4013      	ands	r3, r2
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6812      	ldr	r2, [r2, #0]
 80029b8:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 80029bc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80029c0:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	22e0      	movs	r2, #224	@ 0xe0
 80029c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80029ca:	e012      	b.n	80029f2 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029d4:	695a      	ldr	r2, [r3, #20]
 80029d6:	f248 6380 	movw	r3, #34432	@ 0x8680
 80029da:	4013      	ands	r3, r2
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029ea:	461a      	mov	r2, r3
 80029ec:	f248 6380 	movw	r3, #34432	@ 0x8680
 80029f0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f004 fa32 	bl	8006e5c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f003 0308 	and.w	r3, r3, #8
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00e      	beq.n	8002a20 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a08:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f81a 	bl	8002a4c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d006      	beq.n	8002a38 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002a2a:	4b05      	ldr	r3, [pc, #20]	@ (8002a40 <HAL_ETH_IRQHandler+0x158>)
 8002a2c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002a30:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f814 	bl	8002a60 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002a38:	bf00      	nop
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40013c00 	.word	0x40013c00
 8002a44:	00010040 	.word	0x00010040
 8002a48:	007e2000 	.word	0x007e2000

08002a4c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
 8002a80:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f003 031c 	and.w	r3, r3, #28
 8002a90:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	02db      	lsls	r3, r3, #11
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	019b      	lsls	r3, r3, #6
 8002aa2:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f023 0302 	bic.w	r3, r3, #2
 8002ab2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002ac4:	f7ff f8f0 	bl	8001ca8 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002aca:	e00d      	b.n	8002ae8 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002acc:	f7ff f8ec 	bl	8001ca8 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ada:	d301      	bcc.n	8002ae0 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e010      	b.n	8002b02 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1ec      	bne.n	8002acc <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	461a      	mov	r2, r3
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b086      	sub	sp, #24
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
 8002b16:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f003 031c 	and.w	r3, r3, #28
 8002b26:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	02db      	lsls	r3, r3, #11
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	019b      	lsls	r3, r3, #6
 8002b38:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f043 0302 	orr.w	r3, r3, #2
 8002b48:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b64:	f7ff f8a0 	bl	8001ca8 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b6a:	e00d      	b.n	8002b88 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002b6c:	f7ff f89c 	bl	8001ca8 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b7a:	d301      	bcc.n	8002b80 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e009      	b.n	8002b94 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1ec      	bne.n	8002b6c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0e6      	b.n	8002d7e <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	bf14      	ite	ne
 8002bbe:	2301      	movne	r3, #1
 8002bc0:	2300      	moveq	r3, #0
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	bf0c      	ite	eq
 8002be8:	2301      	moveq	r3, #1
 8002bea:	2300      	movne	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	461a      	mov	r2, r3
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	bf14      	ite	ne
 8002c04:	2301      	movne	r3, #1
 8002c06:	2300      	moveq	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	bf0c      	ite	eq
 8002c1e:	2301      	moveq	r3, #1
 8002c20:	2300      	movne	r3, #0
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	461a      	mov	r2, r3
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	bf14      	ite	ne
 8002c38:	2301      	movne	r3, #1
 8002c3a:	2300      	moveq	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	461a      	mov	r2, r3
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	bf0c      	ite	eq
 8002c6e:	2301      	moveq	r3, #1
 8002c70:	2300      	movne	r3, #0
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	461a      	mov	r2, r3
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	bf0c      	ite	eq
 8002c88:	2301      	moveq	r3, #1
 8002c8a:	2300      	movne	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	461a      	mov	r2, r3
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	bf14      	ite	ne
 8002ca2:	2301      	movne	r3, #1
 8002ca4:	2300      	moveq	r3, #0
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	461a      	mov	r2, r3
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	bf14      	ite	ne
 8002cca:	2301      	movne	r3, #1
 8002ccc:	2300      	moveq	r3, #0
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	bf14      	ite	ne
 8002ce4:	2301      	movne	r3, #1
 8002ce6:	2300      	moveq	r3, #0
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	461a      	mov	r2, r3
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	bf14      	ite	ne
 8002cfe:	2301      	movne	r3, #1
 8002d00:	2300      	moveq	r3, #0
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	461a      	mov	r2, r3
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	bf0c      	ite	eq
 8002d1a:	2301      	moveq	r3, #1
 8002d1c:	2300      	movne	r3, #0
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	0c1b      	lsrs	r3, r3, #16
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	f003 0304 	and.w	r3, r3, #4
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	bf14      	ite	ne
 8002d52:	2301      	movne	r3, #1
 8002d54:	2300      	moveq	r3, #0
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	461a      	mov	r2, r3
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	bf14      	ite	ne
 8002d6e:	2301      	movne	r3, #1
 8002d70:	2300      	moveq	r3, #0
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e00b      	b.n	8002db6 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002da4:	2b10      	cmp	r3, #16
 8002da6:	d105      	bne.n	8002db4 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002da8:	6839      	ldr	r1, [r7, #0]
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f88a 	bl	8002ec4 <ETH_SetMACConfig>

    return HAL_OK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	e000      	b.n	8002db6 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
  }
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
	...

08002dc0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f023 031c 	bic.w	r3, r3, #28
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002dd8:	f001 fbfe 	bl	80045d8 <HAL_RCC_GetHCLKFreq>
 8002ddc:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	4a14      	ldr	r2, [pc, #80]	@ (8002e34 <HAL_ETH_SetMDIOClockRange+0x74>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d804      	bhi.n	8002df0 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f043 0308 	orr.w	r3, r3, #8
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	e019      	b.n	8002e24 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	4a11      	ldr	r2, [pc, #68]	@ (8002e38 <HAL_ETH_SetMDIOClockRange+0x78>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d204      	bcs.n	8002e02 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f043 030c 	orr.w	r3, r3, #12
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	e010      	b.n	8002e24 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	4a0d      	ldr	r2, [pc, #52]	@ (8002e3c <HAL_ETH_SetMDIOClockRange+0x7c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d90c      	bls.n	8002e24 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	4a0c      	ldr	r2, [pc, #48]	@ (8002e40 <HAL_ETH_SetMDIOClockRange+0x80>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d804      	bhi.n	8002e1c <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f043 0304 	orr.w	r3, r3, #4
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	e003      	b.n	8002e24 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f043 0310 	orr.w	r3, r3, #16
 8002e22:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	611a      	str	r2, [r3, #16]
}
 8002e2c:	bf00      	nop
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	02160ebf 	.word	0x02160ebf
 8002e38:	03938700 	.word	0x03938700
 8002e3c:	05f5e0ff 	.word	0x05f5e0ff
 8002e40:	08f0d17f 	.word	0x08f0d17f

08002e44 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6812      	ldr	r2, [r2, #0]
 8002e92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e96:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e9a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ea8:	2001      	movs	r0, #1
 8002eaa:	f7fe ff09 	bl	8001cc0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002eb8:	6193      	str	r3, [r2, #24]
}
 8002eba:	bf00      	nop
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
	...

08002ec4 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	4b53      	ldr	r3, [pc, #332]	@ (8003028 <ETH_SetMACConfig+0x164>)
 8002eda:	4013      	ands	r3, r2
 8002edc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	7b9b      	ldrb	r3, [r3, #14]
 8002ee2:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	7c12      	ldrb	r2, [r2, #16]
 8002ee8:	2a00      	cmp	r2, #0
 8002eea:	d102      	bne.n	8002ef2 <ETH_SetMACConfig+0x2e>
 8002eec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002ef0:	e000      	b.n	8002ef4 <ETH_SetMACConfig+0x30>
 8002ef2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002ef4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	7c52      	ldrb	r2, [r2, #17]
 8002efa:	2a00      	cmp	r2, #0
 8002efc:	d102      	bne.n	8002f04 <ETH_SetMACConfig+0x40>
 8002efe:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002f02:	e000      	b.n	8002f06 <ETH_SetMACConfig+0x42>
 8002f04:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002f06:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002f0c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	7fdb      	ldrb	r3, [r3, #31]
 8002f12:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002f14:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002f1a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	7f92      	ldrb	r2, [r2, #30]
 8002f20:	2a00      	cmp	r2, #0
 8002f22:	d102      	bne.n	8002f2a <ETH_SetMACConfig+0x66>
 8002f24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f28:	e000      	b.n	8002f2c <ETH_SetMACConfig+0x68>
 8002f2a:	2200      	movs	r2, #0
                        macconf->Speed |
 8002f2c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	7f1b      	ldrb	r3, [r3, #28]
 8002f32:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002f34:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002f3a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	791b      	ldrb	r3, [r3, #4]
 8002f40:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002f42:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002f4a:	2a00      	cmp	r2, #0
 8002f4c:	d102      	bne.n	8002f54 <ETH_SetMACConfig+0x90>
 8002f4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f52:	e000      	b.n	8002f56 <ETH_SetMACConfig+0x92>
 8002f54:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002f56:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	7bdb      	ldrb	r3, [r3, #15]
 8002f5c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002f5e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002f64:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002f6c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f86:	2001      	movs	r0, #1
 8002f88:	f7fe fe9a 	bl	8001cc0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002faa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002fb2:	2a00      	cmp	r2, #0
 8002fb4:	d101      	bne.n	8002fba <ETH_SetMACConfig+0xf6>
 8002fb6:	2280      	movs	r2, #128	@ 0x80
 8002fb8:	e000      	b.n	8002fbc <ETH_SetMACConfig+0xf8>
 8002fba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002fbc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002fc2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002fca:	2a01      	cmp	r2, #1
 8002fcc:	d101      	bne.n	8002fd2 <ETH_SetMACConfig+0x10e>
 8002fce:	2208      	movs	r2, #8
 8002fd0:	e000      	b.n	8002fd4 <ETH_SetMACConfig+0x110>
 8002fd2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002fd4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002fdc:	2a01      	cmp	r2, #1
 8002fde:	d101      	bne.n	8002fe4 <ETH_SetMACConfig+0x120>
 8002fe0:	2204      	movs	r2, #4
 8002fe2:	e000      	b.n	8002fe6 <ETH_SetMACConfig+0x122>
 8002fe4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002fe6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002fee:	2a01      	cmp	r2, #1
 8002ff0:	d101      	bne.n	8002ff6 <ETH_SetMACConfig+0x132>
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	e000      	b.n	8002ff8 <ETH_SetMACConfig+0x134>
 8002ff6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003010:	2001      	movs	r0, #1
 8003012:	f7fe fe55 	bl	8001cc0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	619a      	str	r2, [r3, #24]
}
 800301e:	bf00      	nop
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	fd20810f 	.word	0xfd20810f

0800302c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	4b3d      	ldr	r3, [pc, #244]	@ (800313c <ETH_SetDMAConfig+0x110>)
 8003046:	4013      	ands	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	7b1b      	ldrb	r3, [r3, #12]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d102      	bne.n	8003058 <ETH_SetDMAConfig+0x2c>
 8003052:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003056:	e000      	b.n	800305a <ETH_SetDMAConfig+0x2e>
 8003058:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	7b5b      	ldrb	r3, [r3, #13]
 800305e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003060:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	7f52      	ldrb	r2, [r2, #29]
 8003066:	2a00      	cmp	r2, #0
 8003068:	d102      	bne.n	8003070 <ETH_SetDMAConfig+0x44>
 800306a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800306e:	e000      	b.n	8003072 <ETH_SetDMAConfig+0x46>
 8003070:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003072:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	7b9b      	ldrb	r3, [r3, #14]
 8003078:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800307a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003080:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	7f1b      	ldrb	r3, [r3, #28]
 8003086:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003088:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	7f9b      	ldrb	r3, [r3, #30]
 800308e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003090:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003096:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800309e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80030a0:	4313      	orrs	r3, r2
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030b0:	461a      	mov	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030c2:	2001      	movs	r0, #1
 80030c4:	f7fe fdfc 	bl	8001cc0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030d0:	461a      	mov	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	791b      	ldrb	r3, [r3, #4]
 80030da:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80030e0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80030e6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80030ec:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80030f4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80030f6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80030fe:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003104:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6812      	ldr	r2, [r2, #0]
 800310a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800310e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003112:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003120:	2001      	movs	r0, #1
 8003122:	f7fe fdcd 	bl	8001cc0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800312e:	461a      	mov	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6013      	str	r3, [r2, #0]
}
 8003134:	bf00      	nop
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	f8de3f23 	.word	0xf8de3f23

08003140 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b0a6      	sub	sp, #152	@ 0x98
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003148:	2301      	movs	r3, #1
 800314a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800314e:	2301      	movs	r3, #1
 8003150:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003154:	2300      	movs	r3, #0
 8003156:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003158:	2300      	movs	r3, #0
 800315a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800315e:	2301      	movs	r3, #1
 8003160:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003164:	2300      	movs	r3, #0
 8003166:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800316a:	2301      	movs	r3, #1
 800316c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8003170:	2301      	movs	r3, #1
 8003172:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003176:	2300      	movs	r3, #0
 8003178:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800317c:	2300      	movs	r3, #0
 800317e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003182:	2300      	movs	r3, #0
 8003184:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003186:	2300      	movs	r3, #0
 8003188:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800318c:	2300      	movs	r3, #0
 800318e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003190:	2300      	movs	r3, #0
 8003192:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003196:	2300      	movs	r3, #0
 8003198:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800319c:	2300      	movs	r3, #0
 800319e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80031a2:	2300      	movs	r3, #0
 80031a4:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80031a8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80031ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80031ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80031b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80031b4:	2300      	movs	r3, #0
 80031b6:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80031ba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80031be:	4619      	mov	r1, r3
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7ff fe7f 	bl	8002ec4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80031c6:	2301      	movs	r3, #1
 80031c8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80031ca:	2301      	movs	r3, #1
 80031cc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80031ce:	2301      	movs	r3, #1
 80031d0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80031d4:	2301      	movs	r3, #1
 80031d6:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80031d8:	2300      	movs	r3, #0
 80031da:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80031dc:	2300      	movs	r3, #0
 80031de:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80031e2:	2300      	movs	r3, #0
 80031e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80031e8:	2300      	movs	r3, #0
 80031ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80031ec:	2301      	movs	r3, #1
 80031ee:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80031f2:	2301      	movs	r3, #1
 80031f4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80031f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80031fa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80031fc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003200:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003202:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003206:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003208:	2301      	movs	r3, #1
 800320a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800320e:	2300      	movs	r3, #0
 8003210:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003212:	2300      	movs	r3, #0
 8003214:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003216:	f107 0308 	add.w	r3, r7, #8
 800321a:	4619      	mov	r1, r3
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff ff05 	bl	800302c <ETH_SetDMAConfig>
}
 8003222:	bf00      	nop
 8003224:	3798      	adds	r7, #152	@ 0x98
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800322c:	b480      	push	{r7}
 800322e:	b087      	sub	sp, #28
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3305      	adds	r3, #5
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	021b      	lsls	r3, r3, #8
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	3204      	adds	r2, #4
 8003244:	7812      	ldrb	r2, [r2, #0]
 8003246:	4313      	orrs	r3, r2
 8003248:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	4b11      	ldr	r3, [pc, #68]	@ (8003294 <ETH_MACAddressConfig+0x68>)
 800324e:	4413      	add	r3, r2
 8003250:	461a      	mov	r2, r3
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	3303      	adds	r3, #3
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	061a      	lsls	r2, r3, #24
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3302      	adds	r3, #2
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	041b      	lsls	r3, r3, #16
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3301      	adds	r3, #1
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	021b      	lsls	r3, r3, #8
 8003270:	4313      	orrs	r3, r2
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	7812      	ldrb	r2, [r2, #0]
 8003276:	4313      	orrs	r3, r2
 8003278:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	4b06      	ldr	r3, [pc, #24]	@ (8003298 <ETH_MACAddressConfig+0x6c>)
 800327e:	4413      	add	r3, r2
 8003280:	461a      	mov	r2, r3
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	6013      	str	r3, [r2, #0]
}
 8003286:	bf00      	nop
 8003288:	371c      	adds	r7, #28
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	40028040 	.word	0x40028040
 8003298:	40028044 	.word	0x40028044

0800329c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80032a4:	2300      	movs	r3, #0
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	e03e      	b.n	8003328 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68d9      	ldr	r1, [r3, #12]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	440b      	add	r3, r1
 80032ba:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	2200      	movs	r2, #0
 80032c6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2200      	movs	r2, #0
 80032cc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	2200      	movs	r2, #0
 80032d2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80032d4:	68b9      	ldr	r1, [r7, #8]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	3206      	adds	r2, #6
 80032dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d80c      	bhi.n	800330c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68d9      	ldr	r1, [r3, #12]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	4613      	mov	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	440b      	add	r3, r1
 8003304:	461a      	mov	r2, r3
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	60da      	str	r2, [r3, #12]
 800330a:	e004      	b.n	8003316 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	461a      	mov	r2, r3
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	3301      	adds	r3, #1
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2b03      	cmp	r3, #3
 800332c:	d9bd      	bls.n	80032aa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68da      	ldr	r2, [r3, #12]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003340:	611a      	str	r2, [r3, #16]
}
 8003342:	bf00      	nop
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800334e:	b480      	push	{r7}
 8003350:	b085      	sub	sp, #20
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003356:	2300      	movs	r3, #0
 8003358:	60fb      	str	r3, [r7, #12]
 800335a:	e048      	b.n	80033ee <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6919      	ldr	r1, [r3, #16]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	4613      	mov	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	440b      	add	r3, r1
 800336c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2200      	movs	r2, #0
 8003378:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2200      	movs	r2, #0
 800337e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2200      	movs	r2, #0
 8003384:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2200      	movs	r2, #0
 800338a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2200      	movs	r2, #0
 8003390:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003398:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80033b2:	68b9      	ldr	r1, [r7, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	3212      	adds	r2, #18
 80033ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d80c      	bhi.n	80033de <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6919      	ldr	r1, [r3, #16]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	1c5a      	adds	r2, r3, #1
 80033cc:	4613      	mov	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	440b      	add	r3, r1
 80033d6:	461a      	mov	r2, r3
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	60da      	str	r2, [r3, #12]
 80033dc:	e004      	b.n	80033e8 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	461a      	mov	r2, r3
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	3301      	adds	r3, #1
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	d9b3      	bls.n	800335c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691a      	ldr	r2, [r3, #16]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800341e:	60da      	str	r2, [r3, #12]
}
 8003420:	bf00      	nop
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 800342c:	b480      	push	{r7}
 800342e:	b091      	sub	sp, #68	@ 0x44
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	3318      	adds	r3, #24
 800343c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800343e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800344a:	2300      	movs	r3, #0
 800344c:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800344e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003450:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003456:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800345e:	2300      	movs	r3, #0
 8003460:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800346a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800346e:	d007      	beq.n	8003480 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003470:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003474:	3304      	adds	r3, #4
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003480:	2302      	movs	r3, #2
 8003482:	e111      	b.n	80036a8 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8003484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003486:	3301      	adds	r3, #1
 8003488:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800348a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	461a      	mov	r2, r3
 8003490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003492:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	4b86      	ldr	r3, [pc, #536]	@ (80036b4 <ETH_Prepare_Tx_Descriptors+0x288>)
 800349a:	4013      	ands	r3, r2
 800349c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800349e:	6852      	ldr	r2, [r2, #4]
 80034a0:	431a      	orrs	r2, r3
 80034a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d008      	beq.n	80034c4 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80034b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	431a      	orrs	r2, r3
 80034c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c2:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0320 	and.w	r3, r3, #32
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d008      	beq.n	80034e2 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80034d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	431a      	orrs	r2, r3
 80034de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e0:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0304 	and.w	r3, r3, #4
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d005      	beq.n	80034fa <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80034ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80034f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80034fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003504:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003506:	e082      	b.n	800360e <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003512:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d006      	beq.n	8003528 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800351a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	e005      	b.n	8003534 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003532:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003534:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003536:	3301      	adds	r3, #1
 8003538:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800353a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800353c:	2b03      	cmp	r3, #3
 800353e:	d902      	bls.n	8003546 <ETH_Prepare_Tx_Descriptors+0x11a>
 8003540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003542:	3b04      	subs	r3, #4
 8003544:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003548:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800354a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800354e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003558:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800355c:	d007      	beq.n	800356e <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800355e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003560:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003562:	3304      	adds	r3, #4
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d029      	beq.n	80035c2 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003574:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800357a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800357c:	2300      	movs	r3, #0
 800357e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003580:	e019      	b.n	80035b6 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8003582:	f3bf 8f5f 	dmb	sy
}
 8003586:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003592:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003596:	3301      	adds	r3, #1
 8003598:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800359a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800359c:	2b03      	cmp	r3, #3
 800359e:	d902      	bls.n	80035a6 <ETH_Prepare_Tx_Descriptors+0x17a>
 80035a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035a2:	3b04      	subs	r3, #4
 80035a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80035a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ae:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80035b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035b2:	3301      	adds	r3, #1
 80035b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80035b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d3e1      	bcc.n	8003582 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 80035be:	2302      	movs	r3, #2
 80035c0:	e072      	b.n	80036a8 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80035c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80035ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035cc:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 80035ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035d0:	3301      	adds	r3, #1
 80035d2:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80035d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80035da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	461a      	mov	r2, r3
 80035e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e2:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80035e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	4b32      	ldr	r3, [pc, #200]	@ (80036b4 <ETH_Prepare_Tx_Descriptors+0x288>)
 80035ea:	4013      	ands	r3, r2
 80035ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035ee:	6852      	ldr	r2, [r2, #4]
 80035f0:	431a      	orrs	r2, r3
 80035f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f4:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80035f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f8:	3301      	adds	r3, #1
 80035fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80035fc:	f3bf 8f5f 	dmb	sy
}
 8003600:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800360a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800360c:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800360e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	f47f af78 	bne.w	8003508 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d006      	beq.n	800362c <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800361e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	e005      	b.n	8003638 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800362c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003636:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003642:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003646:	6a3a      	ldr	r2, [r7, #32]
 8003648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800364c:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800364e:	f3bf 8f5f 	dmb	sy
}
 8003652:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800365c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365e:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003662:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003664:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003668:	3304      	adds	r3, #4
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003672:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003674:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003676:	f3ef 8310 	mrs	r3, PRIMASK
 800367a:	613b      	str	r3, [r7, #16]
  return(result);
 800367c:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800367e:	61fb      	str	r3, [r7, #28]
 8003680:	2301      	movs	r3, #1
 8003682:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f383 8810 	msr	PRIMASK, r3
}
 800368a:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800368c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003692:	4413      	add	r3, r2
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003698:	629a      	str	r2, [r3, #40]	@ 0x28
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	f383 8810 	msr	PRIMASK, r3
}
 80036a4:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3744      	adds	r7, #68	@ 0x44
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	ffffe000 	.word	0xffffe000

080036b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b089      	sub	sp, #36	@ 0x24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80036c2:	2300      	movs	r3, #0
 80036c4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80036ca:	2300      	movs	r3, #0
 80036cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80036ce:	2300      	movs	r3, #0
 80036d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80036d2:	2300      	movs	r3, #0
 80036d4:	61fb      	str	r3, [r7, #28]
 80036d6:	e175      	b.n	80039c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80036d8:	2201      	movs	r2, #1
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	4013      	ands	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	f040 8164 	bne.w	80039be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d005      	beq.n	800370e <HAL_GPIO_Init+0x56>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f003 0303 	and.w	r3, r3, #3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d130      	bne.n	8003770 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	2203      	movs	r2, #3
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	43db      	mvns	r3, r3
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4013      	ands	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4313      	orrs	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003744:	2201      	movs	r2, #1
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	43db      	mvns	r3, r3
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4013      	ands	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	091b      	lsrs	r3, r3, #4
 800375a:	f003 0201 	and.w	r2, r3, #1
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4313      	orrs	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 0303 	and.w	r3, r3, #3
 8003778:	2b03      	cmp	r3, #3
 800377a:	d017      	beq.n	80037ac <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	2203      	movs	r2, #3
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	43db      	mvns	r3, r3
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	4013      	ands	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f003 0303 	and.w	r3, r3, #3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d123      	bne.n	8003800 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	08da      	lsrs	r2, r3, #3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3208      	adds	r2, #8
 80037c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	220f      	movs	r2, #15
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	43db      	mvns	r3, r3
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	4013      	ands	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	691a      	ldr	r2, [r3, #16]
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	08da      	lsrs	r2, r3, #3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3208      	adds	r2, #8
 80037fa:	69b9      	ldr	r1, [r7, #24]
 80037fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	2203      	movs	r2, #3
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4013      	ands	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 0203 	and.w	r2, r3, #3
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4313      	orrs	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 80be 	beq.w	80039be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003842:	4b66      	ldr	r3, [pc, #408]	@ (80039dc <HAL_GPIO_Init+0x324>)
 8003844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003846:	4a65      	ldr	r2, [pc, #404]	@ (80039dc <HAL_GPIO_Init+0x324>)
 8003848:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800384c:	6453      	str	r3, [r2, #68]	@ 0x44
 800384e:	4b63      	ldr	r3, [pc, #396]	@ (80039dc <HAL_GPIO_Init+0x324>)
 8003850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003852:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800385a:	4a61      	ldr	r2, [pc, #388]	@ (80039e0 <HAL_GPIO_Init+0x328>)
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	089b      	lsrs	r3, r3, #2
 8003860:	3302      	adds	r3, #2
 8003862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003866:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	220f      	movs	r2, #15
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	43db      	mvns	r3, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4013      	ands	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a58      	ldr	r2, [pc, #352]	@ (80039e4 <HAL_GPIO_Init+0x32c>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d037      	beq.n	80038f6 <HAL_GPIO_Init+0x23e>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a57      	ldr	r2, [pc, #348]	@ (80039e8 <HAL_GPIO_Init+0x330>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d031      	beq.n	80038f2 <HAL_GPIO_Init+0x23a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a56      	ldr	r2, [pc, #344]	@ (80039ec <HAL_GPIO_Init+0x334>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d02b      	beq.n	80038ee <HAL_GPIO_Init+0x236>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a55      	ldr	r2, [pc, #340]	@ (80039f0 <HAL_GPIO_Init+0x338>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d025      	beq.n	80038ea <HAL_GPIO_Init+0x232>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a54      	ldr	r2, [pc, #336]	@ (80039f4 <HAL_GPIO_Init+0x33c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d01f      	beq.n	80038e6 <HAL_GPIO_Init+0x22e>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a53      	ldr	r2, [pc, #332]	@ (80039f8 <HAL_GPIO_Init+0x340>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d019      	beq.n	80038e2 <HAL_GPIO_Init+0x22a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a52      	ldr	r2, [pc, #328]	@ (80039fc <HAL_GPIO_Init+0x344>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d013      	beq.n	80038de <HAL_GPIO_Init+0x226>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a51      	ldr	r2, [pc, #324]	@ (8003a00 <HAL_GPIO_Init+0x348>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d00d      	beq.n	80038da <HAL_GPIO_Init+0x222>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a50      	ldr	r2, [pc, #320]	@ (8003a04 <HAL_GPIO_Init+0x34c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d007      	beq.n	80038d6 <HAL_GPIO_Init+0x21e>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a4f      	ldr	r2, [pc, #316]	@ (8003a08 <HAL_GPIO_Init+0x350>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d101      	bne.n	80038d2 <HAL_GPIO_Init+0x21a>
 80038ce:	2309      	movs	r3, #9
 80038d0:	e012      	b.n	80038f8 <HAL_GPIO_Init+0x240>
 80038d2:	230a      	movs	r3, #10
 80038d4:	e010      	b.n	80038f8 <HAL_GPIO_Init+0x240>
 80038d6:	2308      	movs	r3, #8
 80038d8:	e00e      	b.n	80038f8 <HAL_GPIO_Init+0x240>
 80038da:	2307      	movs	r3, #7
 80038dc:	e00c      	b.n	80038f8 <HAL_GPIO_Init+0x240>
 80038de:	2306      	movs	r3, #6
 80038e0:	e00a      	b.n	80038f8 <HAL_GPIO_Init+0x240>
 80038e2:	2305      	movs	r3, #5
 80038e4:	e008      	b.n	80038f8 <HAL_GPIO_Init+0x240>
 80038e6:	2304      	movs	r3, #4
 80038e8:	e006      	b.n	80038f8 <HAL_GPIO_Init+0x240>
 80038ea:	2303      	movs	r3, #3
 80038ec:	e004      	b.n	80038f8 <HAL_GPIO_Init+0x240>
 80038ee:	2302      	movs	r3, #2
 80038f0:	e002      	b.n	80038f8 <HAL_GPIO_Init+0x240>
 80038f2:	2301      	movs	r3, #1
 80038f4:	e000      	b.n	80038f8 <HAL_GPIO_Init+0x240>
 80038f6:	2300      	movs	r3, #0
 80038f8:	69fa      	ldr	r2, [r7, #28]
 80038fa:	f002 0203 	and.w	r2, r2, #3
 80038fe:	0092      	lsls	r2, r2, #2
 8003900:	4093      	lsls	r3, r2
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4313      	orrs	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003908:	4935      	ldr	r1, [pc, #212]	@ (80039e0 <HAL_GPIO_Init+0x328>)
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	089b      	lsrs	r3, r3, #2
 800390e:	3302      	adds	r3, #2
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003916:	4b3d      	ldr	r3, [pc, #244]	@ (8003a0c <HAL_GPIO_Init+0x354>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	43db      	mvns	r3, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	4013      	ands	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800393a:	4a34      	ldr	r2, [pc, #208]	@ (8003a0c <HAL_GPIO_Init+0x354>)
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003940:	4b32      	ldr	r3, [pc, #200]	@ (8003a0c <HAL_GPIO_Init+0x354>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	43db      	mvns	r3, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4013      	ands	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003964:	4a29      	ldr	r2, [pc, #164]	@ (8003a0c <HAL_GPIO_Init+0x354>)
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800396a:	4b28      	ldr	r3, [pc, #160]	@ (8003a0c <HAL_GPIO_Init+0x354>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	43db      	mvns	r3, r3
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	4013      	ands	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800398e:	4a1f      	ldr	r2, [pc, #124]	@ (8003a0c <HAL_GPIO_Init+0x354>)
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003994:	4b1d      	ldr	r3, [pc, #116]	@ (8003a0c <HAL_GPIO_Init+0x354>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	43db      	mvns	r3, r3
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	4013      	ands	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039b8:	4a14      	ldr	r2, [pc, #80]	@ (8003a0c <HAL_GPIO_Init+0x354>)
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	3301      	adds	r3, #1
 80039c2:	61fb      	str	r3, [r7, #28]
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	2b0f      	cmp	r3, #15
 80039c8:	f67f ae86 	bls.w	80036d8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80039cc:	bf00      	nop
 80039ce:	bf00      	nop
 80039d0:	3724      	adds	r7, #36	@ 0x24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	40023800 	.word	0x40023800
 80039e0:	40013800 	.word	0x40013800
 80039e4:	40020000 	.word	0x40020000
 80039e8:	40020400 	.word	0x40020400
 80039ec:	40020800 	.word	0x40020800
 80039f0:	40020c00 	.word	0x40020c00
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40021400 	.word	0x40021400
 80039fc:	40021800 	.word	0x40021800
 8003a00:	40021c00 	.word	0x40021c00
 8003a04:	40022000 	.word	0x40022000
 8003a08:	40022400 	.word	0x40022400
 8003a0c:	40013c00 	.word	0x40013c00

08003a10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e08b      	b.n	8003b3a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d106      	bne.n	8003a3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7fd faaa 	bl	8000f90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2224      	movs	r2, #36	@ 0x24
 8003a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0201 	bic.w	r2, r2, #1
 8003a52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003a60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d107      	bne.n	8003a8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a86:	609a      	str	r2, [r3, #8]
 8003a88:	e006      	b.n	8003a98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689a      	ldr	r2, [r3, #8]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003a96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d108      	bne.n	8003ab2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003aae:	605a      	str	r2, [r3, #4]
 8003ab0:	e007      	b.n	8003ac2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ac0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6859      	ldr	r1, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	4b1d      	ldr	r3, [pc, #116]	@ (8003b44 <HAL_I2C_Init+0x134>)
 8003ace:	430b      	orrs	r3, r1
 8003ad0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68da      	ldr	r2, [r3, #12]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ae0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691a      	ldr	r2, [r3, #16]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	69d9      	ldr	r1, [r3, #28]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a1a      	ldr	r2, [r3, #32]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0201 	orr.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2220      	movs	r2, #32
 8003b26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	02008000 	.word	0x02008000

08003b48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b20      	cmp	r3, #32
 8003b5c:	d138      	bne.n	8003bd0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d101      	bne.n	8003b6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	e032      	b.n	8003bd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2224      	movs	r2, #36	@ 0x24
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0201 	bic.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6819      	ldr	r1, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0201 	orr.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	e000      	b.n	8003bd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003bd0:	2302      	movs	r3, #2
  }
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b085      	sub	sp, #20
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b20      	cmp	r3, #32
 8003bf2:	d139      	bne.n	8003c68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d101      	bne.n	8003c02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e033      	b.n	8003c6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2224      	movs	r2, #36	@ 0x24
 8003c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0201 	bic.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003c30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	021b      	lsls	r3, r3, #8
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0201 	orr.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	e000      	b.n	8003c6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c68:	2302      	movs	r3, #2
  }
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
	...

08003c78 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c82:	4b23      	ldr	r3, [pc, #140]	@ (8003d10 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c86:	4a22      	ldr	r2, [pc, #136]	@ (8003d10 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c8e:	4b20      	ldr	r3, [pc, #128]	@ (8003d10 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c96:	603b      	str	r3, [r7, #0]
 8003c98:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8003d14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a1d      	ldr	r2, [pc, #116]	@ (8003d14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ca0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ca4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ca6:	f7fd ffff 	bl	8001ca8 <HAL_GetTick>
 8003caa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003cac:	e009      	b.n	8003cc2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003cae:	f7fd fffb 	bl	8001ca8 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003cbc:	d901      	bls.n	8003cc2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e022      	b.n	8003d08 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003cc2:	4b14      	ldr	r3, [pc, #80]	@ (8003d14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cce:	d1ee      	bne.n	8003cae <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003cd0:	4b10      	ldr	r3, [pc, #64]	@ (8003d14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a0f      	ldr	r2, [pc, #60]	@ (8003d14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cda:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cdc:	f7fd ffe4 	bl	8001ca8 <HAL_GetTick>
 8003ce0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ce2:	e009      	b.n	8003cf8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ce4:	f7fd ffe0 	bl	8001ca8 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003cf2:	d901      	bls.n	8003cf8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e007      	b.n	8003d08 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003cf8:	4b06      	ldr	r3, [pc, #24]	@ (8003d14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d04:	d1ee      	bne.n	8003ce4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40023800 	.word	0x40023800
 8003d14:	40007000 	.word	0x40007000

08003d18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003d20:	2300      	movs	r3, #0
 8003d22:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e29b      	b.n	8004266 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 8087 	beq.w	8003e4a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d3c:	4b96      	ldr	r3, [pc, #600]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f003 030c 	and.w	r3, r3, #12
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	d00c      	beq.n	8003d62 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d48:	4b93      	ldr	r3, [pc, #588]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f003 030c 	and.w	r3, r3, #12
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d112      	bne.n	8003d7a <HAL_RCC_OscConfig+0x62>
 8003d54:	4b90      	ldr	r3, [pc, #576]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d60:	d10b      	bne.n	8003d7a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d62:	4b8d      	ldr	r3, [pc, #564]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d06c      	beq.n	8003e48 <HAL_RCC_OscConfig+0x130>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d168      	bne.n	8003e48 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e275      	b.n	8004266 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d82:	d106      	bne.n	8003d92 <HAL_RCC_OscConfig+0x7a>
 8003d84:	4b84      	ldr	r3, [pc, #528]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a83      	ldr	r2, [pc, #524]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003d8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d8e:	6013      	str	r3, [r2, #0]
 8003d90:	e02e      	b.n	8003df0 <HAL_RCC_OscConfig+0xd8>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10c      	bne.n	8003db4 <HAL_RCC_OscConfig+0x9c>
 8003d9a:	4b7f      	ldr	r3, [pc, #508]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a7e      	ldr	r2, [pc, #504]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003da0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003da4:	6013      	str	r3, [r2, #0]
 8003da6:	4b7c      	ldr	r3, [pc, #496]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a7b      	ldr	r2, [pc, #492]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003dac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003db0:	6013      	str	r3, [r2, #0]
 8003db2:	e01d      	b.n	8003df0 <HAL_RCC_OscConfig+0xd8>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dbc:	d10c      	bne.n	8003dd8 <HAL_RCC_OscConfig+0xc0>
 8003dbe:	4b76      	ldr	r3, [pc, #472]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a75      	ldr	r2, [pc, #468]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003dc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dc8:	6013      	str	r3, [r2, #0]
 8003dca:	4b73      	ldr	r3, [pc, #460]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a72      	ldr	r2, [pc, #456]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003dd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	e00b      	b.n	8003df0 <HAL_RCC_OscConfig+0xd8>
 8003dd8:	4b6f      	ldr	r3, [pc, #444]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a6e      	ldr	r2, [pc, #440]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003dde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003de2:	6013      	str	r3, [r2, #0]
 8003de4:	4b6c      	ldr	r3, [pc, #432]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a6b      	ldr	r2, [pc, #428]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003dea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d013      	beq.n	8003e20 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df8:	f7fd ff56 	bl	8001ca8 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e00:	f7fd ff52 	bl	8001ca8 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b64      	cmp	r3, #100	@ 0x64
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e229      	b.n	8004266 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e12:	4b61      	ldr	r3, [pc, #388]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0f0      	beq.n	8003e00 <HAL_RCC_OscConfig+0xe8>
 8003e1e:	e014      	b.n	8003e4a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e20:	f7fd ff42 	bl	8001ca8 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e28:	f7fd ff3e 	bl	8001ca8 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b64      	cmp	r3, #100	@ 0x64
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e215      	b.n	8004266 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e3a:	4b57      	ldr	r3, [pc, #348]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1f0      	bne.n	8003e28 <HAL_RCC_OscConfig+0x110>
 8003e46:	e000      	b.n	8003e4a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d069      	beq.n	8003f2a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e56:	4b50      	ldr	r3, [pc, #320]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 030c 	and.w	r3, r3, #12
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00b      	beq.n	8003e7a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e62:	4b4d      	ldr	r3, [pc, #308]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 030c 	and.w	r3, r3, #12
 8003e6a:	2b08      	cmp	r3, #8
 8003e6c:	d11c      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x190>
 8003e6e:	4b4a      	ldr	r3, [pc, #296]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d116      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e7a:	4b47      	ldr	r3, [pc, #284]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d005      	beq.n	8003e92 <HAL_RCC_OscConfig+0x17a>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d001      	beq.n	8003e92 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e1e9      	b.n	8004266 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e92:	4b41      	ldr	r3, [pc, #260]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	493d      	ldr	r1, [pc, #244]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ea6:	e040      	b.n	8003f2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d023      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eb0:	4b39      	ldr	r3, [pc, #228]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a38      	ldr	r2, [pc, #224]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003eb6:	f043 0301 	orr.w	r3, r3, #1
 8003eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebc:	f7fd fef4 	bl	8001ca8 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ec4:	f7fd fef0 	bl	8001ca8 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e1c7      	b.n	8004266 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed6:	4b30      	ldr	r3, [pc, #192]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0f0      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee2:	4b2d      	ldr	r3, [pc, #180]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	4929      	ldr	r1, [pc, #164]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	600b      	str	r3, [r1, #0]
 8003ef6:	e018      	b.n	8003f2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ef8:	4b27      	ldr	r3, [pc, #156]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a26      	ldr	r2, [pc, #152]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003efe:	f023 0301 	bic.w	r3, r3, #1
 8003f02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f04:	f7fd fed0 	bl	8001ca8 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f0c:	f7fd fecc 	bl	8001ca8 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e1a3      	b.n	8004266 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1f0      	bne.n	8003f0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d038      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d019      	beq.n	8003f72 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f3e:	4b16      	ldr	r3, [pc, #88]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003f40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f42:	4a15      	ldr	r2, [pc, #84]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003f44:	f043 0301 	orr.w	r3, r3, #1
 8003f48:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4a:	f7fd fead 	bl	8001ca8 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f52:	f7fd fea9 	bl	8001ca8 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e180      	b.n	8004266 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f64:	4b0c      	ldr	r3, [pc, #48]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003f66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0f0      	beq.n	8003f52 <HAL_RCC_OscConfig+0x23a>
 8003f70:	e01a      	b.n	8003fa8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f72:	4b09      	ldr	r3, [pc, #36]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003f74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f76:	4a08      	ldr	r2, [pc, #32]	@ (8003f98 <HAL_RCC_OscConfig+0x280>)
 8003f78:	f023 0301 	bic.w	r3, r3, #1
 8003f7c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f7e:	f7fd fe93 	bl	8001ca8 <HAL_GetTick>
 8003f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f84:	e00a      	b.n	8003f9c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f86:	f7fd fe8f 	bl	8001ca8 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d903      	bls.n	8003f9c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e166      	b.n	8004266 <HAL_RCC_OscConfig+0x54e>
 8003f98:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f9c:	4b92      	ldr	r3, [pc, #584]	@ (80041e8 <HAL_RCC_OscConfig+0x4d0>)
 8003f9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1ee      	bne.n	8003f86 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 80a4 	beq.w	80040fe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fb6:	4b8c      	ldr	r3, [pc, #560]	@ (80041e8 <HAL_RCC_OscConfig+0x4d0>)
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10d      	bne.n	8003fde <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fc2:	4b89      	ldr	r3, [pc, #548]	@ (80041e8 <HAL_RCC_OscConfig+0x4d0>)
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc6:	4a88      	ldr	r2, [pc, #544]	@ (80041e8 <HAL_RCC_OscConfig+0x4d0>)
 8003fc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fce:	4b86      	ldr	r3, [pc, #536]	@ (80041e8 <HAL_RCC_OscConfig+0x4d0>)
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fd6:	60bb      	str	r3, [r7, #8]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fde:	4b83      	ldr	r3, [pc, #524]	@ (80041ec <HAL_RCC_OscConfig+0x4d4>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d118      	bne.n	800401c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003fea:	4b80      	ldr	r3, [pc, #512]	@ (80041ec <HAL_RCC_OscConfig+0x4d4>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a7f      	ldr	r2, [pc, #508]	@ (80041ec <HAL_RCC_OscConfig+0x4d4>)
 8003ff0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ff4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ff6:	f7fd fe57 	bl	8001ca8 <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ffc:	e008      	b.n	8004010 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ffe:	f7fd fe53 	bl	8001ca8 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b64      	cmp	r3, #100	@ 0x64
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e12a      	b.n	8004266 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004010:	4b76      	ldr	r3, [pc, #472]	@ (80041ec <HAL_RCC_OscConfig+0x4d4>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004018:	2b00      	cmp	r3, #0
 800401a:	d0f0      	beq.n	8003ffe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d106      	bne.n	8004032 <HAL_RCC_OscConfig+0x31a>
 8004024:	4b70      	ldr	r3, [pc, #448]	@ (80041e8 <HAL_RCC_OscConfig+0x4d0>)
 8004026:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004028:	4a6f      	ldr	r2, [pc, #444]	@ (80041e8 <HAL_RCC_OscConfig+0x4d0>)
 800402a:	f043 0301 	orr.w	r3, r3, #1
 800402e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004030:	e02d      	b.n	800408e <HAL_RCC_OscConfig+0x376>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10c      	bne.n	8004054 <HAL_RCC_OscConfig+0x33c>
 800403a:	4b6b      	ldr	r3, [pc, #428]	@ (80041e8 <HAL_RCC_OscConfig+0x4d0>)
 800403c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800403e:	4a6a      	ldr	r2, [pc, #424]	@ (80041e8 <HAL_RCC_OscConfig+0x4d0>)
 8004040:	f023 0301 	bic.w	r3, r3, #1
 8004044:	6713      	str	r3, [r2, #112]	@ 0x70
 8004046:	4b68      	ldr	r3, [pc, #416]	@ (80041e8 <HAL_RCC_OscConfig+0x4d0>)
 8004048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800404a:	4a67      	ldr	r2, [pc, #412]	@ (80041e8 <HAL_RCC_OscConfig+0x4d0>)
 800404c:	f023 0304 	bic.w	r3, r3, #4
 8004050:	6713      	str	r3, [r2, #112]	@ 0x70
 8004052:	e01c      	b.n	800408e <HAL_RCC_OscConfig+0x376>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	2b05      	cmp	r3, #5
 800405a:	d10c      	bne.n	8004076 <HAL_RCC_OscConfig+0x35e>
 800405c:	4b62      	ldr	r3, [pc, #392]	@ (80041e8 <HAL_RCC_OscConfig+0x4d0>)
 800405e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004060:	4a61      	ldr	r2, [pc, #388]	@ (80041e8 <HAL_RCC_OscConfig+0x4d0>)
 8004062:	f043 0304 	orr.w	r3, r3, #4
 8004066:	6713      	str	r3, [r2, #112]	@ 0x70
 8004068:	4b5f      	ldr	r3, [pc, #380]	@ (80041e8 <HAL_RCC_OscConfig+0x4d0>)
 800406a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800406c:	4a5e      	ldr	r2, [pc, #376]	@ (80041e8 <HAL_RCC_OscConfig+0x4d0>)
 800406e:	f043 0301 	orr.w	r3, r3, #1
 8004072:	6713      	str	r3, [r2, #112]	@ 0x70
 8004074:	e00b      	b.n	800408e <HAL_RCC_OscConfig+0x376>
 8004076:	4b5c      	ldr	r3, [pc, #368]	@ (80041e8 <HAL_RCC_OscConfig+0x4d0>)
 8004078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800407a:	4a5b      	ldr	r2, [pc, #364]	@ (80041e8 <HAL_RCC_OscConfig+0x4d0>)
 800407c:	f023 0301 	bic.w	r3, r3, #1
 8004080:	6713      	str	r3, [r2, #112]	@ 0x70
 8004082:	4b59      	ldr	r3, [pc, #356]	@ (80041e8 <HAL_RCC_OscConfig+0x4d0>)
 8004084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004086:	4a58      	ldr	r2, [pc, #352]	@ (80041e8 <HAL_RCC_OscConfig+0x4d0>)
 8004088:	f023 0304 	bic.w	r3, r3, #4
 800408c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d015      	beq.n	80040c2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004096:	f7fd fe07 	bl	8001ca8 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800409c:	e00a      	b.n	80040b4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800409e:	f7fd fe03 	bl	8001ca8 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e0d8      	b.n	8004266 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040b4:	4b4c      	ldr	r3, [pc, #304]	@ (80041e8 <HAL_RCC_OscConfig+0x4d0>)
 80040b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0ee      	beq.n	800409e <HAL_RCC_OscConfig+0x386>
 80040c0:	e014      	b.n	80040ec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c2:	f7fd fdf1 	bl	8001ca8 <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040c8:	e00a      	b.n	80040e0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ca:	f7fd fded 	bl	8001ca8 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040d8:	4293      	cmp	r3, r2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e0c2      	b.n	8004266 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040e0:	4b41      	ldr	r3, [pc, #260]	@ (80041e8 <HAL_RCC_OscConfig+0x4d0>)
 80040e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1ee      	bne.n	80040ca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040ec:	7dfb      	ldrb	r3, [r7, #23]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d105      	bne.n	80040fe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040f2:	4b3d      	ldr	r3, [pc, #244]	@ (80041e8 <HAL_RCC_OscConfig+0x4d0>)
 80040f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f6:	4a3c      	ldr	r2, [pc, #240]	@ (80041e8 <HAL_RCC_OscConfig+0x4d0>)
 80040f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040fc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	2b00      	cmp	r3, #0
 8004104:	f000 80ae 	beq.w	8004264 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004108:	4b37      	ldr	r3, [pc, #220]	@ (80041e8 <HAL_RCC_OscConfig+0x4d0>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 030c 	and.w	r3, r3, #12
 8004110:	2b08      	cmp	r3, #8
 8004112:	d06d      	beq.n	80041f0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	2b02      	cmp	r3, #2
 800411a:	d14b      	bne.n	80041b4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800411c:	4b32      	ldr	r3, [pc, #200]	@ (80041e8 <HAL_RCC_OscConfig+0x4d0>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a31      	ldr	r2, [pc, #196]	@ (80041e8 <HAL_RCC_OscConfig+0x4d0>)
 8004122:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004126:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004128:	f7fd fdbe 	bl	8001ca8 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004130:	f7fd fdba 	bl	8001ca8 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e091      	b.n	8004266 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004142:	4b29      	ldr	r3, [pc, #164]	@ (80041e8 <HAL_RCC_OscConfig+0x4d0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1f0      	bne.n	8004130 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	69da      	ldr	r2, [r3, #28]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415c:	019b      	lsls	r3, r3, #6
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004164:	085b      	lsrs	r3, r3, #1
 8004166:	3b01      	subs	r3, #1
 8004168:	041b      	lsls	r3, r3, #16
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004170:	061b      	lsls	r3, r3, #24
 8004172:	431a      	orrs	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004178:	071b      	lsls	r3, r3, #28
 800417a:	491b      	ldr	r1, [pc, #108]	@ (80041e8 <HAL_RCC_OscConfig+0x4d0>)
 800417c:	4313      	orrs	r3, r2
 800417e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004180:	4b19      	ldr	r3, [pc, #100]	@ (80041e8 <HAL_RCC_OscConfig+0x4d0>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a18      	ldr	r2, [pc, #96]	@ (80041e8 <HAL_RCC_OscConfig+0x4d0>)
 8004186:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800418a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418c:	f7fd fd8c 	bl	8001ca8 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004194:	f7fd fd88 	bl	8001ca8 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e05f      	b.n	8004266 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a6:	4b10      	ldr	r3, [pc, #64]	@ (80041e8 <HAL_RCC_OscConfig+0x4d0>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0f0      	beq.n	8004194 <HAL_RCC_OscConfig+0x47c>
 80041b2:	e057      	b.n	8004264 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b4:	4b0c      	ldr	r3, [pc, #48]	@ (80041e8 <HAL_RCC_OscConfig+0x4d0>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a0b      	ldr	r2, [pc, #44]	@ (80041e8 <HAL_RCC_OscConfig+0x4d0>)
 80041ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c0:	f7fd fd72 	bl	8001ca8 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c8:	f7fd fd6e 	bl	8001ca8 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e045      	b.n	8004266 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041da:	4b03      	ldr	r3, [pc, #12]	@ (80041e8 <HAL_RCC_OscConfig+0x4d0>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1f0      	bne.n	80041c8 <HAL_RCC_OscConfig+0x4b0>
 80041e6:	e03d      	b.n	8004264 <HAL_RCC_OscConfig+0x54c>
 80041e8:	40023800 	.word	0x40023800
 80041ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80041f0:	4b1f      	ldr	r3, [pc, #124]	@ (8004270 <HAL_RCC_OscConfig+0x558>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d030      	beq.n	8004260 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004208:	429a      	cmp	r2, r3
 800420a:	d129      	bne.n	8004260 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004216:	429a      	cmp	r2, r3
 8004218:	d122      	bne.n	8004260 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004220:	4013      	ands	r3, r2
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004226:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004228:	4293      	cmp	r3, r2
 800422a:	d119      	bne.n	8004260 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004236:	085b      	lsrs	r3, r3, #1
 8004238:	3b01      	subs	r3, #1
 800423a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800423c:	429a      	cmp	r2, r3
 800423e:	d10f      	bne.n	8004260 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800424c:	429a      	cmp	r2, r3
 800424e:	d107      	bne.n	8004260 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800425c:	429a      	cmp	r2, r3
 800425e:	d001      	beq.n	8004264 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e000      	b.n	8004266 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3718      	adds	r7, #24
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	40023800 	.word	0x40023800

08004274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800427e:	2300      	movs	r3, #0
 8004280:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e0d0      	b.n	800442e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800428c:	4b6a      	ldr	r3, [pc, #424]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 030f 	and.w	r3, r3, #15
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	d910      	bls.n	80042bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429a:	4b67      	ldr	r3, [pc, #412]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f023 020f 	bic.w	r2, r3, #15
 80042a2:	4965      	ldr	r1, [pc, #404]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042aa:	4b63      	ldr	r3, [pc, #396]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 030f 	and.w	r3, r3, #15
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d001      	beq.n	80042bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e0b8      	b.n	800442e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d020      	beq.n	800430a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d005      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042d4:	4b59      	ldr	r3, [pc, #356]	@ (800443c <HAL_RCC_ClockConfig+0x1c8>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	4a58      	ldr	r2, [pc, #352]	@ (800443c <HAL_RCC_ClockConfig+0x1c8>)
 80042da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80042de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0308 	and.w	r3, r3, #8
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d005      	beq.n	80042f8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042ec:	4b53      	ldr	r3, [pc, #332]	@ (800443c <HAL_RCC_ClockConfig+0x1c8>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	4a52      	ldr	r2, [pc, #328]	@ (800443c <HAL_RCC_ClockConfig+0x1c8>)
 80042f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80042f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042f8:	4b50      	ldr	r3, [pc, #320]	@ (800443c <HAL_RCC_ClockConfig+0x1c8>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	494d      	ldr	r1, [pc, #308]	@ (800443c <HAL_RCC_ClockConfig+0x1c8>)
 8004306:	4313      	orrs	r3, r2
 8004308:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b00      	cmp	r3, #0
 8004314:	d040      	beq.n	8004398 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d107      	bne.n	800432e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431e:	4b47      	ldr	r3, [pc, #284]	@ (800443c <HAL_RCC_ClockConfig+0x1c8>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d115      	bne.n	8004356 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e07f      	b.n	800442e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b02      	cmp	r3, #2
 8004334:	d107      	bne.n	8004346 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004336:	4b41      	ldr	r3, [pc, #260]	@ (800443c <HAL_RCC_ClockConfig+0x1c8>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d109      	bne.n	8004356 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e073      	b.n	800442e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004346:	4b3d      	ldr	r3, [pc, #244]	@ (800443c <HAL_RCC_ClockConfig+0x1c8>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e06b      	b.n	800442e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004356:	4b39      	ldr	r3, [pc, #228]	@ (800443c <HAL_RCC_ClockConfig+0x1c8>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f023 0203 	bic.w	r2, r3, #3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	4936      	ldr	r1, [pc, #216]	@ (800443c <HAL_RCC_ClockConfig+0x1c8>)
 8004364:	4313      	orrs	r3, r2
 8004366:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004368:	f7fd fc9e 	bl	8001ca8 <HAL_GetTick>
 800436c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800436e:	e00a      	b.n	8004386 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004370:	f7fd fc9a 	bl	8001ca8 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800437e:	4293      	cmp	r3, r2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e053      	b.n	800442e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004386:	4b2d      	ldr	r3, [pc, #180]	@ (800443c <HAL_RCC_ClockConfig+0x1c8>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 020c 	and.w	r2, r3, #12
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	429a      	cmp	r2, r3
 8004396:	d1eb      	bne.n	8004370 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004398:	4b27      	ldr	r3, [pc, #156]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 030f 	and.w	r3, r3, #15
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d210      	bcs.n	80043c8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043a6:	4b24      	ldr	r3, [pc, #144]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f023 020f 	bic.w	r2, r3, #15
 80043ae:	4922      	ldr	r1, [pc, #136]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043b6:	4b20      	ldr	r3, [pc, #128]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d001      	beq.n	80043c8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e032      	b.n	800442e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0304 	and.w	r3, r3, #4
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d008      	beq.n	80043e6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043d4:	4b19      	ldr	r3, [pc, #100]	@ (800443c <HAL_RCC_ClockConfig+0x1c8>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	4916      	ldr	r1, [pc, #88]	@ (800443c <HAL_RCC_ClockConfig+0x1c8>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d009      	beq.n	8004406 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043f2:	4b12      	ldr	r3, [pc, #72]	@ (800443c <HAL_RCC_ClockConfig+0x1c8>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	00db      	lsls	r3, r3, #3
 8004400:	490e      	ldr	r1, [pc, #56]	@ (800443c <HAL_RCC_ClockConfig+0x1c8>)
 8004402:	4313      	orrs	r3, r2
 8004404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004406:	f000 f821 	bl	800444c <HAL_RCC_GetSysClockFreq>
 800440a:	4602      	mov	r2, r0
 800440c:	4b0b      	ldr	r3, [pc, #44]	@ (800443c <HAL_RCC_ClockConfig+0x1c8>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	091b      	lsrs	r3, r3, #4
 8004412:	f003 030f 	and.w	r3, r3, #15
 8004416:	490a      	ldr	r1, [pc, #40]	@ (8004440 <HAL_RCC_ClockConfig+0x1cc>)
 8004418:	5ccb      	ldrb	r3, [r1, r3]
 800441a:	fa22 f303 	lsr.w	r3, r2, r3
 800441e:	4a09      	ldr	r2, [pc, #36]	@ (8004444 <HAL_RCC_ClockConfig+0x1d0>)
 8004420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004422:	4b09      	ldr	r3, [pc, #36]	@ (8004448 <HAL_RCC_ClockConfig+0x1d4>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f7fd f968 	bl	80016fc <HAL_InitTick>

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	40023c00 	.word	0x40023c00
 800443c:	40023800 	.word	0x40023800
 8004440:	08018610 	.word	0x08018610
 8004444:	20000000 	.word	0x20000000
 8004448:	20000004 	.word	0x20000004

0800444c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800444c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004450:	b090      	sub	sp, #64	@ 0x40
 8004452:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004454:	2300      	movs	r3, #0
 8004456:	637b      	str	r3, [r7, #52]	@ 0x34
 8004458:	2300      	movs	r3, #0
 800445a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800445c:	2300      	movs	r3, #0
 800445e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004460:	2300      	movs	r3, #0
 8004462:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004464:	4b59      	ldr	r3, [pc, #356]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x180>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f003 030c 	and.w	r3, r3, #12
 800446c:	2b08      	cmp	r3, #8
 800446e:	d00d      	beq.n	800448c <HAL_RCC_GetSysClockFreq+0x40>
 8004470:	2b08      	cmp	r3, #8
 8004472:	f200 80a1 	bhi.w	80045b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004476:	2b00      	cmp	r3, #0
 8004478:	d002      	beq.n	8004480 <HAL_RCC_GetSysClockFreq+0x34>
 800447a:	2b04      	cmp	r3, #4
 800447c:	d003      	beq.n	8004486 <HAL_RCC_GetSysClockFreq+0x3a>
 800447e:	e09b      	b.n	80045b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004480:	4b53      	ldr	r3, [pc, #332]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004482:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004484:	e09b      	b.n	80045be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004486:	4b53      	ldr	r3, [pc, #332]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004488:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800448a:	e098      	b.n	80045be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800448c:	4b4f      	ldr	r3, [pc, #316]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x180>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004494:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004496:	4b4d      	ldr	r3, [pc, #308]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x180>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d028      	beq.n	80044f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044a2:	4b4a      	ldr	r3, [pc, #296]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x180>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	099b      	lsrs	r3, r3, #6
 80044a8:	2200      	movs	r2, #0
 80044aa:	623b      	str	r3, [r7, #32]
 80044ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80044ae:	6a3b      	ldr	r3, [r7, #32]
 80044b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80044b4:	2100      	movs	r1, #0
 80044b6:	4b47      	ldr	r3, [pc, #284]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80044b8:	fb03 f201 	mul.w	r2, r3, r1
 80044bc:	2300      	movs	r3, #0
 80044be:	fb00 f303 	mul.w	r3, r0, r3
 80044c2:	4413      	add	r3, r2
 80044c4:	4a43      	ldr	r2, [pc, #268]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80044c6:	fba0 1202 	umull	r1, r2, r0, r2
 80044ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044cc:	460a      	mov	r2, r1
 80044ce:	62ba      	str	r2, [r7, #40]	@ 0x28
 80044d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044d2:	4413      	add	r3, r2
 80044d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044d8:	2200      	movs	r2, #0
 80044da:	61bb      	str	r3, [r7, #24]
 80044dc:	61fa      	str	r2, [r7, #28]
 80044de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80044e6:	f7fb fefb 	bl	80002e0 <__aeabi_uldivmod>
 80044ea:	4602      	mov	r2, r0
 80044ec:	460b      	mov	r3, r1
 80044ee:	4613      	mov	r3, r2
 80044f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044f2:	e053      	b.n	800459c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044f4:	4b35      	ldr	r3, [pc, #212]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x180>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	099b      	lsrs	r3, r3, #6
 80044fa:	2200      	movs	r2, #0
 80044fc:	613b      	str	r3, [r7, #16]
 80044fe:	617a      	str	r2, [r7, #20]
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004506:	f04f 0b00 	mov.w	fp, #0
 800450a:	4652      	mov	r2, sl
 800450c:	465b      	mov	r3, fp
 800450e:	f04f 0000 	mov.w	r0, #0
 8004512:	f04f 0100 	mov.w	r1, #0
 8004516:	0159      	lsls	r1, r3, #5
 8004518:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800451c:	0150      	lsls	r0, r2, #5
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	ebb2 080a 	subs.w	r8, r2, sl
 8004526:	eb63 090b 	sbc.w	r9, r3, fp
 800452a:	f04f 0200 	mov.w	r2, #0
 800452e:	f04f 0300 	mov.w	r3, #0
 8004532:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004536:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800453a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800453e:	ebb2 0408 	subs.w	r4, r2, r8
 8004542:	eb63 0509 	sbc.w	r5, r3, r9
 8004546:	f04f 0200 	mov.w	r2, #0
 800454a:	f04f 0300 	mov.w	r3, #0
 800454e:	00eb      	lsls	r3, r5, #3
 8004550:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004554:	00e2      	lsls	r2, r4, #3
 8004556:	4614      	mov	r4, r2
 8004558:	461d      	mov	r5, r3
 800455a:	eb14 030a 	adds.w	r3, r4, sl
 800455e:	603b      	str	r3, [r7, #0]
 8004560:	eb45 030b 	adc.w	r3, r5, fp
 8004564:	607b      	str	r3, [r7, #4]
 8004566:	f04f 0200 	mov.w	r2, #0
 800456a:	f04f 0300 	mov.w	r3, #0
 800456e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004572:	4629      	mov	r1, r5
 8004574:	028b      	lsls	r3, r1, #10
 8004576:	4621      	mov	r1, r4
 8004578:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800457c:	4621      	mov	r1, r4
 800457e:	028a      	lsls	r2, r1, #10
 8004580:	4610      	mov	r0, r2
 8004582:	4619      	mov	r1, r3
 8004584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004586:	2200      	movs	r2, #0
 8004588:	60bb      	str	r3, [r7, #8]
 800458a:	60fa      	str	r2, [r7, #12]
 800458c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004590:	f7fb fea6 	bl	80002e0 <__aeabi_uldivmod>
 8004594:	4602      	mov	r2, r0
 8004596:	460b      	mov	r3, r1
 8004598:	4613      	mov	r3, r2
 800459a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800459c:	4b0b      	ldr	r3, [pc, #44]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x180>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	0c1b      	lsrs	r3, r3, #16
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	3301      	adds	r3, #1
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80045ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80045ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045b6:	e002      	b.n	80045be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045b8:	4b05      	ldr	r3, [pc, #20]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80045ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3740      	adds	r7, #64	@ 0x40
 80045c4:	46bd      	mov	sp, r7
 80045c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045ca:	bf00      	nop
 80045cc:	40023800 	.word	0x40023800
 80045d0:	00f42400 	.word	0x00f42400
 80045d4:	017d7840 	.word	0x017d7840

080045d8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045dc:	4b03      	ldr	r3, [pc, #12]	@ (80045ec <HAL_RCC_GetHCLKFreq+0x14>)
 80045de:	681b      	ldr	r3, [r3, #0]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	20000000 	.word	0x20000000

080045f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045f4:	f7ff fff0 	bl	80045d8 <HAL_RCC_GetHCLKFreq>
 80045f8:	4602      	mov	r2, r0
 80045fa:	4b05      	ldr	r3, [pc, #20]	@ (8004610 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	0a9b      	lsrs	r3, r3, #10
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	4903      	ldr	r1, [pc, #12]	@ (8004614 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004606:	5ccb      	ldrb	r3, [r1, r3]
 8004608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800460c:	4618      	mov	r0, r3
 800460e:	bd80      	pop	{r7, pc}
 8004610:	40023800 	.word	0x40023800
 8004614:	08018620 	.word	0x08018620

08004618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800461c:	f7ff ffdc 	bl	80045d8 <HAL_RCC_GetHCLKFreq>
 8004620:	4602      	mov	r2, r0
 8004622:	4b05      	ldr	r3, [pc, #20]	@ (8004638 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	0b5b      	lsrs	r3, r3, #13
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	4903      	ldr	r1, [pc, #12]	@ (800463c <HAL_RCC_GetPCLK2Freq+0x24>)
 800462e:	5ccb      	ldrb	r3, [r1, r3]
 8004630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004634:	4618      	mov	r0, r3
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40023800 	.word	0x40023800
 800463c:	08018620 	.word	0x08018620

08004640 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	220f      	movs	r2, #15
 800464e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004650:	4b12      	ldr	r3, [pc, #72]	@ (800469c <HAL_RCC_GetClockConfig+0x5c>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f003 0203 	and.w	r2, r3, #3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800465c:	4b0f      	ldr	r3, [pc, #60]	@ (800469c <HAL_RCC_GetClockConfig+0x5c>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004668:	4b0c      	ldr	r3, [pc, #48]	@ (800469c <HAL_RCC_GetClockConfig+0x5c>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004674:	4b09      	ldr	r3, [pc, #36]	@ (800469c <HAL_RCC_GetClockConfig+0x5c>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	08db      	lsrs	r3, r3, #3
 800467a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004682:	4b07      	ldr	r3, [pc, #28]	@ (80046a0 <HAL_RCC_GetClockConfig+0x60>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 020f 	and.w	r2, r3, #15
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	601a      	str	r2, [r3, #0]
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	40023800 	.word	0x40023800
 80046a0:	40023c00 	.word	0x40023c00

080046a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b088      	sub	sp, #32
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80046ac:	2300      	movs	r3, #0
 80046ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80046b0:	2300      	movs	r3, #0
 80046b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80046b4:	2300      	movs	r3, #0
 80046b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80046b8:	2300      	movs	r3, #0
 80046ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80046bc:	2300      	movs	r3, #0
 80046be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d012      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046cc:	4b69      	ldr	r3, [pc, #420]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	4a68      	ldr	r2, [pc, #416]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80046d6:	6093      	str	r3, [r2, #8]
 80046d8:	4b66      	ldr	r3, [pc, #408]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046e0:	4964      	ldr	r1, [pc, #400]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80046ee:	2301      	movs	r3, #1
 80046f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d017      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046fe:	4b5d      	ldr	r3, [pc, #372]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004700:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004704:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800470c:	4959      	ldr	r1, [pc, #356]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470e:	4313      	orrs	r3, r2
 8004710:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004718:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800471c:	d101      	bne.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800471e:	2301      	movs	r3, #1
 8004720:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800472a:	2301      	movs	r3, #1
 800472c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d017      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800473a:	4b4e      	ldr	r3, [pc, #312]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800473c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004740:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004748:	494a      	ldr	r1, [pc, #296]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800474a:	4313      	orrs	r3, r2
 800474c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004754:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004758:	d101      	bne.n	800475e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800475a:	2301      	movs	r3, #1
 800475c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004766:	2301      	movs	r3, #1
 8004768:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004776:	2301      	movs	r3, #1
 8004778:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0320 	and.w	r3, r3, #32
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 808b 	beq.w	800489e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004788:	4b3a      	ldr	r3, [pc, #232]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800478a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478c:	4a39      	ldr	r2, [pc, #228]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800478e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004792:	6413      	str	r3, [r2, #64]	@ 0x40
 8004794:	4b37      	ldr	r3, [pc, #220]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004798:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800479c:	60bb      	str	r3, [r7, #8]
 800479e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80047a0:	4b35      	ldr	r3, [pc, #212]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a34      	ldr	r2, [pc, #208]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ac:	f7fd fa7c 	bl	8001ca8 <HAL_GetTick>
 80047b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047b4:	f7fd fa78 	bl	8001ca8 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b64      	cmp	r3, #100	@ 0x64
 80047c0:	d901      	bls.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e38f      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80047c6:	4b2c      	ldr	r3, [pc, #176]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0f0      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047d2:	4b28      	ldr	r3, [pc, #160]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d035      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d02e      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047f0:	4b20      	ldr	r3, [pc, #128]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047fe:	4a1d      	ldr	r2, [pc, #116]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004800:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004804:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004806:	4b1b      	ldr	r3, [pc, #108]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800480a:	4a1a      	ldr	r2, [pc, #104]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800480c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004810:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004812:	4a18      	ldr	r2, [pc, #96]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004818:	4b16      	ldr	r3, [pc, #88]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800481a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b01      	cmp	r3, #1
 8004822:	d114      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004824:	f7fd fa40 	bl	8001ca8 <HAL_GetTick>
 8004828:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800482a:	e00a      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800482c:	f7fd fa3c 	bl	8001ca8 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800483a:	4293      	cmp	r3, r2
 800483c:	d901      	bls.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e351      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004842:	4b0c      	ldr	r3, [pc, #48]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0ee      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004852:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004856:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800485a:	d111      	bne.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800485c:	4b05      	ldr	r3, [pc, #20]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004868:	4b04      	ldr	r3, [pc, #16]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800486a:	400b      	ands	r3, r1
 800486c:	4901      	ldr	r1, [pc, #4]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800486e:	4313      	orrs	r3, r2
 8004870:	608b      	str	r3, [r1, #8]
 8004872:	e00b      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004874:	40023800 	.word	0x40023800
 8004878:	40007000 	.word	0x40007000
 800487c:	0ffffcff 	.word	0x0ffffcff
 8004880:	4bac      	ldr	r3, [pc, #688]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	4aab      	ldr	r2, [pc, #684]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004886:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800488a:	6093      	str	r3, [r2, #8]
 800488c:	4ba9      	ldr	r3, [pc, #676]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800488e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004898:	49a6      	ldr	r1, [pc, #664]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800489a:	4313      	orrs	r3, r2
 800489c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0310 	and.w	r3, r3, #16
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d010      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048aa:	4ba2      	ldr	r3, [pc, #648]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048b0:	4aa0      	ldr	r2, [pc, #640]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80048ba:	4b9e      	ldr	r3, [pc, #632]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c4:	499b      	ldr	r1, [pc, #620]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00a      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048d8:	4b96      	ldr	r3, [pc, #600]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048de:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048e6:	4993      	ldr	r1, [pc, #588]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00a      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048fa:	4b8e      	ldr	r3, [pc, #568]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004900:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004908:	498a      	ldr	r1, [pc, #552]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800490a:	4313      	orrs	r3, r2
 800490c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00a      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800491c:	4b85      	ldr	r3, [pc, #532]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800491e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004922:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800492a:	4982      	ldr	r1, [pc, #520]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800492c:	4313      	orrs	r3, r2
 800492e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00a      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800493e:	4b7d      	ldr	r3, [pc, #500]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004944:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800494c:	4979      	ldr	r1, [pc, #484]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800494e:	4313      	orrs	r3, r2
 8004950:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00a      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004960:	4b74      	ldr	r3, [pc, #464]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004966:	f023 0203 	bic.w	r2, r3, #3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800496e:	4971      	ldr	r1, [pc, #452]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004970:	4313      	orrs	r3, r2
 8004972:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00a      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004982:	4b6c      	ldr	r3, [pc, #432]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004988:	f023 020c 	bic.w	r2, r3, #12
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004990:	4968      	ldr	r1, [pc, #416]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004992:	4313      	orrs	r3, r2
 8004994:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00a      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049a4:	4b63      	ldr	r3, [pc, #396]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049aa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049b2:	4960      	ldr	r1, [pc, #384]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00a      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049c6:	4b5b      	ldr	r3, [pc, #364]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049cc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049d4:	4957      	ldr	r1, [pc, #348]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00a      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049e8:	4b52      	ldr	r3, [pc, #328]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049f6:	494f      	ldr	r1, [pc, #316]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004a0a:	4b4a      	ldr	r3, [pc, #296]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a10:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a18:	4946      	ldr	r1, [pc, #280]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00a      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004a2c:	4b41      	ldr	r3, [pc, #260]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a32:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a3a:	493e      	ldr	r1, [pc, #248]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004a4e:	4b39      	ldr	r3, [pc, #228]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a54:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a5c:	4935      	ldr	r1, [pc, #212]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a70:	4b30      	ldr	r3, [pc, #192]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a76:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a7e:	492d      	ldr	r1, [pc, #180]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d011      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a92:	4b28      	ldr	r3, [pc, #160]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a98:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004aa0:	4924      	ldr	r1, [pc, #144]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004aac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ab0:	d101      	bne.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0308 	and.w	r3, r3, #8
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ad2:	4b18      	ldr	r3, [pc, #96]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ae0:	4914      	ldr	r1, [pc, #80]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00b      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004af4:	4b0f      	ldr	r3, [pc, #60]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004afa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b04:	490b      	ldr	r1, [pc, #44]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00f      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004b18:	4b06      	ldr	r3, [pc, #24]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b1e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b28:	4902      	ldr	r1, [pc, #8]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004b30:	e002      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004b32:	bf00      	nop
 8004b34:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00b      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b44:	4b8a      	ldr	r3, [pc, #552]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b4a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b54:	4986      	ldr	r1, [pc, #536]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00b      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004b68:	4b81      	ldr	r3, [pc, #516]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b6e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b78:	497d      	ldr	r1, [pc, #500]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d006      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 80d6 	beq.w	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b94:	4b76      	ldr	r3, [pc, #472]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a75      	ldr	r2, [pc, #468]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ba0:	f7fd f882 	bl	8001ca8 <HAL_GetTick>
 8004ba4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ba6:	e008      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ba8:	f7fd f87e 	bl	8001ca8 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b64      	cmp	r3, #100	@ 0x64
 8004bb4:	d901      	bls.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e195      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bba:	4b6d      	ldr	r3, [pc, #436]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1f0      	bne.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d021      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d11d      	bne.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004bda:	4b65      	ldr	r3, [pc, #404]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004be0:	0c1b      	lsrs	r3, r3, #16
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004be8:	4b61      	ldr	r3, [pc, #388]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bee:	0e1b      	lsrs	r3, r3, #24
 8004bf0:	f003 030f 	and.w	r3, r3, #15
 8004bf4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	019a      	lsls	r2, r3, #6
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	041b      	lsls	r3, r3, #16
 8004c00:	431a      	orrs	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	061b      	lsls	r3, r3, #24
 8004c06:	431a      	orrs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	071b      	lsls	r3, r3, #28
 8004c0e:	4958      	ldr	r1, [pc, #352]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d004      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c2a:	d00a      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d02e      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c40:	d129      	bne.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c42:	4b4b      	ldr	r3, [pc, #300]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c48:	0c1b      	lsrs	r3, r3, #16
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c50:	4b47      	ldr	r3, [pc, #284]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c56:	0f1b      	lsrs	r3, r3, #28
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	019a      	lsls	r2, r3, #6
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	041b      	lsls	r3, r3, #16
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	061b      	lsls	r3, r3, #24
 8004c70:	431a      	orrs	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	071b      	lsls	r3, r3, #28
 8004c76:	493e      	ldr	r1, [pc, #248]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004c7e:	4b3c      	ldr	r3, [pc, #240]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c84:	f023 021f 	bic.w	r2, r3, #31
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	4938      	ldr	r1, [pc, #224]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d01d      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ca2:	4b33      	ldr	r3, [pc, #204]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ca8:	0e1b      	lsrs	r3, r3, #24
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004cb0:	4b2f      	ldr	r3, [pc, #188]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cb6:	0f1b      	lsrs	r3, r3, #28
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	019a      	lsls	r2, r3, #6
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	041b      	lsls	r3, r3, #16
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	061b      	lsls	r3, r3, #24
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	071b      	lsls	r3, r3, #28
 8004cd6:	4926      	ldr	r1, [pc, #152]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d011      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	019a      	lsls	r2, r3, #6
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	041b      	lsls	r3, r3, #16
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	061b      	lsls	r3, r3, #24
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	071b      	lsls	r3, r3, #28
 8004d06:	491a      	ldr	r1, [pc, #104]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d0e:	4b18      	ldr	r3, [pc, #96]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a17      	ldr	r2, [pc, #92]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d14:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d1a:	f7fc ffc5 	bl	8001ca8 <HAL_GetTick>
 8004d1e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d20:	e008      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d22:	f7fc ffc1 	bl	8001ca8 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b64      	cmp	r3, #100	@ 0x64
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e0d8      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d34:	4b0e      	ldr	r3, [pc, #56]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0f0      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	f040 80ce 	bne.w	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d48:	4b09      	ldr	r3, [pc, #36]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a08      	ldr	r2, [pc, #32]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d54:	f7fc ffa8 	bl	8001ca8 <HAL_GetTick>
 8004d58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d5a:	e00b      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d5c:	f7fc ffa4 	bl	8001ca8 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b64      	cmp	r3, #100	@ 0x64
 8004d68:	d904      	bls.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e0bb      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004d6e:	bf00      	nop
 8004d70:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d74:	4b5e      	ldr	r3, [pc, #376]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d80:	d0ec      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d009      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d02e      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d12a      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004daa:	4b51      	ldr	r3, [pc, #324]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004db0:	0c1b      	lsrs	r3, r3, #16
 8004db2:	f003 0303 	and.w	r3, r3, #3
 8004db6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004db8:	4b4d      	ldr	r3, [pc, #308]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dbe:	0f1b      	lsrs	r3, r3, #28
 8004dc0:	f003 0307 	and.w	r3, r3, #7
 8004dc4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	019a      	lsls	r2, r3, #6
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	041b      	lsls	r3, r3, #16
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	061b      	lsls	r3, r3, #24
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	071b      	lsls	r3, r3, #28
 8004dde:	4944      	ldr	r1, [pc, #272]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004de6:	4b42      	ldr	r3, [pc, #264]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dec:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df4:	3b01      	subs	r3, #1
 8004df6:	021b      	lsls	r3, r3, #8
 8004df8:	493d      	ldr	r1, [pc, #244]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d022      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e14:	d11d      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e16:	4b36      	ldr	r3, [pc, #216]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e1c:	0e1b      	lsrs	r3, r3, #24
 8004e1e:	f003 030f 	and.w	r3, r3, #15
 8004e22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e24:	4b32      	ldr	r3, [pc, #200]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e2a:	0f1b      	lsrs	r3, r3, #28
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	019a      	lsls	r2, r3, #6
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	041b      	lsls	r3, r3, #16
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	061b      	lsls	r3, r3, #24
 8004e44:	431a      	orrs	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	071b      	lsls	r3, r3, #28
 8004e4a:	4929      	ldr	r1, [pc, #164]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0308 	and.w	r3, r3, #8
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d028      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e5e:	4b24      	ldr	r3, [pc, #144]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e64:	0e1b      	lsrs	r3, r3, #24
 8004e66:	f003 030f 	and.w	r3, r3, #15
 8004e6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e6c:	4b20      	ldr	r3, [pc, #128]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e72:	0c1b      	lsrs	r3, r3, #16
 8004e74:	f003 0303 	and.w	r3, r3, #3
 8004e78:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	019a      	lsls	r2, r3, #6
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	041b      	lsls	r3, r3, #16
 8004e84:	431a      	orrs	r2, r3
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	061b      	lsls	r3, r3, #24
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	071b      	lsls	r3, r3, #28
 8004e92:	4917      	ldr	r1, [pc, #92]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e9a:	4b15      	ldr	r3, [pc, #84]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ea0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea8:	4911      	ldr	r1, [pc, #68]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a0e      	ldr	r2, [pc, #56]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ebc:	f7fc fef4 	bl	8001ca8 <HAL_GetTick>
 8004ec0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ec4:	f7fc fef0 	bl	8001ca8 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b64      	cmp	r3, #100	@ 0x64
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e007      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ed6:	4b06      	ldr	r3, [pc, #24]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ede:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ee2:	d1ef      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3720      	adds	r7, #32
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	40023800 	.word	0x40023800

08004ef4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e071      	b.n	8004fee <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	7f5b      	ldrb	r3, [r3, #29]
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d105      	bne.n	8004f20 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7fc f896 	bl	800104c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f003 0310 	and.w	r3, r3, #16
 8004f30:	2b10      	cmp	r3, #16
 8004f32:	d053      	beq.n	8004fdc <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	22ca      	movs	r2, #202	@ 0xca
 8004f3a:	625a      	str	r2, [r3, #36]	@ 0x24
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2253      	movs	r2, #83	@ 0x53
 8004f42:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 f87f 	bl	8005048 <RTC_EnterInitMode>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004f4e:	7bfb      	ldrb	r3, [r7, #15]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d12a      	bne.n	8004faa <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6899      	ldr	r1, [r3, #8]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	4b26      	ldr	r3, [pc, #152]	@ (8004ff8 <HAL_RTC_Init+0x104>)
 8004f60:	400b      	ands	r3, r1
 8004f62:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6899      	ldr	r1, [r3, #8]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	68d2      	ldr	r2, [r2, #12]
 8004f8a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6919      	ldr	r1, [r3, #16]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	041a      	lsls	r2, r3, #16
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f888 	bl	80050b6 <RTC_ExitInitMode>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004faa:	7bfb      	ldrb	r3, [r7, #15]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d110      	bne.n	8004fd2 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 0208 	bic.w	r2, r2, #8
 8004fbe:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699a      	ldr	r2, [r3, #24]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	22ff      	movs	r2, #255	@ 0xff
 8004fd8:	625a      	str	r2, [r3, #36]	@ 0x24
 8004fda:	e001      	b.n	8004fe0 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004fe0:	7bfb      	ldrb	r3, [r7, #15]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d102      	bne.n	8004fec <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	ff8fffbf 	.word	0xff8fffbf

08004ffc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005004:	2300      	movs	r3, #0
 8005006:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a0d      	ldr	r2, [pc, #52]	@ (8005044 <HAL_RTC_WaitForSynchro+0x48>)
 800500e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005010:	f7fc fe4a 	bl	8001ca8 <HAL_GetTick>
 8005014:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005016:	e009      	b.n	800502c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005018:	f7fc fe46 	bl	8001ca8 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005026:	d901      	bls.n	800502c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e007      	b.n	800503c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	f003 0320 	and.w	r3, r3, #32
 8005036:	2b00      	cmp	r3, #0
 8005038:	d0ee      	beq.n	8005018 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	0001ff5f 	.word	0x0001ff5f

08005048 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005050:	2300      	movs	r3, #0
 8005052:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005054:	2300      	movs	r3, #0
 8005056:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005062:	2b00      	cmp	r3, #0
 8005064:	d122      	bne.n	80050ac <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68da      	ldr	r2, [r3, #12]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005074:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005076:	f7fc fe17 	bl	8001ca8 <HAL_GetTick>
 800507a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800507c:	e00c      	b.n	8005098 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800507e:	f7fc fe13 	bl	8001ca8 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800508c:	d904      	bls.n	8005098 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2204      	movs	r2, #4
 8005092:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d102      	bne.n	80050ac <RTC_EnterInitMode+0x64>
 80050a6:	7bfb      	ldrb	r3, [r7, #15]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d1e8      	bne.n	800507e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80050ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b084      	sub	sp, #16
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050be:	2300      	movs	r3, #0
 80050c0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68da      	ldr	r2, [r3, #12]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80050d0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f003 0320 	and.w	r3, r3, #32
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10a      	bne.n	80050f6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f7ff ff8b 	bl	8004ffc <HAL_RTC_WaitForSynchro>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d004      	beq.n	80050f6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2204      	movs	r2, #4
 80050f0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80050f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e049      	b.n	80051a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d106      	bne.n	800512c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f841 	bl	80051ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	3304      	adds	r3, #4
 800513c:	4619      	mov	r1, r3
 800513e:	4610      	mov	r0, r2
 8005140:	f000 fc24 	bl	800598c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b083      	sub	sp, #12
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
	...

080051c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d001      	beq.n	80051dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e054      	b.n	8005286 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f042 0201 	orr.w	r2, r2, #1
 80051f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a26      	ldr	r2, [pc, #152]	@ (8005294 <HAL_TIM_Base_Start_IT+0xd0>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d022      	beq.n	8005244 <HAL_TIM_Base_Start_IT+0x80>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005206:	d01d      	beq.n	8005244 <HAL_TIM_Base_Start_IT+0x80>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a22      	ldr	r2, [pc, #136]	@ (8005298 <HAL_TIM_Base_Start_IT+0xd4>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d018      	beq.n	8005244 <HAL_TIM_Base_Start_IT+0x80>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a21      	ldr	r2, [pc, #132]	@ (800529c <HAL_TIM_Base_Start_IT+0xd8>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d013      	beq.n	8005244 <HAL_TIM_Base_Start_IT+0x80>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a1f      	ldr	r2, [pc, #124]	@ (80052a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d00e      	beq.n	8005244 <HAL_TIM_Base_Start_IT+0x80>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a1e      	ldr	r2, [pc, #120]	@ (80052a4 <HAL_TIM_Base_Start_IT+0xe0>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d009      	beq.n	8005244 <HAL_TIM_Base_Start_IT+0x80>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a1c      	ldr	r2, [pc, #112]	@ (80052a8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d004      	beq.n	8005244 <HAL_TIM_Base_Start_IT+0x80>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a1b      	ldr	r2, [pc, #108]	@ (80052ac <HAL_TIM_Base_Start_IT+0xe8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d115      	bne.n	8005270 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689a      	ldr	r2, [r3, #8]
 800524a:	4b19      	ldr	r3, [pc, #100]	@ (80052b0 <HAL_TIM_Base_Start_IT+0xec>)
 800524c:	4013      	ands	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2b06      	cmp	r3, #6
 8005254:	d015      	beq.n	8005282 <HAL_TIM_Base_Start_IT+0xbe>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800525c:	d011      	beq.n	8005282 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f042 0201 	orr.w	r2, r2, #1
 800526c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800526e:	e008      	b.n	8005282 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0201 	orr.w	r2, r2, #1
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	e000      	b.n	8005284 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005282:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	40010000 	.word	0x40010000
 8005298:	40000400 	.word	0x40000400
 800529c:	40000800 	.word	0x40000800
 80052a0:	40000c00 	.word	0x40000c00
 80052a4:	40010400 	.word	0x40010400
 80052a8:	40014000 	.word	0x40014000
 80052ac:	40001800 	.word	0x40001800
 80052b0:	00010007 	.word	0x00010007

080052b4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e049      	b.n	800535a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d106      	bne.n	80052e0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7fb ff02 	bl	80010e4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3304      	adds	r3, #4
 80052f0:	4619      	mov	r1, r3
 80052f2:	4610      	mov	r0, r2
 80052f4:	f000 fb4a 	bl	800598c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b082      	sub	sp, #8
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e049      	b.n	8005408 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b00      	cmp	r3, #0
 800537e:	d106      	bne.n	800538e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f7fb fe8d 	bl	80010a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2202      	movs	r2, #2
 8005392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	3304      	adds	r3, #4
 800539e:	4619      	mov	r1, r3
 80053a0:	4610      	mov	r0, r2
 80053a2:	f000 faf3 	bl	800598c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d020      	beq.n	8005474 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d01b      	beq.n	8005474 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f06f 0202 	mvn.w	r2, #2
 8005444:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	f003 0303 	and.w	r3, r3, #3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fa78 	bl	8005950 <HAL_TIM_IC_CaptureCallback>
 8005460:	e005      	b.n	800546e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fa6a 	bl	800593c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 fa7b 	bl	8005964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	f003 0304 	and.w	r3, r3, #4
 800547a:	2b00      	cmp	r3, #0
 800547c:	d020      	beq.n	80054c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f003 0304 	and.w	r3, r3, #4
 8005484:	2b00      	cmp	r3, #0
 8005486:	d01b      	beq.n	80054c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f06f 0204 	mvn.w	r2, #4
 8005490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2202      	movs	r2, #2
 8005496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fa52 	bl	8005950 <HAL_TIM_IC_CaptureCallback>
 80054ac:	e005      	b.n	80054ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 fa44 	bl	800593c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 fa55 	bl	8005964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f003 0308 	and.w	r3, r3, #8
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d020      	beq.n	800550c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f003 0308 	and.w	r3, r3, #8
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d01b      	beq.n	800550c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f06f 0208 	mvn.w	r2, #8
 80054dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2204      	movs	r2, #4
 80054e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	f003 0303 	and.w	r3, r3, #3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fa2c 	bl	8005950 <HAL_TIM_IC_CaptureCallback>
 80054f8:	e005      	b.n	8005506 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 fa1e 	bl	800593c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 fa2f 	bl	8005964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	f003 0310 	and.w	r3, r3, #16
 8005512:	2b00      	cmp	r3, #0
 8005514:	d020      	beq.n	8005558 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f003 0310 	and.w	r3, r3, #16
 800551c:	2b00      	cmp	r3, #0
 800551e:	d01b      	beq.n	8005558 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f06f 0210 	mvn.w	r2, #16
 8005528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2208      	movs	r2, #8
 800552e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fa06 	bl	8005950 <HAL_TIM_IC_CaptureCallback>
 8005544:	e005      	b.n	8005552 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f9f8 	bl	800593c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 fa09 	bl	8005964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00c      	beq.n	800557c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f003 0301 	and.w	r3, r3, #1
 8005568:	2b00      	cmp	r3, #0
 800556a:	d007      	beq.n	800557c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f06f 0201 	mvn.w	r2, #1
 8005574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7fb fc86 	bl	8000e88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005582:	2b00      	cmp	r3, #0
 8005584:	d104      	bne.n	8005590 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00c      	beq.n	80055aa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005596:	2b00      	cmp	r3, #0
 8005598:	d007      	beq.n	80055aa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80055a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 fd93 	bl	80060d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00c      	beq.n	80055ce <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d007      	beq.n	80055ce <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80055c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 fd8b 	bl	80060e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00c      	beq.n	80055f2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d007      	beq.n	80055f2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80055ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f9c3 	bl	8005978 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	f003 0320 	and.w	r3, r3, #32
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00c      	beq.n	8005616 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f003 0320 	and.w	r3, r3, #32
 8005602:	2b00      	cmp	r3, #0
 8005604:	d007      	beq.n	8005616 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f06f 0220 	mvn.w	r2, #32
 800560e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 fd53 	bl	80060bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005616:	bf00      	nop
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
	...

08005620 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800562c:	2300      	movs	r3, #0
 800562e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005636:	2b01      	cmp	r3, #1
 8005638:	d101      	bne.n	800563e <HAL_TIM_OC_ConfigChannel+0x1e>
 800563a:	2302      	movs	r3, #2
 800563c:	e066      	b.n	800570c <HAL_TIM_OC_ConfigChannel+0xec>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b14      	cmp	r3, #20
 800564a:	d857      	bhi.n	80056fc <HAL_TIM_OC_ConfigChannel+0xdc>
 800564c:	a201      	add	r2, pc, #4	@ (adr r2, 8005654 <HAL_TIM_OC_ConfigChannel+0x34>)
 800564e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005652:	bf00      	nop
 8005654:	080056a9 	.word	0x080056a9
 8005658:	080056fd 	.word	0x080056fd
 800565c:	080056fd 	.word	0x080056fd
 8005660:	080056fd 	.word	0x080056fd
 8005664:	080056b7 	.word	0x080056b7
 8005668:	080056fd 	.word	0x080056fd
 800566c:	080056fd 	.word	0x080056fd
 8005670:	080056fd 	.word	0x080056fd
 8005674:	080056c5 	.word	0x080056c5
 8005678:	080056fd 	.word	0x080056fd
 800567c:	080056fd 	.word	0x080056fd
 8005680:	080056fd 	.word	0x080056fd
 8005684:	080056d3 	.word	0x080056d3
 8005688:	080056fd 	.word	0x080056fd
 800568c:	080056fd 	.word	0x080056fd
 8005690:	080056fd 	.word	0x080056fd
 8005694:	080056e1 	.word	0x080056e1
 8005698:	080056fd 	.word	0x080056fd
 800569c:	080056fd 	.word	0x080056fd
 80056a0:	080056fd 	.word	0x080056fd
 80056a4:	080056ef 	.word	0x080056ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68b9      	ldr	r1, [r7, #8]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 fa18 	bl	8005ae4 <TIM_OC1_SetConfig>
      break;
 80056b4:	e025      	b.n	8005702 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68b9      	ldr	r1, [r7, #8]
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 fa83 	bl	8005bc8 <TIM_OC2_SetConfig>
      break;
 80056c2:	e01e      	b.n	8005702 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68b9      	ldr	r1, [r7, #8]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 faf4 	bl	8005cb8 <TIM_OC3_SetConfig>
      break;
 80056d0:	e017      	b.n	8005702 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68b9      	ldr	r1, [r7, #8]
 80056d8:	4618      	mov	r0, r3
 80056da:	f000 fb63 	bl	8005da4 <TIM_OC4_SetConfig>
      break;
 80056de:	e010      	b.n	8005702 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68b9      	ldr	r1, [r7, #8]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 fbb4 	bl	8005e54 <TIM_OC5_SetConfig>
      break;
 80056ec:	e009      	b.n	8005702 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68b9      	ldr	r1, [r7, #8]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f000 fbff 	bl	8005ef8 <TIM_OC6_SetConfig>
      break;
 80056fa:	e002      	b.n	8005702 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005700:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800570a:	7dfb      	ldrb	r3, [r7, #23]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3718      	adds	r7, #24
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005720:	2300      	movs	r3, #0
 8005722:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800572a:	2b01      	cmp	r3, #1
 800572c:	d101      	bne.n	8005732 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800572e:	2302      	movs	r3, #2
 8005730:	e0ff      	b.n	8005932 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b14      	cmp	r3, #20
 800573e:	f200 80f0 	bhi.w	8005922 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005742:	a201      	add	r2, pc, #4	@ (adr r2, 8005748 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005748:	0800579d 	.word	0x0800579d
 800574c:	08005923 	.word	0x08005923
 8005750:	08005923 	.word	0x08005923
 8005754:	08005923 	.word	0x08005923
 8005758:	080057dd 	.word	0x080057dd
 800575c:	08005923 	.word	0x08005923
 8005760:	08005923 	.word	0x08005923
 8005764:	08005923 	.word	0x08005923
 8005768:	0800581f 	.word	0x0800581f
 800576c:	08005923 	.word	0x08005923
 8005770:	08005923 	.word	0x08005923
 8005774:	08005923 	.word	0x08005923
 8005778:	0800585f 	.word	0x0800585f
 800577c:	08005923 	.word	0x08005923
 8005780:	08005923 	.word	0x08005923
 8005784:	08005923 	.word	0x08005923
 8005788:	080058a1 	.word	0x080058a1
 800578c:	08005923 	.word	0x08005923
 8005790:	08005923 	.word	0x08005923
 8005794:	08005923 	.word	0x08005923
 8005798:	080058e1 	.word	0x080058e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68b9      	ldr	r1, [r7, #8]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 f99e 	bl	8005ae4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	699a      	ldr	r2, [r3, #24]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f042 0208 	orr.w	r2, r2, #8
 80057b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	699a      	ldr	r2, [r3, #24]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f022 0204 	bic.w	r2, r2, #4
 80057c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6999      	ldr	r1, [r3, #24]
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	691a      	ldr	r2, [r3, #16]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	619a      	str	r2, [r3, #24]
      break;
 80057da:	e0a5      	b.n	8005928 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68b9      	ldr	r1, [r7, #8]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 f9f0 	bl	8005bc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	699a      	ldr	r2, [r3, #24]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	699a      	ldr	r2, [r3, #24]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005806:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6999      	ldr	r1, [r3, #24]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	021a      	lsls	r2, r3, #8
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	430a      	orrs	r2, r1
 800581a:	619a      	str	r2, [r3, #24]
      break;
 800581c:	e084      	b.n	8005928 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68b9      	ldr	r1, [r7, #8]
 8005824:	4618      	mov	r0, r3
 8005826:	f000 fa47 	bl	8005cb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	69da      	ldr	r2, [r3, #28]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f042 0208 	orr.w	r2, r2, #8
 8005838:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	69da      	ldr	r2, [r3, #28]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f022 0204 	bic.w	r2, r2, #4
 8005848:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	69d9      	ldr	r1, [r3, #28]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	691a      	ldr	r2, [r3, #16]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	61da      	str	r2, [r3, #28]
      break;
 800585c:	e064      	b.n	8005928 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68b9      	ldr	r1, [r7, #8]
 8005864:	4618      	mov	r0, r3
 8005866:	f000 fa9d 	bl	8005da4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	69da      	ldr	r2, [r3, #28]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005878:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69da      	ldr	r2, [r3, #28]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005888:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69d9      	ldr	r1, [r3, #28]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	021a      	lsls	r2, r3, #8
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	61da      	str	r2, [r3, #28]
      break;
 800589e:	e043      	b.n	8005928 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68b9      	ldr	r1, [r7, #8]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 fad4 	bl	8005e54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0208 	orr.w	r2, r2, #8
 80058ba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 0204 	bic.w	r2, r2, #4
 80058ca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	691a      	ldr	r2, [r3, #16]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80058de:	e023      	b.n	8005928 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68b9      	ldr	r1, [r7, #8]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 fb06 	bl	8005ef8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058fa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800590a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	021a      	lsls	r2, r3, #8
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	430a      	orrs	r2, r1
 800591e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005920:	e002      	b.n	8005928 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	75fb      	strb	r3, [r7, #23]
      break;
 8005926:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005930:	7dfb      	ldrb	r3, [r7, #23]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3718      	adds	r7, #24
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop

0800593c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a46      	ldr	r2, [pc, #280]	@ (8005ab8 <TIM_Base_SetConfig+0x12c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d013      	beq.n	80059cc <TIM_Base_SetConfig+0x40>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059aa:	d00f      	beq.n	80059cc <TIM_Base_SetConfig+0x40>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a43      	ldr	r2, [pc, #268]	@ (8005abc <TIM_Base_SetConfig+0x130>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d00b      	beq.n	80059cc <TIM_Base_SetConfig+0x40>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a42      	ldr	r2, [pc, #264]	@ (8005ac0 <TIM_Base_SetConfig+0x134>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d007      	beq.n	80059cc <TIM_Base_SetConfig+0x40>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a41      	ldr	r2, [pc, #260]	@ (8005ac4 <TIM_Base_SetConfig+0x138>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d003      	beq.n	80059cc <TIM_Base_SetConfig+0x40>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a40      	ldr	r2, [pc, #256]	@ (8005ac8 <TIM_Base_SetConfig+0x13c>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d108      	bne.n	80059de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	4313      	orrs	r3, r2
 80059dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a35      	ldr	r2, [pc, #212]	@ (8005ab8 <TIM_Base_SetConfig+0x12c>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d02b      	beq.n	8005a3e <TIM_Base_SetConfig+0xb2>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ec:	d027      	beq.n	8005a3e <TIM_Base_SetConfig+0xb2>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a32      	ldr	r2, [pc, #200]	@ (8005abc <TIM_Base_SetConfig+0x130>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d023      	beq.n	8005a3e <TIM_Base_SetConfig+0xb2>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a31      	ldr	r2, [pc, #196]	@ (8005ac0 <TIM_Base_SetConfig+0x134>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d01f      	beq.n	8005a3e <TIM_Base_SetConfig+0xb2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a30      	ldr	r2, [pc, #192]	@ (8005ac4 <TIM_Base_SetConfig+0x138>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d01b      	beq.n	8005a3e <TIM_Base_SetConfig+0xb2>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a2f      	ldr	r2, [pc, #188]	@ (8005ac8 <TIM_Base_SetConfig+0x13c>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d017      	beq.n	8005a3e <TIM_Base_SetConfig+0xb2>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a2e      	ldr	r2, [pc, #184]	@ (8005acc <TIM_Base_SetConfig+0x140>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d013      	beq.n	8005a3e <TIM_Base_SetConfig+0xb2>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a2d      	ldr	r2, [pc, #180]	@ (8005ad0 <TIM_Base_SetConfig+0x144>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d00f      	beq.n	8005a3e <TIM_Base_SetConfig+0xb2>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a2c      	ldr	r2, [pc, #176]	@ (8005ad4 <TIM_Base_SetConfig+0x148>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d00b      	beq.n	8005a3e <TIM_Base_SetConfig+0xb2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a2b      	ldr	r2, [pc, #172]	@ (8005ad8 <TIM_Base_SetConfig+0x14c>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d007      	beq.n	8005a3e <TIM_Base_SetConfig+0xb2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a2a      	ldr	r2, [pc, #168]	@ (8005adc <TIM_Base_SetConfig+0x150>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d003      	beq.n	8005a3e <TIM_Base_SetConfig+0xb2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a29      	ldr	r2, [pc, #164]	@ (8005ae0 <TIM_Base_SetConfig+0x154>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d108      	bne.n	8005a50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a10      	ldr	r2, [pc, #64]	@ (8005ab8 <TIM_Base_SetConfig+0x12c>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d003      	beq.n	8005a84 <TIM_Base_SetConfig+0xf8>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a12      	ldr	r2, [pc, #72]	@ (8005ac8 <TIM_Base_SetConfig+0x13c>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d103      	bne.n	8005a8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	691a      	ldr	r2, [r3, #16]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d105      	bne.n	8005aaa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f023 0201 	bic.w	r2, r3, #1
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	611a      	str	r2, [r3, #16]
  }
}
 8005aaa:	bf00      	nop
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	40010000 	.word	0x40010000
 8005abc:	40000400 	.word	0x40000400
 8005ac0:	40000800 	.word	0x40000800
 8005ac4:	40000c00 	.word	0x40000c00
 8005ac8:	40010400 	.word	0x40010400
 8005acc:	40014000 	.word	0x40014000
 8005ad0:	40014400 	.word	0x40014400
 8005ad4:	40014800 	.word	0x40014800
 8005ad8:	40001800 	.word	0x40001800
 8005adc:	40001c00 	.word	0x40001c00
 8005ae0:	40002000 	.word	0x40002000

08005ae4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a1b      	ldr	r3, [r3, #32]
 8005af8:	f023 0201 	bic.w	r2, r3, #1
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	4b2b      	ldr	r3, [pc, #172]	@ (8005bbc <TIM_OC1_SetConfig+0xd8>)
 8005b10:	4013      	ands	r3, r2
 8005b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f023 0303 	bic.w	r3, r3, #3
 8005b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f023 0302 	bic.w	r3, r3, #2
 8005b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a21      	ldr	r2, [pc, #132]	@ (8005bc0 <TIM_OC1_SetConfig+0xdc>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d003      	beq.n	8005b48 <TIM_OC1_SetConfig+0x64>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a20      	ldr	r2, [pc, #128]	@ (8005bc4 <TIM_OC1_SetConfig+0xe0>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d10c      	bne.n	8005b62 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f023 0308 	bic.w	r3, r3, #8
 8005b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f023 0304 	bic.w	r3, r3, #4
 8005b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a16      	ldr	r2, [pc, #88]	@ (8005bc0 <TIM_OC1_SetConfig+0xdc>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d003      	beq.n	8005b72 <TIM_OC1_SetConfig+0x8e>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a15      	ldr	r2, [pc, #84]	@ (8005bc4 <TIM_OC1_SetConfig+0xe0>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d111      	bne.n	8005b96 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	621a      	str	r2, [r3, #32]
}
 8005bb0:	bf00      	nop
 8005bb2:	371c      	adds	r7, #28
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr
 8005bbc:	fffeff8f 	.word	0xfffeff8f
 8005bc0:	40010000 	.word	0x40010000
 8005bc4:	40010400 	.word	0x40010400

08005bc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b087      	sub	sp, #28
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a1b      	ldr	r3, [r3, #32]
 8005bdc:	f023 0210 	bic.w	r2, r3, #16
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	4b2e      	ldr	r3, [pc, #184]	@ (8005cac <TIM_OC2_SetConfig+0xe4>)
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	021b      	lsls	r3, r3, #8
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	f023 0320 	bic.w	r3, r3, #32
 8005c12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	011b      	lsls	r3, r3, #4
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a23      	ldr	r2, [pc, #140]	@ (8005cb0 <TIM_OC2_SetConfig+0xe8>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d003      	beq.n	8005c30 <TIM_OC2_SetConfig+0x68>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a22      	ldr	r2, [pc, #136]	@ (8005cb4 <TIM_OC2_SetConfig+0xec>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d10d      	bne.n	8005c4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	011b      	lsls	r3, r3, #4
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a18      	ldr	r2, [pc, #96]	@ (8005cb0 <TIM_OC2_SetConfig+0xe8>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d003      	beq.n	8005c5c <TIM_OC2_SetConfig+0x94>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a17      	ldr	r2, [pc, #92]	@ (8005cb4 <TIM_OC2_SetConfig+0xec>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d113      	bne.n	8005c84 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	621a      	str	r2, [r3, #32]
}
 8005c9e:	bf00      	nop
 8005ca0:	371c      	adds	r7, #28
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	feff8fff 	.word	0xfeff8fff
 8005cb0:	40010000 	.word	0x40010000
 8005cb4:	40010400 	.word	0x40010400

08005cb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	69db      	ldr	r3, [r3, #28]
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	4b2d      	ldr	r3, [pc, #180]	@ (8005d98 <TIM_OC3_SetConfig+0xe0>)
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 0303 	bic.w	r3, r3, #3
 8005cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	021b      	lsls	r3, r3, #8
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a22      	ldr	r2, [pc, #136]	@ (8005d9c <TIM_OC3_SetConfig+0xe4>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d003      	beq.n	8005d1e <TIM_OC3_SetConfig+0x66>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a21      	ldr	r2, [pc, #132]	@ (8005da0 <TIM_OC3_SetConfig+0xe8>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d10d      	bne.n	8005d3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	021b      	lsls	r3, r3, #8
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a17      	ldr	r2, [pc, #92]	@ (8005d9c <TIM_OC3_SetConfig+0xe4>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d003      	beq.n	8005d4a <TIM_OC3_SetConfig+0x92>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a16      	ldr	r2, [pc, #88]	@ (8005da0 <TIM_OC3_SetConfig+0xe8>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d113      	bne.n	8005d72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	011b      	lsls	r3, r3, #4
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	011b      	lsls	r3, r3, #4
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	621a      	str	r2, [r3, #32]
}
 8005d8c:	bf00      	nop
 8005d8e:	371c      	adds	r7, #28
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr
 8005d98:	fffeff8f 	.word	0xfffeff8f
 8005d9c:	40010000 	.word	0x40010000
 8005da0:	40010400 	.word	0x40010400

08005da4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b087      	sub	sp, #28
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a1b      	ldr	r3, [r3, #32]
 8005db8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	4b1e      	ldr	r3, [pc, #120]	@ (8005e48 <TIM_OC4_SetConfig+0xa4>)
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	021b      	lsls	r3, r3, #8
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005dee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	031b      	lsls	r3, r3, #12
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a13      	ldr	r2, [pc, #76]	@ (8005e4c <TIM_OC4_SetConfig+0xa8>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d003      	beq.n	8005e0c <TIM_OC4_SetConfig+0x68>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a12      	ldr	r2, [pc, #72]	@ (8005e50 <TIM_OC4_SetConfig+0xac>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d109      	bne.n	8005e20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	019b      	lsls	r3, r3, #6
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	621a      	str	r2, [r3, #32]
}
 8005e3a:	bf00      	nop
 8005e3c:	371c      	adds	r7, #28
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	feff8fff 	.word	0xfeff8fff
 8005e4c:	40010000 	.word	0x40010000
 8005e50:	40010400 	.word	0x40010400

08005e54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b087      	sub	sp, #28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8005eec <TIM_OC5_SetConfig+0x98>)
 8005e80:	4013      	ands	r3, r2
 8005e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005e94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	041b      	lsls	r3, r3, #16
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a12      	ldr	r2, [pc, #72]	@ (8005ef0 <TIM_OC5_SetConfig+0x9c>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d003      	beq.n	8005eb2 <TIM_OC5_SetConfig+0x5e>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a11      	ldr	r2, [pc, #68]	@ (8005ef4 <TIM_OC5_SetConfig+0xa0>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d109      	bne.n	8005ec6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	021b      	lsls	r3, r3, #8
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	621a      	str	r2, [r3, #32]
}
 8005ee0:	bf00      	nop
 8005ee2:	371c      	adds	r7, #28
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	fffeff8f 	.word	0xfffeff8f
 8005ef0:	40010000 	.word	0x40010000
 8005ef4:	40010400 	.word	0x40010400

08005ef8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b087      	sub	sp, #28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	4b1c      	ldr	r3, [pc, #112]	@ (8005f94 <TIM_OC6_SetConfig+0x9c>)
 8005f24:	4013      	ands	r3, r2
 8005f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	021b      	lsls	r3, r3, #8
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005f3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	051b      	lsls	r3, r3, #20
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a13      	ldr	r2, [pc, #76]	@ (8005f98 <TIM_OC6_SetConfig+0xa0>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d003      	beq.n	8005f58 <TIM_OC6_SetConfig+0x60>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a12      	ldr	r2, [pc, #72]	@ (8005f9c <TIM_OC6_SetConfig+0xa4>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d109      	bne.n	8005f6c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	029b      	lsls	r3, r3, #10
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	621a      	str	r2, [r3, #32]
}
 8005f86:	bf00      	nop
 8005f88:	371c      	adds	r7, #28
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	feff8fff 	.word	0xfeff8fff
 8005f98:	40010000 	.word	0x40010000
 8005f9c:	40010400 	.word	0x40010400

08005fa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d101      	bne.n	8005fb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e06d      	b.n	8006094 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a30      	ldr	r2, [pc, #192]	@ (80060a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d004      	beq.n	8005fec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a2f      	ldr	r2, [pc, #188]	@ (80060a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d108      	bne.n	8005ffe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005ff2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006004:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	4313      	orrs	r3, r2
 800600e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a20      	ldr	r2, [pc, #128]	@ (80060a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d022      	beq.n	8006068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800602a:	d01d      	beq.n	8006068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a1d      	ldr	r2, [pc, #116]	@ (80060a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d018      	beq.n	8006068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a1c      	ldr	r2, [pc, #112]	@ (80060ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d013      	beq.n	8006068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a1a      	ldr	r2, [pc, #104]	@ (80060b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d00e      	beq.n	8006068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a15      	ldr	r2, [pc, #84]	@ (80060a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d009      	beq.n	8006068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a16      	ldr	r2, [pc, #88]	@ (80060b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d004      	beq.n	8006068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a15      	ldr	r2, [pc, #84]	@ (80060b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d10c      	bne.n	8006082 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800606e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	4313      	orrs	r3, r2
 8006078:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3714      	adds	r7, #20
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr
 80060a0:	40010000 	.word	0x40010000
 80060a4:	40010400 	.word	0x40010400
 80060a8:	40000400 	.word	0x40000400
 80060ac:	40000800 	.word	0x40000800
 80060b0:	40000c00 	.word	0x40000c00
 80060b4:	40014000 	.word	0x40014000
 80060b8:	40001800 	.word	0x40001800

080060bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e040      	b.n	800618c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800610e:	2b00      	cmp	r3, #0
 8006110:	d106      	bne.n	8006120 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7fb f87a 	bl	8001214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2224      	movs	r2, #36	@ 0x24
 8006124:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f022 0201 	bic.w	r2, r2, #1
 8006134:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800613a:	2b00      	cmp	r3, #0
 800613c:	d002      	beq.n	8006144 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fae2 	bl	8006708 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f87b 	bl	8006240 <UART_SetConfig>
 800614a:	4603      	mov	r3, r0
 800614c:	2b01      	cmp	r3, #1
 800614e:	d101      	bne.n	8006154 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e01b      	b.n	800618c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	685a      	ldr	r2, [r3, #4]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006162:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689a      	ldr	r2, [r3, #8]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006172:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f042 0201 	orr.w	r2, r2, #1
 8006182:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 fb61 	bl	800684c <UART_CheckIdleState>
 800618a:	4603      	mov	r3, r0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3708      	adds	r7, #8
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d101      	bne.n	80061a6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e048      	b.n	8006238 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d106      	bne.n	80061bc <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7fb f82c 	bl	8001214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2224      	movs	r2, #36	@ 0x24
 80061c0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 0201 	bic.w	r2, r2, #1
 80061d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d002      	beq.n	80061e0 <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fa94 	bl	8006708 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f82d 	bl	8006240 <UART_SetConfig>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d101      	bne.n	80061f0 <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e023      	b.n	8006238 <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80061fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689a      	ldr	r2, [r3, #8]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 800620e:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	689a      	ldr	r2, [r3, #8]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f042 0208 	orr.w	r2, r2, #8
 800621e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f042 0201 	orr.w	r2, r2, #1
 800622e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 fb0b 	bl	800684c <UART_CheckIdleState>
 8006236:	4603      	mov	r3, r0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3708      	adds	r7, #8
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b088      	sub	sp, #32
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006248:	2300      	movs	r3, #0
 800624a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	689a      	ldr	r2, [r3, #8]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	431a      	orrs	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	431a      	orrs	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	69db      	ldr	r3, [r3, #28]
 8006260:	4313      	orrs	r3, r2
 8006262:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	4ba6      	ldr	r3, [pc, #664]	@ (8006504 <UART_SetConfig+0x2c4>)
 800626c:	4013      	ands	r3, r2
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	6812      	ldr	r2, [r2, #0]
 8006272:	6979      	ldr	r1, [r7, #20]
 8006274:	430b      	orrs	r3, r1
 8006276:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68da      	ldr	r2, [r3, #12]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	430a      	orrs	r2, r1
 800628c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	4313      	orrs	r3, r2
 800629c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a94      	ldr	r2, [pc, #592]	@ (8006508 <UART_SetConfig+0x2c8>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d120      	bne.n	80062fe <UART_SetConfig+0xbe>
 80062bc:	4b93      	ldr	r3, [pc, #588]	@ (800650c <UART_SetConfig+0x2cc>)
 80062be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062c2:	f003 0303 	and.w	r3, r3, #3
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	d816      	bhi.n	80062f8 <UART_SetConfig+0xb8>
 80062ca:	a201      	add	r2, pc, #4	@ (adr r2, 80062d0 <UART_SetConfig+0x90>)
 80062cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d0:	080062e1 	.word	0x080062e1
 80062d4:	080062ed 	.word	0x080062ed
 80062d8:	080062e7 	.word	0x080062e7
 80062dc:	080062f3 	.word	0x080062f3
 80062e0:	2301      	movs	r3, #1
 80062e2:	77fb      	strb	r3, [r7, #31]
 80062e4:	e150      	b.n	8006588 <UART_SetConfig+0x348>
 80062e6:	2302      	movs	r3, #2
 80062e8:	77fb      	strb	r3, [r7, #31]
 80062ea:	e14d      	b.n	8006588 <UART_SetConfig+0x348>
 80062ec:	2304      	movs	r3, #4
 80062ee:	77fb      	strb	r3, [r7, #31]
 80062f0:	e14a      	b.n	8006588 <UART_SetConfig+0x348>
 80062f2:	2308      	movs	r3, #8
 80062f4:	77fb      	strb	r3, [r7, #31]
 80062f6:	e147      	b.n	8006588 <UART_SetConfig+0x348>
 80062f8:	2310      	movs	r3, #16
 80062fa:	77fb      	strb	r3, [r7, #31]
 80062fc:	e144      	b.n	8006588 <UART_SetConfig+0x348>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a83      	ldr	r2, [pc, #524]	@ (8006510 <UART_SetConfig+0x2d0>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d132      	bne.n	800636e <UART_SetConfig+0x12e>
 8006308:	4b80      	ldr	r3, [pc, #512]	@ (800650c <UART_SetConfig+0x2cc>)
 800630a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800630e:	f003 030c 	and.w	r3, r3, #12
 8006312:	2b0c      	cmp	r3, #12
 8006314:	d828      	bhi.n	8006368 <UART_SetConfig+0x128>
 8006316:	a201      	add	r2, pc, #4	@ (adr r2, 800631c <UART_SetConfig+0xdc>)
 8006318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800631c:	08006351 	.word	0x08006351
 8006320:	08006369 	.word	0x08006369
 8006324:	08006369 	.word	0x08006369
 8006328:	08006369 	.word	0x08006369
 800632c:	0800635d 	.word	0x0800635d
 8006330:	08006369 	.word	0x08006369
 8006334:	08006369 	.word	0x08006369
 8006338:	08006369 	.word	0x08006369
 800633c:	08006357 	.word	0x08006357
 8006340:	08006369 	.word	0x08006369
 8006344:	08006369 	.word	0x08006369
 8006348:	08006369 	.word	0x08006369
 800634c:	08006363 	.word	0x08006363
 8006350:	2300      	movs	r3, #0
 8006352:	77fb      	strb	r3, [r7, #31]
 8006354:	e118      	b.n	8006588 <UART_SetConfig+0x348>
 8006356:	2302      	movs	r3, #2
 8006358:	77fb      	strb	r3, [r7, #31]
 800635a:	e115      	b.n	8006588 <UART_SetConfig+0x348>
 800635c:	2304      	movs	r3, #4
 800635e:	77fb      	strb	r3, [r7, #31]
 8006360:	e112      	b.n	8006588 <UART_SetConfig+0x348>
 8006362:	2308      	movs	r3, #8
 8006364:	77fb      	strb	r3, [r7, #31]
 8006366:	e10f      	b.n	8006588 <UART_SetConfig+0x348>
 8006368:	2310      	movs	r3, #16
 800636a:	77fb      	strb	r3, [r7, #31]
 800636c:	e10c      	b.n	8006588 <UART_SetConfig+0x348>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a68      	ldr	r2, [pc, #416]	@ (8006514 <UART_SetConfig+0x2d4>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d120      	bne.n	80063ba <UART_SetConfig+0x17a>
 8006378:	4b64      	ldr	r3, [pc, #400]	@ (800650c <UART_SetConfig+0x2cc>)
 800637a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800637e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006382:	2b30      	cmp	r3, #48	@ 0x30
 8006384:	d013      	beq.n	80063ae <UART_SetConfig+0x16e>
 8006386:	2b30      	cmp	r3, #48	@ 0x30
 8006388:	d814      	bhi.n	80063b4 <UART_SetConfig+0x174>
 800638a:	2b20      	cmp	r3, #32
 800638c:	d009      	beq.n	80063a2 <UART_SetConfig+0x162>
 800638e:	2b20      	cmp	r3, #32
 8006390:	d810      	bhi.n	80063b4 <UART_SetConfig+0x174>
 8006392:	2b00      	cmp	r3, #0
 8006394:	d002      	beq.n	800639c <UART_SetConfig+0x15c>
 8006396:	2b10      	cmp	r3, #16
 8006398:	d006      	beq.n	80063a8 <UART_SetConfig+0x168>
 800639a:	e00b      	b.n	80063b4 <UART_SetConfig+0x174>
 800639c:	2300      	movs	r3, #0
 800639e:	77fb      	strb	r3, [r7, #31]
 80063a0:	e0f2      	b.n	8006588 <UART_SetConfig+0x348>
 80063a2:	2302      	movs	r3, #2
 80063a4:	77fb      	strb	r3, [r7, #31]
 80063a6:	e0ef      	b.n	8006588 <UART_SetConfig+0x348>
 80063a8:	2304      	movs	r3, #4
 80063aa:	77fb      	strb	r3, [r7, #31]
 80063ac:	e0ec      	b.n	8006588 <UART_SetConfig+0x348>
 80063ae:	2308      	movs	r3, #8
 80063b0:	77fb      	strb	r3, [r7, #31]
 80063b2:	e0e9      	b.n	8006588 <UART_SetConfig+0x348>
 80063b4:	2310      	movs	r3, #16
 80063b6:	77fb      	strb	r3, [r7, #31]
 80063b8:	e0e6      	b.n	8006588 <UART_SetConfig+0x348>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a56      	ldr	r2, [pc, #344]	@ (8006518 <UART_SetConfig+0x2d8>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d120      	bne.n	8006406 <UART_SetConfig+0x1c6>
 80063c4:	4b51      	ldr	r3, [pc, #324]	@ (800650c <UART_SetConfig+0x2cc>)
 80063c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80063ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80063d0:	d013      	beq.n	80063fa <UART_SetConfig+0x1ba>
 80063d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80063d4:	d814      	bhi.n	8006400 <UART_SetConfig+0x1c0>
 80063d6:	2b80      	cmp	r3, #128	@ 0x80
 80063d8:	d009      	beq.n	80063ee <UART_SetConfig+0x1ae>
 80063da:	2b80      	cmp	r3, #128	@ 0x80
 80063dc:	d810      	bhi.n	8006400 <UART_SetConfig+0x1c0>
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d002      	beq.n	80063e8 <UART_SetConfig+0x1a8>
 80063e2:	2b40      	cmp	r3, #64	@ 0x40
 80063e4:	d006      	beq.n	80063f4 <UART_SetConfig+0x1b4>
 80063e6:	e00b      	b.n	8006400 <UART_SetConfig+0x1c0>
 80063e8:	2300      	movs	r3, #0
 80063ea:	77fb      	strb	r3, [r7, #31]
 80063ec:	e0cc      	b.n	8006588 <UART_SetConfig+0x348>
 80063ee:	2302      	movs	r3, #2
 80063f0:	77fb      	strb	r3, [r7, #31]
 80063f2:	e0c9      	b.n	8006588 <UART_SetConfig+0x348>
 80063f4:	2304      	movs	r3, #4
 80063f6:	77fb      	strb	r3, [r7, #31]
 80063f8:	e0c6      	b.n	8006588 <UART_SetConfig+0x348>
 80063fa:	2308      	movs	r3, #8
 80063fc:	77fb      	strb	r3, [r7, #31]
 80063fe:	e0c3      	b.n	8006588 <UART_SetConfig+0x348>
 8006400:	2310      	movs	r3, #16
 8006402:	77fb      	strb	r3, [r7, #31]
 8006404:	e0c0      	b.n	8006588 <UART_SetConfig+0x348>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a44      	ldr	r2, [pc, #272]	@ (800651c <UART_SetConfig+0x2dc>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d125      	bne.n	800645c <UART_SetConfig+0x21c>
 8006410:	4b3e      	ldr	r3, [pc, #248]	@ (800650c <UART_SetConfig+0x2cc>)
 8006412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006416:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800641a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800641e:	d017      	beq.n	8006450 <UART_SetConfig+0x210>
 8006420:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006424:	d817      	bhi.n	8006456 <UART_SetConfig+0x216>
 8006426:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800642a:	d00b      	beq.n	8006444 <UART_SetConfig+0x204>
 800642c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006430:	d811      	bhi.n	8006456 <UART_SetConfig+0x216>
 8006432:	2b00      	cmp	r3, #0
 8006434:	d003      	beq.n	800643e <UART_SetConfig+0x1fe>
 8006436:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800643a:	d006      	beq.n	800644a <UART_SetConfig+0x20a>
 800643c:	e00b      	b.n	8006456 <UART_SetConfig+0x216>
 800643e:	2300      	movs	r3, #0
 8006440:	77fb      	strb	r3, [r7, #31]
 8006442:	e0a1      	b.n	8006588 <UART_SetConfig+0x348>
 8006444:	2302      	movs	r3, #2
 8006446:	77fb      	strb	r3, [r7, #31]
 8006448:	e09e      	b.n	8006588 <UART_SetConfig+0x348>
 800644a:	2304      	movs	r3, #4
 800644c:	77fb      	strb	r3, [r7, #31]
 800644e:	e09b      	b.n	8006588 <UART_SetConfig+0x348>
 8006450:	2308      	movs	r3, #8
 8006452:	77fb      	strb	r3, [r7, #31]
 8006454:	e098      	b.n	8006588 <UART_SetConfig+0x348>
 8006456:	2310      	movs	r3, #16
 8006458:	77fb      	strb	r3, [r7, #31]
 800645a:	e095      	b.n	8006588 <UART_SetConfig+0x348>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a2f      	ldr	r2, [pc, #188]	@ (8006520 <UART_SetConfig+0x2e0>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d125      	bne.n	80064b2 <UART_SetConfig+0x272>
 8006466:	4b29      	ldr	r3, [pc, #164]	@ (800650c <UART_SetConfig+0x2cc>)
 8006468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800646c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006470:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006474:	d017      	beq.n	80064a6 <UART_SetConfig+0x266>
 8006476:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800647a:	d817      	bhi.n	80064ac <UART_SetConfig+0x26c>
 800647c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006480:	d00b      	beq.n	800649a <UART_SetConfig+0x25a>
 8006482:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006486:	d811      	bhi.n	80064ac <UART_SetConfig+0x26c>
 8006488:	2b00      	cmp	r3, #0
 800648a:	d003      	beq.n	8006494 <UART_SetConfig+0x254>
 800648c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006490:	d006      	beq.n	80064a0 <UART_SetConfig+0x260>
 8006492:	e00b      	b.n	80064ac <UART_SetConfig+0x26c>
 8006494:	2301      	movs	r3, #1
 8006496:	77fb      	strb	r3, [r7, #31]
 8006498:	e076      	b.n	8006588 <UART_SetConfig+0x348>
 800649a:	2302      	movs	r3, #2
 800649c:	77fb      	strb	r3, [r7, #31]
 800649e:	e073      	b.n	8006588 <UART_SetConfig+0x348>
 80064a0:	2304      	movs	r3, #4
 80064a2:	77fb      	strb	r3, [r7, #31]
 80064a4:	e070      	b.n	8006588 <UART_SetConfig+0x348>
 80064a6:	2308      	movs	r3, #8
 80064a8:	77fb      	strb	r3, [r7, #31]
 80064aa:	e06d      	b.n	8006588 <UART_SetConfig+0x348>
 80064ac:	2310      	movs	r3, #16
 80064ae:	77fb      	strb	r3, [r7, #31]
 80064b0:	e06a      	b.n	8006588 <UART_SetConfig+0x348>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a1b      	ldr	r2, [pc, #108]	@ (8006524 <UART_SetConfig+0x2e4>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d138      	bne.n	800652e <UART_SetConfig+0x2ee>
 80064bc:	4b13      	ldr	r3, [pc, #76]	@ (800650c <UART_SetConfig+0x2cc>)
 80064be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064c2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80064c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80064ca:	d017      	beq.n	80064fc <UART_SetConfig+0x2bc>
 80064cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80064d0:	d82a      	bhi.n	8006528 <UART_SetConfig+0x2e8>
 80064d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064d6:	d00b      	beq.n	80064f0 <UART_SetConfig+0x2b0>
 80064d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064dc:	d824      	bhi.n	8006528 <UART_SetConfig+0x2e8>
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <UART_SetConfig+0x2aa>
 80064e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064e6:	d006      	beq.n	80064f6 <UART_SetConfig+0x2b6>
 80064e8:	e01e      	b.n	8006528 <UART_SetConfig+0x2e8>
 80064ea:	2300      	movs	r3, #0
 80064ec:	77fb      	strb	r3, [r7, #31]
 80064ee:	e04b      	b.n	8006588 <UART_SetConfig+0x348>
 80064f0:	2302      	movs	r3, #2
 80064f2:	77fb      	strb	r3, [r7, #31]
 80064f4:	e048      	b.n	8006588 <UART_SetConfig+0x348>
 80064f6:	2304      	movs	r3, #4
 80064f8:	77fb      	strb	r3, [r7, #31]
 80064fa:	e045      	b.n	8006588 <UART_SetConfig+0x348>
 80064fc:	2308      	movs	r3, #8
 80064fe:	77fb      	strb	r3, [r7, #31]
 8006500:	e042      	b.n	8006588 <UART_SetConfig+0x348>
 8006502:	bf00      	nop
 8006504:	efff69f3 	.word	0xefff69f3
 8006508:	40011000 	.word	0x40011000
 800650c:	40023800 	.word	0x40023800
 8006510:	40004400 	.word	0x40004400
 8006514:	40004800 	.word	0x40004800
 8006518:	40004c00 	.word	0x40004c00
 800651c:	40005000 	.word	0x40005000
 8006520:	40011400 	.word	0x40011400
 8006524:	40007800 	.word	0x40007800
 8006528:	2310      	movs	r3, #16
 800652a:	77fb      	strb	r3, [r7, #31]
 800652c:	e02c      	b.n	8006588 <UART_SetConfig+0x348>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a72      	ldr	r2, [pc, #456]	@ (80066fc <UART_SetConfig+0x4bc>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d125      	bne.n	8006584 <UART_SetConfig+0x344>
 8006538:	4b71      	ldr	r3, [pc, #452]	@ (8006700 <UART_SetConfig+0x4c0>)
 800653a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800653e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006542:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006546:	d017      	beq.n	8006578 <UART_SetConfig+0x338>
 8006548:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800654c:	d817      	bhi.n	800657e <UART_SetConfig+0x33e>
 800654e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006552:	d00b      	beq.n	800656c <UART_SetConfig+0x32c>
 8006554:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006558:	d811      	bhi.n	800657e <UART_SetConfig+0x33e>
 800655a:	2b00      	cmp	r3, #0
 800655c:	d003      	beq.n	8006566 <UART_SetConfig+0x326>
 800655e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006562:	d006      	beq.n	8006572 <UART_SetConfig+0x332>
 8006564:	e00b      	b.n	800657e <UART_SetConfig+0x33e>
 8006566:	2300      	movs	r3, #0
 8006568:	77fb      	strb	r3, [r7, #31]
 800656a:	e00d      	b.n	8006588 <UART_SetConfig+0x348>
 800656c:	2302      	movs	r3, #2
 800656e:	77fb      	strb	r3, [r7, #31]
 8006570:	e00a      	b.n	8006588 <UART_SetConfig+0x348>
 8006572:	2304      	movs	r3, #4
 8006574:	77fb      	strb	r3, [r7, #31]
 8006576:	e007      	b.n	8006588 <UART_SetConfig+0x348>
 8006578:	2308      	movs	r3, #8
 800657a:	77fb      	strb	r3, [r7, #31]
 800657c:	e004      	b.n	8006588 <UART_SetConfig+0x348>
 800657e:	2310      	movs	r3, #16
 8006580:	77fb      	strb	r3, [r7, #31]
 8006582:	e001      	b.n	8006588 <UART_SetConfig+0x348>
 8006584:	2310      	movs	r3, #16
 8006586:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	69db      	ldr	r3, [r3, #28]
 800658c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006590:	d15b      	bne.n	800664a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006592:	7ffb      	ldrb	r3, [r7, #31]
 8006594:	2b08      	cmp	r3, #8
 8006596:	d828      	bhi.n	80065ea <UART_SetConfig+0x3aa>
 8006598:	a201      	add	r2, pc, #4	@ (adr r2, 80065a0 <UART_SetConfig+0x360>)
 800659a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659e:	bf00      	nop
 80065a0:	080065c5 	.word	0x080065c5
 80065a4:	080065cd 	.word	0x080065cd
 80065a8:	080065d5 	.word	0x080065d5
 80065ac:	080065eb 	.word	0x080065eb
 80065b0:	080065db 	.word	0x080065db
 80065b4:	080065eb 	.word	0x080065eb
 80065b8:	080065eb 	.word	0x080065eb
 80065bc:	080065eb 	.word	0x080065eb
 80065c0:	080065e3 	.word	0x080065e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065c4:	f7fe f814 	bl	80045f0 <HAL_RCC_GetPCLK1Freq>
 80065c8:	61b8      	str	r0, [r7, #24]
        break;
 80065ca:	e013      	b.n	80065f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065cc:	f7fe f824 	bl	8004618 <HAL_RCC_GetPCLK2Freq>
 80065d0:	61b8      	str	r0, [r7, #24]
        break;
 80065d2:	e00f      	b.n	80065f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065d4:	4b4b      	ldr	r3, [pc, #300]	@ (8006704 <UART_SetConfig+0x4c4>)
 80065d6:	61bb      	str	r3, [r7, #24]
        break;
 80065d8:	e00c      	b.n	80065f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065da:	f7fd ff37 	bl	800444c <HAL_RCC_GetSysClockFreq>
 80065de:	61b8      	str	r0, [r7, #24]
        break;
 80065e0:	e008      	b.n	80065f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065e6:	61bb      	str	r3, [r7, #24]
        break;
 80065e8:	e004      	b.n	80065f4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80065ea:	2300      	movs	r3, #0
 80065ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	77bb      	strb	r3, [r7, #30]
        break;
 80065f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d074      	beq.n	80066e4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	005a      	lsls	r2, r3, #1
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	085b      	lsrs	r3, r3, #1
 8006604:	441a      	add	r2, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	fbb2 f3f3 	udiv	r3, r2, r3
 800660e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	2b0f      	cmp	r3, #15
 8006614:	d916      	bls.n	8006644 <UART_SetConfig+0x404>
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800661c:	d212      	bcs.n	8006644 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	b29b      	uxth	r3, r3
 8006622:	f023 030f 	bic.w	r3, r3, #15
 8006626:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	085b      	lsrs	r3, r3, #1
 800662c:	b29b      	uxth	r3, r3
 800662e:	f003 0307 	and.w	r3, r3, #7
 8006632:	b29a      	uxth	r2, r3
 8006634:	89fb      	ldrh	r3, [r7, #14]
 8006636:	4313      	orrs	r3, r2
 8006638:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	89fa      	ldrh	r2, [r7, #14]
 8006640:	60da      	str	r2, [r3, #12]
 8006642:	e04f      	b.n	80066e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	77bb      	strb	r3, [r7, #30]
 8006648:	e04c      	b.n	80066e4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800664a:	7ffb      	ldrb	r3, [r7, #31]
 800664c:	2b08      	cmp	r3, #8
 800664e:	d828      	bhi.n	80066a2 <UART_SetConfig+0x462>
 8006650:	a201      	add	r2, pc, #4	@ (adr r2, 8006658 <UART_SetConfig+0x418>)
 8006652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006656:	bf00      	nop
 8006658:	0800667d 	.word	0x0800667d
 800665c:	08006685 	.word	0x08006685
 8006660:	0800668d 	.word	0x0800668d
 8006664:	080066a3 	.word	0x080066a3
 8006668:	08006693 	.word	0x08006693
 800666c:	080066a3 	.word	0x080066a3
 8006670:	080066a3 	.word	0x080066a3
 8006674:	080066a3 	.word	0x080066a3
 8006678:	0800669b 	.word	0x0800669b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800667c:	f7fd ffb8 	bl	80045f0 <HAL_RCC_GetPCLK1Freq>
 8006680:	61b8      	str	r0, [r7, #24]
        break;
 8006682:	e013      	b.n	80066ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006684:	f7fd ffc8 	bl	8004618 <HAL_RCC_GetPCLK2Freq>
 8006688:	61b8      	str	r0, [r7, #24]
        break;
 800668a:	e00f      	b.n	80066ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800668c:	4b1d      	ldr	r3, [pc, #116]	@ (8006704 <UART_SetConfig+0x4c4>)
 800668e:	61bb      	str	r3, [r7, #24]
        break;
 8006690:	e00c      	b.n	80066ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006692:	f7fd fedb 	bl	800444c <HAL_RCC_GetSysClockFreq>
 8006696:	61b8      	str	r0, [r7, #24]
        break;
 8006698:	e008      	b.n	80066ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800669a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800669e:	61bb      	str	r3, [r7, #24]
        break;
 80066a0:	e004      	b.n	80066ac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80066a2:	2300      	movs	r3, #0
 80066a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	77bb      	strb	r3, [r7, #30]
        break;
 80066aa:	bf00      	nop
    }

    if (pclk != 0U)
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d018      	beq.n	80066e4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	085a      	lsrs	r2, r3, #1
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	441a      	add	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	2b0f      	cmp	r3, #15
 80066ca:	d909      	bls.n	80066e0 <UART_SetConfig+0x4a0>
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066d2:	d205      	bcs.n	80066e0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	b29a      	uxth	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	60da      	str	r2, [r3, #12]
 80066de:	e001      	b.n	80066e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80066f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3720      	adds	r7, #32
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	40007c00 	.word	0x40007c00
 8006700:	40023800 	.word	0x40023800
 8006704:	00f42400 	.word	0x00f42400

08006708 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006714:	f003 0308 	and.w	r3, r3, #8
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00a      	beq.n	8006732 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	430a      	orrs	r2, r1
 8006730:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00a      	beq.n	8006754 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	430a      	orrs	r2, r1
 8006752:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006758:	f003 0302 	and.w	r3, r3, #2
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00a      	beq.n	8006776 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	430a      	orrs	r2, r1
 8006774:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800677a:	f003 0304 	and.w	r3, r3, #4
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00a      	beq.n	8006798 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800679c:	f003 0310 	and.w	r3, r3, #16
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00a      	beq.n	80067ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	430a      	orrs	r2, r1
 80067b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067be:	f003 0320 	and.w	r3, r3, #32
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00a      	beq.n	80067dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	430a      	orrs	r2, r1
 80067da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d01a      	beq.n	800681e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	430a      	orrs	r2, r1
 80067fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006802:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006806:	d10a      	bne.n	800681e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	430a      	orrs	r2, r1
 800681c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00a      	beq.n	8006840 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	430a      	orrs	r2, r1
 800683e:	605a      	str	r2, [r3, #4]
  }
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b098      	sub	sp, #96	@ 0x60
 8006850:	af02      	add	r7, sp, #8
 8006852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800685c:	f7fb fa24 	bl	8001ca8 <HAL_GetTick>
 8006860:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 0308 	and.w	r3, r3, #8
 800686c:	2b08      	cmp	r3, #8
 800686e:	d12e      	bne.n	80068ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006870:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006874:	9300      	str	r3, [sp, #0]
 8006876:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006878:	2200      	movs	r2, #0
 800687a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f88c 	bl	800699c <UART_WaitOnFlagUntilTimeout>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d021      	beq.n	80068ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006892:	e853 3f00 	ldrex	r3, [r3]
 8006896:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800689a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800689e:	653b      	str	r3, [r7, #80]	@ 0x50
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	461a      	mov	r2, r3
 80068a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80068aa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068b0:	e841 2300 	strex	r3, r2, [r1]
 80068b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1e6      	bne.n	800688a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2220      	movs	r2, #32
 80068c0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e062      	b.n	8006994 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0304 	and.w	r3, r3, #4
 80068d8:	2b04      	cmp	r3, #4
 80068da:	d149      	bne.n	8006970 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068e4:	2200      	movs	r2, #0
 80068e6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f856 	bl	800699c <UART_WaitOnFlagUntilTimeout>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d03c      	beq.n	8006970 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fe:	e853 3f00 	ldrex	r3, [r3]
 8006902:	623b      	str	r3, [r7, #32]
   return(result);
 8006904:	6a3b      	ldr	r3, [r7, #32]
 8006906:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800690a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	461a      	mov	r2, r3
 8006912:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006914:	633b      	str	r3, [r7, #48]	@ 0x30
 8006916:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006918:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800691a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800691c:	e841 2300 	strex	r3, r2, [r1]
 8006920:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1e6      	bne.n	80068f6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3308      	adds	r3, #8
 800692e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	e853 3f00 	ldrex	r3, [r3]
 8006936:	60fb      	str	r3, [r7, #12]
   return(result);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f023 0301 	bic.w	r3, r3, #1
 800693e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	3308      	adds	r3, #8
 8006946:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006948:	61fa      	str	r2, [r7, #28]
 800694a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694c:	69b9      	ldr	r1, [r7, #24]
 800694e:	69fa      	ldr	r2, [r7, #28]
 8006950:	e841 2300 	strex	r3, r2, [r1]
 8006954:	617b      	str	r3, [r7, #20]
   return(result);
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1e5      	bne.n	8006928 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2220      	movs	r2, #32
 8006960:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e011      	b.n	8006994 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2220      	movs	r2, #32
 8006974:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2220      	movs	r2, #32
 800697a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3758      	adds	r7, #88	@ 0x58
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	603b      	str	r3, [r7, #0]
 80069a8:	4613      	mov	r3, r2
 80069aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069ac:	e04f      	b.n	8006a4e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069b4:	d04b      	beq.n	8006a4e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069b6:	f7fb f977 	bl	8001ca8 <HAL_GetTick>
 80069ba:	4602      	mov	r2, r0
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	69ba      	ldr	r2, [r7, #24]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d302      	bcc.n	80069cc <UART_WaitOnFlagUntilTimeout+0x30>
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d101      	bne.n	80069d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e04e      	b.n	8006a6e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0304 	and.w	r3, r3, #4
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d037      	beq.n	8006a4e <UART_WaitOnFlagUntilTimeout+0xb2>
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	2b80      	cmp	r3, #128	@ 0x80
 80069e2:	d034      	beq.n	8006a4e <UART_WaitOnFlagUntilTimeout+0xb2>
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	2b40      	cmp	r3, #64	@ 0x40
 80069e8:	d031      	beq.n	8006a4e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	69db      	ldr	r3, [r3, #28]
 80069f0:	f003 0308 	and.w	r3, r3, #8
 80069f4:	2b08      	cmp	r3, #8
 80069f6:	d110      	bne.n	8006a1a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2208      	movs	r2, #8
 80069fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 f838 	bl	8006a76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2208      	movs	r2, #8
 8006a0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e029      	b.n	8006a6e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	69db      	ldr	r3, [r3, #28]
 8006a20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a28:	d111      	bne.n	8006a4e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f000 f81e 	bl	8006a76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2220      	movs	r2, #32
 8006a3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e00f      	b.n	8006a6e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	69da      	ldr	r2, [r3, #28]
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	4013      	ands	r3, r2
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	bf0c      	ite	eq
 8006a5e:	2301      	moveq	r3, #1
 8006a60:	2300      	movne	r3, #0
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	461a      	mov	r2, r3
 8006a66:	79fb      	ldrb	r3, [r7, #7]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d0a0      	beq.n	80069ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b095      	sub	sp, #84	@ 0x54
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a86:	e853 3f00 	ldrex	r3, [r3]
 8006a8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	461a      	mov	r2, r3
 8006a9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a9e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006aa2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006aa4:	e841 2300 	strex	r3, r2, [r1]
 8006aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1e6      	bne.n	8006a7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	3308      	adds	r3, #8
 8006ab6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	e853 3f00 	ldrex	r3, [r3]
 8006abe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	f023 0301 	bic.w	r3, r3, #1
 8006ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3308      	adds	r3, #8
 8006ace:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ad0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ad6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ad8:	e841 2300 	strex	r3, r2, [r1]
 8006adc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1e5      	bne.n	8006ab0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d118      	bne.n	8006b1e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	e853 3f00 	ldrex	r3, [r3]
 8006af8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	f023 0310 	bic.w	r3, r3, #16
 8006b00:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	461a      	mov	r2, r3
 8006b08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b0a:	61bb      	str	r3, [r7, #24]
 8006b0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0e:	6979      	ldr	r1, [r7, #20]
 8006b10:	69ba      	ldr	r2, [r7, #24]
 8006b12:	e841 2300 	strex	r3, r2, [r1]
 8006b16:	613b      	str	r3, [r7, #16]
   return(result);
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1e6      	bne.n	8006aec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2220      	movs	r2, #32
 8006b22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006b32:	bf00      	nop
 8006b34:	3754      	adds	r7, #84	@ 0x54
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
	...

08006b40 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006b40:	b5b0      	push	{r4, r5, r7, lr}
 8006b42:	b08c      	sub	sp, #48	@ 0x30
 8006b44:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 8006b46:	4b8f      	ldr	r3, [pc, #572]	@ (8006d84 <MX_LWIP_Init+0x244>)
 8006b48:	220a      	movs	r2, #10
 8006b4a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 8006b4c:	4b8d      	ldr	r3, [pc, #564]	@ (8006d84 <MX_LWIP_Init+0x244>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8006b52:	4b8c      	ldr	r3, [pc, #560]	@ (8006d84 <MX_LWIP_Init+0x244>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 16;
 8006b58:	4b8a      	ldr	r3, [pc, #552]	@ (8006d84 <MX_LWIP_Init+0x244>)
 8006b5a:	2210      	movs	r2, #16
 8006b5c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8006b5e:	4b8a      	ldr	r3, [pc, #552]	@ (8006d88 <MX_LWIP_Init+0x248>)
 8006b60:	22ff      	movs	r2, #255	@ 0xff
 8006b62:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8006b64:	4b88      	ldr	r3, [pc, #544]	@ (8006d88 <MX_LWIP_Init+0x248>)
 8006b66:	22ff      	movs	r2, #255	@ 0xff
 8006b68:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8006b6a:	4b87      	ldr	r3, [pc, #540]	@ (8006d88 <MX_LWIP_Init+0x248>)
 8006b6c:	22ff      	movs	r2, #255	@ 0xff
 8006b6e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8006b70:	4b85      	ldr	r3, [pc, #532]	@ (8006d88 <MX_LWIP_Init+0x248>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 8006b76:	4b85      	ldr	r3, [pc, #532]	@ (8006d8c <MX_LWIP_Init+0x24c>)
 8006b78:	220a      	movs	r2, #10
 8006b7a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8006b7c:	4b83      	ldr	r3, [pc, #524]	@ (8006d8c <MX_LWIP_Init+0x24c>)
 8006b7e:	2200      	movs	r2, #0
 8006b80:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8006b82:	4b82      	ldr	r3, [pc, #520]	@ (8006d8c <MX_LWIP_Init+0x24c>)
 8006b84:	2200      	movs	r2, #0
 8006b86:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 50;
 8006b88:	4b80      	ldr	r3, [pc, #512]	@ (8006d8c <MX_LWIP_Init+0x24c>)
 8006b8a:	2232      	movs	r2, #50	@ 0x32
 8006b8c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8006b8e:	2100      	movs	r1, #0
 8006b90:	2000      	movs	r0, #0
 8006b92:	f004 f813 	bl	800abbc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8006b96:	4b7b      	ldr	r3, [pc, #492]	@ (8006d84 <MX_LWIP_Init+0x244>)
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	061a      	lsls	r2, r3, #24
 8006b9c:	4b79      	ldr	r3, [pc, #484]	@ (8006d84 <MX_LWIP_Init+0x244>)
 8006b9e:	785b      	ldrb	r3, [r3, #1]
 8006ba0:	041b      	lsls	r3, r3, #16
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	4b77      	ldr	r3, [pc, #476]	@ (8006d84 <MX_LWIP_Init+0x244>)
 8006ba6:	789b      	ldrb	r3, [r3, #2]
 8006ba8:	021b      	lsls	r3, r3, #8
 8006baa:	4313      	orrs	r3, r2
 8006bac:	4a75      	ldr	r2, [pc, #468]	@ (8006d84 <MX_LWIP_Init+0x244>)
 8006bae:	78d2      	ldrb	r2, [r2, #3]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	061a      	lsls	r2, r3, #24
 8006bb4:	4b73      	ldr	r3, [pc, #460]	@ (8006d84 <MX_LWIP_Init+0x244>)
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	0619      	lsls	r1, r3, #24
 8006bba:	4b72      	ldr	r3, [pc, #456]	@ (8006d84 <MX_LWIP_Init+0x244>)
 8006bbc:	785b      	ldrb	r3, [r3, #1]
 8006bbe:	041b      	lsls	r3, r3, #16
 8006bc0:	4319      	orrs	r1, r3
 8006bc2:	4b70      	ldr	r3, [pc, #448]	@ (8006d84 <MX_LWIP_Init+0x244>)
 8006bc4:	789b      	ldrb	r3, [r3, #2]
 8006bc6:	021b      	lsls	r3, r3, #8
 8006bc8:	430b      	orrs	r3, r1
 8006bca:	496e      	ldr	r1, [pc, #440]	@ (8006d84 <MX_LWIP_Init+0x244>)
 8006bcc:	78c9      	ldrb	r1, [r1, #3]
 8006bce:	430b      	orrs	r3, r1
 8006bd0:	021b      	lsls	r3, r3, #8
 8006bd2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006bd6:	431a      	orrs	r2, r3
 8006bd8:	4b6a      	ldr	r3, [pc, #424]	@ (8006d84 <MX_LWIP_Init+0x244>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	0619      	lsls	r1, r3, #24
 8006bde:	4b69      	ldr	r3, [pc, #420]	@ (8006d84 <MX_LWIP_Init+0x244>)
 8006be0:	785b      	ldrb	r3, [r3, #1]
 8006be2:	041b      	lsls	r3, r3, #16
 8006be4:	4319      	orrs	r1, r3
 8006be6:	4b67      	ldr	r3, [pc, #412]	@ (8006d84 <MX_LWIP_Init+0x244>)
 8006be8:	789b      	ldrb	r3, [r3, #2]
 8006bea:	021b      	lsls	r3, r3, #8
 8006bec:	430b      	orrs	r3, r1
 8006bee:	4965      	ldr	r1, [pc, #404]	@ (8006d84 <MX_LWIP_Init+0x244>)
 8006bf0:	78c9      	ldrb	r1, [r1, #3]
 8006bf2:	430b      	orrs	r3, r1
 8006bf4:	0a1b      	lsrs	r3, r3, #8
 8006bf6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	4b61      	ldr	r3, [pc, #388]	@ (8006d84 <MX_LWIP_Init+0x244>)
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	0619      	lsls	r1, r3, #24
 8006c02:	4b60      	ldr	r3, [pc, #384]	@ (8006d84 <MX_LWIP_Init+0x244>)
 8006c04:	785b      	ldrb	r3, [r3, #1]
 8006c06:	041b      	lsls	r3, r3, #16
 8006c08:	4319      	orrs	r1, r3
 8006c0a:	4b5e      	ldr	r3, [pc, #376]	@ (8006d84 <MX_LWIP_Init+0x244>)
 8006c0c:	789b      	ldrb	r3, [r3, #2]
 8006c0e:	021b      	lsls	r3, r3, #8
 8006c10:	430b      	orrs	r3, r1
 8006c12:	495c      	ldr	r1, [pc, #368]	@ (8006d84 <MX_LWIP_Init+0x244>)
 8006c14:	78c9      	ldrb	r1, [r1, #3]
 8006c16:	430b      	orrs	r3, r1
 8006c18:	0e1b      	lsrs	r3, r3, #24
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	4a5c      	ldr	r2, [pc, #368]	@ (8006d90 <MX_LWIP_Init+0x250>)
 8006c1e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006c20:	4b59      	ldr	r3, [pc, #356]	@ (8006d88 <MX_LWIP_Init+0x248>)
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	061a      	lsls	r2, r3, #24
 8006c26:	4b58      	ldr	r3, [pc, #352]	@ (8006d88 <MX_LWIP_Init+0x248>)
 8006c28:	785b      	ldrb	r3, [r3, #1]
 8006c2a:	041b      	lsls	r3, r3, #16
 8006c2c:	431a      	orrs	r2, r3
 8006c2e:	4b56      	ldr	r3, [pc, #344]	@ (8006d88 <MX_LWIP_Init+0x248>)
 8006c30:	789b      	ldrb	r3, [r3, #2]
 8006c32:	021b      	lsls	r3, r3, #8
 8006c34:	4313      	orrs	r3, r2
 8006c36:	4a54      	ldr	r2, [pc, #336]	@ (8006d88 <MX_LWIP_Init+0x248>)
 8006c38:	78d2      	ldrb	r2, [r2, #3]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	061a      	lsls	r2, r3, #24
 8006c3e:	4b52      	ldr	r3, [pc, #328]	@ (8006d88 <MX_LWIP_Init+0x248>)
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	0619      	lsls	r1, r3, #24
 8006c44:	4b50      	ldr	r3, [pc, #320]	@ (8006d88 <MX_LWIP_Init+0x248>)
 8006c46:	785b      	ldrb	r3, [r3, #1]
 8006c48:	041b      	lsls	r3, r3, #16
 8006c4a:	4319      	orrs	r1, r3
 8006c4c:	4b4e      	ldr	r3, [pc, #312]	@ (8006d88 <MX_LWIP_Init+0x248>)
 8006c4e:	789b      	ldrb	r3, [r3, #2]
 8006c50:	021b      	lsls	r3, r3, #8
 8006c52:	430b      	orrs	r3, r1
 8006c54:	494c      	ldr	r1, [pc, #304]	@ (8006d88 <MX_LWIP_Init+0x248>)
 8006c56:	78c9      	ldrb	r1, [r1, #3]
 8006c58:	430b      	orrs	r3, r1
 8006c5a:	021b      	lsls	r3, r3, #8
 8006c5c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006c60:	431a      	orrs	r2, r3
 8006c62:	4b49      	ldr	r3, [pc, #292]	@ (8006d88 <MX_LWIP_Init+0x248>)
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	0619      	lsls	r1, r3, #24
 8006c68:	4b47      	ldr	r3, [pc, #284]	@ (8006d88 <MX_LWIP_Init+0x248>)
 8006c6a:	785b      	ldrb	r3, [r3, #1]
 8006c6c:	041b      	lsls	r3, r3, #16
 8006c6e:	4319      	orrs	r1, r3
 8006c70:	4b45      	ldr	r3, [pc, #276]	@ (8006d88 <MX_LWIP_Init+0x248>)
 8006c72:	789b      	ldrb	r3, [r3, #2]
 8006c74:	021b      	lsls	r3, r3, #8
 8006c76:	430b      	orrs	r3, r1
 8006c78:	4943      	ldr	r1, [pc, #268]	@ (8006d88 <MX_LWIP_Init+0x248>)
 8006c7a:	78c9      	ldrb	r1, [r1, #3]
 8006c7c:	430b      	orrs	r3, r1
 8006c7e:	0a1b      	lsrs	r3, r3, #8
 8006c80:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006c84:	431a      	orrs	r2, r3
 8006c86:	4b40      	ldr	r3, [pc, #256]	@ (8006d88 <MX_LWIP_Init+0x248>)
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	0619      	lsls	r1, r3, #24
 8006c8c:	4b3e      	ldr	r3, [pc, #248]	@ (8006d88 <MX_LWIP_Init+0x248>)
 8006c8e:	785b      	ldrb	r3, [r3, #1]
 8006c90:	041b      	lsls	r3, r3, #16
 8006c92:	4319      	orrs	r1, r3
 8006c94:	4b3c      	ldr	r3, [pc, #240]	@ (8006d88 <MX_LWIP_Init+0x248>)
 8006c96:	789b      	ldrb	r3, [r3, #2]
 8006c98:	021b      	lsls	r3, r3, #8
 8006c9a:	430b      	orrs	r3, r1
 8006c9c:	493a      	ldr	r1, [pc, #232]	@ (8006d88 <MX_LWIP_Init+0x248>)
 8006c9e:	78c9      	ldrb	r1, [r1, #3]
 8006ca0:	430b      	orrs	r3, r1
 8006ca2:	0e1b      	lsrs	r3, r3, #24
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	4a3b      	ldr	r2, [pc, #236]	@ (8006d94 <MX_LWIP_Init+0x254>)
 8006ca8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8006caa:	4b38      	ldr	r3, [pc, #224]	@ (8006d8c <MX_LWIP_Init+0x24c>)
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	061a      	lsls	r2, r3, #24
 8006cb0:	4b36      	ldr	r3, [pc, #216]	@ (8006d8c <MX_LWIP_Init+0x24c>)
 8006cb2:	785b      	ldrb	r3, [r3, #1]
 8006cb4:	041b      	lsls	r3, r3, #16
 8006cb6:	431a      	orrs	r2, r3
 8006cb8:	4b34      	ldr	r3, [pc, #208]	@ (8006d8c <MX_LWIP_Init+0x24c>)
 8006cba:	789b      	ldrb	r3, [r3, #2]
 8006cbc:	021b      	lsls	r3, r3, #8
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	4a32      	ldr	r2, [pc, #200]	@ (8006d8c <MX_LWIP_Init+0x24c>)
 8006cc2:	78d2      	ldrb	r2, [r2, #3]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	061a      	lsls	r2, r3, #24
 8006cc8:	4b30      	ldr	r3, [pc, #192]	@ (8006d8c <MX_LWIP_Init+0x24c>)
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	0619      	lsls	r1, r3, #24
 8006cce:	4b2f      	ldr	r3, [pc, #188]	@ (8006d8c <MX_LWIP_Init+0x24c>)
 8006cd0:	785b      	ldrb	r3, [r3, #1]
 8006cd2:	041b      	lsls	r3, r3, #16
 8006cd4:	4319      	orrs	r1, r3
 8006cd6:	4b2d      	ldr	r3, [pc, #180]	@ (8006d8c <MX_LWIP_Init+0x24c>)
 8006cd8:	789b      	ldrb	r3, [r3, #2]
 8006cda:	021b      	lsls	r3, r3, #8
 8006cdc:	430b      	orrs	r3, r1
 8006cde:	492b      	ldr	r1, [pc, #172]	@ (8006d8c <MX_LWIP_Init+0x24c>)
 8006ce0:	78c9      	ldrb	r1, [r1, #3]
 8006ce2:	430b      	orrs	r3, r1
 8006ce4:	021b      	lsls	r3, r3, #8
 8006ce6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006cea:	431a      	orrs	r2, r3
 8006cec:	4b27      	ldr	r3, [pc, #156]	@ (8006d8c <MX_LWIP_Init+0x24c>)
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	0619      	lsls	r1, r3, #24
 8006cf2:	4b26      	ldr	r3, [pc, #152]	@ (8006d8c <MX_LWIP_Init+0x24c>)
 8006cf4:	785b      	ldrb	r3, [r3, #1]
 8006cf6:	041b      	lsls	r3, r3, #16
 8006cf8:	4319      	orrs	r1, r3
 8006cfa:	4b24      	ldr	r3, [pc, #144]	@ (8006d8c <MX_LWIP_Init+0x24c>)
 8006cfc:	789b      	ldrb	r3, [r3, #2]
 8006cfe:	021b      	lsls	r3, r3, #8
 8006d00:	430b      	orrs	r3, r1
 8006d02:	4922      	ldr	r1, [pc, #136]	@ (8006d8c <MX_LWIP_Init+0x24c>)
 8006d04:	78c9      	ldrb	r1, [r1, #3]
 8006d06:	430b      	orrs	r3, r1
 8006d08:	0a1b      	lsrs	r3, r3, #8
 8006d0a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006d0e:	431a      	orrs	r2, r3
 8006d10:	4b1e      	ldr	r3, [pc, #120]	@ (8006d8c <MX_LWIP_Init+0x24c>)
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	0619      	lsls	r1, r3, #24
 8006d16:	4b1d      	ldr	r3, [pc, #116]	@ (8006d8c <MX_LWIP_Init+0x24c>)
 8006d18:	785b      	ldrb	r3, [r3, #1]
 8006d1a:	041b      	lsls	r3, r3, #16
 8006d1c:	4319      	orrs	r1, r3
 8006d1e:	4b1b      	ldr	r3, [pc, #108]	@ (8006d8c <MX_LWIP_Init+0x24c>)
 8006d20:	789b      	ldrb	r3, [r3, #2]
 8006d22:	021b      	lsls	r3, r3, #8
 8006d24:	430b      	orrs	r3, r1
 8006d26:	4919      	ldr	r1, [pc, #100]	@ (8006d8c <MX_LWIP_Init+0x24c>)
 8006d28:	78c9      	ldrb	r1, [r1, #3]
 8006d2a:	430b      	orrs	r3, r1
 8006d2c:	0e1b      	lsrs	r3, r3, #24
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	4a19      	ldr	r2, [pc, #100]	@ (8006d98 <MX_LWIP_Init+0x258>)
 8006d32:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8006d34:	4b19      	ldr	r3, [pc, #100]	@ (8006d9c <MX_LWIP_Init+0x25c>)
 8006d36:	9302      	str	r3, [sp, #8]
 8006d38:	4b19      	ldr	r3, [pc, #100]	@ (8006da0 <MX_LWIP_Init+0x260>)
 8006d3a:	9301      	str	r3, [sp, #4]
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	4b15      	ldr	r3, [pc, #84]	@ (8006d98 <MX_LWIP_Init+0x258>)
 8006d42:	4a14      	ldr	r2, [pc, #80]	@ (8006d94 <MX_LWIP_Init+0x254>)
 8006d44:	4912      	ldr	r1, [pc, #72]	@ (8006d90 <MX_LWIP_Init+0x250>)
 8006d46:	4817      	ldr	r0, [pc, #92]	@ (8006da4 <MX_LWIP_Init+0x264>)
 8006d48:	f004 fd0e 	bl	800b768 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006d4c:	4815      	ldr	r0, [pc, #84]	@ (8006da4 <MX_LWIP_Init+0x264>)
 8006d4e:	f004 febd 	bl	800bacc <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8006d52:	4814      	ldr	r0, [pc, #80]	@ (8006da4 <MX_LWIP_Init+0x264>)
 8006d54:	f004 feca 	bl	800baec <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8006d58:	4913      	ldr	r1, [pc, #76]	@ (8006da8 <MX_LWIP_Init+0x268>)
 8006d5a:	4812      	ldr	r0, [pc, #72]	@ (8006da4 <MX_LWIP_Init+0x264>)
 8006d5c:	f004 ffc8 	bl	800bcf0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8006d60:	4b12      	ldr	r3, [pc, #72]	@ (8006dac <MX_LWIP_Init+0x26c>)
 8006d62:	1d3c      	adds	r4, r7, #4
 8006d64:	461d      	mov	r5, r3
 8006d66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006d6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8006d72:	1d3b      	adds	r3, r7, #4
 8006d74:	490b      	ldr	r1, [pc, #44]	@ (8006da4 <MX_LWIP_Init+0x264>)
 8006d76:	4618      	mov	r0, r3
 8006d78:	f000 fdcb 	bl	8007912 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006d7c:	bf00      	nop
 8006d7e:	3720      	adds	r7, #32
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bdb0      	pop	{r4, r5, r7, pc}
 8006d84:	20001048 	.word	0x20001048
 8006d88:	2000104c 	.word	0x2000104c
 8006d8c:	20001050 	.word	0x20001050
 8006d90:	2000103c 	.word	0x2000103c
 8006d94:	20001040 	.word	0x20001040
 8006d98:	20001044 	.word	0x20001044
 8006d9c:	0800aaf9 	.word	0x0800aaf9
 8006da0:	08007349 	.word	0x08007349
 8006da4:	20001008 	.word	0x20001008
 8006da8:	08006db1 	.word	0x08006db1
 8006dac:	08015ac0 	.word	0x08015ac0

08006db0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b087      	sub	sp, #28
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8006dd6:	2320      	movs	r3, #32
 8006dd8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006dda:	f3bf 8f4f 	dsb	sy
}
 8006dde:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8006de0:	e00b      	b.n	8006dfa <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8006de2:	4a0d      	ldr	r2, [pc, #52]	@ (8006e18 <SCB_InvalidateDCache_by_Addr+0x54>)
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	4413      	add	r3, r2
 8006df0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	dcf0      	bgt.n	8006de2 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8006e00:	f3bf 8f4f 	dsb	sy
}
 8006e04:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006e06:	f3bf 8f6f 	isb	sy
}
 8006e0a:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8006e0c:	bf00      	nop
 8006e0e:	371c      	adds	r7, #28
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr
 8006e18:	e000ed00 	.word	0xe000ed00

08006e1c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8006e24:	4b04      	ldr	r3, [pc, #16]	@ (8006e38 <HAL_ETH_RxCpltCallback+0x1c>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f000 fefb 	bl	8007c24 <osSemaphoreRelease>
}
 8006e2e:	bf00      	nop
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	200059e0 	.word	0x200059e0

08006e3c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8006e44:	4b04      	ldr	r3, [pc, #16]	@ (8006e58 <HAL_ETH_TxCpltCallback+0x1c>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f000 feeb 	bl	8007c24 <osSemaphoreRelease>
}
 8006e4e:	bf00      	nop
 8006e50:	3708      	adds	r7, #8
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	200059e4 	.word	0x200059e4

08006e5c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7fb fffa 	bl	8002e5e <HAL_ETH_GetDMAError>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e70:	2b80      	cmp	r3, #128	@ 0x80
 8006e72:	d104      	bne.n	8006e7e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8006e74:	4b04      	ldr	r3, [pc, #16]	@ (8006e88 <HAL_ETH_ErrorCallback+0x2c>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 fed3 	bl	8007c24 <osSemaphoreRelease>
  }
}
 8006e7e:	bf00      	nop
 8006e80:	3708      	adds	r7, #8
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	200059e0 	.word	0x200059e0

08006e8c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006e8c:	b5b0      	push	{r4, r5, r7, lr}
 8006e8e:	b0b4      	sub	sp, #208	@ 0xd0
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8006e94:	2300      	movs	r3, #0
 8006e96:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
  uint32_t duplex, speed = 0;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  int32_t PHYLinkState = 0;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  ETH_MACConfigTypeDef MACConf = {0};
 8006ea6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006eaa:	2264      	movs	r2, #100	@ 0x64
 8006eac:	2100      	movs	r1, #0
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f00d ff3d 	bl	8014d2e <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006eb4:	4b9f      	ldr	r3, [pc, #636]	@ (8007134 <low_level_init+0x2a8>)
 8006eb6:	4aa0      	ldr	r2, [pc, #640]	@ (8007138 <low_level_init+0x2ac>)
 8006eb8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  MACAddr[1] = 0x80;
 8006ec0:	2380      	movs	r3, #128	@ 0x80
 8006ec2:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
  MACAddr[2] = 0xE1;
 8006ec6:	23e1      	movs	r3, #225	@ 0xe1
 8006ec8:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
  MACAddr[3] = 0x00;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  MACAddr[4] = 0x00;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  MACAddr[5] = 0x00;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
  heth.Init.MACAddr = &MACAddr[0];
 8006ede:	4a95      	ldr	r2, [pc, #596]	@ (8007134 <low_level_init+0x2a8>)
 8006ee0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006ee4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006ee6:	4b93      	ldr	r3, [pc, #588]	@ (8007134 <low_level_init+0x2a8>)
 8006ee8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006eec:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8006eee:	4b91      	ldr	r3, [pc, #580]	@ (8007134 <low_level_init+0x2a8>)
 8006ef0:	4a92      	ldr	r2, [pc, #584]	@ (800713c <low_level_init+0x2b0>)
 8006ef2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006ef4:	4b8f      	ldr	r3, [pc, #572]	@ (8007134 <low_level_init+0x2a8>)
 8006ef6:	4a92      	ldr	r2, [pc, #584]	@ (8007140 <low_level_init+0x2b4>)
 8006ef8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8006efa:	4b8e      	ldr	r3, [pc, #568]	@ (8007134 <low_level_init+0x2a8>)
 8006efc:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8006f00:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006f02:	488c      	ldr	r0, [pc, #560]	@ (8007134 <low_level_init+0x2a8>)
 8006f04:	f7fb f962 	bl	80021cc <HAL_ETH_Init>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006f0e:	2238      	movs	r2, #56	@ 0x38
 8006f10:	2100      	movs	r1, #0
 8006f12:	488c      	ldr	r0, [pc, #560]	@ (8007144 <low_level_init+0x2b8>)
 8006f14:	f00d ff0b 	bl	8014d2e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006f18:	4b8a      	ldr	r3, [pc, #552]	@ (8007144 <low_level_init+0x2b8>)
 8006f1a:	2221      	movs	r2, #33	@ 0x21
 8006f1c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8006f1e:	4b89      	ldr	r3, [pc, #548]	@ (8007144 <low_level_init+0x2b8>)
 8006f20:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8006f24:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8006f26:	4b87      	ldr	r3, [pc, #540]	@ (8007144 <low_level_init+0x2b8>)
 8006f28:	2200      	movs	r2, #0
 8006f2a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8006f2c:	4886      	ldr	r0, [pc, #536]	@ (8007148 <low_level_init+0x2bc>)
 8006f2e:	f004 fad5 	bl	800b4dc <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2206      	movs	r2, #6
 8006f36:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006f3a:	4b7e      	ldr	r3, [pc, #504]	@ (8007134 <low_level_init+0x2a8>)
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	781a      	ldrb	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006f46:	4b7b      	ldr	r3, [pc, #492]	@ (8007134 <low_level_init+0x2a8>)
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	785a      	ldrb	r2, [r3, #1]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006f52:	4b78      	ldr	r3, [pc, #480]	@ (8007134 <low_level_init+0x2a8>)
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	789a      	ldrb	r2, [r3, #2]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006f5e:	4b75      	ldr	r3, [pc, #468]	@ (8007134 <low_level_init+0x2a8>)
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	78da      	ldrb	r2, [r3, #3]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006f6a:	4b72      	ldr	r3, [pc, #456]	@ (8007134 <low_level_init+0x2a8>)
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	791a      	ldrb	r2, [r3, #4]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006f76:	4b6f      	ldr	r3, [pc, #444]	@ (8007134 <low_level_init+0x2a8>)
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	795a      	ldrb	r2, [r3, #5]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8006f88:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006f90:	f043 030a 	orr.w	r3, r3, #10
 8006f94:	b2da      	uxtb	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	653b      	str	r3, [r7, #80]	@ 0x50
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8006fa4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006fa8:	2101      	movs	r1, #1
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 fdba 	bl	8007b24 <osSemaphoreCreate>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	4a66      	ldr	r2, [pc, #408]	@ (800714c <low_level_init+0x2c0>)
 8006fb4:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fba:	2300      	movs	r3, #0
 8006fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 8006fbe:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8006fc2:	2101      	movs	r1, #1
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f000 fdad 	bl	8007b24 <osSemaphoreCreate>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	4a60      	ldr	r2, [pc, #384]	@ (8007150 <low_level_init+0x2c4>)
 8006fce:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8006fd0:	4b5e      	ldr	r3, [pc, #376]	@ (800714c <low_level_init+0x2c0>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 fdd6 	bl	8007b88 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 8006fdc:	4b5c      	ldr	r3, [pc, #368]	@ (8007150 <low_level_init+0x2c4>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f000 fdd0 	bl	8007b88 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8006fe8:	4b5a      	ldr	r3, [pc, #360]	@ (8007154 <low_level_init+0x2c8>)
 8006fea:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8006fee:	461d      	mov	r5, r3
 8006ff0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ff4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006ff8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8006ffc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007000:	6879      	ldr	r1, [r7, #4]
 8007002:	4618      	mov	r0, r3
 8007004:	f000 fc85 	bl	8007912 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8007008:	4953      	ldr	r1, [pc, #332]	@ (8007158 <low_level_init+0x2cc>)
 800700a:	4854      	ldr	r0, [pc, #336]	@ (800715c <low_level_init+0x2d0>)
 800700c:	f7fa fd25 	bl	8001a5a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8007010:	4852      	ldr	r0, [pc, #328]	@ (800715c <low_level_init+0x2d0>)
 8007012:	f7fa fd54 	bl	8001abe <LAN8742_Init>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d006      	beq.n	800702a <low_level_init+0x19e>
  {
    netif_set_link_down(netif);
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f004 fe37 	bl	800bc90 <netif_set_link_down>
    netif_set_down(netif);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f004 fdce 	bl	800bbc4 <netif_set_down>
 8007028:	e081      	b.n	800712e <low_level_init+0x2a2>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800702a:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 800702e:	2b00      	cmp	r3, #0
 8007030:	d165      	bne.n	80070fe <low_level_init+0x272>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007032:	484a      	ldr	r0, [pc, #296]	@ (800715c <low_level_init+0x2d0>)
 8007034:	f7fa fd90 	bl	8001b58 <LAN8742_GetLinkState>
 8007038:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800703c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007040:	2b01      	cmp	r3, #1
 8007042:	dc06      	bgt.n	8007052 <low_level_init+0x1c6>
    {
      netif_set_link_down(netif);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f004 fe23 	bl	800bc90 <netif_set_link_down>
      netif_set_down(netif);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f004 fdba 	bl	800bbc4 <netif_set_down>
 8007050:	e057      	b.n	8007102 <low_level_init+0x276>
    }
    else
    {
      switch (PHYLinkState)
 8007052:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007056:	3b02      	subs	r3, #2
 8007058:	2b03      	cmp	r3, #3
 800705a:	d82b      	bhi.n	80070b4 <low_level_init+0x228>
 800705c:	a201      	add	r2, pc, #4	@ (adr r2, 8007064 <low_level_init+0x1d8>)
 800705e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007062:	bf00      	nop
 8007064:	08007075 	.word	0x08007075
 8007068:	08007087 	.word	0x08007087
 800706c:	08007097 	.word	0x08007097
 8007070:	080070a7 	.word	0x080070a7
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8007074:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007078:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 800707c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007080:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8007084:	e01f      	b.n	80070c6 <low_level_init+0x23a>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8007086:	2300      	movs	r3, #0
 8007088:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 800708c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007090:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8007094:	e017      	b.n	80070c6 <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8007096:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800709a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 800709e:	2300      	movs	r3, #0
 80070a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 80070a4:	e00f      	b.n	80070c6 <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 80070a6:	2300      	movs	r3, #0
 80070a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 80070ac:	2300      	movs	r3, #0
 80070ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 80070b2:	e008      	b.n	80070c6 <low_level_init+0x23a>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 80070b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80070b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 80070bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80070c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 80070c4:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80070c6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80070ca:	4619      	mov	r1, r3
 80070cc:	4819      	ldr	r0, [pc, #100]	@ (8007134 <low_level_init+0x2a8>)
 80070ce:	f7fb fd65 	bl	8002b9c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80070d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80070d6:	677b      	str	r3, [r7, #116]	@ 0x74
    MACConf.Speed = speed;
 80070d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80070dc:	673b      	str	r3, [r7, #112]	@ 0x70
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80070de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80070e2:	4619      	mov	r1, r3
 80070e4:	4813      	ldr	r0, [pc, #76]	@ (8007134 <low_level_init+0x2a8>)
 80070e6:	f7fb fe50 	bl	8002d8a <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 80070ea:	4812      	ldr	r0, [pc, #72]	@ (8007134 <low_level_init+0x2a8>)
 80070ec:	f7fb f908 	bl	8002300 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f004 fcfb 	bl	800baec <netif_set_up>
    netif_set_link_up(netif);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f004 fd96 	bl	800bc28 <netif_set_link_up>
 80070fc:	e001      	b.n	8007102 <low_level_init+0x276>
    }

  }
  else
  {
    Error_Handler();
 80070fe:	f7f9 fed5 	bl	8000eac <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

  if(HAL_GetREVID() == 0x1000)
 8007102:	f7fa fe01 	bl	8001d08 <HAL_GetREVID>
 8007106:	4603      	mov	r3, r0
 8007108:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800710c:	d10f      	bne.n	800712e <low_level_init+0x2a2>
  {
    /*
      This thread will keep resetting the RMII interface until good frames are received
    */
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 800710e:	4b14      	ldr	r3, [pc, #80]	@ (8007160 <low_level_init+0x2d4>)
 8007110:	f107 040c 	add.w	r4, r7, #12
 8007114:	461d      	mov	r5, r3
 8007116:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007118:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800711a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800711e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 8007122:	f107 030c 	add.w	r3, r7, #12
 8007126:	2100      	movs	r1, #0
 8007128:	4618      	mov	r0, r3
 800712a:	f000 fbf2 	bl	8007912 <osThreadCreate>
  }
}
 800712e:	37d0      	adds	r7, #208	@ 0xd0
 8007130:	46bd      	mov	sp, r7
 8007132:	bdb0      	pop	{r4, r5, r7, pc}
 8007134:	200059e8 	.word	0x200059e8
 8007138:	40028000 	.word	0x40028000
 800713c:	2000012c 	.word	0x2000012c
 8007140:	2000008c 	.word	0x2000008c
 8007144:	20005a98 	.word	0x20005a98
 8007148:	08018628 	.word	0x08018628
 800714c:	200059e0 	.word	0x200059e0
 8007150:	200059e4 	.word	0x200059e4
 8007154:	08015ae4 	.word	0x08015ae4
 8007158:	2000000c 	.word	0x2000000c
 800715c:	20005ad0 	.word	0x20005ad0
 8007160:	08015b10 	.word	0x08015b10

08007164 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b092      	sub	sp, #72	@ 0x48
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800716e:	2300      	movs	r3, #0
 8007170:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8007172:	2300      	movs	r3, #0
 8007174:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8007176:	2300      	movs	r3, #0
 8007178:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800717c:	f107 030c 	add.w	r3, r7, #12
 8007180:	2230      	movs	r2, #48	@ 0x30
 8007182:	2100      	movs	r1, #0
 8007184:	4618      	mov	r0, r3
 8007186:	f00d fdd2 	bl	8014d2e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800718a:	f107 030c 	add.w	r3, r7, #12
 800718e:	2230      	movs	r2, #48	@ 0x30
 8007190:	2100      	movs	r1, #0
 8007192:	4618      	mov	r0, r3
 8007194:	f00d fdcb 	bl	8014d2e <memset>

  for(q = p; q != NULL; q = q->next)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	643b      	str	r3, [r7, #64]	@ 0x40
 800719c:	e045      	b.n	800722a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800719e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071a0:	2b03      	cmp	r3, #3
 80071a2:	d902      	bls.n	80071aa <low_level_output+0x46>
      return ERR_IF;
 80071a4:	f06f 030b 	mvn.w	r3, #11
 80071a8:	e07f      	b.n	80072aa <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 80071aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071ac:	6859      	ldr	r1, [r3, #4]
 80071ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071b0:	4613      	mov	r3, r2
 80071b2:	005b      	lsls	r3, r3, #1
 80071b4:	4413      	add	r3, r2
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	3348      	adds	r3, #72	@ 0x48
 80071ba:	443b      	add	r3, r7
 80071bc:	3b3c      	subs	r3, #60	@ 0x3c
 80071be:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80071c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071c2:	895b      	ldrh	r3, [r3, #10]
 80071c4:	4619      	mov	r1, r3
 80071c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071c8:	4613      	mov	r3, r2
 80071ca:	005b      	lsls	r3, r3, #1
 80071cc:	4413      	add	r3, r2
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	3348      	adds	r3, #72	@ 0x48
 80071d2:	443b      	add	r3, r7
 80071d4:	3b38      	subs	r3, #56	@ 0x38
 80071d6:	6019      	str	r1, [r3, #0]

    if(i>0)
 80071d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d011      	beq.n	8007202 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80071de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071e0:	1e5a      	subs	r2, r3, #1
 80071e2:	f107 000c 	add.w	r0, r7, #12
 80071e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80071e8:	460b      	mov	r3, r1
 80071ea:	005b      	lsls	r3, r3, #1
 80071ec:	440b      	add	r3, r1
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	18c1      	adds	r1, r0, r3
 80071f2:	4613      	mov	r3, r2
 80071f4:	005b      	lsls	r3, r3, #1
 80071f6:	4413      	add	r3, r2
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	3348      	adds	r3, #72	@ 0x48
 80071fc:	443b      	add	r3, r7
 80071fe:	3b34      	subs	r3, #52	@ 0x34
 8007200:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8007202:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d109      	bne.n	800721e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800720a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800720c:	4613      	mov	r3, r2
 800720e:	005b      	lsls	r3, r3, #1
 8007210:	4413      	add	r3, r2
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	3348      	adds	r3, #72	@ 0x48
 8007216:	443b      	add	r3, r7
 8007218:	3b34      	subs	r3, #52	@ 0x34
 800721a:	2200      	movs	r2, #0
 800721c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800721e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007220:	3301      	adds	r3, #1
 8007222:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8007224:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	643b      	str	r3, [r7, #64]	@ 0x40
 800722a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1b6      	bne.n	800719e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	891b      	ldrh	r3, [r3, #8]
 8007234:	461a      	mov	r2, r3
 8007236:	4b1f      	ldr	r3, [pc, #124]	@ (80072b4 <low_level_output+0x150>)
 8007238:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800723a:	4a1e      	ldr	r2, [pc, #120]	@ (80072b4 <low_level_output+0x150>)
 800723c:	f107 030c 	add.w	r3, r7, #12
 8007240:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8007242:	4a1c      	ldr	r2, [pc, #112]	@ (80072b4 <low_level_output+0x150>)
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8007248:	6838      	ldr	r0, [r7, #0]
 800724a:	f005 f9a9 	bl	800c5a0 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800724e:	4919      	ldr	r1, [pc, #100]	@ (80072b4 <low_level_output+0x150>)
 8007250:	4819      	ldr	r0, [pc, #100]	@ (80072b8 <low_level_output+0x154>)
 8007252:	f7fb f945 	bl	80024e0 <HAL_ETH_Transmit_IT>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d103      	bne.n	8007264 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007262:	e01b      	b.n	800729c <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8007264:	4814      	ldr	r0, [pc, #80]	@ (80072b8 <low_level_output+0x154>)
 8007266:	f7fb fded 	bl	8002e44 <HAL_ETH_GetError>
 800726a:	4603      	mov	r3, r0
 800726c:	f003 0302 	and.w	r3, r3, #2
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00d      	beq.n	8007290 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8007274:	4b11      	ldr	r3, [pc, #68]	@ (80072bc <low_level_output+0x158>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800727c:	4618      	mov	r0, r3
 800727e:	f000 fc83 	bl	8007b88 <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 8007282:	480d      	ldr	r0, [pc, #52]	@ (80072b8 <low_level_output+0x154>)
 8007284:	f7fb facc 	bl	8002820 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8007288:	23fe      	movs	r3, #254	@ 0xfe
 800728a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800728e:	e005      	b.n	800729c <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8007290:	6838      	ldr	r0, [r7, #0]
 8007292:	f005 f8df 	bl	800c454 <pbuf_free>
        errval =  ERR_IF;
 8007296:	23f4      	movs	r3, #244	@ 0xf4
 8007298:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800729c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80072a0:	f113 0f02 	cmn.w	r3, #2
 80072a4:	d0d3      	beq.n	800724e <low_level_output+0xea>

  return errval;
 80072a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3748      	adds	r7, #72	@ 0x48
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	20005a98 	.word	0x20005a98
 80072b8:	200059e8 	.word	0x200059e8
 80072bc:	200059e4 	.word	0x200059e4

080072c0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80072c8:	2300      	movs	r3, #0
 80072ca:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80072cc:	4b07      	ldr	r3, [pc, #28]	@ (80072ec <low_level_input+0x2c>)
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d105      	bne.n	80072e0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80072d4:	f107 030c 	add.w	r3, r7, #12
 80072d8:	4619      	mov	r1, r3
 80072da:	4805      	ldr	r0, [pc, #20]	@ (80072f0 <low_level_input+0x30>)
 80072dc:	f7fb f95c 	bl	8002598 <HAL_ETH_ReadData>
  }

  return p;
 80072e0:	68fb      	ldr	r3, [r7, #12]
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	200059dc 	.word	0x200059dc
 80072f0:	200059e8 	.word	0x200059e8

080072f4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80072fc:	2300      	movs	r3, #0
 80072fe:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007304:	4b0f      	ldr	r3, [pc, #60]	@ (8007344 <ethernetif_input+0x50>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800730c:	4618      	mov	r0, r3
 800730e:	f000 fc3b 	bl	8007b88 <osSemaphoreWait>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1f5      	bne.n	8007304 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8007318:	68b8      	ldr	r0, [r7, #8]
 800731a:	f7ff ffd1 	bl	80072c0 <low_level_input>
 800731e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00a      	beq.n	800733c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	68b9      	ldr	r1, [r7, #8]
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	4798      	blx	r3
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d002      	beq.n	800733c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f005 f88c 	bl	800c454 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1ea      	bne.n	8007318 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007342:	e7df      	b.n	8007304 <ethernetif_input+0x10>
 8007344:	200059e0 	.word	0x200059e0

08007348 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d106      	bne.n	8007364 <ethernetif_init+0x1c>
 8007356:	4b0e      	ldr	r3, [pc, #56]	@ (8007390 <ethernetif_init+0x48>)
 8007358:	f240 2217 	movw	r2, #535	@ 0x217
 800735c:	490d      	ldr	r1, [pc, #52]	@ (8007394 <ethernetif_init+0x4c>)
 800735e:	480e      	ldr	r0, [pc, #56]	@ (8007398 <ethernetif_init+0x50>)
 8007360:	f00d fc80 	bl	8014c64 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2273      	movs	r2, #115	@ 0x73
 8007368:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2274      	movs	r2, #116	@ 0x74
 8007370:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4a09      	ldr	r2, [pc, #36]	@ (800739c <ethernetif_init+0x54>)
 8007378:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a08      	ldr	r2, [pc, #32]	@ (80073a0 <ethernetif_init+0x58>)
 800737e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f7ff fd83 	bl	8006e8c <low_level_init>

  return ERR_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3708      	adds	r7, #8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	08015b2c 	.word	0x08015b2c
 8007394:	08015b48 	.word	0x08015b48
 8007398:	08015b58 	.word	0x08015b58
 800739c:	08012b45 	.word	0x08012b45
 80073a0:	08007165 	.word	0x08007165

080073a4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80073b0:	68f9      	ldr	r1, [r7, #12]
 80073b2:	4809      	ldr	r0, [pc, #36]	@ (80073d8 <pbuf_free_custom+0x34>)
 80073b4:	f004 f982 	bl	800b6bc <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80073b8:	4b08      	ldr	r3, [pc, #32]	@ (80073dc <pbuf_free_custom+0x38>)
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d107      	bne.n	80073d0 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80073c0:	4b06      	ldr	r3, [pc, #24]	@ (80073dc <pbuf_free_custom+0x38>)
 80073c2:	2200      	movs	r2, #0
 80073c4:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80073c6:	4b06      	ldr	r3, [pc, #24]	@ (80073e0 <pbuf_free_custom+0x3c>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4618      	mov	r0, r3
 80073cc:	f000 fc2a 	bl	8007c24 <osSemaphoreRelease>
  }
}
 80073d0:	bf00      	nop
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	08018628 	.word	0x08018628
 80073dc:	200059dc 	.word	0x200059dc
 80073e0:	200059e0 	.word	0x200059e0

080073e4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80073e8:	f7fa fc5e 	bl	8001ca8 <HAL_GetTick>
 80073ec:	4603      	mov	r3, r0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	bd80      	pop	{r7, pc}
	...

080073f4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b08e      	sub	sp, #56	@ 0x38
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007400:	2200      	movs	r2, #0
 8007402:	601a      	str	r2, [r3, #0]
 8007404:	605a      	str	r2, [r3, #4]
 8007406:	609a      	str	r2, [r3, #8]
 8007408:	60da      	str	r2, [r3, #12]
 800740a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a52      	ldr	r2, [pc, #328]	@ (800755c <HAL_ETH_MspInit+0x168>)
 8007412:	4293      	cmp	r3, r2
 8007414:	f040 809e 	bne.w	8007554 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007418:	4b51      	ldr	r3, [pc, #324]	@ (8007560 <HAL_ETH_MspInit+0x16c>)
 800741a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800741c:	4a50      	ldr	r2, [pc, #320]	@ (8007560 <HAL_ETH_MspInit+0x16c>)
 800741e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007422:	6313      	str	r3, [r2, #48]	@ 0x30
 8007424:	4b4e      	ldr	r3, [pc, #312]	@ (8007560 <HAL_ETH_MspInit+0x16c>)
 8007426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007428:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800742c:	623b      	str	r3, [r7, #32]
 800742e:	6a3b      	ldr	r3, [r7, #32]
 8007430:	4b4b      	ldr	r3, [pc, #300]	@ (8007560 <HAL_ETH_MspInit+0x16c>)
 8007432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007434:	4a4a      	ldr	r2, [pc, #296]	@ (8007560 <HAL_ETH_MspInit+0x16c>)
 8007436:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800743a:	6313      	str	r3, [r2, #48]	@ 0x30
 800743c:	4b48      	ldr	r3, [pc, #288]	@ (8007560 <HAL_ETH_MspInit+0x16c>)
 800743e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007440:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007444:	61fb      	str	r3, [r7, #28]
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	4b45      	ldr	r3, [pc, #276]	@ (8007560 <HAL_ETH_MspInit+0x16c>)
 800744a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800744c:	4a44      	ldr	r2, [pc, #272]	@ (8007560 <HAL_ETH_MspInit+0x16c>)
 800744e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007452:	6313      	str	r3, [r2, #48]	@ 0x30
 8007454:	4b42      	ldr	r3, [pc, #264]	@ (8007560 <HAL_ETH_MspInit+0x16c>)
 8007456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007458:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800745c:	61bb      	str	r3, [r7, #24]
 800745e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007460:	4b3f      	ldr	r3, [pc, #252]	@ (8007560 <HAL_ETH_MspInit+0x16c>)
 8007462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007464:	4a3e      	ldr	r2, [pc, #248]	@ (8007560 <HAL_ETH_MspInit+0x16c>)
 8007466:	f043 0304 	orr.w	r3, r3, #4
 800746a:	6313      	str	r3, [r2, #48]	@ 0x30
 800746c:	4b3c      	ldr	r3, [pc, #240]	@ (8007560 <HAL_ETH_MspInit+0x16c>)
 800746e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007470:	f003 0304 	and.w	r3, r3, #4
 8007474:	617b      	str	r3, [r7, #20]
 8007476:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007478:	4b39      	ldr	r3, [pc, #228]	@ (8007560 <HAL_ETH_MspInit+0x16c>)
 800747a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800747c:	4a38      	ldr	r2, [pc, #224]	@ (8007560 <HAL_ETH_MspInit+0x16c>)
 800747e:	f043 0301 	orr.w	r3, r3, #1
 8007482:	6313      	str	r3, [r2, #48]	@ 0x30
 8007484:	4b36      	ldr	r3, [pc, #216]	@ (8007560 <HAL_ETH_MspInit+0x16c>)
 8007486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007488:	f003 0301 	and.w	r3, r3, #1
 800748c:	613b      	str	r3, [r7, #16]
 800748e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007490:	4b33      	ldr	r3, [pc, #204]	@ (8007560 <HAL_ETH_MspInit+0x16c>)
 8007492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007494:	4a32      	ldr	r2, [pc, #200]	@ (8007560 <HAL_ETH_MspInit+0x16c>)
 8007496:	f043 0302 	orr.w	r3, r3, #2
 800749a:	6313      	str	r3, [r2, #48]	@ 0x30
 800749c:	4b30      	ldr	r3, [pc, #192]	@ (8007560 <HAL_ETH_MspInit+0x16c>)
 800749e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074a0:	f003 0302 	and.w	r3, r3, #2
 80074a4:	60fb      	str	r3, [r7, #12]
 80074a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80074a8:	4b2d      	ldr	r3, [pc, #180]	@ (8007560 <HAL_ETH_MspInit+0x16c>)
 80074aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ac:	4a2c      	ldr	r2, [pc, #176]	@ (8007560 <HAL_ETH_MspInit+0x16c>)
 80074ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80074b4:	4b2a      	ldr	r3, [pc, #168]	@ (8007560 <HAL_ETH_MspInit+0x16c>)
 80074b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074bc:	60bb      	str	r3, [r7, #8]
 80074be:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80074c0:	2332      	movs	r3, #50	@ 0x32
 80074c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074c4:	2302      	movs	r3, #2
 80074c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074c8:	2300      	movs	r3, #0
 80074ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074cc:	2303      	movs	r3, #3
 80074ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80074d0:	230b      	movs	r3, #11
 80074d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80074d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074d8:	4619      	mov	r1, r3
 80074da:	4822      	ldr	r0, [pc, #136]	@ (8007564 <HAL_ETH_MspInit+0x170>)
 80074dc:	f7fc f8ec 	bl	80036b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80074e0:	2386      	movs	r3, #134	@ 0x86
 80074e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074e4:	2302      	movs	r3, #2
 80074e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074e8:	2300      	movs	r3, #0
 80074ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074ec:	2303      	movs	r3, #3
 80074ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80074f0:	230b      	movs	r3, #11
 80074f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074f8:	4619      	mov	r1, r3
 80074fa:	481b      	ldr	r0, [pc, #108]	@ (8007568 <HAL_ETH_MspInit+0x174>)
 80074fc:	f7fc f8dc 	bl	80036b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8007500:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8007504:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007506:	2302      	movs	r3, #2
 8007508:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800750a:	2300      	movs	r3, #0
 800750c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800750e:	2303      	movs	r3, #3
 8007510:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007512:	230b      	movs	r3, #11
 8007514:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007516:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800751a:	4619      	mov	r1, r3
 800751c:	4813      	ldr	r0, [pc, #76]	@ (800756c <HAL_ETH_MspInit+0x178>)
 800751e:	f7fc f8cb 	bl	80036b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007522:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007526:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007528:	2302      	movs	r3, #2
 800752a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800752c:	2300      	movs	r3, #0
 800752e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007530:	2303      	movs	r3, #3
 8007532:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007534:	230b      	movs	r3, #11
 8007536:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007538:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800753c:	4619      	mov	r1, r3
 800753e:	480c      	ldr	r0, [pc, #48]	@ (8007570 <HAL_ETH_MspInit+0x17c>)
 8007540:	f7fc f8ba 	bl	80036b8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8007544:	2200      	movs	r2, #0
 8007546:	2105      	movs	r1, #5
 8007548:	203d      	movs	r0, #61	@ 0x3d
 800754a:	f7fa fd9d 	bl	8002088 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800754e:	203d      	movs	r0, #61	@ 0x3d
 8007550:	f7fa fdb6 	bl	80020c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007554:	bf00      	nop
 8007556:	3738      	adds	r7, #56	@ 0x38
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	40028000 	.word	0x40028000
 8007560:	40023800 	.word	0x40023800
 8007564:	40020800 	.word	0x40020800
 8007568:	40020000 	.word	0x40020000
 800756c:	40020400 	.word	0x40020400
 8007570:	40021800 	.word	0x40021800

08007574 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8007578:	4802      	ldr	r0, [pc, #8]	@ (8007584 <ETH_PHY_IO_Init+0x10>)
 800757a:	f7fb fc21 	bl	8002dc0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	bd80      	pop	{r7, pc}
 8007584:	200059e8 	.word	0x200059e8

08007588 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8007588:	b480      	push	{r7}
 800758a:	af00      	add	r7, sp, #0
  return 0;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	68f9      	ldr	r1, [r7, #12]
 80075aa:	4807      	ldr	r0, [pc, #28]	@ (80075c8 <ETH_PHY_IO_ReadReg+0x30>)
 80075ac:	f7fb fa62 	bl	8002a74 <HAL_ETH_ReadPHYRegister>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d002      	beq.n	80075bc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80075b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80075ba:	e000      	b.n	80075be <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	200059e8 	.word	0x200059e8

080075cc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	68f9      	ldr	r1, [r7, #12]
 80075de:	4807      	ldr	r0, [pc, #28]	@ (80075fc <ETH_PHY_IO_WriteReg+0x30>)
 80075e0:	f7fb fa93 	bl	8002b0a <HAL_ETH_WritePHYRegister>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d002      	beq.n	80075f0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80075ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80075ee:	e000      	b.n	80075f2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	200059e8 	.word	0x200059e8

08007600 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007604:	f7fa fb50 	bl	8001ca8 <HAL_GetTick>
 8007608:	4603      	mov	r3, r0
}
 800760a:	4618      	mov	r0, r3
 800760c:	bd80      	pop	{r7, pc}
	...

08007610 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b0a0      	sub	sp, #128	@ 0x80
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8007618:	f107 0308 	add.w	r3, r7, #8
 800761c:	2264      	movs	r2, #100	@ 0x64
 800761e:	2100      	movs	r1, #0
 8007620:	4618      	mov	r0, r3
 8007622:	f00d fb84 	bl	8014d2e <memset>
  int32_t PHYLinkState = 0;
 8007626:	2300      	movs	r3, #0
 8007628:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800762a:	2300      	movs	r3, #0
 800762c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800762e:	2300      	movs	r3, #0
 8007630:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007632:	2300      	movs	r3, #0
 8007634:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800763a:	483a      	ldr	r0, [pc, #232]	@ (8007724 <ethernet_link_thread+0x114>)
 800763c:	f7fa fa8c 	bl	8001b58 <LAN8742_GetLinkState>
 8007640:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8007642:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007644:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007648:	089b      	lsrs	r3, r3, #2
 800764a:	f003 0301 	and.w	r3, r3, #1
 800764e:	b2db      	uxtb	r3, r3
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00c      	beq.n	800766e <ethernet_link_thread+0x5e>
 8007654:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007656:	2b01      	cmp	r3, #1
 8007658:	dc09      	bgt.n	800766e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800765a:	4833      	ldr	r0, [pc, #204]	@ (8007728 <ethernet_link_thread+0x118>)
 800765c:	f7fa fec0 	bl	80023e0 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8007660:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007662:	f004 faaf 	bl	800bbc4 <netif_set_down>
    netif_set_link_down(netif);
 8007666:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007668:	f004 fb12 	bl	800bc90 <netif_set_link_down>
 800766c:	e055      	b.n	800771a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800766e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007670:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007674:	f003 0304 	and.w	r3, r3, #4
 8007678:	2b00      	cmp	r3, #0
 800767a:	d14e      	bne.n	800771a <ethernet_link_thread+0x10a>
 800767c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800767e:	2b01      	cmp	r3, #1
 8007680:	dd4b      	ble.n	800771a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8007682:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007684:	3b02      	subs	r3, #2
 8007686:	2b03      	cmp	r3, #3
 8007688:	d82a      	bhi.n	80076e0 <ethernet_link_thread+0xd0>
 800768a:	a201      	add	r2, pc, #4	@ (adr r2, 8007690 <ethernet_link_thread+0x80>)
 800768c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007690:	080076a1 	.word	0x080076a1
 8007694:	080076b3 	.word	0x080076b3
 8007698:	080076c3 	.word	0x080076c3
 800769c:	080076d3 	.word	0x080076d3
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80076a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80076a4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80076a6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80076aa:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80076ac:	2301      	movs	r3, #1
 80076ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80076b0:	e017      	b.n	80076e2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80076b2:	2300      	movs	r3, #0
 80076b4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80076b6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80076ba:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80076bc:	2301      	movs	r3, #1
 80076be:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80076c0:	e00f      	b.n	80076e2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80076c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80076c6:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80076c8:	2300      	movs	r3, #0
 80076ca:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80076cc:	2301      	movs	r3, #1
 80076ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80076d0:	e007      	b.n	80076e2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80076d2:	2300      	movs	r3, #0
 80076d4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80076d6:	2300      	movs	r3, #0
 80076d8:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80076da:	2301      	movs	r3, #1
 80076dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80076de:	e000      	b.n	80076e2 <ethernet_link_thread+0xd2>
    default:
      break;
 80076e0:	bf00      	nop
    }

    if(linkchanged)
 80076e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d018      	beq.n	800771a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80076e8:	f107 0308 	add.w	r3, r7, #8
 80076ec:	4619      	mov	r1, r3
 80076ee:	480e      	ldr	r0, [pc, #56]	@ (8007728 <ethernet_link_thread+0x118>)
 80076f0:	f7fb fa54 	bl	8002b9c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80076f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80076f6:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80076f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076fa:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80076fc:	f107 0308 	add.w	r3, r7, #8
 8007700:	4619      	mov	r1, r3
 8007702:	4809      	ldr	r0, [pc, #36]	@ (8007728 <ethernet_link_thread+0x118>)
 8007704:	f7fb fb41 	bl	8002d8a <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8007708:	4807      	ldr	r0, [pc, #28]	@ (8007728 <ethernet_link_thread+0x118>)
 800770a:	f7fa fdf9 	bl	8002300 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800770e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007710:	f004 f9ec 	bl	800baec <netif_set_up>
      netif_set_link_up(netif);
 8007714:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007716:	f004 fa87 	bl	800bc28 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800771a:	2064      	movs	r0, #100	@ 0x64
 800771c:	f000 f951 	bl	80079c2 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007720:	e78b      	b.n	800763a <ethernet_link_thread+0x2a>
 8007722:	bf00      	nop
 8007724:	20005ad0 	.word	0x20005ad0
 8007728:	200059e8 	.word	0x200059e8

0800772c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af02      	add	r7, sp, #8
 8007732:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8007734:	4812      	ldr	r0, [pc, #72]	@ (8007780 <HAL_ETH_RxAllocateCallback+0x54>)
 8007736:	f003 ff4d 	bl	800b5d4 <memp_malloc_pool>
 800773a:	60f8      	str	r0, [r7, #12]
  if (p)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d014      	beq.n	800776c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f103 0220 	add.w	r2, r3, #32
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	4a0d      	ldr	r2, [pc, #52]	@ (8007784 <HAL_ETH_RxAllocateCallback+0x58>)
 8007750:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800775a:	9201      	str	r2, [sp, #4]
 800775c:	9300      	str	r3, [sp, #0]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2241      	movs	r2, #65	@ 0x41
 8007762:	2100      	movs	r1, #0
 8007764:	2000      	movs	r0, #0
 8007766:	f004 fcbb 	bl	800c0e0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800776a:	e005      	b.n	8007778 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800776c:	4b06      	ldr	r3, [pc, #24]	@ (8007788 <HAL_ETH_RxAllocateCallback+0x5c>)
 800776e:	2201      	movs	r2, #1
 8007770:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	601a      	str	r2, [r3, #0]
}
 8007778:	bf00      	nop
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	08018628 	.word	0x08018628
 8007784:	080073a5 	.word	0x080073a5
 8007788:	200059dc 	.word	0x200059dc

0800778c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b088      	sub	sp, #32
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
 8007798:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80077a2:	2300      	movs	r3, #0
 80077a4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	3b20      	subs	r3, #32
 80077aa:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	2200      	movs	r2, #0
 80077b0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	2200      	movs	r2, #0
 80077b6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	887a      	ldrh	r2, [r7, #2]
 80077bc:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d103      	bne.n	80077ce <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	69fa      	ldr	r2, [r7, #28]
 80077ca:	601a      	str	r2, [r3, #0]
 80077cc:	e003      	b.n	80077d6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	69fa      	ldr	r2, [r7, #28]
 80077d4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	69fa      	ldr	r2, [r7, #28]
 80077da:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	61fb      	str	r3, [r7, #28]
 80077e2:	e009      	b.n	80077f8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	891a      	ldrh	r2, [r3, #8]
 80077e8:	887b      	ldrh	r3, [r7, #2]
 80077ea:	4413      	add	r3, r2
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	61fb      	str	r3, [r7, #28]
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1f2      	bne.n	80077e4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80077fe:	887b      	ldrh	r3, [r7, #2]
 8007800:	4619      	mov	r1, r3
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f7ff fade 	bl	8006dc4 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8007808:	bf00      	nop
 800780a:	3720      	adds	r7, #32
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f004 fe1b 	bl	800c454 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800781e:	bf00      	nop
 8007820:	3708      	adds	r7, #8
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
	...

08007828 <RMII_Thread>:
/* USER CODE BEGIN 8 */

/* USER CODE END 8 */

void RMII_Thread( void const * argument )
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  (void) argument;

  for(;;)
  {
    /* some unicast good packets are received */
    if(heth.Instance->MMCRGUFCR > 0U)
 8007830:	4b15      	ldr	r3, [pc, #84]	@ (8007888 <RMII_Thread+0x60>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8007838:	2b00      	cmp	r3, #0
 800783a:	d003      	beq.n	8007844 <RMII_Thread+0x1c>
    {
      /* RMII Init is OK: Delete the Thread */
      osThreadTerminate(NULL);
 800783c:	2000      	movs	r0, #0
 800783e:	f000 f8b4 	bl	80079aa <osThreadTerminate>
 8007842:	e7f5      	b.n	8007830 <RMII_Thread+0x8>
    }
    else if(heth.Instance->MMCRFCECR > 10U)
 8007844:	4b10      	ldr	r3, [pc, #64]	@ (8007888 <RMII_Thread+0x60>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 800784c:	2b0a      	cmp	r3, #10
 800784e:	d916      	bls.n	800787e <RMII_Thread+0x56>
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 8007850:	4b0e      	ldr	r3, [pc, #56]	@ (800788c <RMII_Thread+0x64>)
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	4a0d      	ldr	r2, [pc, #52]	@ (800788c <RMII_Thread+0x64>)
 8007856:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800785a:	6053      	str	r3, [r2, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 800785c:	4b0b      	ldr	r3, [pc, #44]	@ (800788c <RMII_Thread+0x64>)
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	4a0a      	ldr	r2, [pc, #40]	@ (800788c <RMII_Thread+0x64>)
 8007862:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007866:	6053      	str	r3, [r2, #4]

      heth.Instance->MMCCR |= ETH_MMCCR_CR;
 8007868:	4b07      	ldr	r3, [pc, #28]	@ (8007888 <RMII_Thread+0x60>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8007870:	4b05      	ldr	r3, [pc, #20]	@ (8007888 <RMII_Thread+0x60>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f042 0201 	orr.w	r2, r2, #1
 8007878:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800787c:	e7d8      	b.n	8007830 <RMII_Thread+0x8>
    }
    else
    {
      /* Delay 200 ms */
      osDelay(200);
 800787e:	20c8      	movs	r0, #200	@ 0xc8
 8007880:	f000 f89f 	bl	80079c2 <osDelay>
    if(heth.Instance->MMCRGUFCR > 0U)
 8007884:	e7d4      	b.n	8007830 <RMII_Thread+0x8>
 8007886:	bf00      	nop
 8007888:	200059e8 	.word	0x200059e8
 800788c:	40013800 	.word	0x40013800

08007890 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	4603      	mov	r3, r0
 8007898:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800789a:	2300      	movs	r3, #0
 800789c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800789e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80078a2:	2b84      	cmp	r3, #132	@ 0x84
 80078a4:	d005      	beq.n	80078b2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80078a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	4413      	add	r3, r2
 80078ae:	3303      	adds	r3, #3
 80078b0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80078b2:	68fb      	ldr	r3, [r7, #12]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078c6:	f3ef 8305 	mrs	r3, IPSR
 80078ca:	607b      	str	r3, [r7, #4]
  return(result);
 80078cc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	bf14      	ite	ne
 80078d2:	2301      	movne	r3, #1
 80078d4:	2300      	moveq	r3, #0
 80078d6:	b2db      	uxtb	r3, r3
}
 80078d8:	4618      	mov	r0, r3
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80078e8:	f001 fd64 	bl	80093b4 <vTaskStartScheduler>
  
  return osOK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80078f6:	f7ff ffe3 	bl	80078c0 <inHandlerMode>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d003      	beq.n	8007908 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8007900:	f001 fe7c 	bl	80095fc <xTaskGetTickCountFromISR>
 8007904:	4603      	mov	r3, r0
 8007906:	e002      	b.n	800790e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8007908:	f001 fe68 	bl	80095dc <xTaskGetTickCount>
 800790c:	4603      	mov	r3, r0
  }
}
 800790e:	4618      	mov	r0, r3
 8007910:	bd80      	pop	{r7, pc}

08007912 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007912:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007914:	b089      	sub	sp, #36	@ 0x24
 8007916:	af04      	add	r7, sp, #16
 8007918:	6078      	str	r0, [r7, #4]
 800791a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	695b      	ldr	r3, [r3, #20]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d020      	beq.n	8007966 <osThreadCreate+0x54>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	699b      	ldr	r3, [r3, #24]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d01c      	beq.n	8007966 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	685c      	ldr	r4, [r3, #4]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	691e      	ldr	r6, [r3, #16]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800793e:	4618      	mov	r0, r3
 8007940:	f7ff ffa6 	bl	8007890 <makeFreeRtosPriority>
 8007944:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800794e:	9202      	str	r2, [sp, #8]
 8007950:	9301      	str	r3, [sp, #4]
 8007952:	9100      	str	r1, [sp, #0]
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	4632      	mov	r2, r6
 8007958:	4629      	mov	r1, r5
 800795a:	4620      	mov	r0, r4
 800795c:	f001 fac0 	bl	8008ee0 <xTaskCreateStatic>
 8007960:	4603      	mov	r3, r0
 8007962:	60fb      	str	r3, [r7, #12]
 8007964:	e01c      	b.n	80079a0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	685c      	ldr	r4, [r3, #4]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007972:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800797a:	4618      	mov	r0, r3
 800797c:	f7ff ff88 	bl	8007890 <makeFreeRtosPriority>
 8007980:	4602      	mov	r2, r0
 8007982:	f107 030c 	add.w	r3, r7, #12
 8007986:	9301      	str	r3, [sp, #4]
 8007988:	9200      	str	r2, [sp, #0]
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	4632      	mov	r2, r6
 800798e:	4629      	mov	r1, r5
 8007990:	4620      	mov	r0, r4
 8007992:	f001 fb0b 	bl	8008fac <xTaskCreate>
 8007996:	4603      	mov	r3, r0
 8007998:	2b01      	cmp	r3, #1
 800799a:	d001      	beq.n	80079a0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800799c:	2300      	movs	r3, #0
 800799e:	e000      	b.n	80079a2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80079a0:	68fb      	ldr	r3, [r7, #12]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3714      	adds	r7, #20
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080079aa <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b082      	sub	sp, #8
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f001 fc34 	bl	8009220 <vTaskDelete>
  return osOK;
 80079b8:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b084      	sub	sp, #16
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d001      	beq.n	80079d8 <osDelay+0x16>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	e000      	b.n	80079da <osDelay+0x18>
 80079d8:	2301      	movs	r3, #1
 80079da:	4618      	mov	r0, r3
 80079dc:	f001 fcb2 	bl	8009344 <vTaskDelay>
  
  return osOK;
 80079e0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}

080079ea <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80079ea:	b580      	push	{r7, lr}
 80079ec:	b082      	sub	sp, #8
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d007      	beq.n	8007a0a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	4619      	mov	r1, r3
 8007a00:	2001      	movs	r0, #1
 8007a02:	f000 fc5c 	bl	80082be <xQueueCreateMutexStatic>
 8007a06:	4603      	mov	r3, r0
 8007a08:	e003      	b.n	8007a12 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8007a0a:	2001      	movs	r0, #1
 8007a0c:	f000 fc3f 	bl	800828e <xQueueCreateMutex>
 8007a10:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3708      	adds	r7, #8
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
	...

08007a1c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007a26:	2300      	movs	r3, #0
 8007a28:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d101      	bne.n	8007a34 <osMutexWait+0x18>
    return osErrorParameter;
 8007a30:	2380      	movs	r3, #128	@ 0x80
 8007a32:	e03a      	b.n	8007aaa <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8007a34:	2300      	movs	r3, #0
 8007a36:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a3e:	d103      	bne.n	8007a48 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8007a40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007a44:	60fb      	str	r3, [r7, #12]
 8007a46:	e009      	b.n	8007a5c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d006      	beq.n	8007a5c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d101      	bne.n	8007a5c <osMutexWait+0x40>
      ticks = 1;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007a5c:	f7ff ff30 	bl	80078c0 <inHandlerMode>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d017      	beq.n	8007a96 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007a66:	f107 0308 	add.w	r3, r7, #8
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f001 f886 	bl	8008b80 <xQueueReceiveFromISR>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d001      	beq.n	8007a7e <osMutexWait+0x62>
      return osErrorOS;
 8007a7a:	23ff      	movs	r3, #255	@ 0xff
 8007a7c:	e015      	b.n	8007aaa <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d011      	beq.n	8007aa8 <osMutexWait+0x8c>
 8007a84:	4b0b      	ldr	r3, [pc, #44]	@ (8007ab4 <osMutexWait+0x98>)
 8007a86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a8a:	601a      	str	r2, [r3, #0]
 8007a8c:	f3bf 8f4f 	dsb	sy
 8007a90:	f3bf 8f6f 	isb	sy
 8007a94:	e008      	b.n	8007aa8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8007a96:	68f9      	ldr	r1, [r7, #12]
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 ff59 	bl	8008950 <xQueueSemaphoreTake>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d001      	beq.n	8007aa8 <osMutexWait+0x8c>
    return osErrorOS;
 8007aa4:	23ff      	movs	r3, #255	@ 0xff
 8007aa6:	e000      	b.n	8007aaa <osMutexWait+0x8e>
  }
  
  return osOK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	e000ed04 	.word	0xe000ed04

08007ab8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8007ac8:	f7ff fefa 	bl	80078c0 <inHandlerMode>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d016      	beq.n	8007b00 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007ad2:	f107 0308 	add.w	r3, r7, #8
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 fdb8 	bl	800864e <xQueueGiveFromISR>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d001      	beq.n	8007ae8 <osMutexRelease+0x30>
      return osErrorOS;
 8007ae4:	23ff      	movs	r3, #255	@ 0xff
 8007ae6:	e017      	b.n	8007b18 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d013      	beq.n	8007b16 <osMutexRelease+0x5e>
 8007aee:	4b0c      	ldr	r3, [pc, #48]	@ (8007b20 <osMutexRelease+0x68>)
 8007af0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007af4:	601a      	str	r2, [r3, #0]
 8007af6:	f3bf 8f4f 	dsb	sy
 8007afa:	f3bf 8f6f 	isb	sy
 8007afe:	e00a      	b.n	8007b16 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8007b00:	2300      	movs	r3, #0
 8007b02:	2200      	movs	r2, #0
 8007b04:	2100      	movs	r1, #0
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fbf4 	bl	80082f4 <xQueueGenericSend>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d001      	beq.n	8007b16 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8007b12:	23ff      	movs	r3, #255	@ 0xff
 8007b14:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8007b16:	68fb      	ldr	r3, [r7, #12]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	e000ed04 	.word	0xe000ed04

08007b24 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b086      	sub	sp, #24
 8007b28:	af02      	add	r7, sp, #8
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00f      	beq.n	8007b56 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d10a      	bne.n	8007b52 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	2203      	movs	r2, #3
 8007b42:	9200      	str	r2, [sp, #0]
 8007b44:	2200      	movs	r2, #0
 8007b46:	2100      	movs	r1, #0
 8007b48:	2001      	movs	r0, #1
 8007b4a:	f000 fa9d 	bl	8008088 <xQueueGenericCreateStatic>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	e016      	b.n	8007b80 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8007b52:	2300      	movs	r3, #0
 8007b54:	e014      	b.n	8007b80 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d110      	bne.n	8007b7e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8007b5c:	2203      	movs	r2, #3
 8007b5e:	2100      	movs	r1, #0
 8007b60:	2001      	movs	r0, #1
 8007b62:	f000 fb18 	bl	8008196 <xQueueGenericCreate>
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d005      	beq.n	8007b7a <osSemaphoreCreate+0x56>
 8007b6e:	2300      	movs	r3, #0
 8007b70:	2200      	movs	r2, #0
 8007b72:	2100      	movs	r1, #0
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f000 fbbd 	bl	80082f4 <xQueueGenericSend>
      return sema;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	e000      	b.n	8007b80 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8007b7e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3710      	adds	r7, #16
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007b92:	2300      	movs	r3, #0
 8007b94:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d101      	bne.n	8007ba0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007b9c:	2380      	movs	r3, #128	@ 0x80
 8007b9e:	e03a      	b.n	8007c16 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007baa:	d103      	bne.n	8007bb4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8007bac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007bb0:	60fb      	str	r3, [r7, #12]
 8007bb2:	e009      	b.n	8007bc8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d006      	beq.n	8007bc8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d101      	bne.n	8007bc8 <osSemaphoreWait+0x40>
      ticks = 1;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007bc8:	f7ff fe7a 	bl	80078c0 <inHandlerMode>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d017      	beq.n	8007c02 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007bd2:	f107 0308 	add.w	r3, r7, #8
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	2100      	movs	r1, #0
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 ffd0 	bl	8008b80 <xQueueReceiveFromISR>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d001      	beq.n	8007bea <osSemaphoreWait+0x62>
      return osErrorOS;
 8007be6:	23ff      	movs	r3, #255	@ 0xff
 8007be8:	e015      	b.n	8007c16 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d011      	beq.n	8007c14 <osSemaphoreWait+0x8c>
 8007bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8007c20 <osSemaphoreWait+0x98>)
 8007bf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bf6:	601a      	str	r2, [r3, #0]
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	f3bf 8f6f 	isb	sy
 8007c00:	e008      	b.n	8007c14 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007c02:	68f9      	ldr	r1, [r7, #12]
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 fea3 	bl	8008950 <xQueueSemaphoreTake>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d001      	beq.n	8007c14 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007c10:	23ff      	movs	r3, #255	@ 0xff
 8007c12:	e000      	b.n	8007c16 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	e000ed04 	.word	0xe000ed04

08007c24 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007c30:	2300      	movs	r3, #0
 8007c32:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007c34:	f7ff fe44 	bl	80078c0 <inHandlerMode>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d016      	beq.n	8007c6c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007c3e:	f107 0308 	add.w	r3, r7, #8
 8007c42:	4619      	mov	r1, r3
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 fd02 	bl	800864e <xQueueGiveFromISR>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d001      	beq.n	8007c54 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007c50:	23ff      	movs	r3, #255	@ 0xff
 8007c52:	e017      	b.n	8007c84 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d013      	beq.n	8007c82 <osSemaphoreRelease+0x5e>
 8007c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8007c8c <osSemaphoreRelease+0x68>)
 8007c5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c60:	601a      	str	r2, [r3, #0]
 8007c62:	f3bf 8f4f 	dsb	sy
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	e00a      	b.n	8007c82 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	2200      	movs	r2, #0
 8007c70:	2100      	movs	r1, #0
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fb3e 	bl	80082f4 <xQueueGenericSend>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d001      	beq.n	8007c82 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8007c7e:	23ff      	movs	r3, #255	@ 0xff
 8007c80:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007c82:	68fb      	ldr	r3, [r7, #12]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	e000ed04 	.word	0xe000ed04

08007c90 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007c90:	b590      	push	{r4, r7, lr}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af02      	add	r7, sp, #8
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d011      	beq.n	8007cc6 <osMessageCreate+0x36>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00d      	beq.n	8007cc6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6818      	ldr	r0, [r3, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6859      	ldr	r1, [r3, #4]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	689a      	ldr	r2, [r3, #8]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	2400      	movs	r4, #0
 8007cbc:	9400      	str	r4, [sp, #0]
 8007cbe:	f000 f9e3 	bl	8008088 <xQueueGenericCreateStatic>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	e008      	b.n	8007cd8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6818      	ldr	r0, [r3, #0]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	f000 fa60 	bl	8008196 <xQueueGenericCreate>
 8007cd6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd90      	pop	{r4, r7, pc}

08007ce0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007cec:	2300      	movs	r3, #0
 8007cee:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d101      	bne.n	8007cfe <osMessagePut+0x1e>
    ticks = 1;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007cfe:	f7ff fddf 	bl	80078c0 <inHandlerMode>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d018      	beq.n	8007d3a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007d08:	f107 0210 	add.w	r2, r7, #16
 8007d0c:	f107 0108 	add.w	r1, r7, #8
 8007d10:	2300      	movs	r3, #0
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f000 fbf8 	bl	8008508 <xQueueGenericSendFromISR>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d001      	beq.n	8007d22 <osMessagePut+0x42>
      return osErrorOS;
 8007d1e:	23ff      	movs	r3, #255	@ 0xff
 8007d20:	e018      	b.n	8007d54 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d014      	beq.n	8007d52 <osMessagePut+0x72>
 8007d28:	4b0c      	ldr	r3, [pc, #48]	@ (8007d5c <osMessagePut+0x7c>)
 8007d2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d2e:	601a      	str	r2, [r3, #0]
 8007d30:	f3bf 8f4f 	dsb	sy
 8007d34:	f3bf 8f6f 	isb	sy
 8007d38:	e00b      	b.n	8007d52 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007d3a:	f107 0108 	add.w	r1, r7, #8
 8007d3e:	2300      	movs	r3, #0
 8007d40:	697a      	ldr	r2, [r7, #20]
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f000 fad6 	bl	80082f4 <xQueueGenericSend>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d001      	beq.n	8007d52 <osMessagePut+0x72>
      return osErrorOS;
 8007d4e:	23ff      	movs	r3, #255	@ 0xff
 8007d50:	e000      	b.n	8007d54 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3718      	adds	r7, #24
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	e000ed04 	.word	0xe000ed04

08007d60 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007d60:	b590      	push	{r4, r7, lr}
 8007d62:	b08b      	sub	sp, #44	@ 0x2c
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007d70:	2300      	movs	r3, #0
 8007d72:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d10a      	bne.n	8007d90 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8007d7a:	2380      	movs	r3, #128	@ 0x80
 8007d7c:	617b      	str	r3, [r7, #20]
    return event;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	461c      	mov	r4, r3
 8007d82:	f107 0314 	add.w	r3, r7, #20
 8007d86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007d8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007d8e:	e054      	b.n	8007e3a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007d90:	2300      	movs	r3, #0
 8007d92:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007d94:	2300      	movs	r3, #0
 8007d96:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d9e:	d103      	bne.n	8007da8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007da0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007da4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007da6:	e009      	b.n	8007dbc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d006      	beq.n	8007dbc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8007db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d101      	bne.n	8007dbc <osMessageGet+0x5c>
      ticks = 1;
 8007db8:	2301      	movs	r3, #1
 8007dba:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007dbc:	f7ff fd80 	bl	80078c0 <inHandlerMode>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d01c      	beq.n	8007e00 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007dc6:	f107 0220 	add.w	r2, r7, #32
 8007dca:	f107 0314 	add.w	r3, r7, #20
 8007dce:	3304      	adds	r3, #4
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	68b8      	ldr	r0, [r7, #8]
 8007dd4:	f000 fed4 	bl	8008b80 <xQueueReceiveFromISR>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d102      	bne.n	8007de4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8007dde:	2310      	movs	r3, #16
 8007de0:	617b      	str	r3, [r7, #20]
 8007de2:	e001      	b.n	8007de8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007de4:	2300      	movs	r3, #0
 8007de6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007de8:	6a3b      	ldr	r3, [r7, #32]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d01d      	beq.n	8007e2a <osMessageGet+0xca>
 8007dee:	4b15      	ldr	r3, [pc, #84]	@ (8007e44 <osMessageGet+0xe4>)
 8007df0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007df4:	601a      	str	r2, [r3, #0]
 8007df6:	f3bf 8f4f 	dsb	sy
 8007dfa:	f3bf 8f6f 	isb	sy
 8007dfe:	e014      	b.n	8007e2a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007e00:	f107 0314 	add.w	r3, r7, #20
 8007e04:	3304      	adds	r3, #4
 8007e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e08:	4619      	mov	r1, r3
 8007e0a:	68b8      	ldr	r0, [r7, #8]
 8007e0c:	f000 fcb8 	bl	8008780 <xQueueReceive>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d102      	bne.n	8007e1c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007e16:	2310      	movs	r3, #16
 8007e18:	617b      	str	r3, [r7, #20]
 8007e1a:	e006      	b.n	8007e2a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d101      	bne.n	8007e26 <osMessageGet+0xc6>
 8007e22:	2300      	movs	r3, #0
 8007e24:	e000      	b.n	8007e28 <osMessageGet+0xc8>
 8007e26:	2340      	movs	r3, #64	@ 0x40
 8007e28:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	461c      	mov	r4, r3
 8007e2e:	f107 0314 	add.w	r3, r7, #20
 8007e32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007e36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	372c      	adds	r7, #44	@ 0x2c
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd90      	pop	{r4, r7, pc}
 8007e42:	bf00      	nop
 8007e44:	e000ed04 	.word	0xe000ed04

08007e48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f103 0208 	add.w	r2, r3, #8
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007e60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f103 0208 	add.w	r2, r3, #8
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f103 0208 	add.w	r2, r3, #8
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e7c:	bf00      	nop
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e96:	bf00      	nop
 8007e98:	370c      	adds	r7, #12
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr

08007ea2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b085      	sub	sp, #20
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
 8007eaa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	689a      	ldr	r2, [r3, #8]
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	683a      	ldr	r2, [r7, #0]
 8007ec6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	683a      	ldr	r2, [r7, #0]
 8007ecc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	1c5a      	adds	r2, r3, #1
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	601a      	str	r2, [r3, #0]
}
 8007ede:	bf00      	nop
 8007ee0:	3714      	adds	r7, #20
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007eea:	b480      	push	{r7}
 8007eec:	b085      	sub	sp, #20
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f00:	d103      	bne.n	8007f0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	60fb      	str	r3, [r7, #12]
 8007f08:	e00c      	b.n	8007f24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	3308      	adds	r3, #8
 8007f0e:	60fb      	str	r3, [r7, #12]
 8007f10:	e002      	b.n	8007f18 <vListInsert+0x2e>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	60fb      	str	r3, [r7, #12]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	68ba      	ldr	r2, [r7, #8]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d2f6      	bcs.n	8007f12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	685a      	ldr	r2, [r3, #4]
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	683a      	ldr	r2, [r7, #0]
 8007f32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	683a      	ldr	r2, [r7, #0]
 8007f3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	1c5a      	adds	r2, r3, #1
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	601a      	str	r2, [r3, #0]
}
 8007f50:	bf00      	nop
 8007f52:	3714      	adds	r7, #20
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	6892      	ldr	r2, [r2, #8]
 8007f72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	6852      	ldr	r2, [r2, #4]
 8007f7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d103      	bne.n	8007f90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	689a      	ldr	r2, [r3, #8]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	1e5a      	subs	r2, r3, #1
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3714      	adds	r7, #20
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d10d      	bne.n	8007fe0 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc8:	b672      	cpsid	i
 8007fca:	f383 8811 	msr	BASEPRI, r3
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	f3bf 8f4f 	dsb	sy
 8007fd6:	b662      	cpsie	i
 8007fd8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007fda:	bf00      	nop
 8007fdc:	bf00      	nop
 8007fde:	e7fd      	b.n	8007fdc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007fe0:	f002 f97c 	bl	800a2dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fec:	68f9      	ldr	r1, [r7, #12]
 8007fee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007ff0:	fb01 f303 	mul.w	r3, r1, r3
 8007ff4:	441a      	add	r2, r3
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008010:	3b01      	subs	r3, #1
 8008012:	68f9      	ldr	r1, [r7, #12]
 8008014:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008016:	fb01 f303 	mul.w	r3, r1, r3
 800801a:	441a      	add	r2, r3
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	22ff      	movs	r2, #255	@ 0xff
 8008024:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	22ff      	movs	r2, #255	@ 0xff
 800802c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d114      	bne.n	8008060 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d01a      	beq.n	8008074 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	3310      	adds	r3, #16
 8008042:	4618      	mov	r0, r3
 8008044:	f001 fc2e 	bl	80098a4 <xTaskRemoveFromEventList>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d012      	beq.n	8008074 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800804e:	4b0d      	ldr	r3, [pc, #52]	@ (8008084 <xQueueGenericReset+0xd4>)
 8008050:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	f3bf 8f4f 	dsb	sy
 800805a:	f3bf 8f6f 	isb	sy
 800805e:	e009      	b.n	8008074 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	3310      	adds	r3, #16
 8008064:	4618      	mov	r0, r3
 8008066:	f7ff feef 	bl	8007e48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	3324      	adds	r3, #36	@ 0x24
 800806e:	4618      	mov	r0, r3
 8008070:	f7ff feea 	bl	8007e48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008074:	f002 f968 	bl	800a348 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008078:	2301      	movs	r3, #1
}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	e000ed04 	.word	0xe000ed04

08008088 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008088:	b580      	push	{r7, lr}
 800808a:	b08e      	sub	sp, #56	@ 0x38
 800808c:	af02      	add	r7, sp, #8
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]
 8008094:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10d      	bne.n	80080b8 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800809c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080a0:	b672      	cpsid	i
 80080a2:	f383 8811 	msr	BASEPRI, r3
 80080a6:	f3bf 8f6f 	isb	sy
 80080aa:	f3bf 8f4f 	dsb	sy
 80080ae:	b662      	cpsie	i
 80080b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80080b2:	bf00      	nop
 80080b4:	bf00      	nop
 80080b6:	e7fd      	b.n	80080b4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10d      	bne.n	80080da <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80080be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080c2:	b672      	cpsid	i
 80080c4:	f383 8811 	msr	BASEPRI, r3
 80080c8:	f3bf 8f6f 	isb	sy
 80080cc:	f3bf 8f4f 	dsb	sy
 80080d0:	b662      	cpsie	i
 80080d2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80080d4:	bf00      	nop
 80080d6:	bf00      	nop
 80080d8:	e7fd      	b.n	80080d6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d002      	beq.n	80080e6 <xQueueGenericCreateStatic+0x5e>
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d001      	beq.n	80080ea <xQueueGenericCreateStatic+0x62>
 80080e6:	2301      	movs	r3, #1
 80080e8:	e000      	b.n	80080ec <xQueueGenericCreateStatic+0x64>
 80080ea:	2300      	movs	r3, #0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d10d      	bne.n	800810c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80080f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f4:	b672      	cpsid	i
 80080f6:	f383 8811 	msr	BASEPRI, r3
 80080fa:	f3bf 8f6f 	isb	sy
 80080fe:	f3bf 8f4f 	dsb	sy
 8008102:	b662      	cpsie	i
 8008104:	623b      	str	r3, [r7, #32]
}
 8008106:	bf00      	nop
 8008108:	bf00      	nop
 800810a:	e7fd      	b.n	8008108 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d102      	bne.n	8008118 <xQueueGenericCreateStatic+0x90>
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d101      	bne.n	800811c <xQueueGenericCreateStatic+0x94>
 8008118:	2301      	movs	r3, #1
 800811a:	e000      	b.n	800811e <xQueueGenericCreateStatic+0x96>
 800811c:	2300      	movs	r3, #0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d10d      	bne.n	800813e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8008122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008126:	b672      	cpsid	i
 8008128:	f383 8811 	msr	BASEPRI, r3
 800812c:	f3bf 8f6f 	isb	sy
 8008130:	f3bf 8f4f 	dsb	sy
 8008134:	b662      	cpsie	i
 8008136:	61fb      	str	r3, [r7, #28]
}
 8008138:	bf00      	nop
 800813a:	bf00      	nop
 800813c:	e7fd      	b.n	800813a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800813e:	2348      	movs	r3, #72	@ 0x48
 8008140:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	2b48      	cmp	r3, #72	@ 0x48
 8008146:	d00d      	beq.n	8008164 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8008148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800814c:	b672      	cpsid	i
 800814e:	f383 8811 	msr	BASEPRI, r3
 8008152:	f3bf 8f6f 	isb	sy
 8008156:	f3bf 8f4f 	dsb	sy
 800815a:	b662      	cpsie	i
 800815c:	61bb      	str	r3, [r7, #24]
}
 800815e:	bf00      	nop
 8008160:	bf00      	nop
 8008162:	e7fd      	b.n	8008160 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008164:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800816a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800816c:	2b00      	cmp	r3, #0
 800816e:	d00d      	beq.n	800818c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008172:	2201      	movs	r2, #1
 8008174:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008178:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800817c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800817e:	9300      	str	r3, [sp, #0]
 8008180:	4613      	mov	r3, r2
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	68b9      	ldr	r1, [r7, #8]
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f000 f848 	bl	800821c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800818c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800818e:	4618      	mov	r0, r3
 8008190:	3730      	adds	r7, #48	@ 0x30
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008196:	b580      	push	{r7, lr}
 8008198:	b08a      	sub	sp, #40	@ 0x28
 800819a:	af02      	add	r7, sp, #8
 800819c:	60f8      	str	r0, [r7, #12]
 800819e:	60b9      	str	r1, [r7, #8]
 80081a0:	4613      	mov	r3, r2
 80081a2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10d      	bne.n	80081c6 <xQueueGenericCreate+0x30>
	__asm volatile
 80081aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ae:	b672      	cpsid	i
 80081b0:	f383 8811 	msr	BASEPRI, r3
 80081b4:	f3bf 8f6f 	isb	sy
 80081b8:	f3bf 8f4f 	dsb	sy
 80081bc:	b662      	cpsie	i
 80081be:	613b      	str	r3, [r7, #16]
}
 80081c0:	bf00      	nop
 80081c2:	bf00      	nop
 80081c4:	e7fd      	b.n	80081c2 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d102      	bne.n	80081d2 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80081cc:	2300      	movs	r3, #0
 80081ce:	61fb      	str	r3, [r7, #28]
 80081d0:	e004      	b.n	80081dc <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	fb02 f303 	mul.w	r3, r2, r3
 80081da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	3348      	adds	r3, #72	@ 0x48
 80081e0:	4618      	mov	r0, r3
 80081e2:	f002 f9a9 	bl	800a538 <pvPortMalloc>
 80081e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80081e8:	69bb      	ldr	r3, [r7, #24]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d011      	beq.n	8008212 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	3348      	adds	r3, #72	@ 0x48
 80081f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008200:	79fa      	ldrb	r2, [r7, #7]
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	9300      	str	r3, [sp, #0]
 8008206:	4613      	mov	r3, r2
 8008208:	697a      	ldr	r2, [r7, #20]
 800820a:	68b9      	ldr	r1, [r7, #8]
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f000 f805 	bl	800821c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008212:	69bb      	ldr	r3, [r7, #24]
	}
 8008214:	4618      	mov	r0, r3
 8008216:	3720      	adds	r7, #32
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	607a      	str	r2, [r7, #4]
 8008228:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d103      	bne.n	8008238 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	69ba      	ldr	r2, [r7, #24]
 8008234:	601a      	str	r2, [r3, #0]
 8008236:	e002      	b.n	800823e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800823e:	69bb      	ldr	r3, [r7, #24]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800824a:	2101      	movs	r1, #1
 800824c:	69b8      	ldr	r0, [r7, #24]
 800824e:	f7ff feaf 	bl	8007fb0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008252:	bf00      	nop
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800825a:	b580      	push	{r7, lr}
 800825c:	b082      	sub	sp, #8
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00e      	beq.n	8008286 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800827a:	2300      	movs	r3, #0
 800827c:	2200      	movs	r2, #0
 800827e:	2100      	movs	r1, #0
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f837 	bl	80082f4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008286:	bf00      	nop
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800828e:	b580      	push	{r7, lr}
 8008290:	b086      	sub	sp, #24
 8008292:	af00      	add	r7, sp, #0
 8008294:	4603      	mov	r3, r0
 8008296:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008298:	2301      	movs	r3, #1
 800829a:	617b      	str	r3, [r7, #20]
 800829c:	2300      	movs	r3, #0
 800829e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80082a0:	79fb      	ldrb	r3, [r7, #7]
 80082a2:	461a      	mov	r2, r3
 80082a4:	6939      	ldr	r1, [r7, #16]
 80082a6:	6978      	ldr	r0, [r7, #20]
 80082a8:	f7ff ff75 	bl	8008196 <xQueueGenericCreate>
 80082ac:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80082ae:	68f8      	ldr	r0, [r7, #12]
 80082b0:	f7ff ffd3 	bl	800825a <prvInitialiseMutex>

		return xNewQueue;
 80082b4:	68fb      	ldr	r3, [r7, #12]
	}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3718      	adds	r7, #24
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b088      	sub	sp, #32
 80082c2:	af02      	add	r7, sp, #8
 80082c4:	4603      	mov	r3, r0
 80082c6:	6039      	str	r1, [r7, #0]
 80082c8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80082ca:	2301      	movs	r3, #1
 80082cc:	617b      	str	r3, [r7, #20]
 80082ce:	2300      	movs	r3, #0
 80082d0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80082d2:	79fb      	ldrb	r3, [r7, #7]
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	2200      	movs	r2, #0
 80082da:	6939      	ldr	r1, [r7, #16]
 80082dc:	6978      	ldr	r0, [r7, #20]
 80082de:	f7ff fed3 	bl	8008088 <xQueueGenericCreateStatic>
 80082e2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f7ff ffb8 	bl	800825a <prvInitialiseMutex>

		return xNewQueue;
 80082ea:	68fb      	ldr	r3, [r7, #12]
	}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3718      	adds	r7, #24
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b08e      	sub	sp, #56	@ 0x38
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	607a      	str	r2, [r7, #4]
 8008300:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008302:	2300      	movs	r3, #0
 8008304:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800830a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10d      	bne.n	800832c <xQueueGenericSend+0x38>
	__asm volatile
 8008310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008314:	b672      	cpsid	i
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	b662      	cpsie	i
 8008324:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008326:	bf00      	nop
 8008328:	bf00      	nop
 800832a:	e7fd      	b.n	8008328 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d103      	bne.n	800833a <xQueueGenericSend+0x46>
 8008332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008336:	2b00      	cmp	r3, #0
 8008338:	d101      	bne.n	800833e <xQueueGenericSend+0x4a>
 800833a:	2301      	movs	r3, #1
 800833c:	e000      	b.n	8008340 <xQueueGenericSend+0x4c>
 800833e:	2300      	movs	r3, #0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d10d      	bne.n	8008360 <xQueueGenericSend+0x6c>
	__asm volatile
 8008344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008348:	b672      	cpsid	i
 800834a:	f383 8811 	msr	BASEPRI, r3
 800834e:	f3bf 8f6f 	isb	sy
 8008352:	f3bf 8f4f 	dsb	sy
 8008356:	b662      	cpsie	i
 8008358:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800835a:	bf00      	nop
 800835c:	bf00      	nop
 800835e:	e7fd      	b.n	800835c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	2b02      	cmp	r3, #2
 8008364:	d103      	bne.n	800836e <xQueueGenericSend+0x7a>
 8008366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800836a:	2b01      	cmp	r3, #1
 800836c:	d101      	bne.n	8008372 <xQueueGenericSend+0x7e>
 800836e:	2301      	movs	r3, #1
 8008370:	e000      	b.n	8008374 <xQueueGenericSend+0x80>
 8008372:	2300      	movs	r3, #0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d10d      	bne.n	8008394 <xQueueGenericSend+0xa0>
	__asm volatile
 8008378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800837c:	b672      	cpsid	i
 800837e:	f383 8811 	msr	BASEPRI, r3
 8008382:	f3bf 8f6f 	isb	sy
 8008386:	f3bf 8f4f 	dsb	sy
 800838a:	b662      	cpsie	i
 800838c:	623b      	str	r3, [r7, #32]
}
 800838e:	bf00      	nop
 8008390:	bf00      	nop
 8008392:	e7fd      	b.n	8008390 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008394:	f001 fc4e 	bl	8009c34 <xTaskGetSchedulerState>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d102      	bne.n	80083a4 <xQueueGenericSend+0xb0>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d101      	bne.n	80083a8 <xQueueGenericSend+0xb4>
 80083a4:	2301      	movs	r3, #1
 80083a6:	e000      	b.n	80083aa <xQueueGenericSend+0xb6>
 80083a8:	2300      	movs	r3, #0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d10d      	bne.n	80083ca <xQueueGenericSend+0xd6>
	__asm volatile
 80083ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b2:	b672      	cpsid	i
 80083b4:	f383 8811 	msr	BASEPRI, r3
 80083b8:	f3bf 8f6f 	isb	sy
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	b662      	cpsie	i
 80083c2:	61fb      	str	r3, [r7, #28]
}
 80083c4:	bf00      	nop
 80083c6:	bf00      	nop
 80083c8:	e7fd      	b.n	80083c6 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80083ca:	f001 ff87 	bl	800a2dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d302      	bcc.n	80083e0 <xQueueGenericSend+0xec>
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	2b02      	cmp	r3, #2
 80083de:	d129      	bne.n	8008434 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083e0:	683a      	ldr	r2, [r7, #0]
 80083e2:	68b9      	ldr	r1, [r7, #8]
 80083e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80083e6:	f000 fc6b 	bl	8008cc0 <prvCopyDataToQueue>
 80083ea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d010      	beq.n	8008416 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f6:	3324      	adds	r3, #36	@ 0x24
 80083f8:	4618      	mov	r0, r3
 80083fa:	f001 fa53 	bl	80098a4 <xTaskRemoveFromEventList>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d013      	beq.n	800842c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008404:	4b3f      	ldr	r3, [pc, #252]	@ (8008504 <xQueueGenericSend+0x210>)
 8008406:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800840a:	601a      	str	r2, [r3, #0]
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	f3bf 8f6f 	isb	sy
 8008414:	e00a      	b.n	800842c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008418:	2b00      	cmp	r3, #0
 800841a:	d007      	beq.n	800842c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800841c:	4b39      	ldr	r3, [pc, #228]	@ (8008504 <xQueueGenericSend+0x210>)
 800841e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008422:	601a      	str	r2, [r3, #0]
 8008424:	f3bf 8f4f 	dsb	sy
 8008428:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800842c:	f001 ff8c 	bl	800a348 <vPortExitCritical>
				return pdPASS;
 8008430:	2301      	movs	r3, #1
 8008432:	e063      	b.n	80084fc <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d103      	bne.n	8008442 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800843a:	f001 ff85 	bl	800a348 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800843e:	2300      	movs	r3, #0
 8008440:	e05c      	b.n	80084fc <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008444:	2b00      	cmp	r3, #0
 8008446:	d106      	bne.n	8008456 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008448:	f107 0314 	add.w	r3, r7, #20
 800844c:	4618      	mov	r0, r3
 800844e:	f001 fa8f 	bl	8009970 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008452:	2301      	movs	r3, #1
 8008454:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008456:	f001 ff77 	bl	800a348 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800845a:	f001 f811 	bl	8009480 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800845e:	f001 ff3d 	bl	800a2dc <vPortEnterCritical>
 8008462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008464:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008468:	b25b      	sxtb	r3, r3
 800846a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800846e:	d103      	bne.n	8008478 <xQueueGenericSend+0x184>
 8008470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008472:	2200      	movs	r2, #0
 8008474:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800847a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800847e:	b25b      	sxtb	r3, r3
 8008480:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008484:	d103      	bne.n	800848e <xQueueGenericSend+0x19a>
 8008486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008488:	2200      	movs	r2, #0
 800848a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800848e:	f001 ff5b 	bl	800a348 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008492:	1d3a      	adds	r2, r7, #4
 8008494:	f107 0314 	add.w	r3, r7, #20
 8008498:	4611      	mov	r1, r2
 800849a:	4618      	mov	r0, r3
 800849c:	f001 fa7e 	bl	800999c <xTaskCheckForTimeOut>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d124      	bne.n	80084f0 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80084a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80084a8:	f000 fd02 	bl	8008eb0 <prvIsQueueFull>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d018      	beq.n	80084e4 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80084b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b4:	3310      	adds	r3, #16
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	4611      	mov	r1, r2
 80084ba:	4618      	mov	r0, r3
 80084bc:	f001 f9ca 	bl	8009854 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80084c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80084c2:	f000 fc8d 	bl	8008de0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80084c6:	f000 ffe9 	bl	800949c <xTaskResumeAll>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f47f af7c 	bne.w	80083ca <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80084d2:	4b0c      	ldr	r3, [pc, #48]	@ (8008504 <xQueueGenericSend+0x210>)
 80084d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084d8:	601a      	str	r2, [r3, #0]
 80084da:	f3bf 8f4f 	dsb	sy
 80084de:	f3bf 8f6f 	isb	sy
 80084e2:	e772      	b.n	80083ca <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80084e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80084e6:	f000 fc7b 	bl	8008de0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084ea:	f000 ffd7 	bl	800949c <xTaskResumeAll>
 80084ee:	e76c      	b.n	80083ca <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80084f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80084f2:	f000 fc75 	bl	8008de0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084f6:	f000 ffd1 	bl	800949c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80084fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3738      	adds	r7, #56	@ 0x38
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	e000ed04 	.word	0xe000ed04

08008508 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b08e      	sub	sp, #56	@ 0x38
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	607a      	str	r2, [r7, #4]
 8008514:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800851a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800851c:	2b00      	cmp	r3, #0
 800851e:	d10d      	bne.n	800853c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8008520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008524:	b672      	cpsid	i
 8008526:	f383 8811 	msr	BASEPRI, r3
 800852a:	f3bf 8f6f 	isb	sy
 800852e:	f3bf 8f4f 	dsb	sy
 8008532:	b662      	cpsie	i
 8008534:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008536:	bf00      	nop
 8008538:	bf00      	nop
 800853a:	e7fd      	b.n	8008538 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d103      	bne.n	800854a <xQueueGenericSendFromISR+0x42>
 8008542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008546:	2b00      	cmp	r3, #0
 8008548:	d101      	bne.n	800854e <xQueueGenericSendFromISR+0x46>
 800854a:	2301      	movs	r3, #1
 800854c:	e000      	b.n	8008550 <xQueueGenericSendFromISR+0x48>
 800854e:	2300      	movs	r3, #0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d10d      	bne.n	8008570 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8008554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008558:	b672      	cpsid	i
 800855a:	f383 8811 	msr	BASEPRI, r3
 800855e:	f3bf 8f6f 	isb	sy
 8008562:	f3bf 8f4f 	dsb	sy
 8008566:	b662      	cpsie	i
 8008568:	623b      	str	r3, [r7, #32]
}
 800856a:	bf00      	nop
 800856c:	bf00      	nop
 800856e:	e7fd      	b.n	800856c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	2b02      	cmp	r3, #2
 8008574:	d103      	bne.n	800857e <xQueueGenericSendFromISR+0x76>
 8008576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800857a:	2b01      	cmp	r3, #1
 800857c:	d101      	bne.n	8008582 <xQueueGenericSendFromISR+0x7a>
 800857e:	2301      	movs	r3, #1
 8008580:	e000      	b.n	8008584 <xQueueGenericSendFromISR+0x7c>
 8008582:	2300      	movs	r3, #0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d10d      	bne.n	80085a4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8008588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800858c:	b672      	cpsid	i
 800858e:	f383 8811 	msr	BASEPRI, r3
 8008592:	f3bf 8f6f 	isb	sy
 8008596:	f3bf 8f4f 	dsb	sy
 800859a:	b662      	cpsie	i
 800859c:	61fb      	str	r3, [r7, #28]
}
 800859e:	bf00      	nop
 80085a0:	bf00      	nop
 80085a2:	e7fd      	b.n	80085a0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80085a4:	f001 ff82 	bl	800a4ac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80085a8:	f3ef 8211 	mrs	r2, BASEPRI
 80085ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b0:	b672      	cpsid	i
 80085b2:	f383 8811 	msr	BASEPRI, r3
 80085b6:	f3bf 8f6f 	isb	sy
 80085ba:	f3bf 8f4f 	dsb	sy
 80085be:	b662      	cpsie	i
 80085c0:	61ba      	str	r2, [r7, #24]
 80085c2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80085c4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80085c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80085c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d302      	bcc.n	80085da <xQueueGenericSendFromISR+0xd2>
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d12c      	bne.n	8008634 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80085da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80085e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085e4:	683a      	ldr	r2, [r7, #0]
 80085e6:	68b9      	ldr	r1, [r7, #8]
 80085e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80085ea:	f000 fb69 	bl	8008cc0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80085ee:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80085f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80085f6:	d112      	bne.n	800861e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d016      	beq.n	800862e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008602:	3324      	adds	r3, #36	@ 0x24
 8008604:	4618      	mov	r0, r3
 8008606:	f001 f94d 	bl	80098a4 <xTaskRemoveFromEventList>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00e      	beq.n	800862e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00b      	beq.n	800862e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2201      	movs	r2, #1
 800861a:	601a      	str	r2, [r3, #0]
 800861c:	e007      	b.n	800862e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800861e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008622:	3301      	adds	r3, #1
 8008624:	b2db      	uxtb	r3, r3
 8008626:	b25a      	sxtb	r2, r3
 8008628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800862e:	2301      	movs	r3, #1
 8008630:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8008632:	e001      	b.n	8008638 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008634:	2300      	movs	r3, #0
 8008636:	637b      	str	r3, [r7, #52]	@ 0x34
 8008638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800863a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008642:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008646:	4618      	mov	r0, r3
 8008648:	3738      	adds	r7, #56	@ 0x38
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b08e      	sub	sp, #56	@ 0x38
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
 8008656:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800865c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865e:	2b00      	cmp	r3, #0
 8008660:	d10d      	bne.n	800867e <xQueueGiveFromISR+0x30>
	__asm volatile
 8008662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008666:	b672      	cpsid	i
 8008668:	f383 8811 	msr	BASEPRI, r3
 800866c:	f3bf 8f6f 	isb	sy
 8008670:	f3bf 8f4f 	dsb	sy
 8008674:	b662      	cpsie	i
 8008676:	623b      	str	r3, [r7, #32]
}
 8008678:	bf00      	nop
 800867a:	bf00      	nop
 800867c:	e7fd      	b.n	800867a <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800867e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00d      	beq.n	80086a2 <xQueueGiveFromISR+0x54>
	__asm volatile
 8008686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800868a:	b672      	cpsid	i
 800868c:	f383 8811 	msr	BASEPRI, r3
 8008690:	f3bf 8f6f 	isb	sy
 8008694:	f3bf 8f4f 	dsb	sy
 8008698:	b662      	cpsie	i
 800869a:	61fb      	str	r3, [r7, #28]
}
 800869c:	bf00      	nop
 800869e:	bf00      	nop
 80086a0:	e7fd      	b.n	800869e <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80086a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d103      	bne.n	80086b2 <xQueueGiveFromISR+0x64>
 80086aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d101      	bne.n	80086b6 <xQueueGiveFromISR+0x68>
 80086b2:	2301      	movs	r3, #1
 80086b4:	e000      	b.n	80086b8 <xQueueGiveFromISR+0x6a>
 80086b6:	2300      	movs	r3, #0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d10d      	bne.n	80086d8 <xQueueGiveFromISR+0x8a>
	__asm volatile
 80086bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086c0:	b672      	cpsid	i
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	b662      	cpsie	i
 80086d0:	61bb      	str	r3, [r7, #24]
}
 80086d2:	bf00      	nop
 80086d4:	bf00      	nop
 80086d6:	e7fd      	b.n	80086d4 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80086d8:	f001 fee8 	bl	800a4ac <vPortValidateInterruptPriority>
	__asm volatile
 80086dc:	f3ef 8211 	mrs	r2, BASEPRI
 80086e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e4:	b672      	cpsid	i
 80086e6:	f383 8811 	msr	BASEPRI, r3
 80086ea:	f3bf 8f6f 	isb	sy
 80086ee:	f3bf 8f4f 	dsb	sy
 80086f2:	b662      	cpsie	i
 80086f4:	617a      	str	r2, [r7, #20]
 80086f6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80086f8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80086fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008700:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008706:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008708:	429a      	cmp	r2, r3
 800870a:	d22b      	bcs.n	8008764 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800870c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800870e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008712:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008718:	1c5a      	adds	r2, r3, #1
 800871a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800871c:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800871e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008722:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008726:	d112      	bne.n	800874e <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800872a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800872c:	2b00      	cmp	r3, #0
 800872e:	d016      	beq.n	800875e <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008732:	3324      	adds	r3, #36	@ 0x24
 8008734:	4618      	mov	r0, r3
 8008736:	f001 f8b5 	bl	80098a4 <xTaskRemoveFromEventList>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00e      	beq.n	800875e <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d00b      	beq.n	800875e <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	2201      	movs	r2, #1
 800874a:	601a      	str	r2, [r3, #0]
 800874c:	e007      	b.n	800875e <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800874e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008752:	3301      	adds	r3, #1
 8008754:	b2db      	uxtb	r3, r3
 8008756:	b25a      	sxtb	r2, r3
 8008758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800875a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800875e:	2301      	movs	r3, #1
 8008760:	637b      	str	r3, [r7, #52]	@ 0x34
 8008762:	e001      	b.n	8008768 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008764:	2300      	movs	r3, #0
 8008766:	637b      	str	r3, [r7, #52]	@ 0x34
 8008768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800876a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f383 8811 	msr	BASEPRI, r3
}
 8008772:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008776:	4618      	mov	r0, r3
 8008778:	3738      	adds	r7, #56	@ 0x38
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
	...

08008780 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b08c      	sub	sp, #48	@ 0x30
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800878c:	2300      	movs	r3, #0
 800878e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008796:	2b00      	cmp	r3, #0
 8008798:	d10d      	bne.n	80087b6 <xQueueReceive+0x36>
	__asm volatile
 800879a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800879e:	b672      	cpsid	i
 80087a0:	f383 8811 	msr	BASEPRI, r3
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	f3bf 8f4f 	dsb	sy
 80087ac:	b662      	cpsie	i
 80087ae:	623b      	str	r3, [r7, #32]
}
 80087b0:	bf00      	nop
 80087b2:	bf00      	nop
 80087b4:	e7fd      	b.n	80087b2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d103      	bne.n	80087c4 <xQueueReceive+0x44>
 80087bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d101      	bne.n	80087c8 <xQueueReceive+0x48>
 80087c4:	2301      	movs	r3, #1
 80087c6:	e000      	b.n	80087ca <xQueueReceive+0x4a>
 80087c8:	2300      	movs	r3, #0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d10d      	bne.n	80087ea <xQueueReceive+0x6a>
	__asm volatile
 80087ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d2:	b672      	cpsid	i
 80087d4:	f383 8811 	msr	BASEPRI, r3
 80087d8:	f3bf 8f6f 	isb	sy
 80087dc:	f3bf 8f4f 	dsb	sy
 80087e0:	b662      	cpsie	i
 80087e2:	61fb      	str	r3, [r7, #28]
}
 80087e4:	bf00      	nop
 80087e6:	bf00      	nop
 80087e8:	e7fd      	b.n	80087e6 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087ea:	f001 fa23 	bl	8009c34 <xTaskGetSchedulerState>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d102      	bne.n	80087fa <xQueueReceive+0x7a>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d101      	bne.n	80087fe <xQueueReceive+0x7e>
 80087fa:	2301      	movs	r3, #1
 80087fc:	e000      	b.n	8008800 <xQueueReceive+0x80>
 80087fe:	2300      	movs	r3, #0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d10d      	bne.n	8008820 <xQueueReceive+0xa0>
	__asm volatile
 8008804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008808:	b672      	cpsid	i
 800880a:	f383 8811 	msr	BASEPRI, r3
 800880e:	f3bf 8f6f 	isb	sy
 8008812:	f3bf 8f4f 	dsb	sy
 8008816:	b662      	cpsie	i
 8008818:	61bb      	str	r3, [r7, #24]
}
 800881a:	bf00      	nop
 800881c:	bf00      	nop
 800881e:	e7fd      	b.n	800881c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008820:	f001 fd5c 	bl	800a2dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008828:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800882a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800882c:	2b00      	cmp	r3, #0
 800882e:	d01f      	beq.n	8008870 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008830:	68b9      	ldr	r1, [r7, #8]
 8008832:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008834:	f000 faae 	bl	8008d94 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800883a:	1e5a      	subs	r2, r3, #1
 800883c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800883e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008842:	691b      	ldr	r3, [r3, #16]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d00f      	beq.n	8008868 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800884a:	3310      	adds	r3, #16
 800884c:	4618      	mov	r0, r3
 800884e:	f001 f829 	bl	80098a4 <xTaskRemoveFromEventList>
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d007      	beq.n	8008868 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008858:	4b3c      	ldr	r3, [pc, #240]	@ (800894c <xQueueReceive+0x1cc>)
 800885a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800885e:	601a      	str	r2, [r3, #0]
 8008860:	f3bf 8f4f 	dsb	sy
 8008864:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008868:	f001 fd6e 	bl	800a348 <vPortExitCritical>
				return pdPASS;
 800886c:	2301      	movs	r3, #1
 800886e:	e069      	b.n	8008944 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d103      	bne.n	800887e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008876:	f001 fd67 	bl	800a348 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800887a:	2300      	movs	r3, #0
 800887c:	e062      	b.n	8008944 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800887e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008880:	2b00      	cmp	r3, #0
 8008882:	d106      	bne.n	8008892 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008884:	f107 0310 	add.w	r3, r7, #16
 8008888:	4618      	mov	r0, r3
 800888a:	f001 f871 	bl	8009970 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800888e:	2301      	movs	r3, #1
 8008890:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008892:	f001 fd59 	bl	800a348 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008896:	f000 fdf3 	bl	8009480 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800889a:	f001 fd1f 	bl	800a2dc <vPortEnterCritical>
 800889e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80088a4:	b25b      	sxtb	r3, r3
 80088a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088aa:	d103      	bne.n	80088b4 <xQueueReceive+0x134>
 80088ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ae:	2200      	movs	r2, #0
 80088b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088ba:	b25b      	sxtb	r3, r3
 80088bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088c0:	d103      	bne.n	80088ca <xQueueReceive+0x14a>
 80088c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088c4:	2200      	movs	r2, #0
 80088c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088ca:	f001 fd3d 	bl	800a348 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088ce:	1d3a      	adds	r2, r7, #4
 80088d0:	f107 0310 	add.w	r3, r7, #16
 80088d4:	4611      	mov	r1, r2
 80088d6:	4618      	mov	r0, r3
 80088d8:	f001 f860 	bl	800999c <xTaskCheckForTimeOut>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d123      	bne.n	800892a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088e4:	f000 face 	bl	8008e84 <prvIsQueueEmpty>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d017      	beq.n	800891e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80088ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088f0:	3324      	adds	r3, #36	@ 0x24
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	4611      	mov	r1, r2
 80088f6:	4618      	mov	r0, r3
 80088f8:	f000 ffac 	bl	8009854 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80088fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088fe:	f000 fa6f 	bl	8008de0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008902:	f000 fdcb 	bl	800949c <xTaskResumeAll>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d189      	bne.n	8008820 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800890c:	4b0f      	ldr	r3, [pc, #60]	@ (800894c <xQueueReceive+0x1cc>)
 800890e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008912:	601a      	str	r2, [r3, #0]
 8008914:	f3bf 8f4f 	dsb	sy
 8008918:	f3bf 8f6f 	isb	sy
 800891c:	e780      	b.n	8008820 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800891e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008920:	f000 fa5e 	bl	8008de0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008924:	f000 fdba 	bl	800949c <xTaskResumeAll>
 8008928:	e77a      	b.n	8008820 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800892a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800892c:	f000 fa58 	bl	8008de0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008930:	f000 fdb4 	bl	800949c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008934:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008936:	f000 faa5 	bl	8008e84 <prvIsQueueEmpty>
 800893a:	4603      	mov	r3, r0
 800893c:	2b00      	cmp	r3, #0
 800893e:	f43f af6f 	beq.w	8008820 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008942:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008944:	4618      	mov	r0, r3
 8008946:	3730      	adds	r7, #48	@ 0x30
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}
 800894c:	e000ed04 	.word	0xe000ed04

08008950 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b08e      	sub	sp, #56	@ 0x38
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800895a:	2300      	movs	r3, #0
 800895c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008962:	2300      	movs	r3, #0
 8008964:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008968:	2b00      	cmp	r3, #0
 800896a:	d10d      	bne.n	8008988 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800896c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008970:	b672      	cpsid	i
 8008972:	f383 8811 	msr	BASEPRI, r3
 8008976:	f3bf 8f6f 	isb	sy
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	b662      	cpsie	i
 8008980:	623b      	str	r3, [r7, #32]
}
 8008982:	bf00      	nop
 8008984:	bf00      	nop
 8008986:	e7fd      	b.n	8008984 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800898a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00d      	beq.n	80089ac <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8008990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008994:	b672      	cpsid	i
 8008996:	f383 8811 	msr	BASEPRI, r3
 800899a:	f3bf 8f6f 	isb	sy
 800899e:	f3bf 8f4f 	dsb	sy
 80089a2:	b662      	cpsie	i
 80089a4:	61fb      	str	r3, [r7, #28]
}
 80089a6:	bf00      	nop
 80089a8:	bf00      	nop
 80089aa:	e7fd      	b.n	80089a8 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089ac:	f001 f942 	bl	8009c34 <xTaskGetSchedulerState>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d102      	bne.n	80089bc <xQueueSemaphoreTake+0x6c>
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d101      	bne.n	80089c0 <xQueueSemaphoreTake+0x70>
 80089bc:	2301      	movs	r3, #1
 80089be:	e000      	b.n	80089c2 <xQueueSemaphoreTake+0x72>
 80089c0:	2300      	movs	r3, #0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d10d      	bne.n	80089e2 <xQueueSemaphoreTake+0x92>
	__asm volatile
 80089c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ca:	b672      	cpsid	i
 80089cc:	f383 8811 	msr	BASEPRI, r3
 80089d0:	f3bf 8f6f 	isb	sy
 80089d4:	f3bf 8f4f 	dsb	sy
 80089d8:	b662      	cpsie	i
 80089da:	61bb      	str	r3, [r7, #24]
}
 80089dc:	bf00      	nop
 80089de:	bf00      	nop
 80089e0:	e7fd      	b.n	80089de <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089e2:	f001 fc7b 	bl	800a2dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80089e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ea:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80089ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d024      	beq.n	8008a3c <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80089f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089f4:	1e5a      	subs	r2, r3, #1
 80089f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089f8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80089fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d104      	bne.n	8008a0c <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008a02:	f001 fae1 	bl	8009fc8 <pvTaskIncrementMutexHeldCount>
 8008a06:	4602      	mov	r2, r0
 8008a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a0a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00f      	beq.n	8008a34 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a16:	3310      	adds	r3, #16
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f000 ff43 	bl	80098a4 <xTaskRemoveFromEventList>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d007      	beq.n	8008a34 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008a24:	4b55      	ldr	r3, [pc, #340]	@ (8008b7c <xQueueSemaphoreTake+0x22c>)
 8008a26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a2a:	601a      	str	r2, [r3, #0]
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008a34:	f001 fc88 	bl	800a348 <vPortExitCritical>
				return pdPASS;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e09a      	b.n	8008b72 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d114      	bne.n	8008a6c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00d      	beq.n	8008a64 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8008a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a4c:	b672      	cpsid	i
 8008a4e:	f383 8811 	msr	BASEPRI, r3
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	f3bf 8f4f 	dsb	sy
 8008a5a:	b662      	cpsie	i
 8008a5c:	617b      	str	r3, [r7, #20]
}
 8008a5e:	bf00      	nop
 8008a60:	bf00      	nop
 8008a62:	e7fd      	b.n	8008a60 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008a64:	f001 fc70 	bl	800a348 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	e082      	b.n	8008b72 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d106      	bne.n	8008a80 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a72:	f107 030c 	add.w	r3, r7, #12
 8008a76:	4618      	mov	r0, r3
 8008a78:	f000 ff7a 	bl	8009970 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a80:	f001 fc62 	bl	800a348 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a84:	f000 fcfc 	bl	8009480 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a88:	f001 fc28 	bl	800a2dc <vPortEnterCritical>
 8008a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a8e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a92:	b25b      	sxtb	r3, r3
 8008a94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a98:	d103      	bne.n	8008aa2 <xQueueSemaphoreTake+0x152>
 8008a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aa4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008aa8:	b25b      	sxtb	r3, r3
 8008aaa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008aae:	d103      	bne.n	8008ab8 <xQueueSemaphoreTake+0x168>
 8008ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ab8:	f001 fc46 	bl	800a348 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008abc:	463a      	mov	r2, r7
 8008abe:	f107 030c 	add.w	r3, r7, #12
 8008ac2:	4611      	mov	r1, r2
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f000 ff69 	bl	800999c <xTaskCheckForTimeOut>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d132      	bne.n	8008b36 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ad0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008ad2:	f000 f9d7 	bl	8008e84 <prvIsQueueEmpty>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d026      	beq.n	8008b2a <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d109      	bne.n	8008af8 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8008ae4:	f001 fbfa 	bl	800a2dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	4618      	mov	r0, r3
 8008aee:	f001 f8bf 	bl	8009c70 <xTaskPriorityInherit>
 8008af2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008af4:	f001 fc28 	bl	800a348 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008afa:	3324      	adds	r3, #36	@ 0x24
 8008afc:	683a      	ldr	r2, [r7, #0]
 8008afe:	4611      	mov	r1, r2
 8008b00:	4618      	mov	r0, r3
 8008b02:	f000 fea7 	bl	8009854 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008b06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b08:	f000 f96a 	bl	8008de0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008b0c:	f000 fcc6 	bl	800949c <xTaskResumeAll>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	f47f af65 	bne.w	80089e2 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8008b18:	4b18      	ldr	r3, [pc, #96]	@ (8008b7c <xQueueSemaphoreTake+0x22c>)
 8008b1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b1e:	601a      	str	r2, [r3, #0]
 8008b20:	f3bf 8f4f 	dsb	sy
 8008b24:	f3bf 8f6f 	isb	sy
 8008b28:	e75b      	b.n	80089e2 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008b2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b2c:	f000 f958 	bl	8008de0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b30:	f000 fcb4 	bl	800949c <xTaskResumeAll>
 8008b34:	e755      	b.n	80089e2 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008b36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b38:	f000 f952 	bl	8008de0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b3c:	f000 fcae 	bl	800949c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b42:	f000 f99f 	bl	8008e84 <prvIsQueueEmpty>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f43f af4a 	beq.w	80089e2 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00d      	beq.n	8008b70 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8008b54:	f001 fbc2 	bl	800a2dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008b58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b5a:	f000 f899 	bl	8008c90 <prvGetDisinheritPriorityAfterTimeout>
 8008b5e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008b66:	4618      	mov	r0, r3
 8008b68:	f001 f98e 	bl	8009e88 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008b6c:	f001 fbec 	bl	800a348 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3738      	adds	r7, #56	@ 0x38
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	e000ed04 	.word	0xe000ed04

08008b80 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b08e      	sub	sp, #56	@ 0x38
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d10d      	bne.n	8008bb2 <xQueueReceiveFromISR+0x32>
	__asm volatile
 8008b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b9a:	b672      	cpsid	i
 8008b9c:	f383 8811 	msr	BASEPRI, r3
 8008ba0:	f3bf 8f6f 	isb	sy
 8008ba4:	f3bf 8f4f 	dsb	sy
 8008ba8:	b662      	cpsie	i
 8008baa:	623b      	str	r3, [r7, #32]
}
 8008bac:	bf00      	nop
 8008bae:	bf00      	nop
 8008bb0:	e7fd      	b.n	8008bae <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d103      	bne.n	8008bc0 <xQueueReceiveFromISR+0x40>
 8008bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <xQueueReceiveFromISR+0x44>
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e000      	b.n	8008bc6 <xQueueReceiveFromISR+0x46>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10d      	bne.n	8008be6 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8008bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bce:	b672      	cpsid	i
 8008bd0:	f383 8811 	msr	BASEPRI, r3
 8008bd4:	f3bf 8f6f 	isb	sy
 8008bd8:	f3bf 8f4f 	dsb	sy
 8008bdc:	b662      	cpsie	i
 8008bde:	61fb      	str	r3, [r7, #28]
}
 8008be0:	bf00      	nop
 8008be2:	bf00      	nop
 8008be4:	e7fd      	b.n	8008be2 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008be6:	f001 fc61 	bl	800a4ac <vPortValidateInterruptPriority>
	__asm volatile
 8008bea:	f3ef 8211 	mrs	r2, BASEPRI
 8008bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bf2:	b672      	cpsid	i
 8008bf4:	f383 8811 	msr	BASEPRI, r3
 8008bf8:	f3bf 8f6f 	isb	sy
 8008bfc:	f3bf 8f4f 	dsb	sy
 8008c00:	b662      	cpsie	i
 8008c02:	61ba      	str	r2, [r7, #24]
 8008c04:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008c06:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c0e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d02f      	beq.n	8008c76 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c20:	68b9      	ldr	r1, [r7, #8]
 8008c22:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c24:	f000 f8b6 	bl	8008d94 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c2a:	1e5a      	subs	r2, r3, #1
 8008c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c2e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008c30:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008c34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c38:	d112      	bne.n	8008c60 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d016      	beq.n	8008c70 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c44:	3310      	adds	r3, #16
 8008c46:	4618      	mov	r0, r3
 8008c48:	f000 fe2c 	bl	80098a4 <xTaskRemoveFromEventList>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00e      	beq.n	8008c70 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d00b      	beq.n	8008c70 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	601a      	str	r2, [r3, #0]
 8008c5e:	e007      	b.n	8008c70 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008c60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c64:	3301      	adds	r3, #1
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	b25a      	sxtb	r2, r3
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8008c70:	2301      	movs	r3, #1
 8008c72:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c74:	e001      	b.n	8008c7a <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8008c76:	2300      	movs	r3, #0
 8008c78:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c7c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	f383 8811 	msr	BASEPRI, r3
}
 8008c84:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3738      	adds	r7, #56	@ 0x38
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008c90:	b480      	push	{r7}
 8008c92:	b085      	sub	sp, #20
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d006      	beq.n	8008cae <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f1c3 0307 	rsb	r3, r3, #7
 8008caa:	60fb      	str	r3, [r7, #12]
 8008cac:	e001      	b.n	8008cb2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
	}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3714      	adds	r7, #20
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b086      	sub	sp, #24
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cd4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d10d      	bne.n	8008cfa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d14d      	bne.n	8008d82 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	4618      	mov	r0, r3
 8008cec:	f001 f840 	bl	8009d70 <xTaskPriorityDisinherit>
 8008cf0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	609a      	str	r2, [r3, #8]
 8008cf8:	e043      	b.n	8008d82 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d119      	bne.n	8008d34 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6858      	ldr	r0, [r3, #4]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d08:	461a      	mov	r2, r3
 8008d0a:	68b9      	ldr	r1, [r7, #8]
 8008d0c:	f00c f885 	bl	8014e1a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	685a      	ldr	r2, [r3, #4]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d18:	441a      	add	r2, r3
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	685a      	ldr	r2, [r3, #4]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d32b      	bcc.n	8008d82 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	605a      	str	r2, [r3, #4]
 8008d32:	e026      	b.n	8008d82 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	68d8      	ldr	r0, [r3, #12]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	68b9      	ldr	r1, [r7, #8]
 8008d40:	f00c f86b 	bl	8014e1a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	68da      	ldr	r2, [r3, #12]
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d4c:	425b      	negs	r3, r3
 8008d4e:	441a      	add	r2, r3
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	68da      	ldr	r2, [r3, #12]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d207      	bcs.n	8008d70 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	689a      	ldr	r2, [r3, #8]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d68:	425b      	negs	r3, r3
 8008d6a:	441a      	add	r2, r3
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2b02      	cmp	r3, #2
 8008d74:	d105      	bne.n	8008d82 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d002      	beq.n	8008d82 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	1c5a      	adds	r2, r3, #1
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008d8a:	697b      	ldr	r3, [r7, #20]
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3718      	adds	r7, #24
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d018      	beq.n	8008dd8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	68da      	ldr	r2, [r3, #12]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dae:	441a      	add	r2, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	68da      	ldr	r2, [r3, #12]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d303      	bcc.n	8008dc8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	68d9      	ldr	r1, [r3, #12]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	6838      	ldr	r0, [r7, #0]
 8008dd4:	f00c f821 	bl	8014e1a <memcpy>
	}
}
 8008dd8:	bf00      	nop
 8008dda:	3708      	adds	r7, #8
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008de8:	f001 fa78 	bl	800a2dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008df2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008df4:	e011      	b.n	8008e1a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d012      	beq.n	8008e24 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	3324      	adds	r3, #36	@ 0x24
 8008e02:	4618      	mov	r0, r3
 8008e04:	f000 fd4e 	bl	80098a4 <xTaskRemoveFromEventList>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d001      	beq.n	8008e12 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008e0e:	f000 fe2d 	bl	8009a6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008e12:	7bfb      	ldrb	r3, [r7, #15]
 8008e14:	3b01      	subs	r3, #1
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	dce9      	bgt.n	8008df6 <prvUnlockQueue+0x16>
 8008e22:	e000      	b.n	8008e26 <prvUnlockQueue+0x46>
					break;
 8008e24:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	22ff      	movs	r2, #255	@ 0xff
 8008e2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008e2e:	f001 fa8b 	bl	800a348 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008e32:	f001 fa53 	bl	800a2dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e3c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e3e:	e011      	b.n	8008e64 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	691b      	ldr	r3, [r3, #16]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d012      	beq.n	8008e6e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	3310      	adds	r3, #16
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f000 fd29 	bl	80098a4 <xTaskRemoveFromEventList>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d001      	beq.n	8008e5c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008e58:	f000 fe08 	bl	8009a6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008e5c:	7bbb      	ldrb	r3, [r7, #14]
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	dce9      	bgt.n	8008e40 <prvUnlockQueue+0x60>
 8008e6c:	e000      	b.n	8008e70 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008e6e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	22ff      	movs	r2, #255	@ 0xff
 8008e74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008e78:	f001 fa66 	bl	800a348 <vPortExitCritical>
}
 8008e7c:	bf00      	nop
 8008e7e:	3710      	adds	r7, #16
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e8c:	f001 fa26 	bl	800a2dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d102      	bne.n	8008e9e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	60fb      	str	r3, [r7, #12]
 8008e9c:	e001      	b.n	8008ea2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ea2:	f001 fa51 	bl	800a348 <vPortExitCritical>

	return xReturn;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3710      	adds	r7, #16
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008eb8:	f001 fa10 	bl	800a2dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d102      	bne.n	8008ece <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	60fb      	str	r3, [r7, #12]
 8008ecc:	e001      	b.n	8008ed2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ed2:	f001 fa39 	bl	800a348 <vPortExitCritical>

	return xReturn;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b08e      	sub	sp, #56	@ 0x38
 8008ee4:	af04      	add	r7, sp, #16
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	607a      	str	r2, [r7, #4]
 8008eec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d10d      	bne.n	8008f10 <xTaskCreateStatic+0x30>
	__asm volatile
 8008ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ef8:	b672      	cpsid	i
 8008efa:	f383 8811 	msr	BASEPRI, r3
 8008efe:	f3bf 8f6f 	isb	sy
 8008f02:	f3bf 8f4f 	dsb	sy
 8008f06:	b662      	cpsie	i
 8008f08:	623b      	str	r3, [r7, #32]
}
 8008f0a:	bf00      	nop
 8008f0c:	bf00      	nop
 8008f0e:	e7fd      	b.n	8008f0c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d10d      	bne.n	8008f32 <xTaskCreateStatic+0x52>
	__asm volatile
 8008f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f1a:	b672      	cpsid	i
 8008f1c:	f383 8811 	msr	BASEPRI, r3
 8008f20:	f3bf 8f6f 	isb	sy
 8008f24:	f3bf 8f4f 	dsb	sy
 8008f28:	b662      	cpsie	i
 8008f2a:	61fb      	str	r3, [r7, #28]
}
 8008f2c:	bf00      	nop
 8008f2e:	bf00      	nop
 8008f30:	e7fd      	b.n	8008f2e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008f32:	2354      	movs	r3, #84	@ 0x54
 8008f34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	2b54      	cmp	r3, #84	@ 0x54
 8008f3a:	d00d      	beq.n	8008f58 <xTaskCreateStatic+0x78>
	__asm volatile
 8008f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f40:	b672      	cpsid	i
 8008f42:	f383 8811 	msr	BASEPRI, r3
 8008f46:	f3bf 8f6f 	isb	sy
 8008f4a:	f3bf 8f4f 	dsb	sy
 8008f4e:	b662      	cpsie	i
 8008f50:	61bb      	str	r3, [r7, #24]
}
 8008f52:	bf00      	nop
 8008f54:	bf00      	nop
 8008f56:	e7fd      	b.n	8008f54 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008f58:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d01e      	beq.n	8008f9e <xTaskCreateStatic+0xbe>
 8008f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d01b      	beq.n	8008f9e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f68:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f6e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f72:	2202      	movs	r2, #2
 8008f74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008f78:	2300      	movs	r3, #0
 8008f7a:	9303      	str	r3, [sp, #12]
 8008f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f7e:	9302      	str	r3, [sp, #8]
 8008f80:	f107 0314 	add.w	r3, r7, #20
 8008f84:	9301      	str	r3, [sp, #4]
 8008f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f88:	9300      	str	r3, [sp, #0]
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	68b9      	ldr	r1, [r7, #8]
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f000 f850 	bl	8009036 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f96:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008f98:	f000 f8d8 	bl	800914c <prvAddNewTaskToReadyList>
 8008f9c:	e001      	b.n	8008fa2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008fa2:	697b      	ldr	r3, [r7, #20]
	}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3728      	adds	r7, #40	@ 0x28
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b08c      	sub	sp, #48	@ 0x30
 8008fb0:	af04      	add	r7, sp, #16
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	603b      	str	r3, [r7, #0]
 8008fb8:	4613      	mov	r3, r2
 8008fba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008fbc:	88fb      	ldrh	r3, [r7, #6]
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f001 fab9 	bl	800a538 <pvPortMalloc>
 8008fc6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00e      	beq.n	8008fec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008fce:	2054      	movs	r0, #84	@ 0x54
 8008fd0:	f001 fab2 	bl	800a538 <pvPortMalloc>
 8008fd4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d003      	beq.n	8008fe4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	697a      	ldr	r2, [r7, #20]
 8008fe0:	631a      	str	r2, [r3, #48]	@ 0x30
 8008fe2:	e005      	b.n	8008ff0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008fe4:	6978      	ldr	r0, [r7, #20]
 8008fe6:	f001 fb75 	bl	800a6d4 <vPortFree>
 8008fea:	e001      	b.n	8008ff0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008fec:	2300      	movs	r3, #0
 8008fee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d017      	beq.n	8009026 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ffe:	88fa      	ldrh	r2, [r7, #6]
 8009000:	2300      	movs	r3, #0
 8009002:	9303      	str	r3, [sp, #12]
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	9302      	str	r3, [sp, #8]
 8009008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800900a:	9301      	str	r3, [sp, #4]
 800900c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800900e:	9300      	str	r3, [sp, #0]
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	68b9      	ldr	r1, [r7, #8]
 8009014:	68f8      	ldr	r0, [r7, #12]
 8009016:	f000 f80e 	bl	8009036 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800901a:	69f8      	ldr	r0, [r7, #28]
 800901c:	f000 f896 	bl	800914c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009020:	2301      	movs	r3, #1
 8009022:	61bb      	str	r3, [r7, #24]
 8009024:	e002      	b.n	800902c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009026:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800902a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800902c:	69bb      	ldr	r3, [r7, #24]
	}
 800902e:	4618      	mov	r0, r3
 8009030:	3720      	adds	r7, #32
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b088      	sub	sp, #32
 800903a:	af00      	add	r7, sp, #0
 800903c:	60f8      	str	r0, [r7, #12]
 800903e:	60b9      	str	r1, [r7, #8]
 8009040:	607a      	str	r2, [r7, #4]
 8009042:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009046:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009048:	6879      	ldr	r1, [r7, #4]
 800904a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800904e:	440b      	add	r3, r1
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	4413      	add	r3, r2
 8009054:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	f023 0307 	bic.w	r3, r3, #7
 800905c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	f003 0307 	and.w	r3, r3, #7
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00d      	beq.n	8009084 <prvInitialiseNewTask+0x4e>
	__asm volatile
 8009068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800906c:	b672      	cpsid	i
 800906e:	f383 8811 	msr	BASEPRI, r3
 8009072:	f3bf 8f6f 	isb	sy
 8009076:	f3bf 8f4f 	dsb	sy
 800907a:	b662      	cpsie	i
 800907c:	617b      	str	r3, [r7, #20]
}
 800907e:	bf00      	nop
 8009080:	bf00      	nop
 8009082:	e7fd      	b.n	8009080 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d01f      	beq.n	80090ca <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800908a:	2300      	movs	r3, #0
 800908c:	61fb      	str	r3, [r7, #28]
 800908e:	e012      	b.n	80090b6 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009090:	68ba      	ldr	r2, [r7, #8]
 8009092:	69fb      	ldr	r3, [r7, #28]
 8009094:	4413      	add	r3, r2
 8009096:	7819      	ldrb	r1, [r3, #0]
 8009098:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	4413      	add	r3, r2
 800909e:	3334      	adds	r3, #52	@ 0x34
 80090a0:	460a      	mov	r2, r1
 80090a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80090a4:	68ba      	ldr	r2, [r7, #8]
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	4413      	add	r3, r2
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d006      	beq.n	80090be <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	3301      	adds	r3, #1
 80090b4:	61fb      	str	r3, [r7, #28]
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	2b0f      	cmp	r3, #15
 80090ba:	d9e9      	bls.n	8009090 <prvInitialiseNewTask+0x5a>
 80090bc:	e000      	b.n	80090c0 <prvInitialiseNewTask+0x8a>
			{
				break;
 80090be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80090c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c2:	2200      	movs	r2, #0
 80090c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80090c8:	e003      	b.n	80090d2 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80090ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090cc:	2200      	movs	r2, #0
 80090ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80090d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090d4:	2b06      	cmp	r3, #6
 80090d6:	d901      	bls.n	80090dc <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80090d8:	2306      	movs	r3, #6
 80090da:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80090dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80090e0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80090e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80090e6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80090e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ea:	2200      	movs	r2, #0
 80090ec:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80090ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f0:	3304      	adds	r3, #4
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7fe fec8 	bl	8007e88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80090f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090fa:	3318      	adds	r3, #24
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7fe fec3 	bl	8007e88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009106:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800910a:	f1c3 0207 	rsb	r2, r3, #7
 800910e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009110:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009114:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009116:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800911a:	2200      	movs	r2, #0
 800911c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800911e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009120:	2200      	movs	r2, #0
 8009122:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009126:	683a      	ldr	r2, [r7, #0]
 8009128:	68f9      	ldr	r1, [r7, #12]
 800912a:	69b8      	ldr	r0, [r7, #24]
 800912c:	f000 ffc6 	bl	800a0bc <pxPortInitialiseStack>
 8009130:	4602      	mov	r2, r0
 8009132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009134:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009138:	2b00      	cmp	r3, #0
 800913a:	d002      	beq.n	8009142 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800913c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800913e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009140:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009142:	bf00      	nop
 8009144:	3720      	adds	r7, #32
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
	...

0800914c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009154:	f001 f8c2 	bl	800a2dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009158:	4b2a      	ldr	r3, [pc, #168]	@ (8009204 <prvAddNewTaskToReadyList+0xb8>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	3301      	adds	r3, #1
 800915e:	4a29      	ldr	r2, [pc, #164]	@ (8009204 <prvAddNewTaskToReadyList+0xb8>)
 8009160:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009162:	4b29      	ldr	r3, [pc, #164]	@ (8009208 <prvAddNewTaskToReadyList+0xbc>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d109      	bne.n	800917e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800916a:	4a27      	ldr	r2, [pc, #156]	@ (8009208 <prvAddNewTaskToReadyList+0xbc>)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009170:	4b24      	ldr	r3, [pc, #144]	@ (8009204 <prvAddNewTaskToReadyList+0xb8>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	2b01      	cmp	r3, #1
 8009176:	d110      	bne.n	800919a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009178:	f000 fc9c 	bl	8009ab4 <prvInitialiseTaskLists>
 800917c:	e00d      	b.n	800919a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800917e:	4b23      	ldr	r3, [pc, #140]	@ (800920c <prvAddNewTaskToReadyList+0xc0>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d109      	bne.n	800919a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009186:	4b20      	ldr	r3, [pc, #128]	@ (8009208 <prvAddNewTaskToReadyList+0xbc>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009190:	429a      	cmp	r2, r3
 8009192:	d802      	bhi.n	800919a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009194:	4a1c      	ldr	r2, [pc, #112]	@ (8009208 <prvAddNewTaskToReadyList+0xbc>)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800919a:	4b1d      	ldr	r3, [pc, #116]	@ (8009210 <prvAddNewTaskToReadyList+0xc4>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	3301      	adds	r3, #1
 80091a0:	4a1b      	ldr	r2, [pc, #108]	@ (8009210 <prvAddNewTaskToReadyList+0xc4>)
 80091a2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091a8:	2201      	movs	r2, #1
 80091aa:	409a      	lsls	r2, r3
 80091ac:	4b19      	ldr	r3, [pc, #100]	@ (8009214 <prvAddNewTaskToReadyList+0xc8>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4313      	orrs	r3, r2
 80091b2:	4a18      	ldr	r2, [pc, #96]	@ (8009214 <prvAddNewTaskToReadyList+0xc8>)
 80091b4:	6013      	str	r3, [r2, #0]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091ba:	4613      	mov	r3, r2
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	4413      	add	r3, r2
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	4a15      	ldr	r2, [pc, #84]	@ (8009218 <prvAddNewTaskToReadyList+0xcc>)
 80091c4:	441a      	add	r2, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	3304      	adds	r3, #4
 80091ca:	4619      	mov	r1, r3
 80091cc:	4610      	mov	r0, r2
 80091ce:	f7fe fe68 	bl	8007ea2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80091d2:	f001 f8b9 	bl	800a348 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80091d6:	4b0d      	ldr	r3, [pc, #52]	@ (800920c <prvAddNewTaskToReadyList+0xc0>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d00e      	beq.n	80091fc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80091de:	4b0a      	ldr	r3, [pc, #40]	@ (8009208 <prvAddNewTaskToReadyList+0xbc>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d207      	bcs.n	80091fc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80091ec:	4b0b      	ldr	r3, [pc, #44]	@ (800921c <prvAddNewTaskToReadyList+0xd0>)
 80091ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091f2:	601a      	str	r2, [r3, #0]
 80091f4:	f3bf 8f4f 	dsb	sy
 80091f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091fc:	bf00      	nop
 80091fe:	3708      	adds	r7, #8
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}
 8009204:	20005bf0 	.word	0x20005bf0
 8009208:	20005af0 	.word	0x20005af0
 800920c:	20005bfc 	.word	0x20005bfc
 8009210:	20005c0c 	.word	0x20005c0c
 8009214:	20005bf8 	.word	0x20005bf8
 8009218:	20005af4 	.word	0x20005af4
 800921c:	e000ed04 	.word	0xe000ed04

08009220 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009228:	f001 f858 	bl	800a2dc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d102      	bne.n	8009238 <vTaskDelete+0x18>
 8009232:	4b3a      	ldr	r3, [pc, #232]	@ (800931c <vTaskDelete+0xfc>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	e000      	b.n	800923a <vTaskDelete+0x1a>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	3304      	adds	r3, #4
 8009240:	4618      	mov	r0, r3
 8009242:	f7fe fe8b 	bl	8007f5c <uxListRemove>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d115      	bne.n	8009278 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009250:	4933      	ldr	r1, [pc, #204]	@ (8009320 <vTaskDelete+0x100>)
 8009252:	4613      	mov	r3, r2
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	4413      	add	r3, r2
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	440b      	add	r3, r1
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d10a      	bne.n	8009278 <vTaskDelete+0x58>
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009266:	2201      	movs	r2, #1
 8009268:	fa02 f303 	lsl.w	r3, r2, r3
 800926c:	43da      	mvns	r2, r3
 800926e:	4b2d      	ldr	r3, [pc, #180]	@ (8009324 <vTaskDelete+0x104>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4013      	ands	r3, r2
 8009274:	4a2b      	ldr	r2, [pc, #172]	@ (8009324 <vTaskDelete+0x104>)
 8009276:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800927c:	2b00      	cmp	r3, #0
 800927e:	d004      	beq.n	800928a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	3318      	adds	r3, #24
 8009284:	4618      	mov	r0, r3
 8009286:	f7fe fe69 	bl	8007f5c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800928a:	4b27      	ldr	r3, [pc, #156]	@ (8009328 <vTaskDelete+0x108>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	3301      	adds	r3, #1
 8009290:	4a25      	ldr	r2, [pc, #148]	@ (8009328 <vTaskDelete+0x108>)
 8009292:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8009294:	4b21      	ldr	r3, [pc, #132]	@ (800931c <vTaskDelete+0xfc>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	68fa      	ldr	r2, [r7, #12]
 800929a:	429a      	cmp	r2, r3
 800929c:	d10b      	bne.n	80092b6 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	3304      	adds	r3, #4
 80092a2:	4619      	mov	r1, r3
 80092a4:	4821      	ldr	r0, [pc, #132]	@ (800932c <vTaskDelete+0x10c>)
 80092a6:	f7fe fdfc 	bl	8007ea2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80092aa:	4b21      	ldr	r3, [pc, #132]	@ (8009330 <vTaskDelete+0x110>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	3301      	adds	r3, #1
 80092b0:	4a1f      	ldr	r2, [pc, #124]	@ (8009330 <vTaskDelete+0x110>)
 80092b2:	6013      	str	r3, [r2, #0]
 80092b4:	e009      	b.n	80092ca <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80092b6:	4b1f      	ldr	r3, [pc, #124]	@ (8009334 <vTaskDelete+0x114>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	3b01      	subs	r3, #1
 80092bc:	4a1d      	ldr	r2, [pc, #116]	@ (8009334 <vTaskDelete+0x114>)
 80092be:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	f000 fc65 	bl	8009b90 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80092c6:	f000 fc95 	bl	8009bf4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80092ca:	f001 f83d 	bl	800a348 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80092ce:	4b1a      	ldr	r3, [pc, #104]	@ (8009338 <vTaskDelete+0x118>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d01e      	beq.n	8009314 <vTaskDelete+0xf4>
		{
			if( pxTCB == pxCurrentTCB )
 80092d6:	4b11      	ldr	r3, [pc, #68]	@ (800931c <vTaskDelete+0xfc>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	68fa      	ldr	r2, [r7, #12]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d119      	bne.n	8009314 <vTaskDelete+0xf4>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80092e0:	4b16      	ldr	r3, [pc, #88]	@ (800933c <vTaskDelete+0x11c>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d00d      	beq.n	8009304 <vTaskDelete+0xe4>
	__asm volatile
 80092e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ec:	b672      	cpsid	i
 80092ee:	f383 8811 	msr	BASEPRI, r3
 80092f2:	f3bf 8f6f 	isb	sy
 80092f6:	f3bf 8f4f 	dsb	sy
 80092fa:	b662      	cpsie	i
 80092fc:	60bb      	str	r3, [r7, #8]
}
 80092fe:	bf00      	nop
 8009300:	bf00      	nop
 8009302:	e7fd      	b.n	8009300 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 8009304:	4b0e      	ldr	r3, [pc, #56]	@ (8009340 <vTaskDelete+0x120>)
 8009306:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800930a:	601a      	str	r2, [r3, #0]
 800930c:	f3bf 8f4f 	dsb	sy
 8009310:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009314:	bf00      	nop
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	20005af0 	.word	0x20005af0
 8009320:	20005af4 	.word	0x20005af4
 8009324:	20005bf8 	.word	0x20005bf8
 8009328:	20005c0c 	.word	0x20005c0c
 800932c:	20005bc4 	.word	0x20005bc4
 8009330:	20005bd8 	.word	0x20005bd8
 8009334:	20005bf0 	.word	0x20005bf0
 8009338:	20005bfc 	.word	0x20005bfc
 800933c:	20005c18 	.word	0x20005c18
 8009340:	e000ed04 	.word	0xe000ed04

08009344 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800934c:	2300      	movs	r3, #0
 800934e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d01a      	beq.n	800938c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009356:	4b15      	ldr	r3, [pc, #84]	@ (80093ac <vTaskDelay+0x68>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00d      	beq.n	800937a <vTaskDelay+0x36>
	__asm volatile
 800935e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009362:	b672      	cpsid	i
 8009364:	f383 8811 	msr	BASEPRI, r3
 8009368:	f3bf 8f6f 	isb	sy
 800936c:	f3bf 8f4f 	dsb	sy
 8009370:	b662      	cpsie	i
 8009372:	60bb      	str	r3, [r7, #8]
}
 8009374:	bf00      	nop
 8009376:	bf00      	nop
 8009378:	e7fd      	b.n	8009376 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800937a:	f000 f881 	bl	8009480 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800937e:	2100      	movs	r1, #0
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 fe35 	bl	8009ff0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009386:	f000 f889 	bl	800949c <xTaskResumeAll>
 800938a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d107      	bne.n	80093a2 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8009392:	4b07      	ldr	r3, [pc, #28]	@ (80093b0 <vTaskDelay+0x6c>)
 8009394:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009398:	601a      	str	r2, [r3, #0]
 800939a:	f3bf 8f4f 	dsb	sy
 800939e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80093a2:	bf00      	nop
 80093a4:	3710      	adds	r7, #16
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	20005c18 	.word	0x20005c18
 80093b0:	e000ed04 	.word	0xe000ed04

080093b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b08a      	sub	sp, #40	@ 0x28
 80093b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80093ba:	2300      	movs	r3, #0
 80093bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80093be:	2300      	movs	r3, #0
 80093c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80093c2:	463a      	mov	r2, r7
 80093c4:	1d39      	adds	r1, r7, #4
 80093c6:	f107 0308 	add.w	r3, r7, #8
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7f7 f900 	bl	80005d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80093d0:	6839      	ldr	r1, [r7, #0]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	68ba      	ldr	r2, [r7, #8]
 80093d6:	9202      	str	r2, [sp, #8]
 80093d8:	9301      	str	r3, [sp, #4]
 80093da:	2300      	movs	r3, #0
 80093dc:	9300      	str	r3, [sp, #0]
 80093de:	2300      	movs	r3, #0
 80093e0:	460a      	mov	r2, r1
 80093e2:	4921      	ldr	r1, [pc, #132]	@ (8009468 <vTaskStartScheduler+0xb4>)
 80093e4:	4821      	ldr	r0, [pc, #132]	@ (800946c <vTaskStartScheduler+0xb8>)
 80093e6:	f7ff fd7b 	bl	8008ee0 <xTaskCreateStatic>
 80093ea:	4603      	mov	r3, r0
 80093ec:	4a20      	ldr	r2, [pc, #128]	@ (8009470 <vTaskStartScheduler+0xbc>)
 80093ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80093f0:	4b1f      	ldr	r3, [pc, #124]	@ (8009470 <vTaskStartScheduler+0xbc>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d002      	beq.n	80093fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80093f8:	2301      	movs	r3, #1
 80093fa:	617b      	str	r3, [r7, #20]
 80093fc:	e001      	b.n	8009402 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80093fe:	2300      	movs	r3, #0
 8009400:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	2b01      	cmp	r3, #1
 8009406:	d118      	bne.n	800943a <vTaskStartScheduler+0x86>
	__asm volatile
 8009408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800940c:	b672      	cpsid	i
 800940e:	f383 8811 	msr	BASEPRI, r3
 8009412:	f3bf 8f6f 	isb	sy
 8009416:	f3bf 8f4f 	dsb	sy
 800941a:	b662      	cpsie	i
 800941c:	613b      	str	r3, [r7, #16]
}
 800941e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009420:	4b14      	ldr	r3, [pc, #80]	@ (8009474 <vTaskStartScheduler+0xc0>)
 8009422:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009426:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009428:	4b13      	ldr	r3, [pc, #76]	@ (8009478 <vTaskStartScheduler+0xc4>)
 800942a:	2201      	movs	r2, #1
 800942c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800942e:	4b13      	ldr	r3, [pc, #76]	@ (800947c <vTaskStartScheduler+0xc8>)
 8009430:	2200      	movs	r2, #0
 8009432:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009434:	f000 fed4 	bl	800a1e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009438:	e011      	b.n	800945e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009440:	d10d      	bne.n	800945e <vTaskStartScheduler+0xaa>
	__asm volatile
 8009442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009446:	b672      	cpsid	i
 8009448:	f383 8811 	msr	BASEPRI, r3
 800944c:	f3bf 8f6f 	isb	sy
 8009450:	f3bf 8f4f 	dsb	sy
 8009454:	b662      	cpsie	i
 8009456:	60fb      	str	r3, [r7, #12]
}
 8009458:	bf00      	nop
 800945a:	bf00      	nop
 800945c:	e7fd      	b.n	800945a <vTaskStartScheduler+0xa6>
}
 800945e:	bf00      	nop
 8009460:	3718      	adds	r7, #24
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	08015b80 	.word	0x08015b80
 800946c:	08009a85 	.word	0x08009a85
 8009470:	20005c14 	.word	0x20005c14
 8009474:	20005c10 	.word	0x20005c10
 8009478:	20005bfc 	.word	0x20005bfc
 800947c:	20005bf4 	.word	0x20005bf4

08009480 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009480:	b480      	push	{r7}
 8009482:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009484:	4b04      	ldr	r3, [pc, #16]	@ (8009498 <vTaskSuspendAll+0x18>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	3301      	adds	r3, #1
 800948a:	4a03      	ldr	r2, [pc, #12]	@ (8009498 <vTaskSuspendAll+0x18>)
 800948c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800948e:	bf00      	nop
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr
 8009498:	20005c18 	.word	0x20005c18

0800949c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80094a2:	2300      	movs	r3, #0
 80094a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80094a6:	2300      	movs	r3, #0
 80094a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80094aa:	4b43      	ldr	r3, [pc, #268]	@ (80095b8 <xTaskResumeAll+0x11c>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d10d      	bne.n	80094ce <xTaskResumeAll+0x32>
	__asm volatile
 80094b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094b6:	b672      	cpsid	i
 80094b8:	f383 8811 	msr	BASEPRI, r3
 80094bc:	f3bf 8f6f 	isb	sy
 80094c0:	f3bf 8f4f 	dsb	sy
 80094c4:	b662      	cpsie	i
 80094c6:	603b      	str	r3, [r7, #0]
}
 80094c8:	bf00      	nop
 80094ca:	bf00      	nop
 80094cc:	e7fd      	b.n	80094ca <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80094ce:	f000 ff05 	bl	800a2dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80094d2:	4b39      	ldr	r3, [pc, #228]	@ (80095b8 <xTaskResumeAll+0x11c>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	3b01      	subs	r3, #1
 80094d8:	4a37      	ldr	r2, [pc, #220]	@ (80095b8 <xTaskResumeAll+0x11c>)
 80094da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094dc:	4b36      	ldr	r3, [pc, #216]	@ (80095b8 <xTaskResumeAll+0x11c>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d161      	bne.n	80095a8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80094e4:	4b35      	ldr	r3, [pc, #212]	@ (80095bc <xTaskResumeAll+0x120>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d05d      	beq.n	80095a8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094ec:	e02e      	b.n	800954c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094ee:	4b34      	ldr	r3, [pc, #208]	@ (80095c0 <xTaskResumeAll+0x124>)
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	3318      	adds	r3, #24
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7fe fd2e 	bl	8007f5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	3304      	adds	r3, #4
 8009504:	4618      	mov	r0, r3
 8009506:	f7fe fd29 	bl	8007f5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800950e:	2201      	movs	r2, #1
 8009510:	409a      	lsls	r2, r3
 8009512:	4b2c      	ldr	r3, [pc, #176]	@ (80095c4 <xTaskResumeAll+0x128>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4313      	orrs	r3, r2
 8009518:	4a2a      	ldr	r2, [pc, #168]	@ (80095c4 <xTaskResumeAll+0x128>)
 800951a:	6013      	str	r3, [r2, #0]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009520:	4613      	mov	r3, r2
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	4413      	add	r3, r2
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	4a27      	ldr	r2, [pc, #156]	@ (80095c8 <xTaskResumeAll+0x12c>)
 800952a:	441a      	add	r2, r3
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	3304      	adds	r3, #4
 8009530:	4619      	mov	r1, r3
 8009532:	4610      	mov	r0, r2
 8009534:	f7fe fcb5 	bl	8007ea2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800953c:	4b23      	ldr	r3, [pc, #140]	@ (80095cc <xTaskResumeAll+0x130>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009542:	429a      	cmp	r2, r3
 8009544:	d302      	bcc.n	800954c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8009546:	4b22      	ldr	r3, [pc, #136]	@ (80095d0 <xTaskResumeAll+0x134>)
 8009548:	2201      	movs	r2, #1
 800954a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800954c:	4b1c      	ldr	r3, [pc, #112]	@ (80095c0 <xTaskResumeAll+0x124>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d1cc      	bne.n	80094ee <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d001      	beq.n	800955e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800955a:	f000 fb4b 	bl	8009bf4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800955e:	4b1d      	ldr	r3, [pc, #116]	@ (80095d4 <xTaskResumeAll+0x138>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d010      	beq.n	800958c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800956a:	f000 f859 	bl	8009620 <xTaskIncrementTick>
 800956e:	4603      	mov	r3, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d002      	beq.n	800957a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8009574:	4b16      	ldr	r3, [pc, #88]	@ (80095d0 <xTaskResumeAll+0x134>)
 8009576:	2201      	movs	r2, #1
 8009578:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	3b01      	subs	r3, #1
 800957e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1f1      	bne.n	800956a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8009586:	4b13      	ldr	r3, [pc, #76]	@ (80095d4 <xTaskResumeAll+0x138>)
 8009588:	2200      	movs	r2, #0
 800958a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800958c:	4b10      	ldr	r3, [pc, #64]	@ (80095d0 <xTaskResumeAll+0x134>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d009      	beq.n	80095a8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009594:	2301      	movs	r3, #1
 8009596:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009598:	4b0f      	ldr	r3, [pc, #60]	@ (80095d8 <xTaskResumeAll+0x13c>)
 800959a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800959e:	601a      	str	r2, [r3, #0]
 80095a0:	f3bf 8f4f 	dsb	sy
 80095a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095a8:	f000 fece 	bl	800a348 <vPortExitCritical>

	return xAlreadyYielded;
 80095ac:	68bb      	ldr	r3, [r7, #8]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	20005c18 	.word	0x20005c18
 80095bc:	20005bf0 	.word	0x20005bf0
 80095c0:	20005bb0 	.word	0x20005bb0
 80095c4:	20005bf8 	.word	0x20005bf8
 80095c8:	20005af4 	.word	0x20005af4
 80095cc:	20005af0 	.word	0x20005af0
 80095d0:	20005c04 	.word	0x20005c04
 80095d4:	20005c00 	.word	0x20005c00
 80095d8:	e000ed04 	.word	0xe000ed04

080095dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80095e2:	4b05      	ldr	r3, [pc, #20]	@ (80095f8 <xTaskGetTickCount+0x1c>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80095e8:	687b      	ldr	r3, [r7, #4]
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	370c      	adds	r7, #12
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr
 80095f6:	bf00      	nop
 80095f8:	20005bf4 	.word	0x20005bf4

080095fc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009602:	f000 ff53 	bl	800a4ac <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009606:	2300      	movs	r3, #0
 8009608:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800960a:	4b04      	ldr	r3, [pc, #16]	@ (800961c <xTaskGetTickCountFromISR+0x20>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009610:	683b      	ldr	r3, [r7, #0]
}
 8009612:	4618      	mov	r0, r3
 8009614:	3708      	adds	r7, #8
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	20005bf4 	.word	0x20005bf4

08009620 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b086      	sub	sp, #24
 8009624:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009626:	2300      	movs	r3, #0
 8009628:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800962a:	4b50      	ldr	r3, [pc, #320]	@ (800976c <xTaskIncrementTick+0x14c>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	f040 808b 	bne.w	800974a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009634:	4b4e      	ldr	r3, [pc, #312]	@ (8009770 <xTaskIncrementTick+0x150>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	3301      	adds	r3, #1
 800963a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800963c:	4a4c      	ldr	r2, [pc, #304]	@ (8009770 <xTaskIncrementTick+0x150>)
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d123      	bne.n	8009690 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8009648:	4b4a      	ldr	r3, [pc, #296]	@ (8009774 <xTaskIncrementTick+0x154>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d00d      	beq.n	800966e <xTaskIncrementTick+0x4e>
	__asm volatile
 8009652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009656:	b672      	cpsid	i
 8009658:	f383 8811 	msr	BASEPRI, r3
 800965c:	f3bf 8f6f 	isb	sy
 8009660:	f3bf 8f4f 	dsb	sy
 8009664:	b662      	cpsie	i
 8009666:	603b      	str	r3, [r7, #0]
}
 8009668:	bf00      	nop
 800966a:	bf00      	nop
 800966c:	e7fd      	b.n	800966a <xTaskIncrementTick+0x4a>
 800966e:	4b41      	ldr	r3, [pc, #260]	@ (8009774 <xTaskIncrementTick+0x154>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	60fb      	str	r3, [r7, #12]
 8009674:	4b40      	ldr	r3, [pc, #256]	@ (8009778 <xTaskIncrementTick+0x158>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a3e      	ldr	r2, [pc, #248]	@ (8009774 <xTaskIncrementTick+0x154>)
 800967a:	6013      	str	r3, [r2, #0]
 800967c:	4a3e      	ldr	r2, [pc, #248]	@ (8009778 <xTaskIncrementTick+0x158>)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	6013      	str	r3, [r2, #0]
 8009682:	4b3e      	ldr	r3, [pc, #248]	@ (800977c <xTaskIncrementTick+0x15c>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	3301      	adds	r3, #1
 8009688:	4a3c      	ldr	r2, [pc, #240]	@ (800977c <xTaskIncrementTick+0x15c>)
 800968a:	6013      	str	r3, [r2, #0]
 800968c:	f000 fab2 	bl	8009bf4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009690:	4b3b      	ldr	r3, [pc, #236]	@ (8009780 <xTaskIncrementTick+0x160>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	693a      	ldr	r2, [r7, #16]
 8009696:	429a      	cmp	r2, r3
 8009698:	d348      	bcc.n	800972c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800969a:	4b36      	ldr	r3, [pc, #216]	@ (8009774 <xTaskIncrementTick+0x154>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d104      	bne.n	80096ae <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096a4:	4b36      	ldr	r3, [pc, #216]	@ (8009780 <xTaskIncrementTick+0x160>)
 80096a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80096aa:	601a      	str	r2, [r3, #0]
					break;
 80096ac:	e03e      	b.n	800972c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096ae:	4b31      	ldr	r3, [pc, #196]	@ (8009774 <xTaskIncrementTick+0x154>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	68db      	ldr	r3, [r3, #12]
 80096b4:	68db      	ldr	r3, [r3, #12]
 80096b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80096be:	693a      	ldr	r2, [r7, #16]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d203      	bcs.n	80096ce <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80096c6:	4a2e      	ldr	r2, [pc, #184]	@ (8009780 <xTaskIncrementTick+0x160>)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80096cc:	e02e      	b.n	800972c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	3304      	adds	r3, #4
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7fe fc42 	bl	8007f5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d004      	beq.n	80096ea <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	3318      	adds	r3, #24
 80096e4:	4618      	mov	r0, r3
 80096e6:	f7fe fc39 	bl	8007f5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ee:	2201      	movs	r2, #1
 80096f0:	409a      	lsls	r2, r3
 80096f2:	4b24      	ldr	r3, [pc, #144]	@ (8009784 <xTaskIncrementTick+0x164>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4313      	orrs	r3, r2
 80096f8:	4a22      	ldr	r2, [pc, #136]	@ (8009784 <xTaskIncrementTick+0x164>)
 80096fa:	6013      	str	r3, [r2, #0]
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009700:	4613      	mov	r3, r2
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	4413      	add	r3, r2
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	4a1f      	ldr	r2, [pc, #124]	@ (8009788 <xTaskIncrementTick+0x168>)
 800970a:	441a      	add	r2, r3
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	3304      	adds	r3, #4
 8009710:	4619      	mov	r1, r3
 8009712:	4610      	mov	r0, r2
 8009714:	f7fe fbc5 	bl	8007ea2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800971c:	4b1b      	ldr	r3, [pc, #108]	@ (800978c <xTaskIncrementTick+0x16c>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009722:	429a      	cmp	r2, r3
 8009724:	d3b9      	bcc.n	800969a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8009726:	2301      	movs	r3, #1
 8009728:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800972a:	e7b6      	b.n	800969a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800972c:	4b17      	ldr	r3, [pc, #92]	@ (800978c <xTaskIncrementTick+0x16c>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009732:	4915      	ldr	r1, [pc, #84]	@ (8009788 <xTaskIncrementTick+0x168>)
 8009734:	4613      	mov	r3, r2
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	4413      	add	r3, r2
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	440b      	add	r3, r1
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2b01      	cmp	r3, #1
 8009742:	d907      	bls.n	8009754 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8009744:	2301      	movs	r3, #1
 8009746:	617b      	str	r3, [r7, #20]
 8009748:	e004      	b.n	8009754 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800974a:	4b11      	ldr	r3, [pc, #68]	@ (8009790 <xTaskIncrementTick+0x170>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	3301      	adds	r3, #1
 8009750:	4a0f      	ldr	r2, [pc, #60]	@ (8009790 <xTaskIncrementTick+0x170>)
 8009752:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009754:	4b0f      	ldr	r3, [pc, #60]	@ (8009794 <xTaskIncrementTick+0x174>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d001      	beq.n	8009760 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800975c:	2301      	movs	r3, #1
 800975e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009760:	697b      	ldr	r3, [r7, #20]
}
 8009762:	4618      	mov	r0, r3
 8009764:	3718      	adds	r7, #24
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	20005c18 	.word	0x20005c18
 8009770:	20005bf4 	.word	0x20005bf4
 8009774:	20005ba8 	.word	0x20005ba8
 8009778:	20005bac 	.word	0x20005bac
 800977c:	20005c08 	.word	0x20005c08
 8009780:	20005c10 	.word	0x20005c10
 8009784:	20005bf8 	.word	0x20005bf8
 8009788:	20005af4 	.word	0x20005af4
 800978c:	20005af0 	.word	0x20005af0
 8009790:	20005c00 	.word	0x20005c00
 8009794:	20005c04 	.word	0x20005c04

08009798 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009798:	b480      	push	{r7}
 800979a:	b087      	sub	sp, #28
 800979c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800979e:	4b28      	ldr	r3, [pc, #160]	@ (8009840 <vTaskSwitchContext+0xa8>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d003      	beq.n	80097ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80097a6:	4b27      	ldr	r3, [pc, #156]	@ (8009844 <vTaskSwitchContext+0xac>)
 80097a8:	2201      	movs	r2, #1
 80097aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80097ac:	e042      	b.n	8009834 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80097ae:	4b25      	ldr	r3, [pc, #148]	@ (8009844 <vTaskSwitchContext+0xac>)
 80097b0:	2200      	movs	r2, #0
 80097b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097b4:	4b24      	ldr	r3, [pc, #144]	@ (8009848 <vTaskSwitchContext+0xb0>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	fab3 f383 	clz	r3, r3
 80097c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80097c2:	7afb      	ldrb	r3, [r7, #11]
 80097c4:	f1c3 031f 	rsb	r3, r3, #31
 80097c8:	617b      	str	r3, [r7, #20]
 80097ca:	4920      	ldr	r1, [pc, #128]	@ (800984c <vTaskSwitchContext+0xb4>)
 80097cc:	697a      	ldr	r2, [r7, #20]
 80097ce:	4613      	mov	r3, r2
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	4413      	add	r3, r2
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	440b      	add	r3, r1
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d10d      	bne.n	80097fa <vTaskSwitchContext+0x62>
	__asm volatile
 80097de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e2:	b672      	cpsid	i
 80097e4:	f383 8811 	msr	BASEPRI, r3
 80097e8:	f3bf 8f6f 	isb	sy
 80097ec:	f3bf 8f4f 	dsb	sy
 80097f0:	b662      	cpsie	i
 80097f2:	607b      	str	r3, [r7, #4]
}
 80097f4:	bf00      	nop
 80097f6:	bf00      	nop
 80097f8:	e7fd      	b.n	80097f6 <vTaskSwitchContext+0x5e>
 80097fa:	697a      	ldr	r2, [r7, #20]
 80097fc:	4613      	mov	r3, r2
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	4413      	add	r3, r2
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	4a11      	ldr	r2, [pc, #68]	@ (800984c <vTaskSwitchContext+0xb4>)
 8009806:	4413      	add	r3, r2
 8009808:	613b      	str	r3, [r7, #16]
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	685a      	ldr	r2, [r3, #4]
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	605a      	str	r2, [r3, #4]
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	685a      	ldr	r2, [r3, #4]
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	3308      	adds	r3, #8
 800981c:	429a      	cmp	r2, r3
 800981e:	d104      	bne.n	800982a <vTaskSwitchContext+0x92>
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	685a      	ldr	r2, [r3, #4]
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	605a      	str	r2, [r3, #4]
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	68db      	ldr	r3, [r3, #12]
 8009830:	4a07      	ldr	r2, [pc, #28]	@ (8009850 <vTaskSwitchContext+0xb8>)
 8009832:	6013      	str	r3, [r2, #0]
}
 8009834:	bf00      	nop
 8009836:	371c      	adds	r7, #28
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr
 8009840:	20005c18 	.word	0x20005c18
 8009844:	20005c04 	.word	0x20005c04
 8009848:	20005bf8 	.word	0x20005bf8
 800984c:	20005af4 	.word	0x20005af4
 8009850:	20005af0 	.word	0x20005af0

08009854 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d10d      	bne.n	8009880 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8009864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009868:	b672      	cpsid	i
 800986a:	f383 8811 	msr	BASEPRI, r3
 800986e:	f3bf 8f6f 	isb	sy
 8009872:	f3bf 8f4f 	dsb	sy
 8009876:	b662      	cpsie	i
 8009878:	60fb      	str	r3, [r7, #12]
}
 800987a:	bf00      	nop
 800987c:	bf00      	nop
 800987e:	e7fd      	b.n	800987c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009880:	4b07      	ldr	r3, [pc, #28]	@ (80098a0 <vTaskPlaceOnEventList+0x4c>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	3318      	adds	r3, #24
 8009886:	4619      	mov	r1, r3
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f7fe fb2e 	bl	8007eea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800988e:	2101      	movs	r1, #1
 8009890:	6838      	ldr	r0, [r7, #0]
 8009892:	f000 fbad 	bl	8009ff0 <prvAddCurrentTaskToDelayedList>
}
 8009896:	bf00      	nop
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	20005af0 	.word	0x20005af0

080098a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b086      	sub	sp, #24
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d10d      	bne.n	80098d6 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80098ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098be:	b672      	cpsid	i
 80098c0:	f383 8811 	msr	BASEPRI, r3
 80098c4:	f3bf 8f6f 	isb	sy
 80098c8:	f3bf 8f4f 	dsb	sy
 80098cc:	b662      	cpsie	i
 80098ce:	60fb      	str	r3, [r7, #12]
}
 80098d0:	bf00      	nop
 80098d2:	bf00      	nop
 80098d4:	e7fd      	b.n	80098d2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	3318      	adds	r3, #24
 80098da:	4618      	mov	r0, r3
 80098dc:	f7fe fb3e 	bl	8007f5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098e0:	4b1d      	ldr	r3, [pc, #116]	@ (8009958 <xTaskRemoveFromEventList+0xb4>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d11c      	bne.n	8009922 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	3304      	adds	r3, #4
 80098ec:	4618      	mov	r0, r3
 80098ee:	f7fe fb35 	bl	8007f5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098f6:	2201      	movs	r2, #1
 80098f8:	409a      	lsls	r2, r3
 80098fa:	4b18      	ldr	r3, [pc, #96]	@ (800995c <xTaskRemoveFromEventList+0xb8>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4313      	orrs	r3, r2
 8009900:	4a16      	ldr	r2, [pc, #88]	@ (800995c <xTaskRemoveFromEventList+0xb8>)
 8009902:	6013      	str	r3, [r2, #0]
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009908:	4613      	mov	r3, r2
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	4413      	add	r3, r2
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	4a13      	ldr	r2, [pc, #76]	@ (8009960 <xTaskRemoveFromEventList+0xbc>)
 8009912:	441a      	add	r2, r3
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	3304      	adds	r3, #4
 8009918:	4619      	mov	r1, r3
 800991a:	4610      	mov	r0, r2
 800991c:	f7fe fac1 	bl	8007ea2 <vListInsertEnd>
 8009920:	e005      	b.n	800992e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	3318      	adds	r3, #24
 8009926:	4619      	mov	r1, r3
 8009928:	480e      	ldr	r0, [pc, #56]	@ (8009964 <xTaskRemoveFromEventList+0xc0>)
 800992a:	f7fe faba 	bl	8007ea2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009932:	4b0d      	ldr	r3, [pc, #52]	@ (8009968 <xTaskRemoveFromEventList+0xc4>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009938:	429a      	cmp	r2, r3
 800993a:	d905      	bls.n	8009948 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800993c:	2301      	movs	r3, #1
 800993e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009940:	4b0a      	ldr	r3, [pc, #40]	@ (800996c <xTaskRemoveFromEventList+0xc8>)
 8009942:	2201      	movs	r2, #1
 8009944:	601a      	str	r2, [r3, #0]
 8009946:	e001      	b.n	800994c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8009948:	2300      	movs	r3, #0
 800994a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800994c:	697b      	ldr	r3, [r7, #20]
}
 800994e:	4618      	mov	r0, r3
 8009950:	3718      	adds	r7, #24
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	20005c18 	.word	0x20005c18
 800995c:	20005bf8 	.word	0x20005bf8
 8009960:	20005af4 	.word	0x20005af4
 8009964:	20005bb0 	.word	0x20005bb0
 8009968:	20005af0 	.word	0x20005af0
 800996c:	20005c04 	.word	0x20005c04

08009970 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009978:	4b06      	ldr	r3, [pc, #24]	@ (8009994 <vTaskInternalSetTimeOutState+0x24>)
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009980:	4b05      	ldr	r3, [pc, #20]	@ (8009998 <vTaskInternalSetTimeOutState+0x28>)
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	605a      	str	r2, [r3, #4]
}
 8009988:	bf00      	nop
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr
 8009994:	20005c08 	.word	0x20005c08
 8009998:	20005bf4 	.word	0x20005bf4

0800999c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b088      	sub	sp, #32
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d10d      	bne.n	80099c8 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80099ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b0:	b672      	cpsid	i
 80099b2:	f383 8811 	msr	BASEPRI, r3
 80099b6:	f3bf 8f6f 	isb	sy
 80099ba:	f3bf 8f4f 	dsb	sy
 80099be:	b662      	cpsie	i
 80099c0:	613b      	str	r3, [r7, #16]
}
 80099c2:	bf00      	nop
 80099c4:	bf00      	nop
 80099c6:	e7fd      	b.n	80099c4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d10d      	bne.n	80099ea <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80099ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099d2:	b672      	cpsid	i
 80099d4:	f383 8811 	msr	BASEPRI, r3
 80099d8:	f3bf 8f6f 	isb	sy
 80099dc:	f3bf 8f4f 	dsb	sy
 80099e0:	b662      	cpsie	i
 80099e2:	60fb      	str	r3, [r7, #12]
}
 80099e4:	bf00      	nop
 80099e6:	bf00      	nop
 80099e8:	e7fd      	b.n	80099e6 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80099ea:	f000 fc77 	bl	800a2dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80099ee:	4b1d      	ldr	r3, [pc, #116]	@ (8009a64 <xTaskCheckForTimeOut+0xc8>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	69ba      	ldr	r2, [r7, #24]
 80099fa:	1ad3      	subs	r3, r2, r3
 80099fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a06:	d102      	bne.n	8009a0e <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	61fb      	str	r3, [r7, #28]
 8009a0c:	e023      	b.n	8009a56 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	4b15      	ldr	r3, [pc, #84]	@ (8009a68 <xTaskCheckForTimeOut+0xcc>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d007      	beq.n	8009a2a <xTaskCheckForTimeOut+0x8e>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	69ba      	ldr	r2, [r7, #24]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d302      	bcc.n	8009a2a <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009a24:	2301      	movs	r3, #1
 8009a26:	61fb      	str	r3, [r7, #28]
 8009a28:	e015      	b.n	8009a56 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	697a      	ldr	r2, [r7, #20]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d20b      	bcs.n	8009a4c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	1ad2      	subs	r2, r2, r3
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f7ff ff95 	bl	8009970 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009a46:	2300      	movs	r3, #0
 8009a48:	61fb      	str	r3, [r7, #28]
 8009a4a:	e004      	b.n	8009a56 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009a52:	2301      	movs	r3, #1
 8009a54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009a56:	f000 fc77 	bl	800a348 <vPortExitCritical>

	return xReturn;
 8009a5a:	69fb      	ldr	r3, [r7, #28]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3720      	adds	r7, #32
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	20005bf4 	.word	0x20005bf4
 8009a68:	20005c08 	.word	0x20005c08

08009a6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009a70:	4b03      	ldr	r3, [pc, #12]	@ (8009a80 <vTaskMissedYield+0x14>)
 8009a72:	2201      	movs	r2, #1
 8009a74:	601a      	str	r2, [r3, #0]
}
 8009a76:	bf00      	nop
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr
 8009a80:	20005c04 	.word	0x20005c04

08009a84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009a8c:	f000 f852 	bl	8009b34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009a90:	4b06      	ldr	r3, [pc, #24]	@ (8009aac <prvIdleTask+0x28>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d9f9      	bls.n	8009a8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009a98:	4b05      	ldr	r3, [pc, #20]	@ (8009ab0 <prvIdleTask+0x2c>)
 8009a9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a9e:	601a      	str	r2, [r3, #0]
 8009aa0:	f3bf 8f4f 	dsb	sy
 8009aa4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009aa8:	e7f0      	b.n	8009a8c <prvIdleTask+0x8>
 8009aaa:	bf00      	nop
 8009aac:	20005af4 	.word	0x20005af4
 8009ab0:	e000ed04 	.word	0xe000ed04

08009ab4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009aba:	2300      	movs	r3, #0
 8009abc:	607b      	str	r3, [r7, #4]
 8009abe:	e00c      	b.n	8009ada <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	4613      	mov	r3, r2
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	4413      	add	r3, r2
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	4a12      	ldr	r2, [pc, #72]	@ (8009b14 <prvInitialiseTaskLists+0x60>)
 8009acc:	4413      	add	r3, r2
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7fe f9ba 	bl	8007e48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	607b      	str	r3, [r7, #4]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2b06      	cmp	r3, #6
 8009ade:	d9ef      	bls.n	8009ac0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009ae0:	480d      	ldr	r0, [pc, #52]	@ (8009b18 <prvInitialiseTaskLists+0x64>)
 8009ae2:	f7fe f9b1 	bl	8007e48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009ae6:	480d      	ldr	r0, [pc, #52]	@ (8009b1c <prvInitialiseTaskLists+0x68>)
 8009ae8:	f7fe f9ae 	bl	8007e48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009aec:	480c      	ldr	r0, [pc, #48]	@ (8009b20 <prvInitialiseTaskLists+0x6c>)
 8009aee:	f7fe f9ab 	bl	8007e48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009af2:	480c      	ldr	r0, [pc, #48]	@ (8009b24 <prvInitialiseTaskLists+0x70>)
 8009af4:	f7fe f9a8 	bl	8007e48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009af8:	480b      	ldr	r0, [pc, #44]	@ (8009b28 <prvInitialiseTaskLists+0x74>)
 8009afa:	f7fe f9a5 	bl	8007e48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009afe:	4b0b      	ldr	r3, [pc, #44]	@ (8009b2c <prvInitialiseTaskLists+0x78>)
 8009b00:	4a05      	ldr	r2, [pc, #20]	@ (8009b18 <prvInitialiseTaskLists+0x64>)
 8009b02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009b04:	4b0a      	ldr	r3, [pc, #40]	@ (8009b30 <prvInitialiseTaskLists+0x7c>)
 8009b06:	4a05      	ldr	r2, [pc, #20]	@ (8009b1c <prvInitialiseTaskLists+0x68>)
 8009b08:	601a      	str	r2, [r3, #0]
}
 8009b0a:	bf00      	nop
 8009b0c:	3708      	adds	r7, #8
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	20005af4 	.word	0x20005af4
 8009b18:	20005b80 	.word	0x20005b80
 8009b1c:	20005b94 	.word	0x20005b94
 8009b20:	20005bb0 	.word	0x20005bb0
 8009b24:	20005bc4 	.word	0x20005bc4
 8009b28:	20005bdc 	.word	0x20005bdc
 8009b2c:	20005ba8 	.word	0x20005ba8
 8009b30:	20005bac 	.word	0x20005bac

08009b34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b3a:	e019      	b.n	8009b70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009b3c:	f000 fbce 	bl	800a2dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b40:	4b10      	ldr	r3, [pc, #64]	@ (8009b84 <prvCheckTasksWaitingTermination+0x50>)
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	3304      	adds	r3, #4
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f7fe fa05 	bl	8007f5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009b52:	4b0d      	ldr	r3, [pc, #52]	@ (8009b88 <prvCheckTasksWaitingTermination+0x54>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	3b01      	subs	r3, #1
 8009b58:	4a0b      	ldr	r2, [pc, #44]	@ (8009b88 <prvCheckTasksWaitingTermination+0x54>)
 8009b5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8009b8c <prvCheckTasksWaitingTermination+0x58>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	3b01      	subs	r3, #1
 8009b62:	4a0a      	ldr	r2, [pc, #40]	@ (8009b8c <prvCheckTasksWaitingTermination+0x58>)
 8009b64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009b66:	f000 fbef 	bl	800a348 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 f810 	bl	8009b90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b70:	4b06      	ldr	r3, [pc, #24]	@ (8009b8c <prvCheckTasksWaitingTermination+0x58>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d1e1      	bne.n	8009b3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009b78:	bf00      	nop
 8009b7a:	bf00      	nop
 8009b7c:	3708      	adds	r7, #8
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	20005bc4 	.word	0x20005bc4
 8009b88:	20005bf0 	.word	0x20005bf0
 8009b8c:	20005bd8 	.word	0x20005bd8

08009b90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d108      	bne.n	8009bb4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f000 fd94 	bl	800a6d4 <vPortFree>
				vPortFree( pxTCB );
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 fd91 	bl	800a6d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009bb2:	e01b      	b.n	8009bec <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d103      	bne.n	8009bc6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 fd88 	bl	800a6d4 <vPortFree>
	}
 8009bc4:	e012      	b.n	8009bec <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009bcc:	2b02      	cmp	r3, #2
 8009bce:	d00d      	beq.n	8009bec <prvDeleteTCB+0x5c>
	__asm volatile
 8009bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd4:	b672      	cpsid	i
 8009bd6:	f383 8811 	msr	BASEPRI, r3
 8009bda:	f3bf 8f6f 	isb	sy
 8009bde:	f3bf 8f4f 	dsb	sy
 8009be2:	b662      	cpsie	i
 8009be4:	60fb      	str	r3, [r7, #12]
}
 8009be6:	bf00      	nop
 8009be8:	bf00      	nop
 8009bea:	e7fd      	b.n	8009be8 <prvDeleteTCB+0x58>
	}
 8009bec:	bf00      	nop
 8009bee:	3710      	adds	r7, #16
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8009c2c <prvResetNextTaskUnblockTime+0x38>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d104      	bne.n	8009c0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009c04:	4b0a      	ldr	r3, [pc, #40]	@ (8009c30 <prvResetNextTaskUnblockTime+0x3c>)
 8009c06:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009c0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009c0c:	e008      	b.n	8009c20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c0e:	4b07      	ldr	r3, [pc, #28]	@ (8009c2c <prvResetNextTaskUnblockTime+0x38>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	68db      	ldr	r3, [r3, #12]
 8009c14:	68db      	ldr	r3, [r3, #12]
 8009c16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	4a04      	ldr	r2, [pc, #16]	@ (8009c30 <prvResetNextTaskUnblockTime+0x3c>)
 8009c1e:	6013      	str	r3, [r2, #0]
}
 8009c20:	bf00      	nop
 8009c22:	370c      	adds	r7, #12
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr
 8009c2c:	20005ba8 	.word	0x20005ba8
 8009c30:	20005c10 	.word	0x20005c10

08009c34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8009c68 <xTaskGetSchedulerState+0x34>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d102      	bne.n	8009c48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009c42:	2301      	movs	r3, #1
 8009c44:	607b      	str	r3, [r7, #4]
 8009c46:	e008      	b.n	8009c5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c48:	4b08      	ldr	r3, [pc, #32]	@ (8009c6c <xTaskGetSchedulerState+0x38>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d102      	bne.n	8009c56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009c50:	2302      	movs	r3, #2
 8009c52:	607b      	str	r3, [r7, #4]
 8009c54:	e001      	b.n	8009c5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009c56:	2300      	movs	r3, #0
 8009c58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009c5a:	687b      	ldr	r3, [r7, #4]
	}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	370c      	adds	r7, #12
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr
 8009c68:	20005bfc 	.word	0x20005bfc
 8009c6c:	20005c18 	.word	0x20005c18

08009c70 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b084      	sub	sp, #16
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d069      	beq.n	8009d5a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c8a:	4b36      	ldr	r3, [pc, #216]	@ (8009d64 <xTaskPriorityInherit+0xf4>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d259      	bcs.n	8009d48 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	699b      	ldr	r3, [r3, #24]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	db06      	blt.n	8009caa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c9c:	4b31      	ldr	r3, [pc, #196]	@ (8009d64 <xTaskPriorityInherit+0xf4>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ca2:	f1c3 0207 	rsb	r2, r3, #7
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	6959      	ldr	r1, [r3, #20]
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cb2:	4613      	mov	r3, r2
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	4413      	add	r3, r2
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	4a2b      	ldr	r2, [pc, #172]	@ (8009d68 <xTaskPriorityInherit+0xf8>)
 8009cbc:	4413      	add	r3, r2
 8009cbe:	4299      	cmp	r1, r3
 8009cc0:	d13a      	bne.n	8009d38 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	3304      	adds	r3, #4
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7fe f948 	bl	8007f5c <uxListRemove>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d115      	bne.n	8009cfe <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cd6:	4924      	ldr	r1, [pc, #144]	@ (8009d68 <xTaskPriorityInherit+0xf8>)
 8009cd8:	4613      	mov	r3, r2
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	4413      	add	r3, r2
 8009cde:	009b      	lsls	r3, r3, #2
 8009ce0:	440b      	add	r3, r1
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d10a      	bne.n	8009cfe <xTaskPriorityInherit+0x8e>
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cec:	2201      	movs	r2, #1
 8009cee:	fa02 f303 	lsl.w	r3, r2, r3
 8009cf2:	43da      	mvns	r2, r3
 8009cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8009d6c <xTaskPriorityInherit+0xfc>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4013      	ands	r3, r2
 8009cfa:	4a1c      	ldr	r2, [pc, #112]	@ (8009d6c <xTaskPriorityInherit+0xfc>)
 8009cfc:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009cfe:	4b19      	ldr	r3, [pc, #100]	@ (8009d64 <xTaskPriorityInherit+0xf4>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	409a      	lsls	r2, r3
 8009d10:	4b16      	ldr	r3, [pc, #88]	@ (8009d6c <xTaskPriorityInherit+0xfc>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4313      	orrs	r3, r2
 8009d16:	4a15      	ldr	r2, [pc, #84]	@ (8009d6c <xTaskPriorityInherit+0xfc>)
 8009d18:	6013      	str	r3, [r2, #0]
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d1e:	4613      	mov	r3, r2
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	4413      	add	r3, r2
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	4a10      	ldr	r2, [pc, #64]	@ (8009d68 <xTaskPriorityInherit+0xf8>)
 8009d28:	441a      	add	r2, r3
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	3304      	adds	r3, #4
 8009d2e:	4619      	mov	r1, r3
 8009d30:	4610      	mov	r0, r2
 8009d32:	f7fe f8b6 	bl	8007ea2 <vListInsertEnd>
 8009d36:	e004      	b.n	8009d42 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009d38:	4b0a      	ldr	r3, [pc, #40]	@ (8009d64 <xTaskPriorityInherit+0xf4>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009d42:	2301      	movs	r3, #1
 8009d44:	60fb      	str	r3, [r7, #12]
 8009d46:	e008      	b.n	8009d5a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d4c:	4b05      	ldr	r3, [pc, #20]	@ (8009d64 <xTaskPriorityInherit+0xf4>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d201      	bcs.n	8009d5a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009d56:	2301      	movs	r3, #1
 8009d58:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
	}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3710      	adds	r7, #16
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	20005af0 	.word	0x20005af0
 8009d68:	20005af4 	.word	0x20005af4
 8009d6c:	20005bf8 	.word	0x20005bf8

08009d70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b086      	sub	sp, #24
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d074      	beq.n	8009e70 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009d86:	4b3d      	ldr	r3, [pc, #244]	@ (8009e7c <xTaskPriorityDisinherit+0x10c>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	693a      	ldr	r2, [r7, #16]
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d00d      	beq.n	8009dac <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8009d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d94:	b672      	cpsid	i
 8009d96:	f383 8811 	msr	BASEPRI, r3
 8009d9a:	f3bf 8f6f 	isb	sy
 8009d9e:	f3bf 8f4f 	dsb	sy
 8009da2:	b662      	cpsie	i
 8009da4:	60fb      	str	r3, [r7, #12]
}
 8009da6:	bf00      	nop
 8009da8:	bf00      	nop
 8009daa:	e7fd      	b.n	8009da8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d10d      	bne.n	8009dd0 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8009db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009db8:	b672      	cpsid	i
 8009dba:	f383 8811 	msr	BASEPRI, r3
 8009dbe:	f3bf 8f6f 	isb	sy
 8009dc2:	f3bf 8f4f 	dsb	sy
 8009dc6:	b662      	cpsie	i
 8009dc8:	60bb      	str	r3, [r7, #8]
}
 8009dca:	bf00      	nop
 8009dcc:	bf00      	nop
 8009dce:	e7fd      	b.n	8009dcc <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009dd4:	1e5a      	subs	r2, r3, #1
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d044      	beq.n	8009e70 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d140      	bne.n	8009e70 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	3304      	adds	r3, #4
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7fe f8b2 	bl	8007f5c <uxListRemove>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d115      	bne.n	8009e2a <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e02:	491f      	ldr	r1, [pc, #124]	@ (8009e80 <xTaskPriorityDisinherit+0x110>)
 8009e04:	4613      	mov	r3, r2
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	4413      	add	r3, r2
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	440b      	add	r3, r1
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d10a      	bne.n	8009e2a <xTaskPriorityDisinherit+0xba>
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e18:	2201      	movs	r2, #1
 8009e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e1e:	43da      	mvns	r2, r3
 8009e20:	4b18      	ldr	r3, [pc, #96]	@ (8009e84 <xTaskPriorityDisinherit+0x114>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4013      	ands	r3, r2
 8009e26:	4a17      	ldr	r2, [pc, #92]	@ (8009e84 <xTaskPriorityDisinherit+0x114>)
 8009e28:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e36:	f1c3 0207 	rsb	r2, r3, #7
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e42:	2201      	movs	r2, #1
 8009e44:	409a      	lsls	r2, r3
 8009e46:	4b0f      	ldr	r3, [pc, #60]	@ (8009e84 <xTaskPriorityDisinherit+0x114>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8009e84 <xTaskPriorityDisinherit+0x114>)
 8009e4e:	6013      	str	r3, [r2, #0]
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e54:	4613      	mov	r3, r2
 8009e56:	009b      	lsls	r3, r3, #2
 8009e58:	4413      	add	r3, r2
 8009e5a:	009b      	lsls	r3, r3, #2
 8009e5c:	4a08      	ldr	r2, [pc, #32]	@ (8009e80 <xTaskPriorityDisinherit+0x110>)
 8009e5e:	441a      	add	r2, r3
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	3304      	adds	r3, #4
 8009e64:	4619      	mov	r1, r3
 8009e66:	4610      	mov	r0, r2
 8009e68:	f7fe f81b 	bl	8007ea2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009e70:	697b      	ldr	r3, [r7, #20]
	}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3718      	adds	r7, #24
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	20005af0 	.word	0x20005af0
 8009e80:	20005af4 	.word	0x20005af4
 8009e84:	20005bf8 	.word	0x20005bf8

08009e88 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b088      	sub	sp, #32
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009e96:	2301      	movs	r3, #1
 8009e98:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f000 8089 	beq.w	8009fb4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d10d      	bne.n	8009ec6 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8009eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eae:	b672      	cpsid	i
 8009eb0:	f383 8811 	msr	BASEPRI, r3
 8009eb4:	f3bf 8f6f 	isb	sy
 8009eb8:	f3bf 8f4f 	dsb	sy
 8009ebc:	b662      	cpsie	i
 8009ebe:	60fb      	str	r3, [r7, #12]
}
 8009ec0:	bf00      	nop
 8009ec2:	bf00      	nop
 8009ec4:	e7fd      	b.n	8009ec2 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009ec6:	69bb      	ldr	r3, [r7, #24]
 8009ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009eca:	683a      	ldr	r2, [r7, #0]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d902      	bls.n	8009ed6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	61fb      	str	r3, [r7, #28]
 8009ed4:	e002      	b.n	8009edc <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009eda:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009edc:	69bb      	ldr	r3, [r7, #24]
 8009ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ee0:	69fa      	ldr	r2, [r7, #28]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d066      	beq.n	8009fb4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009ee6:	69bb      	ldr	r3, [r7, #24]
 8009ee8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009eea:	697a      	ldr	r2, [r7, #20]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d161      	bne.n	8009fb4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009ef0:	4b32      	ldr	r3, [pc, #200]	@ (8009fbc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	69ba      	ldr	r2, [r7, #24]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d10d      	bne.n	8009f16 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8009efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009efe:	b672      	cpsid	i
 8009f00:	f383 8811 	msr	BASEPRI, r3
 8009f04:	f3bf 8f6f 	isb	sy
 8009f08:	f3bf 8f4f 	dsb	sy
 8009f0c:	b662      	cpsie	i
 8009f0e:	60bb      	str	r3, [r7, #8]
}
 8009f10:	bf00      	nop
 8009f12:	bf00      	nop
 8009f14:	e7fd      	b.n	8009f12 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f1a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009f1c:	69bb      	ldr	r3, [r7, #24]
 8009f1e:	69fa      	ldr	r2, [r7, #28]
 8009f20:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009f22:	69bb      	ldr	r3, [r7, #24]
 8009f24:	699b      	ldr	r3, [r3, #24]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	db04      	blt.n	8009f34 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f2a:	69fb      	ldr	r3, [r7, #28]
 8009f2c:	f1c3 0207 	rsb	r2, r3, #7
 8009f30:	69bb      	ldr	r3, [r7, #24]
 8009f32:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009f34:	69bb      	ldr	r3, [r7, #24]
 8009f36:	6959      	ldr	r1, [r3, #20]
 8009f38:	693a      	ldr	r2, [r7, #16]
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	4413      	add	r3, r2
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	4a1f      	ldr	r2, [pc, #124]	@ (8009fc0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009f44:	4413      	add	r3, r2
 8009f46:	4299      	cmp	r1, r3
 8009f48:	d134      	bne.n	8009fb4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	3304      	adds	r3, #4
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7fe f804 	bl	8007f5c <uxListRemove>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d115      	bne.n	8009f86 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009f5a:	69bb      	ldr	r3, [r7, #24]
 8009f5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f5e:	4918      	ldr	r1, [pc, #96]	@ (8009fc0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009f60:	4613      	mov	r3, r2
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	4413      	add	r3, r2
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	440b      	add	r3, r1
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d10a      	bne.n	8009f86 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f74:	2201      	movs	r2, #1
 8009f76:	fa02 f303 	lsl.w	r3, r2, r3
 8009f7a:	43da      	mvns	r2, r3
 8009f7c:	4b11      	ldr	r3, [pc, #68]	@ (8009fc4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4013      	ands	r3, r2
 8009f82:	4a10      	ldr	r2, [pc, #64]	@ (8009fc4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009f84:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	409a      	lsls	r2, r3
 8009f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8009fc4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4313      	orrs	r3, r2
 8009f94:	4a0b      	ldr	r2, [pc, #44]	@ (8009fc4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009f96:	6013      	str	r3, [r2, #0]
 8009f98:	69bb      	ldr	r3, [r7, #24]
 8009f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f9c:	4613      	mov	r3, r2
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	4413      	add	r3, r2
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	4a06      	ldr	r2, [pc, #24]	@ (8009fc0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009fa6:	441a      	add	r2, r3
 8009fa8:	69bb      	ldr	r3, [r7, #24]
 8009faa:	3304      	adds	r3, #4
 8009fac:	4619      	mov	r1, r3
 8009fae:	4610      	mov	r0, r2
 8009fb0:	f7fd ff77 	bl	8007ea2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009fb4:	bf00      	nop
 8009fb6:	3720      	adds	r7, #32
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}
 8009fbc:	20005af0 	.word	0x20005af0
 8009fc0:	20005af4 	.word	0x20005af4
 8009fc4:	20005bf8 	.word	0x20005bf8

08009fc8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009fc8:	b480      	push	{r7}
 8009fca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009fcc:	4b07      	ldr	r3, [pc, #28]	@ (8009fec <pvTaskIncrementMutexHeldCount+0x24>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d004      	beq.n	8009fde <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009fd4:	4b05      	ldr	r3, [pc, #20]	@ (8009fec <pvTaskIncrementMutexHeldCount+0x24>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009fda:	3201      	adds	r2, #1
 8009fdc:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8009fde:	4b03      	ldr	r3, [pc, #12]	@ (8009fec <pvTaskIncrementMutexHeldCount+0x24>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
	}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr
 8009fec:	20005af0 	.word	0x20005af0

08009ff0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009ffa:	4b29      	ldr	r3, [pc, #164]	@ (800a0a0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a000:	4b28      	ldr	r3, [pc, #160]	@ (800a0a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	3304      	adds	r3, #4
 800a006:	4618      	mov	r0, r3
 800a008:	f7fd ffa8 	bl	8007f5c <uxListRemove>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d10b      	bne.n	800a02a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a012:	4b24      	ldr	r3, [pc, #144]	@ (800a0a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a018:	2201      	movs	r2, #1
 800a01a:	fa02 f303 	lsl.w	r3, r2, r3
 800a01e:	43da      	mvns	r2, r3
 800a020:	4b21      	ldr	r3, [pc, #132]	@ (800a0a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4013      	ands	r3, r2
 800a026:	4a20      	ldr	r2, [pc, #128]	@ (800a0a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a028:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a030:	d10a      	bne.n	800a048 <prvAddCurrentTaskToDelayedList+0x58>
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d007      	beq.n	800a048 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a038:	4b1a      	ldr	r3, [pc, #104]	@ (800a0a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	3304      	adds	r3, #4
 800a03e:	4619      	mov	r1, r3
 800a040:	481a      	ldr	r0, [pc, #104]	@ (800a0ac <prvAddCurrentTaskToDelayedList+0xbc>)
 800a042:	f7fd ff2e 	bl	8007ea2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a046:	e026      	b.n	800a096 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a048:	68fa      	ldr	r2, [r7, #12]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4413      	add	r3, r2
 800a04e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a050:	4b14      	ldr	r3, [pc, #80]	@ (800a0a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	68ba      	ldr	r2, [r7, #8]
 800a056:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a058:	68ba      	ldr	r2, [r7, #8]
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d209      	bcs.n	800a074 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a060:	4b13      	ldr	r3, [pc, #76]	@ (800a0b0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	4b0f      	ldr	r3, [pc, #60]	@ (800a0a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	3304      	adds	r3, #4
 800a06a:	4619      	mov	r1, r3
 800a06c:	4610      	mov	r0, r2
 800a06e:	f7fd ff3c 	bl	8007eea <vListInsert>
}
 800a072:	e010      	b.n	800a096 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a074:	4b0f      	ldr	r3, [pc, #60]	@ (800a0b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	4b0a      	ldr	r3, [pc, #40]	@ (800a0a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	3304      	adds	r3, #4
 800a07e:	4619      	mov	r1, r3
 800a080:	4610      	mov	r0, r2
 800a082:	f7fd ff32 	bl	8007eea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a086:	4b0c      	ldr	r3, [pc, #48]	@ (800a0b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	68ba      	ldr	r2, [r7, #8]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d202      	bcs.n	800a096 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a090:	4a09      	ldr	r2, [pc, #36]	@ (800a0b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	6013      	str	r3, [r2, #0]
}
 800a096:	bf00      	nop
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	20005bf4 	.word	0x20005bf4
 800a0a4:	20005af0 	.word	0x20005af0
 800a0a8:	20005bf8 	.word	0x20005bf8
 800a0ac:	20005bdc 	.word	0x20005bdc
 800a0b0:	20005bac 	.word	0x20005bac
 800a0b4:	20005ba8 	.word	0x20005ba8
 800a0b8:	20005c10 	.word	0x20005c10

0800a0bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b085      	sub	sp, #20
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	60b9      	str	r1, [r7, #8]
 800a0c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	3b04      	subs	r3, #4
 800a0cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a0d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	3b04      	subs	r3, #4
 800a0da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	f023 0201 	bic.w	r2, r3, #1
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	3b04      	subs	r3, #4
 800a0ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a0ec:	4a0c      	ldr	r2, [pc, #48]	@ (800a120 <pxPortInitialiseStack+0x64>)
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	3b14      	subs	r3, #20
 800a0f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	3b04      	subs	r3, #4
 800a102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f06f 0202 	mvn.w	r2, #2
 800a10a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	3b20      	subs	r3, #32
 800a110:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a112:	68fb      	ldr	r3, [r7, #12]
}
 800a114:	4618      	mov	r0, r3
 800a116:	3714      	adds	r7, #20
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr
 800a120:	0800a125 	.word	0x0800a125

0800a124 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a124:	b480      	push	{r7}
 800a126:	b085      	sub	sp, #20
 800a128:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a12a:	2300      	movs	r3, #0
 800a12c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a12e:	4b15      	ldr	r3, [pc, #84]	@ (800a184 <prvTaskExitError+0x60>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a136:	d00d      	beq.n	800a154 <prvTaskExitError+0x30>
	__asm volatile
 800a138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a13c:	b672      	cpsid	i
 800a13e:	f383 8811 	msr	BASEPRI, r3
 800a142:	f3bf 8f6f 	isb	sy
 800a146:	f3bf 8f4f 	dsb	sy
 800a14a:	b662      	cpsie	i
 800a14c:	60fb      	str	r3, [r7, #12]
}
 800a14e:	bf00      	nop
 800a150:	bf00      	nop
 800a152:	e7fd      	b.n	800a150 <prvTaskExitError+0x2c>
	__asm volatile
 800a154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a158:	b672      	cpsid	i
 800a15a:	f383 8811 	msr	BASEPRI, r3
 800a15e:	f3bf 8f6f 	isb	sy
 800a162:	f3bf 8f4f 	dsb	sy
 800a166:	b662      	cpsie	i
 800a168:	60bb      	str	r3, [r7, #8]
}
 800a16a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a16c:	bf00      	nop
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d0fc      	beq.n	800a16e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a174:	bf00      	nop
 800a176:	bf00      	nop
 800a178:	3714      	adds	r7, #20
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr
 800a182:	bf00      	nop
 800a184:	20000020 	.word	0x20000020
	...

0800a190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a190:	4b07      	ldr	r3, [pc, #28]	@ (800a1b0 <pxCurrentTCBConst2>)
 800a192:	6819      	ldr	r1, [r3, #0]
 800a194:	6808      	ldr	r0, [r1, #0]
 800a196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a19a:	f380 8809 	msr	PSP, r0
 800a19e:	f3bf 8f6f 	isb	sy
 800a1a2:	f04f 0000 	mov.w	r0, #0
 800a1a6:	f380 8811 	msr	BASEPRI, r0
 800a1aa:	4770      	bx	lr
 800a1ac:	f3af 8000 	nop.w

0800a1b0 <pxCurrentTCBConst2>:
 800a1b0:	20005af0 	.word	0x20005af0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a1b4:	bf00      	nop
 800a1b6:	bf00      	nop

0800a1b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a1b8:	4808      	ldr	r0, [pc, #32]	@ (800a1dc <prvPortStartFirstTask+0x24>)
 800a1ba:	6800      	ldr	r0, [r0, #0]
 800a1bc:	6800      	ldr	r0, [r0, #0]
 800a1be:	f380 8808 	msr	MSP, r0
 800a1c2:	f04f 0000 	mov.w	r0, #0
 800a1c6:	f380 8814 	msr	CONTROL, r0
 800a1ca:	b662      	cpsie	i
 800a1cc:	b661      	cpsie	f
 800a1ce:	f3bf 8f4f 	dsb	sy
 800a1d2:	f3bf 8f6f 	isb	sy
 800a1d6:	df00      	svc	0
 800a1d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a1da:	bf00      	nop
 800a1dc:	e000ed08 	.word	0xe000ed08

0800a1e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a1e6:	4b37      	ldr	r3, [pc, #220]	@ (800a2c4 <xPortStartScheduler+0xe4>)
 800a1e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	781b      	ldrb	r3, [r3, #0]
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	22ff      	movs	r2, #255	@ 0xff
 800a1f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a200:	78fb      	ldrb	r3, [r7, #3]
 800a202:	b2db      	uxtb	r3, r3
 800a204:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a208:	b2da      	uxtb	r2, r3
 800a20a:	4b2f      	ldr	r3, [pc, #188]	@ (800a2c8 <xPortStartScheduler+0xe8>)
 800a20c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a20e:	4b2f      	ldr	r3, [pc, #188]	@ (800a2cc <xPortStartScheduler+0xec>)
 800a210:	2207      	movs	r2, #7
 800a212:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a214:	e009      	b.n	800a22a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a216:	4b2d      	ldr	r3, [pc, #180]	@ (800a2cc <xPortStartScheduler+0xec>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	3b01      	subs	r3, #1
 800a21c:	4a2b      	ldr	r2, [pc, #172]	@ (800a2cc <xPortStartScheduler+0xec>)
 800a21e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a220:	78fb      	ldrb	r3, [r7, #3]
 800a222:	b2db      	uxtb	r3, r3
 800a224:	005b      	lsls	r3, r3, #1
 800a226:	b2db      	uxtb	r3, r3
 800a228:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a22a:	78fb      	ldrb	r3, [r7, #3]
 800a22c:	b2db      	uxtb	r3, r3
 800a22e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a232:	2b80      	cmp	r3, #128	@ 0x80
 800a234:	d0ef      	beq.n	800a216 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a236:	4b25      	ldr	r3, [pc, #148]	@ (800a2cc <xPortStartScheduler+0xec>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f1c3 0307 	rsb	r3, r3, #7
 800a23e:	2b04      	cmp	r3, #4
 800a240:	d00d      	beq.n	800a25e <xPortStartScheduler+0x7e>
	__asm volatile
 800a242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a246:	b672      	cpsid	i
 800a248:	f383 8811 	msr	BASEPRI, r3
 800a24c:	f3bf 8f6f 	isb	sy
 800a250:	f3bf 8f4f 	dsb	sy
 800a254:	b662      	cpsie	i
 800a256:	60bb      	str	r3, [r7, #8]
}
 800a258:	bf00      	nop
 800a25a:	bf00      	nop
 800a25c:	e7fd      	b.n	800a25a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a25e:	4b1b      	ldr	r3, [pc, #108]	@ (800a2cc <xPortStartScheduler+0xec>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	021b      	lsls	r3, r3, #8
 800a264:	4a19      	ldr	r2, [pc, #100]	@ (800a2cc <xPortStartScheduler+0xec>)
 800a266:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a268:	4b18      	ldr	r3, [pc, #96]	@ (800a2cc <xPortStartScheduler+0xec>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a270:	4a16      	ldr	r2, [pc, #88]	@ (800a2cc <xPortStartScheduler+0xec>)
 800a272:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	b2da      	uxtb	r2, r3
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a27c:	4b14      	ldr	r3, [pc, #80]	@ (800a2d0 <xPortStartScheduler+0xf0>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a13      	ldr	r2, [pc, #76]	@ (800a2d0 <xPortStartScheduler+0xf0>)
 800a282:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a286:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a288:	4b11      	ldr	r3, [pc, #68]	@ (800a2d0 <xPortStartScheduler+0xf0>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a10      	ldr	r2, [pc, #64]	@ (800a2d0 <xPortStartScheduler+0xf0>)
 800a28e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a292:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a294:	f000 f8dc 	bl	800a450 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a298:	4b0e      	ldr	r3, [pc, #56]	@ (800a2d4 <xPortStartScheduler+0xf4>)
 800a29a:	2200      	movs	r2, #0
 800a29c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a29e:	f000 f8fb 	bl	800a498 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a2a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a2d8 <xPortStartScheduler+0xf8>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a0c      	ldr	r2, [pc, #48]	@ (800a2d8 <xPortStartScheduler+0xf8>)
 800a2a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a2ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a2ae:	f7ff ff83 	bl	800a1b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a2b2:	f7ff fa71 	bl	8009798 <vTaskSwitchContext>
	prvTaskExitError();
 800a2b6:	f7ff ff35 	bl	800a124 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a2ba:	2300      	movs	r3, #0
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3710      	adds	r7, #16
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}
 800a2c4:	e000e400 	.word	0xe000e400
 800a2c8:	20005c1c 	.word	0x20005c1c
 800a2cc:	20005c20 	.word	0x20005c20
 800a2d0:	e000ed20 	.word	0xe000ed20
 800a2d4:	20000020 	.word	0x20000020
 800a2d8:	e000ef34 	.word	0xe000ef34

0800a2dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
	__asm volatile
 800a2e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2e6:	b672      	cpsid	i
 800a2e8:	f383 8811 	msr	BASEPRI, r3
 800a2ec:	f3bf 8f6f 	isb	sy
 800a2f0:	f3bf 8f4f 	dsb	sy
 800a2f4:	b662      	cpsie	i
 800a2f6:	607b      	str	r3, [r7, #4]
}
 800a2f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a2fa:	4b11      	ldr	r3, [pc, #68]	@ (800a340 <vPortEnterCritical+0x64>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	3301      	adds	r3, #1
 800a300:	4a0f      	ldr	r2, [pc, #60]	@ (800a340 <vPortEnterCritical+0x64>)
 800a302:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a304:	4b0e      	ldr	r3, [pc, #56]	@ (800a340 <vPortEnterCritical+0x64>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d112      	bne.n	800a332 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a30c:	4b0d      	ldr	r3, [pc, #52]	@ (800a344 <vPortEnterCritical+0x68>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	b2db      	uxtb	r3, r3
 800a312:	2b00      	cmp	r3, #0
 800a314:	d00d      	beq.n	800a332 <vPortEnterCritical+0x56>
	__asm volatile
 800a316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a31a:	b672      	cpsid	i
 800a31c:	f383 8811 	msr	BASEPRI, r3
 800a320:	f3bf 8f6f 	isb	sy
 800a324:	f3bf 8f4f 	dsb	sy
 800a328:	b662      	cpsie	i
 800a32a:	603b      	str	r3, [r7, #0]
}
 800a32c:	bf00      	nop
 800a32e:	bf00      	nop
 800a330:	e7fd      	b.n	800a32e <vPortEnterCritical+0x52>
	}
}
 800a332:	bf00      	nop
 800a334:	370c      	adds	r7, #12
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr
 800a33e:	bf00      	nop
 800a340:	20000020 	.word	0x20000020
 800a344:	e000ed04 	.word	0xe000ed04

0800a348 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a34e:	4b13      	ldr	r3, [pc, #76]	@ (800a39c <vPortExitCritical+0x54>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d10d      	bne.n	800a372 <vPortExitCritical+0x2a>
	__asm volatile
 800a356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a35a:	b672      	cpsid	i
 800a35c:	f383 8811 	msr	BASEPRI, r3
 800a360:	f3bf 8f6f 	isb	sy
 800a364:	f3bf 8f4f 	dsb	sy
 800a368:	b662      	cpsie	i
 800a36a:	607b      	str	r3, [r7, #4]
}
 800a36c:	bf00      	nop
 800a36e:	bf00      	nop
 800a370:	e7fd      	b.n	800a36e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a372:	4b0a      	ldr	r3, [pc, #40]	@ (800a39c <vPortExitCritical+0x54>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	3b01      	subs	r3, #1
 800a378:	4a08      	ldr	r2, [pc, #32]	@ (800a39c <vPortExitCritical+0x54>)
 800a37a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a37c:	4b07      	ldr	r3, [pc, #28]	@ (800a39c <vPortExitCritical+0x54>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d105      	bne.n	800a390 <vPortExitCritical+0x48>
 800a384:	2300      	movs	r3, #0
 800a386:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	f383 8811 	msr	BASEPRI, r3
}
 800a38e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a390:	bf00      	nop
 800a392:	370c      	adds	r7, #12
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr
 800a39c:	20000020 	.word	0x20000020

0800a3a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a3a0:	f3ef 8009 	mrs	r0, PSP
 800a3a4:	f3bf 8f6f 	isb	sy
 800a3a8:	4b15      	ldr	r3, [pc, #84]	@ (800a400 <pxCurrentTCBConst>)
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	f01e 0f10 	tst.w	lr, #16
 800a3b0:	bf08      	it	eq
 800a3b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a3b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ba:	6010      	str	r0, [r2, #0]
 800a3bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a3c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a3c4:	b672      	cpsid	i
 800a3c6:	f380 8811 	msr	BASEPRI, r0
 800a3ca:	f3bf 8f4f 	dsb	sy
 800a3ce:	f3bf 8f6f 	isb	sy
 800a3d2:	b662      	cpsie	i
 800a3d4:	f7ff f9e0 	bl	8009798 <vTaskSwitchContext>
 800a3d8:	f04f 0000 	mov.w	r0, #0
 800a3dc:	f380 8811 	msr	BASEPRI, r0
 800a3e0:	bc09      	pop	{r0, r3}
 800a3e2:	6819      	ldr	r1, [r3, #0]
 800a3e4:	6808      	ldr	r0, [r1, #0]
 800a3e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ea:	f01e 0f10 	tst.w	lr, #16
 800a3ee:	bf08      	it	eq
 800a3f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a3f4:	f380 8809 	msr	PSP, r0
 800a3f8:	f3bf 8f6f 	isb	sy
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop

0800a400 <pxCurrentTCBConst>:
 800a400:	20005af0 	.word	0x20005af0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a404:	bf00      	nop
 800a406:	bf00      	nop

0800a408 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
	__asm volatile
 800a40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a412:	b672      	cpsid	i
 800a414:	f383 8811 	msr	BASEPRI, r3
 800a418:	f3bf 8f6f 	isb	sy
 800a41c:	f3bf 8f4f 	dsb	sy
 800a420:	b662      	cpsie	i
 800a422:	607b      	str	r3, [r7, #4]
}
 800a424:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a426:	f7ff f8fb 	bl	8009620 <xTaskIncrementTick>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d003      	beq.n	800a438 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a430:	4b06      	ldr	r3, [pc, #24]	@ (800a44c <SysTick_Handler+0x44>)
 800a432:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a436:	601a      	str	r2, [r3, #0]
 800a438:	2300      	movs	r3, #0
 800a43a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	f383 8811 	msr	BASEPRI, r3
}
 800a442:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a444:	bf00      	nop
 800a446:	3708      	adds	r7, #8
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}
 800a44c:	e000ed04 	.word	0xe000ed04

0800a450 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a450:	b480      	push	{r7}
 800a452:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a454:	4b0b      	ldr	r3, [pc, #44]	@ (800a484 <vPortSetupTimerInterrupt+0x34>)
 800a456:	2200      	movs	r2, #0
 800a458:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a45a:	4b0b      	ldr	r3, [pc, #44]	@ (800a488 <vPortSetupTimerInterrupt+0x38>)
 800a45c:	2200      	movs	r2, #0
 800a45e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a460:	4b0a      	ldr	r3, [pc, #40]	@ (800a48c <vPortSetupTimerInterrupt+0x3c>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a0a      	ldr	r2, [pc, #40]	@ (800a490 <vPortSetupTimerInterrupt+0x40>)
 800a466:	fba2 2303 	umull	r2, r3, r2, r3
 800a46a:	099b      	lsrs	r3, r3, #6
 800a46c:	4a09      	ldr	r2, [pc, #36]	@ (800a494 <vPortSetupTimerInterrupt+0x44>)
 800a46e:	3b01      	subs	r3, #1
 800a470:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a472:	4b04      	ldr	r3, [pc, #16]	@ (800a484 <vPortSetupTimerInterrupt+0x34>)
 800a474:	2207      	movs	r2, #7
 800a476:	601a      	str	r2, [r3, #0]
}
 800a478:	bf00      	nop
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr
 800a482:	bf00      	nop
 800a484:	e000e010 	.word	0xe000e010
 800a488:	e000e018 	.word	0xe000e018
 800a48c:	20000000 	.word	0x20000000
 800a490:	10624dd3 	.word	0x10624dd3
 800a494:	e000e014 	.word	0xe000e014

0800a498 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a498:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a4a8 <vPortEnableVFP+0x10>
 800a49c:	6801      	ldr	r1, [r0, #0]
 800a49e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a4a2:	6001      	str	r1, [r0, #0]
 800a4a4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a4a6:	bf00      	nop
 800a4a8:	e000ed88 	.word	0xe000ed88

0800a4ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b085      	sub	sp, #20
 800a4b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a4b2:	f3ef 8305 	mrs	r3, IPSR
 800a4b6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2b0f      	cmp	r3, #15
 800a4bc:	d917      	bls.n	800a4ee <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a4be:	4a1a      	ldr	r2, [pc, #104]	@ (800a528 <vPortValidateInterruptPriority+0x7c>)
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	4413      	add	r3, r2
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a4c8:	4b18      	ldr	r3, [pc, #96]	@ (800a52c <vPortValidateInterruptPriority+0x80>)
 800a4ca:	781b      	ldrb	r3, [r3, #0]
 800a4cc:	7afa      	ldrb	r2, [r7, #11]
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d20d      	bcs.n	800a4ee <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800a4d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4d6:	b672      	cpsid	i
 800a4d8:	f383 8811 	msr	BASEPRI, r3
 800a4dc:	f3bf 8f6f 	isb	sy
 800a4e0:	f3bf 8f4f 	dsb	sy
 800a4e4:	b662      	cpsie	i
 800a4e6:	607b      	str	r3, [r7, #4]
}
 800a4e8:	bf00      	nop
 800a4ea:	bf00      	nop
 800a4ec:	e7fd      	b.n	800a4ea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a4ee:	4b10      	ldr	r3, [pc, #64]	@ (800a530 <vPortValidateInterruptPriority+0x84>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a4f6:	4b0f      	ldr	r3, [pc, #60]	@ (800a534 <vPortValidateInterruptPriority+0x88>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d90d      	bls.n	800a51a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800a4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a502:	b672      	cpsid	i
 800a504:	f383 8811 	msr	BASEPRI, r3
 800a508:	f3bf 8f6f 	isb	sy
 800a50c:	f3bf 8f4f 	dsb	sy
 800a510:	b662      	cpsie	i
 800a512:	603b      	str	r3, [r7, #0]
}
 800a514:	bf00      	nop
 800a516:	bf00      	nop
 800a518:	e7fd      	b.n	800a516 <vPortValidateInterruptPriority+0x6a>
	}
 800a51a:	bf00      	nop
 800a51c:	3714      	adds	r7, #20
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr
 800a526:	bf00      	nop
 800a528:	e000e3f0 	.word	0xe000e3f0
 800a52c:	20005c1c 	.word	0x20005c1c
 800a530:	e000ed0c 	.word	0xe000ed0c
 800a534:	20005c20 	.word	0x20005c20

0800a538 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b08a      	sub	sp, #40	@ 0x28
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a540:	2300      	movs	r3, #0
 800a542:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a544:	f7fe ff9c 	bl	8009480 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a548:	4b5d      	ldr	r3, [pc, #372]	@ (800a6c0 <pvPortMalloc+0x188>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d101      	bne.n	800a554 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a550:	f000 f920 	bl	800a794 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a554:	4b5b      	ldr	r3, [pc, #364]	@ (800a6c4 <pvPortMalloc+0x18c>)
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	4013      	ands	r3, r2
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	f040 8094 	bne.w	800a68a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d020      	beq.n	800a5aa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800a568:	2208      	movs	r2, #8
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	4413      	add	r3, r2
 800a56e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f003 0307 	and.w	r3, r3, #7
 800a576:	2b00      	cmp	r3, #0
 800a578:	d017      	beq.n	800a5aa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f023 0307 	bic.w	r3, r3, #7
 800a580:	3308      	adds	r3, #8
 800a582:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f003 0307 	and.w	r3, r3, #7
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d00d      	beq.n	800a5aa <pvPortMalloc+0x72>
	__asm volatile
 800a58e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a592:	b672      	cpsid	i
 800a594:	f383 8811 	msr	BASEPRI, r3
 800a598:	f3bf 8f6f 	isb	sy
 800a59c:	f3bf 8f4f 	dsb	sy
 800a5a0:	b662      	cpsie	i
 800a5a2:	617b      	str	r3, [r7, #20]
}
 800a5a4:	bf00      	nop
 800a5a6:	bf00      	nop
 800a5a8:	e7fd      	b.n	800a5a6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d06c      	beq.n	800a68a <pvPortMalloc+0x152>
 800a5b0:	4b45      	ldr	r3, [pc, #276]	@ (800a6c8 <pvPortMalloc+0x190>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d867      	bhi.n	800a68a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a5ba:	4b44      	ldr	r3, [pc, #272]	@ (800a6cc <pvPortMalloc+0x194>)
 800a5bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a5be:	4b43      	ldr	r3, [pc, #268]	@ (800a6cc <pvPortMalloc+0x194>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5c4:	e004      	b.n	800a5d0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800a5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d903      	bls.n	800a5e2 <pvPortMalloc+0xaa>
 800a5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d1f1      	bne.n	800a5c6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a5e2:	4b37      	ldr	r3, [pc, #220]	@ (800a6c0 <pvPortMalloc+0x188>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d04e      	beq.n	800a68a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a5ec:	6a3b      	ldr	r3, [r7, #32]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	2208      	movs	r2, #8
 800a5f2:	4413      	add	r3, r2
 800a5f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	6a3b      	ldr	r3, [r7, #32]
 800a5fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a600:	685a      	ldr	r2, [r3, #4]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	1ad2      	subs	r2, r2, r3
 800a606:	2308      	movs	r3, #8
 800a608:	005b      	lsls	r3, r3, #1
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d922      	bls.n	800a654 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a60e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	4413      	add	r3, r2
 800a614:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a616:	69bb      	ldr	r3, [r7, #24]
 800a618:	f003 0307 	and.w	r3, r3, #7
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d00d      	beq.n	800a63c <pvPortMalloc+0x104>
	__asm volatile
 800a620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a624:	b672      	cpsid	i
 800a626:	f383 8811 	msr	BASEPRI, r3
 800a62a:	f3bf 8f6f 	isb	sy
 800a62e:	f3bf 8f4f 	dsb	sy
 800a632:	b662      	cpsie	i
 800a634:	613b      	str	r3, [r7, #16]
}
 800a636:	bf00      	nop
 800a638:	bf00      	nop
 800a63a:	e7fd      	b.n	800a638 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a63e:	685a      	ldr	r2, [r3, #4]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	1ad2      	subs	r2, r2, r3
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a64e:	69b8      	ldr	r0, [r7, #24]
 800a650:	f000 f902 	bl	800a858 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a654:	4b1c      	ldr	r3, [pc, #112]	@ (800a6c8 <pvPortMalloc+0x190>)
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	1ad3      	subs	r3, r2, r3
 800a65e:	4a1a      	ldr	r2, [pc, #104]	@ (800a6c8 <pvPortMalloc+0x190>)
 800a660:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a662:	4b19      	ldr	r3, [pc, #100]	@ (800a6c8 <pvPortMalloc+0x190>)
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	4b1a      	ldr	r3, [pc, #104]	@ (800a6d0 <pvPortMalloc+0x198>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d203      	bcs.n	800a676 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a66e:	4b16      	ldr	r3, [pc, #88]	@ (800a6c8 <pvPortMalloc+0x190>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	4a17      	ldr	r2, [pc, #92]	@ (800a6d0 <pvPortMalloc+0x198>)
 800a674:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a678:	685a      	ldr	r2, [r3, #4]
 800a67a:	4b12      	ldr	r3, [pc, #72]	@ (800a6c4 <pvPortMalloc+0x18c>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	431a      	orrs	r2, r3
 800a680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a682:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a686:	2200      	movs	r2, #0
 800a688:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a68a:	f7fe ff07 	bl	800949c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a68e:	69fb      	ldr	r3, [r7, #28]
 800a690:	f003 0307 	and.w	r3, r3, #7
 800a694:	2b00      	cmp	r3, #0
 800a696:	d00d      	beq.n	800a6b4 <pvPortMalloc+0x17c>
	__asm volatile
 800a698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a69c:	b672      	cpsid	i
 800a69e:	f383 8811 	msr	BASEPRI, r3
 800a6a2:	f3bf 8f6f 	isb	sy
 800a6a6:	f3bf 8f4f 	dsb	sy
 800a6aa:	b662      	cpsie	i
 800a6ac:	60fb      	str	r3, [r7, #12]
}
 800a6ae:	bf00      	nop
 800a6b0:	bf00      	nop
 800a6b2:	e7fd      	b.n	800a6b0 <pvPortMalloc+0x178>
	return pvReturn;
 800a6b4:	69fb      	ldr	r3, [r7, #28]
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3728      	adds	r7, #40	@ 0x28
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
 800a6be:	bf00      	nop
 800a6c0:	2000982c 	.word	0x2000982c
 800a6c4:	20009838 	.word	0x20009838
 800a6c8:	20009830 	.word	0x20009830
 800a6cc:	20009824 	.word	0x20009824
 800a6d0:	20009834 	.word	0x20009834

0800a6d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b086      	sub	sp, #24
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d04e      	beq.n	800a784 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a6e6:	2308      	movs	r3, #8
 800a6e8:	425b      	negs	r3, r3
 800a6ea:	697a      	ldr	r2, [r7, #20]
 800a6ec:	4413      	add	r3, r2
 800a6ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	685a      	ldr	r2, [r3, #4]
 800a6f8:	4b24      	ldr	r3, [pc, #144]	@ (800a78c <vPortFree+0xb8>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4013      	ands	r3, r2
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d10d      	bne.n	800a71e <vPortFree+0x4a>
	__asm volatile
 800a702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a706:	b672      	cpsid	i
 800a708:	f383 8811 	msr	BASEPRI, r3
 800a70c:	f3bf 8f6f 	isb	sy
 800a710:	f3bf 8f4f 	dsb	sy
 800a714:	b662      	cpsie	i
 800a716:	60fb      	str	r3, [r7, #12]
}
 800a718:	bf00      	nop
 800a71a:	bf00      	nop
 800a71c:	e7fd      	b.n	800a71a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d00d      	beq.n	800a742 <vPortFree+0x6e>
	__asm volatile
 800a726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a72a:	b672      	cpsid	i
 800a72c:	f383 8811 	msr	BASEPRI, r3
 800a730:	f3bf 8f6f 	isb	sy
 800a734:	f3bf 8f4f 	dsb	sy
 800a738:	b662      	cpsie	i
 800a73a:	60bb      	str	r3, [r7, #8]
}
 800a73c:	bf00      	nop
 800a73e:	bf00      	nop
 800a740:	e7fd      	b.n	800a73e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	685a      	ldr	r2, [r3, #4]
 800a746:	4b11      	ldr	r3, [pc, #68]	@ (800a78c <vPortFree+0xb8>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4013      	ands	r3, r2
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d019      	beq.n	800a784 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d115      	bne.n	800a784 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	685a      	ldr	r2, [r3, #4]
 800a75c:	4b0b      	ldr	r3, [pc, #44]	@ (800a78c <vPortFree+0xb8>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	43db      	mvns	r3, r3
 800a762:	401a      	ands	r2, r3
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a768:	f7fe fe8a 	bl	8009480 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	685a      	ldr	r2, [r3, #4]
 800a770:	4b07      	ldr	r3, [pc, #28]	@ (800a790 <vPortFree+0xbc>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4413      	add	r3, r2
 800a776:	4a06      	ldr	r2, [pc, #24]	@ (800a790 <vPortFree+0xbc>)
 800a778:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a77a:	6938      	ldr	r0, [r7, #16]
 800a77c:	f000 f86c 	bl	800a858 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a780:	f7fe fe8c 	bl	800949c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a784:	bf00      	nop
 800a786:	3718      	adds	r7, #24
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	20009838 	.word	0x20009838
 800a790:	20009830 	.word	0x20009830

0800a794 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a794:	b480      	push	{r7}
 800a796:	b085      	sub	sp, #20
 800a798:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a79a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a79e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a7a0:	4b27      	ldr	r3, [pc, #156]	@ (800a840 <prvHeapInit+0xac>)
 800a7a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f003 0307 	and.w	r3, r3, #7
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d00c      	beq.n	800a7c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	3307      	adds	r3, #7
 800a7b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f023 0307 	bic.w	r3, r3, #7
 800a7ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a7bc:	68ba      	ldr	r2, [r7, #8]
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	1ad3      	subs	r3, r2, r3
 800a7c2:	4a1f      	ldr	r2, [pc, #124]	@ (800a840 <prvHeapInit+0xac>)
 800a7c4:	4413      	add	r3, r2
 800a7c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a7cc:	4a1d      	ldr	r2, [pc, #116]	@ (800a844 <prvHeapInit+0xb0>)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a7d2:	4b1c      	ldr	r3, [pc, #112]	@ (800a844 <prvHeapInit+0xb0>)
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	68ba      	ldr	r2, [r7, #8]
 800a7dc:	4413      	add	r3, r2
 800a7de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a7e0:	2208      	movs	r2, #8
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	1a9b      	subs	r3, r3, r2
 800a7e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f023 0307 	bic.w	r3, r3, #7
 800a7ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	4a15      	ldr	r2, [pc, #84]	@ (800a848 <prvHeapInit+0xb4>)
 800a7f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a7f6:	4b14      	ldr	r3, [pc, #80]	@ (800a848 <prvHeapInit+0xb4>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a7fe:	4b12      	ldr	r3, [pc, #72]	@ (800a848 <prvHeapInit+0xb4>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	2200      	movs	r2, #0
 800a804:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	68fa      	ldr	r2, [r7, #12]
 800a80e:	1ad2      	subs	r2, r2, r3
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a814:	4b0c      	ldr	r3, [pc, #48]	@ (800a848 <prvHeapInit+0xb4>)
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	4a0a      	ldr	r2, [pc, #40]	@ (800a84c <prvHeapInit+0xb8>)
 800a822:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	4a09      	ldr	r2, [pc, #36]	@ (800a850 <prvHeapInit+0xbc>)
 800a82a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a82c:	4b09      	ldr	r3, [pc, #36]	@ (800a854 <prvHeapInit+0xc0>)
 800a82e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a832:	601a      	str	r2, [r3, #0]
}
 800a834:	bf00      	nop
 800a836:	3714      	adds	r7, #20
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr
 800a840:	20005c24 	.word	0x20005c24
 800a844:	20009824 	.word	0x20009824
 800a848:	2000982c 	.word	0x2000982c
 800a84c:	20009834 	.word	0x20009834
 800a850:	20009830 	.word	0x20009830
 800a854:	20009838 	.word	0x20009838

0800a858 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a858:	b480      	push	{r7}
 800a85a:	b085      	sub	sp, #20
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a860:	4b28      	ldr	r3, [pc, #160]	@ (800a904 <prvInsertBlockIntoFreeList+0xac>)
 800a862:	60fb      	str	r3, [r7, #12]
 800a864:	e002      	b.n	800a86c <prvInsertBlockIntoFreeList+0x14>
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	60fb      	str	r3, [r7, #12]
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	429a      	cmp	r2, r3
 800a874:	d8f7      	bhi.n	800a866 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	68ba      	ldr	r2, [r7, #8]
 800a880:	4413      	add	r3, r2
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	429a      	cmp	r2, r3
 800a886:	d108      	bne.n	800a89a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	685a      	ldr	r2, [r3, #4]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	441a      	add	r2, r3
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	68ba      	ldr	r2, [r7, #8]
 800a8a4:	441a      	add	r2, r3
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d118      	bne.n	800a8e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	4b15      	ldr	r3, [pc, #84]	@ (800a908 <prvInsertBlockIntoFreeList+0xb0>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d00d      	beq.n	800a8d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	685a      	ldr	r2, [r3, #4]
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	441a      	add	r2, r3
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	601a      	str	r2, [r3, #0]
 800a8d4:	e008      	b.n	800a8e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a8d6:	4b0c      	ldr	r3, [pc, #48]	@ (800a908 <prvInsertBlockIntoFreeList+0xb0>)
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	601a      	str	r2, [r3, #0]
 800a8de:	e003      	b.n	800a8e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681a      	ldr	r2, [r3, #0]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a8e8:	68fa      	ldr	r2, [r7, #12]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d002      	beq.n	800a8f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8f6:	bf00      	nop
 800a8f8:	3714      	adds	r7, #20
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr
 800a902:	bf00      	nop
 800a904:	20009824 	.word	0x20009824
 800a908:	2000982c 	.word	0x2000982c

0800a90c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b084      	sub	sp, #16
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a916:	f007 fad7 	bl	8011ec8 <sys_timeouts_sleeptime>
 800a91a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a922:	d10b      	bne.n	800a93c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a924:	4813      	ldr	r0, [pc, #76]	@ (800a974 <tcpip_timeouts_mbox_fetch+0x68>)
 800a926:	f00a f84c 	bl	80149c2 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a92a:	2200      	movs	r2, #0
 800a92c:	6839      	ldr	r1, [r7, #0]
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f009 ffbe 	bl	80148b0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a934:	480f      	ldr	r0, [pc, #60]	@ (800a974 <tcpip_timeouts_mbox_fetch+0x68>)
 800a936:	f00a f835 	bl	80149a4 <sys_mutex_lock>
    return;
 800a93a:	e018      	b.n	800a96e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d102      	bne.n	800a948 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a942:	f007 fa87 	bl	8011e54 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a946:	e7e6      	b.n	800a916 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a948:	480a      	ldr	r0, [pc, #40]	@ (800a974 <tcpip_timeouts_mbox_fetch+0x68>)
 800a94a:	f00a f83a 	bl	80149c2 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a94e:	68fa      	ldr	r2, [r7, #12]
 800a950:	6839      	ldr	r1, [r7, #0]
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f009 ffac 	bl	80148b0 <sys_arch_mbox_fetch>
 800a958:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a95a:	4806      	ldr	r0, [pc, #24]	@ (800a974 <tcpip_timeouts_mbox_fetch+0x68>)
 800a95c:	f00a f822 	bl	80149a4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a966:	d102      	bne.n	800a96e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a968:	f007 fa74 	bl	8011e54 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a96c:	e7d3      	b.n	800a916 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a96e:	3710      	adds	r7, #16
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}
 800a974:	20009848 	.word	0x20009848

0800a978 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a980:	4810      	ldr	r0, [pc, #64]	@ (800a9c4 <tcpip_thread+0x4c>)
 800a982:	f00a f80f 	bl	80149a4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a986:	4b10      	ldr	r3, [pc, #64]	@ (800a9c8 <tcpip_thread+0x50>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d005      	beq.n	800a99a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a98e:	4b0e      	ldr	r3, [pc, #56]	@ (800a9c8 <tcpip_thread+0x50>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	4a0e      	ldr	r2, [pc, #56]	@ (800a9cc <tcpip_thread+0x54>)
 800a994:	6812      	ldr	r2, [r2, #0]
 800a996:	4610      	mov	r0, r2
 800a998:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a99a:	f107 030c 	add.w	r3, r7, #12
 800a99e:	4619      	mov	r1, r3
 800a9a0:	480b      	ldr	r0, [pc, #44]	@ (800a9d0 <tcpip_thread+0x58>)
 800a9a2:	f7ff ffb3 	bl	800a90c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d106      	bne.n	800a9ba <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a9ac:	4b09      	ldr	r3, [pc, #36]	@ (800a9d4 <tcpip_thread+0x5c>)
 800a9ae:	2291      	movs	r2, #145	@ 0x91
 800a9b0:	4909      	ldr	r1, [pc, #36]	@ (800a9d8 <tcpip_thread+0x60>)
 800a9b2:	480a      	ldr	r0, [pc, #40]	@ (800a9dc <tcpip_thread+0x64>)
 800a9b4:	f00a f956 	bl	8014c64 <iprintf>
      continue;
 800a9b8:	e003      	b.n	800a9c2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f000 f80f 	bl	800a9e0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a9c2:	e7ea      	b.n	800a99a <tcpip_thread+0x22>
 800a9c4:	20009848 	.word	0x20009848
 800a9c8:	2000983c 	.word	0x2000983c
 800a9cc:	20009840 	.word	0x20009840
 800a9d0:	20009844 	.word	0x20009844
 800a9d4:	08015b88 	.word	0x08015b88
 800a9d8:	08015bb8 	.word	0x08015bb8
 800a9dc:	08015bd8 	.word	0x08015bd8

0800a9e0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b082      	sub	sp, #8
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	781b      	ldrb	r3, [r3, #0]
 800a9ec:	2b02      	cmp	r3, #2
 800a9ee:	d026      	beq.n	800aa3e <tcpip_thread_handle_msg+0x5e>
 800a9f0:	2b02      	cmp	r3, #2
 800a9f2:	dc2b      	bgt.n	800aa4c <tcpip_thread_handle_msg+0x6c>
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d002      	beq.n	800a9fe <tcpip_thread_handle_msg+0x1e>
 800a9f8:	2b01      	cmp	r3, #1
 800a9fa:	d015      	beq.n	800aa28 <tcpip_thread_handle_msg+0x48>
 800a9fc:	e026      	b.n	800aa4c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	68db      	ldr	r3, [r3, #12]
 800aa02:	687a      	ldr	r2, [r7, #4]
 800aa04:	6850      	ldr	r0, [r2, #4]
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	6892      	ldr	r2, [r2, #8]
 800aa0a:	4611      	mov	r1, r2
 800aa0c:	4798      	blx	r3
 800aa0e:	4603      	mov	r3, r0
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d004      	beq.n	800aa1e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f001 fd1b 	bl	800c454 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800aa1e:	6879      	ldr	r1, [r7, #4]
 800aa20:	2009      	movs	r0, #9
 800aa22:	f000 fe6f 	bl	800b704 <memp_free>
      break;
 800aa26:	e018      	b.n	800aa5a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	6892      	ldr	r2, [r2, #8]
 800aa30:	4610      	mov	r0, r2
 800aa32:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800aa34:	6879      	ldr	r1, [r7, #4]
 800aa36:	2008      	movs	r0, #8
 800aa38:	f000 fe64 	bl	800b704 <memp_free>
      break;
 800aa3c:	e00d      	b.n	800aa5a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	6892      	ldr	r2, [r2, #8]
 800aa46:	4610      	mov	r0, r2
 800aa48:	4798      	blx	r3
      break;
 800aa4a:	e006      	b.n	800aa5a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800aa4c:	4b05      	ldr	r3, [pc, #20]	@ (800aa64 <tcpip_thread_handle_msg+0x84>)
 800aa4e:	22cf      	movs	r2, #207	@ 0xcf
 800aa50:	4905      	ldr	r1, [pc, #20]	@ (800aa68 <tcpip_thread_handle_msg+0x88>)
 800aa52:	4806      	ldr	r0, [pc, #24]	@ (800aa6c <tcpip_thread_handle_msg+0x8c>)
 800aa54:	f00a f906 	bl	8014c64 <iprintf>
      break;
 800aa58:	bf00      	nop
  }
}
 800aa5a:	bf00      	nop
 800aa5c:	3708      	adds	r7, #8
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
 800aa62:	bf00      	nop
 800aa64:	08015b88 	.word	0x08015b88
 800aa68:	08015bb8 	.word	0x08015bb8
 800aa6c:	08015bd8 	.word	0x08015bd8

0800aa70 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b086      	sub	sp, #24
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	60b9      	str	r1, [r7, #8]
 800aa7a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800aa7c:	481a      	ldr	r0, [pc, #104]	@ (800aae8 <tcpip_inpkt+0x78>)
 800aa7e:	f009 ff56 	bl	801492e <sys_mbox_valid>
 800aa82:	4603      	mov	r3, r0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d105      	bne.n	800aa94 <tcpip_inpkt+0x24>
 800aa88:	4b18      	ldr	r3, [pc, #96]	@ (800aaec <tcpip_inpkt+0x7c>)
 800aa8a:	22fc      	movs	r2, #252	@ 0xfc
 800aa8c:	4918      	ldr	r1, [pc, #96]	@ (800aaf0 <tcpip_inpkt+0x80>)
 800aa8e:	4819      	ldr	r0, [pc, #100]	@ (800aaf4 <tcpip_inpkt+0x84>)
 800aa90:	f00a f8e8 	bl	8014c64 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800aa94:	2009      	movs	r0, #9
 800aa96:	f000 fdbf 	bl	800b618 <memp_malloc>
 800aa9a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d102      	bne.n	800aaa8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800aaa2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aaa6:	e01a      	b.n	800aade <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	68fa      	ldr	r2, [r7, #12]
 800aab2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	68ba      	ldr	r2, [r7, #8]
 800aab8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800aac0:	6979      	ldr	r1, [r7, #20]
 800aac2:	4809      	ldr	r0, [pc, #36]	@ (800aae8 <tcpip_inpkt+0x78>)
 800aac4:	f009 feda 	bl	801487c <sys_mbox_trypost>
 800aac8:	4603      	mov	r3, r0
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d006      	beq.n	800aadc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800aace:	6979      	ldr	r1, [r7, #20]
 800aad0:	2009      	movs	r0, #9
 800aad2:	f000 fe17 	bl	800b704 <memp_free>
    return ERR_MEM;
 800aad6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aada:	e000      	b.n	800aade <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800aadc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3718      	adds	r7, #24
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
 800aae6:	bf00      	nop
 800aae8:	20009844 	.word	0x20009844
 800aaec:	08015b88 	.word	0x08015b88
 800aaf0:	08015c00 	.word	0x08015c00
 800aaf4:	08015bd8 	.word	0x08015bd8

0800aaf8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ab08:	f003 0318 	and.w	r3, r3, #24
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d006      	beq.n	800ab1e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ab10:	4a08      	ldr	r2, [pc, #32]	@ (800ab34 <tcpip_input+0x3c>)
 800ab12:	6839      	ldr	r1, [r7, #0]
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f7ff ffab 	bl	800aa70 <tcpip_inpkt>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	e005      	b.n	800ab2a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800ab1e:	4a06      	ldr	r2, [pc, #24]	@ (800ab38 <tcpip_input+0x40>)
 800ab20:	6839      	ldr	r1, [r7, #0]
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f7ff ffa4 	bl	800aa70 <tcpip_inpkt>
 800ab28:	4603      	mov	r3, r0
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3708      	adds	r7, #8
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	bf00      	nop
 800ab34:	0801468d 	.word	0x0801468d
 800ab38:	08013595 	.word	0x08013595

0800ab3c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b084      	sub	sp, #16
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ab46:	4819      	ldr	r0, [pc, #100]	@ (800abac <tcpip_try_callback+0x70>)
 800ab48:	f009 fef1 	bl	801492e <sys_mbox_valid>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d106      	bne.n	800ab60 <tcpip_try_callback+0x24>
 800ab52:	4b17      	ldr	r3, [pc, #92]	@ (800abb0 <tcpip_try_callback+0x74>)
 800ab54:	f240 125d 	movw	r2, #349	@ 0x15d
 800ab58:	4916      	ldr	r1, [pc, #88]	@ (800abb4 <tcpip_try_callback+0x78>)
 800ab5a:	4817      	ldr	r0, [pc, #92]	@ (800abb8 <tcpip_try_callback+0x7c>)
 800ab5c:	f00a f882 	bl	8014c64 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800ab60:	2008      	movs	r0, #8
 800ab62:	f000 fd59 	bl	800b618 <memp_malloc>
 800ab66:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d102      	bne.n	800ab74 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800ab6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ab72:	e017      	b.n	800aba4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	2201      	movs	r2, #1
 800ab78:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	683a      	ldr	r2, [r7, #0]
 800ab84:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ab86:	68f9      	ldr	r1, [r7, #12]
 800ab88:	4808      	ldr	r0, [pc, #32]	@ (800abac <tcpip_try_callback+0x70>)
 800ab8a:	f009 fe77 	bl	801487c <sys_mbox_trypost>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d006      	beq.n	800aba2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800ab94:	68f9      	ldr	r1, [r7, #12]
 800ab96:	2008      	movs	r0, #8
 800ab98:	f000 fdb4 	bl	800b704 <memp_free>
    return ERR_MEM;
 800ab9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aba0:	e000      	b.n	800aba4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800aba2:	2300      	movs	r3, #0
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3710      	adds	r7, #16
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}
 800abac:	20009844 	.word	0x20009844
 800abb0:	08015b88 	.word	0x08015b88
 800abb4:	08015c00 	.word	0x08015c00
 800abb8:	08015bd8 	.word	0x08015bd8

0800abbc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b084      	sub	sp, #16
 800abc0:	af02      	add	r7, sp, #8
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800abc6:	f000 f871 	bl	800acac <lwip_init>

  tcpip_init_done = initfunc;
 800abca:	4a17      	ldr	r2, [pc, #92]	@ (800ac28 <tcpip_init+0x6c>)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800abd0:	4a16      	ldr	r2, [pc, #88]	@ (800ac2c <tcpip_init+0x70>)
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800abd6:	2106      	movs	r1, #6
 800abd8:	4815      	ldr	r0, [pc, #84]	@ (800ac30 <tcpip_init+0x74>)
 800abda:	f009 fe2d 	bl	8014838 <sys_mbox_new>
 800abde:	4603      	mov	r3, r0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d006      	beq.n	800abf2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800abe4:	4b13      	ldr	r3, [pc, #76]	@ (800ac34 <tcpip_init+0x78>)
 800abe6:	f240 2261 	movw	r2, #609	@ 0x261
 800abea:	4913      	ldr	r1, [pc, #76]	@ (800ac38 <tcpip_init+0x7c>)
 800abec:	4813      	ldr	r0, [pc, #76]	@ (800ac3c <tcpip_init+0x80>)
 800abee:	f00a f839 	bl	8014c64 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800abf2:	4813      	ldr	r0, [pc, #76]	@ (800ac40 <tcpip_init+0x84>)
 800abf4:	f009 feba 	bl	801496c <sys_mutex_new>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d006      	beq.n	800ac0c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800abfe:	4b0d      	ldr	r3, [pc, #52]	@ (800ac34 <tcpip_init+0x78>)
 800ac00:	f240 2265 	movw	r2, #613	@ 0x265
 800ac04:	490f      	ldr	r1, [pc, #60]	@ (800ac44 <tcpip_init+0x88>)
 800ac06:	480d      	ldr	r0, [pc, #52]	@ (800ac3c <tcpip_init+0x80>)
 800ac08:	f00a f82c 	bl	8014c64 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	9300      	str	r3, [sp, #0]
 800ac10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac14:	2200      	movs	r2, #0
 800ac16:	490c      	ldr	r1, [pc, #48]	@ (800ac48 <tcpip_init+0x8c>)
 800ac18:	480c      	ldr	r0, [pc, #48]	@ (800ac4c <tcpip_init+0x90>)
 800ac1a:	f009 fedf 	bl	80149dc <sys_thread_new>
}
 800ac1e:	bf00      	nop
 800ac20:	3708      	adds	r7, #8
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	2000983c 	.word	0x2000983c
 800ac2c:	20009840 	.word	0x20009840
 800ac30:	20009844 	.word	0x20009844
 800ac34:	08015b88 	.word	0x08015b88
 800ac38:	08015c10 	.word	0x08015c10
 800ac3c:	08015bd8 	.word	0x08015bd8
 800ac40:	20009848 	.word	0x20009848
 800ac44:	08015c34 	.word	0x08015c34
 800ac48:	0800a979 	.word	0x0800a979
 800ac4c:	08015c58 	.word	0x08015c58

0800ac50 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b083      	sub	sp, #12
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	4603      	mov	r3, r0
 800ac58:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ac5a:	88fb      	ldrh	r3, [r7, #6]
 800ac5c:	021b      	lsls	r3, r3, #8
 800ac5e:	b21a      	sxth	r2, r3
 800ac60:	88fb      	ldrh	r3, [r7, #6]
 800ac62:	0a1b      	lsrs	r3, r3, #8
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	b21b      	sxth	r3, r3
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	b21b      	sxth	r3, r3
 800ac6c:	b29b      	uxth	r3, r3
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	370c      	adds	r7, #12
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr

0800ac7a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ac7a:	b480      	push	{r7}
 800ac7c:	b083      	sub	sp, #12
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	061a      	lsls	r2, r3, #24
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	021b      	lsls	r3, r3, #8
 800ac8a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ac8e:	431a      	orrs	r2, r3
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	0a1b      	lsrs	r3, r3, #8
 800ac94:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ac98:	431a      	orrs	r2, r3
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	0e1b      	lsrs	r3, r3, #24
 800ac9e:	4313      	orrs	r3, r2
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	370c      	adds	r7, #12
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr

0800acac <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800acb2:	2300      	movs	r3, #0
 800acb4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800acb6:	f009 fe4b 	bl	8014950 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800acba:	f000 f8d9 	bl	800ae70 <mem_init>
  memp_init();
 800acbe:	f000 fc3d 	bl	800b53c <memp_init>
  pbuf_init();
  netif_init();
 800acc2:	f000 fd49 	bl	800b758 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800acc6:	f007 f937 	bl	8011f38 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800acca:	f001 fe5d 	bl	800c988 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800acce:	f007 f879 	bl	8011dc4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800acd2:	bf00      	nop
 800acd4:	3708      	adds	r7, #8
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
	...

0800acdc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	4603      	mov	r3, r0
 800ace4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ace6:	4b05      	ldr	r3, [pc, #20]	@ (800acfc <ptr_to_mem+0x20>)
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	88fb      	ldrh	r3, [r7, #6]
 800acec:	4413      	add	r3, r2
}
 800acee:	4618      	mov	r0, r3
 800acf0:	370c      	adds	r7, #12
 800acf2:	46bd      	mov	sp, r7
 800acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf8:	4770      	bx	lr
 800acfa:	bf00      	nop
 800acfc:	20009864 	.word	0x20009864

0800ad00 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b083      	sub	sp, #12
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ad08:	4b05      	ldr	r3, [pc, #20]	@ (800ad20 <mem_to_ptr+0x20>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	1ad3      	subs	r3, r2, r3
 800ad10:	b29b      	uxth	r3, r3
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	370c      	adds	r7, #12
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop
 800ad20:	20009864 	.word	0x20009864

0800ad24 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ad24:	b590      	push	{r4, r7, lr}
 800ad26:	b085      	sub	sp, #20
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ad2c:	4b47      	ldr	r3, [pc, #284]	@ (800ae4c <plug_holes+0x128>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d206      	bcs.n	800ad44 <plug_holes+0x20>
 800ad36:	4b46      	ldr	r3, [pc, #280]	@ (800ae50 <plug_holes+0x12c>)
 800ad38:	f240 12df 	movw	r2, #479	@ 0x1df
 800ad3c:	4945      	ldr	r1, [pc, #276]	@ (800ae54 <plug_holes+0x130>)
 800ad3e:	4846      	ldr	r0, [pc, #280]	@ (800ae58 <plug_holes+0x134>)
 800ad40:	f009 ff90 	bl	8014c64 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ad44:	4b45      	ldr	r3, [pc, #276]	@ (800ae5c <plug_holes+0x138>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d306      	bcc.n	800ad5c <plug_holes+0x38>
 800ad4e:	4b40      	ldr	r3, [pc, #256]	@ (800ae50 <plug_holes+0x12c>)
 800ad50:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800ad54:	4942      	ldr	r1, [pc, #264]	@ (800ae60 <plug_holes+0x13c>)
 800ad56:	4840      	ldr	r0, [pc, #256]	@ (800ae58 <plug_holes+0x134>)
 800ad58:	f009 ff84 	bl	8014c64 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	791b      	ldrb	r3, [r3, #4]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d006      	beq.n	800ad72 <plug_holes+0x4e>
 800ad64:	4b3a      	ldr	r3, [pc, #232]	@ (800ae50 <plug_holes+0x12c>)
 800ad66:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800ad6a:	493e      	ldr	r1, [pc, #248]	@ (800ae64 <plug_holes+0x140>)
 800ad6c:	483a      	ldr	r0, [pc, #232]	@ (800ae58 <plug_holes+0x134>)
 800ad6e:	f009 ff79 	bl	8014c64 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	881b      	ldrh	r3, [r3, #0]
 800ad76:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d906      	bls.n	800ad8c <plug_holes+0x68>
 800ad7e:	4b34      	ldr	r3, [pc, #208]	@ (800ae50 <plug_holes+0x12c>)
 800ad80:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800ad84:	4938      	ldr	r1, [pc, #224]	@ (800ae68 <plug_holes+0x144>)
 800ad86:	4834      	ldr	r0, [pc, #208]	@ (800ae58 <plug_holes+0x134>)
 800ad88:	f009 ff6c 	bl	8014c64 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	881b      	ldrh	r3, [r3, #0]
 800ad90:	4618      	mov	r0, r3
 800ad92:	f7ff ffa3 	bl	800acdc <ptr_to_mem>
 800ad96:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d025      	beq.n	800adec <plug_holes+0xc8>
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	791b      	ldrb	r3, [r3, #4]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d121      	bne.n	800adec <plug_holes+0xc8>
 800ada8:	4b2c      	ldr	r3, [pc, #176]	@ (800ae5c <plug_holes+0x138>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	68fa      	ldr	r2, [r7, #12]
 800adae:	429a      	cmp	r2, r3
 800adb0:	d01c      	beq.n	800adec <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800adb2:	4b2e      	ldr	r3, [pc, #184]	@ (800ae6c <plug_holes+0x148>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	429a      	cmp	r2, r3
 800adba:	d102      	bne.n	800adc2 <plug_holes+0x9e>
      lfree = mem;
 800adbc:	4a2b      	ldr	r2, [pc, #172]	@ (800ae6c <plug_holes+0x148>)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	881a      	ldrh	r2, [r3, #0]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	881b      	ldrh	r3, [r3, #0]
 800adce:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800add2:	4293      	cmp	r3, r2
 800add4:	d00a      	beq.n	800adec <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	881b      	ldrh	r3, [r3, #0]
 800adda:	4618      	mov	r0, r3
 800addc:	f7ff ff7e 	bl	800acdc <ptr_to_mem>
 800ade0:	4604      	mov	r4, r0
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f7ff ff8c 	bl	800ad00 <mem_to_ptr>
 800ade8:	4603      	mov	r3, r0
 800adea:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	885b      	ldrh	r3, [r3, #2]
 800adf0:	4618      	mov	r0, r3
 800adf2:	f7ff ff73 	bl	800acdc <ptr_to_mem>
 800adf6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800adf8:	68ba      	ldr	r2, [r7, #8]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d020      	beq.n	800ae42 <plug_holes+0x11e>
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	791b      	ldrb	r3, [r3, #4]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d11c      	bne.n	800ae42 <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ae08:	4b18      	ldr	r3, [pc, #96]	@ (800ae6c <plug_holes+0x148>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	687a      	ldr	r2, [r7, #4]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d102      	bne.n	800ae18 <plug_holes+0xf4>
      lfree = pmem;
 800ae12:	4a16      	ldr	r2, [pc, #88]	@ (800ae6c <plug_holes+0x148>)
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	881a      	ldrh	r2, [r3, #0]
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	881b      	ldrh	r3, [r3, #0]
 800ae24:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d00a      	beq.n	800ae42 <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	881b      	ldrh	r3, [r3, #0]
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7ff ff53 	bl	800acdc <ptr_to_mem>
 800ae36:	4604      	mov	r4, r0
 800ae38:	68b8      	ldr	r0, [r7, #8]
 800ae3a:	f7ff ff61 	bl	800ad00 <mem_to_ptr>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ae42:	bf00      	nop
 800ae44:	3714      	adds	r7, #20
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd90      	pop	{r4, r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	20009864 	.word	0x20009864
 800ae50:	08015c68 	.word	0x08015c68
 800ae54:	08015c98 	.word	0x08015c98
 800ae58:	08015cb0 	.word	0x08015cb0
 800ae5c:	20009868 	.word	0x20009868
 800ae60:	08015cd8 	.word	0x08015cd8
 800ae64:	08015cf4 	.word	0x08015cf4
 800ae68:	08015d10 	.word	0x08015d10
 800ae6c:	20009870 	.word	0x20009870

0800ae70 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b082      	sub	sp, #8
 800ae74:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ae76:	4b1d      	ldr	r3, [pc, #116]	@ (800aeec <mem_init+0x7c>)
 800ae78:	4a1d      	ldr	r2, [pc, #116]	@ (800aef0 <mem_init+0x80>)
 800ae7a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ae7c:	4b1b      	ldr	r3, [pc, #108]	@ (800aeec <mem_init+0x7c>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800ae88:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2200      	movs	r2, #0
 800ae94:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ae96:	f643 70e8 	movw	r0, #16360	@ 0x3fe8
 800ae9a:	f7ff ff1f 	bl	800acdc <ptr_to_mem>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	4a14      	ldr	r2, [pc, #80]	@ (800aef4 <mem_init+0x84>)
 800aea2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800aea4:	4b13      	ldr	r3, [pc, #76]	@ (800aef4 <mem_init+0x84>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	2201      	movs	r2, #1
 800aeaa:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800aeac:	4b11      	ldr	r3, [pc, #68]	@ (800aef4 <mem_init+0x84>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800aeb4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800aeb6:	4b0f      	ldr	r3, [pc, #60]	@ (800aef4 <mem_init+0x84>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800aebe:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800aec0:	4b0a      	ldr	r3, [pc, #40]	@ (800aeec <mem_init+0x7c>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4a0c      	ldr	r2, [pc, #48]	@ (800aef8 <mem_init+0x88>)
 800aec6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800aec8:	480c      	ldr	r0, [pc, #48]	@ (800aefc <mem_init+0x8c>)
 800aeca:	f009 fd4f 	bl	801496c <sys_mutex_new>
 800aece:	4603      	mov	r3, r0
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d006      	beq.n	800aee2 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800aed4:	4b0a      	ldr	r3, [pc, #40]	@ (800af00 <mem_init+0x90>)
 800aed6:	f240 221f 	movw	r2, #543	@ 0x21f
 800aeda:	490a      	ldr	r1, [pc, #40]	@ (800af04 <mem_init+0x94>)
 800aedc:	480a      	ldr	r0, [pc, #40]	@ (800af08 <mem_init+0x98>)
 800aede:	f009 fec1 	bl	8014c64 <iprintf>
  }
}
 800aee2:	bf00      	nop
 800aee4:	3708      	adds	r7, #8
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop
 800aeec:	20009864 	.word	0x20009864
 800aef0:	20044000 	.word	0x20044000
 800aef4:	20009868 	.word	0x20009868
 800aef8:	20009870 	.word	0x20009870
 800aefc:	2000986c 	.word	0x2000986c
 800af00:	08015c68 	.word	0x08015c68
 800af04:	08015d3c 	.word	0x08015d3c
 800af08:	08015cb0 	.word	0x08015cb0

0800af0c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b086      	sub	sp, #24
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f7ff fef3 	bl	800ad00 <mem_to_ptr>
 800af1a:	4603      	mov	r3, r0
 800af1c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	881b      	ldrh	r3, [r3, #0]
 800af22:	4618      	mov	r0, r3
 800af24:	f7ff feda 	bl	800acdc <ptr_to_mem>
 800af28:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	885b      	ldrh	r3, [r3, #2]
 800af2e:	4618      	mov	r0, r3
 800af30:	f7ff fed4 	bl	800acdc <ptr_to_mem>
 800af34:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	881b      	ldrh	r3, [r3, #0]
 800af3a:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800af3e:	4293      	cmp	r3, r2
 800af40:	d819      	bhi.n	800af76 <mem_link_valid+0x6a>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	885b      	ldrh	r3, [r3, #2]
 800af46:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d813      	bhi.n	800af76 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800af52:	8afa      	ldrh	r2, [r7, #22]
 800af54:	429a      	cmp	r2, r3
 800af56:	d004      	beq.n	800af62 <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	881b      	ldrh	r3, [r3, #0]
 800af5c:	8afa      	ldrh	r2, [r7, #22]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d109      	bne.n	800af76 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800af62:	4b08      	ldr	r3, [pc, #32]	@ (800af84 <mem_link_valid+0x78>)
 800af64:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800af66:	693a      	ldr	r2, [r7, #16]
 800af68:	429a      	cmp	r2, r3
 800af6a:	d006      	beq.n	800af7a <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	885b      	ldrh	r3, [r3, #2]
 800af70:	8afa      	ldrh	r2, [r7, #22]
 800af72:	429a      	cmp	r2, r3
 800af74:	d001      	beq.n	800af7a <mem_link_valid+0x6e>
    return 0;
 800af76:	2300      	movs	r3, #0
 800af78:	e000      	b.n	800af7c <mem_link_valid+0x70>
  }
  return 1;
 800af7a:	2301      	movs	r3, #1
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3718      	adds	r7, #24
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}
 800af84:	20009868 	.word	0x20009868

0800af88 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b088      	sub	sp, #32
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d070      	beq.n	800b078 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f003 0303 	and.w	r3, r3, #3
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d00d      	beq.n	800afbc <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800afa0:	4b37      	ldr	r3, [pc, #220]	@ (800b080 <mem_free+0xf8>)
 800afa2:	f240 2273 	movw	r2, #627	@ 0x273
 800afa6:	4937      	ldr	r1, [pc, #220]	@ (800b084 <mem_free+0xfc>)
 800afa8:	4837      	ldr	r0, [pc, #220]	@ (800b088 <mem_free+0x100>)
 800afaa:	f009 fe5b 	bl	8014c64 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800afae:	f009 fd3b 	bl	8014a28 <sys_arch_protect>
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	68f8      	ldr	r0, [r7, #12]
 800afb6:	f009 fd45 	bl	8014a44 <sys_arch_unprotect>
    return;
 800afba:	e05e      	b.n	800b07a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	3b08      	subs	r3, #8
 800afc0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800afc2:	4b32      	ldr	r3, [pc, #200]	@ (800b08c <mem_free+0x104>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	69fa      	ldr	r2, [r7, #28]
 800afc8:	429a      	cmp	r2, r3
 800afca:	d306      	bcc.n	800afda <mem_free+0x52>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f103 020c 	add.w	r2, r3, #12
 800afd2:	4b2f      	ldr	r3, [pc, #188]	@ (800b090 <mem_free+0x108>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d90d      	bls.n	800aff6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800afda:	4b29      	ldr	r3, [pc, #164]	@ (800b080 <mem_free+0xf8>)
 800afdc:	f240 227f 	movw	r2, #639	@ 0x27f
 800afe0:	492c      	ldr	r1, [pc, #176]	@ (800b094 <mem_free+0x10c>)
 800afe2:	4829      	ldr	r0, [pc, #164]	@ (800b088 <mem_free+0x100>)
 800afe4:	f009 fe3e 	bl	8014c64 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800afe8:	f009 fd1e 	bl	8014a28 <sys_arch_protect>
 800afec:	6138      	str	r0, [r7, #16]
 800afee:	6938      	ldr	r0, [r7, #16]
 800aff0:	f009 fd28 	bl	8014a44 <sys_arch_unprotect>
    return;
 800aff4:	e041      	b.n	800b07a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800aff6:	4828      	ldr	r0, [pc, #160]	@ (800b098 <mem_free+0x110>)
 800aff8:	f009 fcd4 	bl	80149a4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800affc:	69fb      	ldr	r3, [r7, #28]
 800affe:	791b      	ldrb	r3, [r3, #4]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d110      	bne.n	800b026 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b004:	4b1e      	ldr	r3, [pc, #120]	@ (800b080 <mem_free+0xf8>)
 800b006:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800b00a:	4924      	ldr	r1, [pc, #144]	@ (800b09c <mem_free+0x114>)
 800b00c:	481e      	ldr	r0, [pc, #120]	@ (800b088 <mem_free+0x100>)
 800b00e:	f009 fe29 	bl	8014c64 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b012:	4821      	ldr	r0, [pc, #132]	@ (800b098 <mem_free+0x110>)
 800b014:	f009 fcd5 	bl	80149c2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b018:	f009 fd06 	bl	8014a28 <sys_arch_protect>
 800b01c:	6178      	str	r0, [r7, #20]
 800b01e:	6978      	ldr	r0, [r7, #20]
 800b020:	f009 fd10 	bl	8014a44 <sys_arch_unprotect>
    return;
 800b024:	e029      	b.n	800b07a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800b026:	69f8      	ldr	r0, [r7, #28]
 800b028:	f7ff ff70 	bl	800af0c <mem_link_valid>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d110      	bne.n	800b054 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b032:	4b13      	ldr	r3, [pc, #76]	@ (800b080 <mem_free+0xf8>)
 800b034:	f240 2295 	movw	r2, #661	@ 0x295
 800b038:	4919      	ldr	r1, [pc, #100]	@ (800b0a0 <mem_free+0x118>)
 800b03a:	4813      	ldr	r0, [pc, #76]	@ (800b088 <mem_free+0x100>)
 800b03c:	f009 fe12 	bl	8014c64 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b040:	4815      	ldr	r0, [pc, #84]	@ (800b098 <mem_free+0x110>)
 800b042:	f009 fcbe 	bl	80149c2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b046:	f009 fcef 	bl	8014a28 <sys_arch_protect>
 800b04a:	61b8      	str	r0, [r7, #24]
 800b04c:	69b8      	ldr	r0, [r7, #24]
 800b04e:	f009 fcf9 	bl	8014a44 <sys_arch_unprotect>
    return;
 800b052:	e012      	b.n	800b07a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b054:	69fb      	ldr	r3, [r7, #28]
 800b056:	2200      	movs	r2, #0
 800b058:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b05a:	4b12      	ldr	r3, [pc, #72]	@ (800b0a4 <mem_free+0x11c>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	69fa      	ldr	r2, [r7, #28]
 800b060:	429a      	cmp	r2, r3
 800b062:	d202      	bcs.n	800b06a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b064:	4a0f      	ldr	r2, [pc, #60]	@ (800b0a4 <mem_free+0x11c>)
 800b066:	69fb      	ldr	r3, [r7, #28]
 800b068:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b06a:	69f8      	ldr	r0, [r7, #28]
 800b06c:	f7ff fe5a 	bl	800ad24 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b070:	4809      	ldr	r0, [pc, #36]	@ (800b098 <mem_free+0x110>)
 800b072:	f009 fca6 	bl	80149c2 <sys_mutex_unlock>
 800b076:	e000      	b.n	800b07a <mem_free+0xf2>
    return;
 800b078:	bf00      	nop
}
 800b07a:	3720      	adds	r7, #32
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	08015c68 	.word	0x08015c68
 800b084:	08015d58 	.word	0x08015d58
 800b088:	08015cb0 	.word	0x08015cb0
 800b08c:	20009864 	.word	0x20009864
 800b090:	20009868 	.word	0x20009868
 800b094:	08015d7c 	.word	0x08015d7c
 800b098:	2000986c 	.word	0x2000986c
 800b09c:	08015d98 	.word	0x08015d98
 800b0a0:	08015dc0 	.word	0x08015dc0
 800b0a4:	20009870 	.word	0x20009870

0800b0a8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b088      	sub	sp, #32
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b0b4:	887b      	ldrh	r3, [r7, #2]
 800b0b6:	3303      	adds	r3, #3
 800b0b8:	b29b      	uxth	r3, r3
 800b0ba:	f023 0303 	bic.w	r3, r3, #3
 800b0be:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b0c0:	8bfb      	ldrh	r3, [r7, #30]
 800b0c2:	2b0b      	cmp	r3, #11
 800b0c4:	d801      	bhi.n	800b0ca <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b0c6:	230c      	movs	r3, #12
 800b0c8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b0ca:	8bfb      	ldrh	r3, [r7, #30]
 800b0cc:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d803      	bhi.n	800b0dc <mem_trim+0x34>
 800b0d4:	8bfa      	ldrh	r2, [r7, #30]
 800b0d6:	887b      	ldrh	r3, [r7, #2]
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d201      	bcs.n	800b0e0 <mem_trim+0x38>
    return NULL;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	e0dc      	b.n	800b29a <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b0e0:	4b70      	ldr	r3, [pc, #448]	@ (800b2a4 <mem_trim+0x1fc>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	687a      	ldr	r2, [r7, #4]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d304      	bcc.n	800b0f4 <mem_trim+0x4c>
 800b0ea:	4b6f      	ldr	r3, [pc, #444]	@ (800b2a8 <mem_trim+0x200>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d306      	bcc.n	800b102 <mem_trim+0x5a>
 800b0f4:	4b6d      	ldr	r3, [pc, #436]	@ (800b2ac <mem_trim+0x204>)
 800b0f6:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800b0fa:	496d      	ldr	r1, [pc, #436]	@ (800b2b0 <mem_trim+0x208>)
 800b0fc:	486d      	ldr	r0, [pc, #436]	@ (800b2b4 <mem_trim+0x20c>)
 800b0fe:	f009 fdb1 	bl	8014c64 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b102:	4b68      	ldr	r3, [pc, #416]	@ (800b2a4 <mem_trim+0x1fc>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	429a      	cmp	r2, r3
 800b10a:	d304      	bcc.n	800b116 <mem_trim+0x6e>
 800b10c:	4b66      	ldr	r3, [pc, #408]	@ (800b2a8 <mem_trim+0x200>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	429a      	cmp	r2, r3
 800b114:	d307      	bcc.n	800b126 <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b116:	f009 fc87 	bl	8014a28 <sys_arch_protect>
 800b11a:	60b8      	str	r0, [r7, #8]
 800b11c:	68b8      	ldr	r0, [r7, #8]
 800b11e:	f009 fc91 	bl	8014a44 <sys_arch_unprotect>
    return rmem;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	e0b9      	b.n	800b29a <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	3b08      	subs	r3, #8
 800b12a:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b12c:	69b8      	ldr	r0, [r7, #24]
 800b12e:	f7ff fde7 	bl	800ad00 <mem_to_ptr>
 800b132:	4603      	mov	r3, r0
 800b134:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b136:	69bb      	ldr	r3, [r7, #24]
 800b138:	881a      	ldrh	r2, [r3, #0]
 800b13a:	8afb      	ldrh	r3, [r7, #22]
 800b13c:	1ad3      	subs	r3, r2, r3
 800b13e:	b29b      	uxth	r3, r3
 800b140:	3b08      	subs	r3, #8
 800b142:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b144:	8bfa      	ldrh	r2, [r7, #30]
 800b146:	8abb      	ldrh	r3, [r7, #20]
 800b148:	429a      	cmp	r2, r3
 800b14a:	d906      	bls.n	800b15a <mem_trim+0xb2>
 800b14c:	4b57      	ldr	r3, [pc, #348]	@ (800b2ac <mem_trim+0x204>)
 800b14e:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800b152:	4959      	ldr	r1, [pc, #356]	@ (800b2b8 <mem_trim+0x210>)
 800b154:	4857      	ldr	r0, [pc, #348]	@ (800b2b4 <mem_trim+0x20c>)
 800b156:	f009 fd85 	bl	8014c64 <iprintf>
  if (newsize > size) {
 800b15a:	8bfa      	ldrh	r2, [r7, #30]
 800b15c:	8abb      	ldrh	r3, [r7, #20]
 800b15e:	429a      	cmp	r2, r3
 800b160:	d901      	bls.n	800b166 <mem_trim+0xbe>
    /* not supported */
    return NULL;
 800b162:	2300      	movs	r3, #0
 800b164:	e099      	b.n	800b29a <mem_trim+0x1f2>
  }
  if (newsize == size) {
 800b166:	8bfa      	ldrh	r2, [r7, #30]
 800b168:	8abb      	ldrh	r3, [r7, #20]
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d101      	bne.n	800b172 <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	e093      	b.n	800b29a <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b172:	4852      	ldr	r0, [pc, #328]	@ (800b2bc <mem_trim+0x214>)
 800b174:	f009 fc16 	bl	80149a4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800b178:	69bb      	ldr	r3, [r7, #24]
 800b17a:	881b      	ldrh	r3, [r3, #0]
 800b17c:	4618      	mov	r0, r3
 800b17e:	f7ff fdad 	bl	800acdc <ptr_to_mem>
 800b182:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	791b      	ldrb	r3, [r3, #4]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d141      	bne.n	800b210 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b18c:	69bb      	ldr	r3, [r7, #24]
 800b18e:	881b      	ldrh	r3, [r3, #0]
 800b190:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800b194:	4293      	cmp	r3, r2
 800b196:	d106      	bne.n	800b1a6 <mem_trim+0xfe>
 800b198:	4b44      	ldr	r3, [pc, #272]	@ (800b2ac <mem_trim+0x204>)
 800b19a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800b19e:	4948      	ldr	r1, [pc, #288]	@ (800b2c0 <mem_trim+0x218>)
 800b1a0:	4844      	ldr	r0, [pc, #272]	@ (800b2b4 <mem_trim+0x20c>)
 800b1a2:	f009 fd5f 	bl	8014c64 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	881b      	ldrh	r3, [r3, #0]
 800b1aa:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b1ac:	8afa      	ldrh	r2, [r7, #22]
 800b1ae:	8bfb      	ldrh	r3, [r7, #30]
 800b1b0:	4413      	add	r3, r2
 800b1b2:	b29b      	uxth	r3, r3
 800b1b4:	3308      	adds	r3, #8
 800b1b6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b1b8:	4b42      	ldr	r3, [pc, #264]	@ (800b2c4 <mem_trim+0x21c>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	693a      	ldr	r2, [r7, #16]
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d106      	bne.n	800b1d0 <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 800b1c2:	89fb      	ldrh	r3, [r7, #14]
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7ff fd89 	bl	800acdc <ptr_to_mem>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	4a3d      	ldr	r2, [pc, #244]	@ (800b2c4 <mem_trim+0x21c>)
 800b1ce:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b1d0:	89fb      	ldrh	r3, [r7, #14]
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f7ff fd82 	bl	800acdc <ptr_to_mem>
 800b1d8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	89ba      	ldrh	r2, [r7, #12]
 800b1e4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	8afa      	ldrh	r2, [r7, #22]
 800b1ea:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b1ec:	69bb      	ldr	r3, [r7, #24]
 800b1ee:	89fa      	ldrh	r2, [r7, #14]
 800b1f0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	881b      	ldrh	r3, [r3, #0]
 800b1f6:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d049      	beq.n	800b292 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	881b      	ldrh	r3, [r3, #0]
 800b202:	4618      	mov	r0, r3
 800b204:	f7ff fd6a 	bl	800acdc <ptr_to_mem>
 800b208:	4602      	mov	r2, r0
 800b20a:	89fb      	ldrh	r3, [r7, #14]
 800b20c:	8053      	strh	r3, [r2, #2]
 800b20e:	e040      	b.n	800b292 <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b210:	8bfb      	ldrh	r3, [r7, #30]
 800b212:	f103 0214 	add.w	r2, r3, #20
 800b216:	8abb      	ldrh	r3, [r7, #20]
 800b218:	429a      	cmp	r2, r3
 800b21a:	d83a      	bhi.n	800b292 <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b21c:	8afa      	ldrh	r2, [r7, #22]
 800b21e:	8bfb      	ldrh	r3, [r7, #30]
 800b220:	4413      	add	r3, r2
 800b222:	b29b      	uxth	r3, r3
 800b224:	3308      	adds	r3, #8
 800b226:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b228:	69bb      	ldr	r3, [r7, #24]
 800b22a:	881b      	ldrh	r3, [r3, #0]
 800b22c:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800b230:	4293      	cmp	r3, r2
 800b232:	d106      	bne.n	800b242 <mem_trim+0x19a>
 800b234:	4b1d      	ldr	r3, [pc, #116]	@ (800b2ac <mem_trim+0x204>)
 800b236:	f240 3216 	movw	r2, #790	@ 0x316
 800b23a:	4921      	ldr	r1, [pc, #132]	@ (800b2c0 <mem_trim+0x218>)
 800b23c:	481d      	ldr	r0, [pc, #116]	@ (800b2b4 <mem_trim+0x20c>)
 800b23e:	f009 fd11 	bl	8014c64 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b242:	89fb      	ldrh	r3, [r7, #14]
 800b244:	4618      	mov	r0, r3
 800b246:	f7ff fd49 	bl	800acdc <ptr_to_mem>
 800b24a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b24c:	4b1d      	ldr	r3, [pc, #116]	@ (800b2c4 <mem_trim+0x21c>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	693a      	ldr	r2, [r7, #16]
 800b252:	429a      	cmp	r2, r3
 800b254:	d202      	bcs.n	800b25c <mem_trim+0x1b4>
      lfree = mem2;
 800b256:	4a1b      	ldr	r2, [pc, #108]	@ (800b2c4 <mem_trim+0x21c>)
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	2200      	movs	r2, #0
 800b260:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b262:	69bb      	ldr	r3, [r7, #24]
 800b264:	881a      	ldrh	r2, [r3, #0]
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	8afa      	ldrh	r2, [r7, #22]
 800b26e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b270:	69bb      	ldr	r3, [r7, #24]
 800b272:	89fa      	ldrh	r2, [r7, #14]
 800b274:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	881b      	ldrh	r3, [r3, #0]
 800b27a:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800b27e:	4293      	cmp	r3, r2
 800b280:	d007      	beq.n	800b292 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	881b      	ldrh	r3, [r3, #0]
 800b286:	4618      	mov	r0, r3
 800b288:	f7ff fd28 	bl	800acdc <ptr_to_mem>
 800b28c:	4602      	mov	r2, r0
 800b28e:	89fb      	ldrh	r3, [r7, #14]
 800b290:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b292:	480a      	ldr	r0, [pc, #40]	@ (800b2bc <mem_trim+0x214>)
 800b294:	f009 fb95 	bl	80149c2 <sys_mutex_unlock>
  return rmem;
 800b298:	687b      	ldr	r3, [r7, #4]
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3720      	adds	r7, #32
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	20009864 	.word	0x20009864
 800b2a8:	20009868 	.word	0x20009868
 800b2ac:	08015c68 	.word	0x08015c68
 800b2b0:	08015df4 	.word	0x08015df4
 800b2b4:	08015cb0 	.word	0x08015cb0
 800b2b8:	08015e0c 	.word	0x08015e0c
 800b2bc:	2000986c 	.word	0x2000986c
 800b2c0:	08015e2c 	.word	0x08015e2c
 800b2c4:	20009870 	.word	0x20009870

0800b2c8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b088      	sub	sp, #32
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b2d2:	88fb      	ldrh	r3, [r7, #6]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d101      	bne.n	800b2dc <mem_malloc+0x14>
    return NULL;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	e0e6      	b.n	800b4aa <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b2dc:	88fb      	ldrh	r3, [r7, #6]
 800b2de:	3303      	adds	r3, #3
 800b2e0:	b29b      	uxth	r3, r3
 800b2e2:	f023 0303 	bic.w	r3, r3, #3
 800b2e6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b2e8:	8bbb      	ldrh	r3, [r7, #28]
 800b2ea:	2b0b      	cmp	r3, #11
 800b2ec:	d801      	bhi.n	800b2f2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b2ee:	230c      	movs	r3, #12
 800b2f0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b2f2:	8bbb      	ldrh	r3, [r7, #28]
 800b2f4:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d803      	bhi.n	800b304 <mem_malloc+0x3c>
 800b2fc:	8bba      	ldrh	r2, [r7, #28]
 800b2fe:	88fb      	ldrh	r3, [r7, #6]
 800b300:	429a      	cmp	r2, r3
 800b302:	d201      	bcs.n	800b308 <mem_malloc+0x40>
    return NULL;
 800b304:	2300      	movs	r3, #0
 800b306:	e0d0      	b.n	800b4aa <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b308:	486a      	ldr	r0, [pc, #424]	@ (800b4b4 <mem_malloc+0x1ec>)
 800b30a:	f009 fb4b 	bl	80149a4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b30e:	4b6a      	ldr	r3, [pc, #424]	@ (800b4b8 <mem_malloc+0x1f0>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	4618      	mov	r0, r3
 800b314:	f7ff fcf4 	bl	800ad00 <mem_to_ptr>
 800b318:	4603      	mov	r3, r0
 800b31a:	83fb      	strh	r3, [r7, #30]
 800b31c:	e0b9      	b.n	800b492 <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b31e:	8bfb      	ldrh	r3, [r7, #30]
 800b320:	4618      	mov	r0, r3
 800b322:	f7ff fcdb 	bl	800acdc <ptr_to_mem>
 800b326:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	791b      	ldrb	r3, [r3, #4]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	f040 80a9 	bne.w	800b484 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	881b      	ldrh	r3, [r3, #0]
 800b336:	461a      	mov	r2, r3
 800b338:	8bfb      	ldrh	r3, [r7, #30]
 800b33a:	1ad3      	subs	r3, r2, r3
 800b33c:	f1a3 0208 	sub.w	r2, r3, #8
 800b340:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b342:	429a      	cmp	r2, r3
 800b344:	f0c0 809e 	bcc.w	800b484 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	881b      	ldrh	r3, [r3, #0]
 800b34c:	461a      	mov	r2, r3
 800b34e:	8bfb      	ldrh	r3, [r7, #30]
 800b350:	1ad3      	subs	r3, r2, r3
 800b352:	f1a3 0208 	sub.w	r2, r3, #8
 800b356:	8bbb      	ldrh	r3, [r7, #28]
 800b358:	3314      	adds	r3, #20
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d335      	bcc.n	800b3ca <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b35e:	8bfa      	ldrh	r2, [r7, #30]
 800b360:	8bbb      	ldrh	r3, [r7, #28]
 800b362:	4413      	add	r3, r2
 800b364:	b29b      	uxth	r3, r3
 800b366:	3308      	adds	r3, #8
 800b368:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b36a:	8a7b      	ldrh	r3, [r7, #18]
 800b36c:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800b370:	4293      	cmp	r3, r2
 800b372:	d106      	bne.n	800b382 <mem_malloc+0xba>
 800b374:	4b51      	ldr	r3, [pc, #324]	@ (800b4bc <mem_malloc+0x1f4>)
 800b376:	f240 3287 	movw	r2, #903	@ 0x387
 800b37a:	4951      	ldr	r1, [pc, #324]	@ (800b4c0 <mem_malloc+0x1f8>)
 800b37c:	4851      	ldr	r0, [pc, #324]	@ (800b4c4 <mem_malloc+0x1fc>)
 800b37e:	f009 fc71 	bl	8014c64 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b382:	8a7b      	ldrh	r3, [r7, #18]
 800b384:	4618      	mov	r0, r3
 800b386:	f7ff fca9 	bl	800acdc <ptr_to_mem>
 800b38a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	2200      	movs	r2, #0
 800b390:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	881a      	ldrh	r2, [r3, #0]
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	8bfa      	ldrh	r2, [r7, #30]
 800b39e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	8a7a      	ldrh	r2, [r7, #18]
 800b3a4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	881b      	ldrh	r3, [r3, #0]
 800b3b0:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d00b      	beq.n	800b3d0 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	881b      	ldrh	r3, [r3, #0]
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f7ff fc8d 	bl	800acdc <ptr_to_mem>
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	8a7b      	ldrh	r3, [r7, #18]
 800b3c6:	8053      	strh	r3, [r2, #2]
 800b3c8:	e002      	b.n	800b3d0 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b3d0:	4b39      	ldr	r3, [pc, #228]	@ (800b4b8 <mem_malloc+0x1f0>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	697a      	ldr	r2, [r7, #20]
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d127      	bne.n	800b42a <mem_malloc+0x162>
          struct mem *cur = lfree;
 800b3da:	4b37      	ldr	r3, [pc, #220]	@ (800b4b8 <mem_malloc+0x1f0>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b3e0:	e005      	b.n	800b3ee <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b3e2:	69bb      	ldr	r3, [r7, #24]
 800b3e4:	881b      	ldrh	r3, [r3, #0]
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7ff fc78 	bl	800acdc <ptr_to_mem>
 800b3ec:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b3ee:	69bb      	ldr	r3, [r7, #24]
 800b3f0:	791b      	ldrb	r3, [r3, #4]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d004      	beq.n	800b400 <mem_malloc+0x138>
 800b3f6:	4b34      	ldr	r3, [pc, #208]	@ (800b4c8 <mem_malloc+0x200>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	69ba      	ldr	r2, [r7, #24]
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d1f0      	bne.n	800b3e2 <mem_malloc+0x11a>
          }
          lfree = cur;
 800b400:	4a2d      	ldr	r2, [pc, #180]	@ (800b4b8 <mem_malloc+0x1f0>)
 800b402:	69bb      	ldr	r3, [r7, #24]
 800b404:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b406:	4b2c      	ldr	r3, [pc, #176]	@ (800b4b8 <mem_malloc+0x1f0>)
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	4b2f      	ldr	r3, [pc, #188]	@ (800b4c8 <mem_malloc+0x200>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	429a      	cmp	r2, r3
 800b410:	d00b      	beq.n	800b42a <mem_malloc+0x162>
 800b412:	4b29      	ldr	r3, [pc, #164]	@ (800b4b8 <mem_malloc+0x1f0>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	791b      	ldrb	r3, [r3, #4]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d006      	beq.n	800b42a <mem_malloc+0x162>
 800b41c:	4b27      	ldr	r3, [pc, #156]	@ (800b4bc <mem_malloc+0x1f4>)
 800b41e:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800b422:	492a      	ldr	r1, [pc, #168]	@ (800b4cc <mem_malloc+0x204>)
 800b424:	4827      	ldr	r0, [pc, #156]	@ (800b4c4 <mem_malloc+0x1fc>)
 800b426:	f009 fc1d 	bl	8014c64 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b42a:	4822      	ldr	r0, [pc, #136]	@ (800b4b4 <mem_malloc+0x1ec>)
 800b42c:	f009 fac9 	bl	80149c2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b430:	8bba      	ldrh	r2, [r7, #28]
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	4413      	add	r3, r2
 800b436:	3308      	adds	r3, #8
 800b438:	4a23      	ldr	r2, [pc, #140]	@ (800b4c8 <mem_malloc+0x200>)
 800b43a:	6812      	ldr	r2, [r2, #0]
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d906      	bls.n	800b44e <mem_malloc+0x186>
 800b440:	4b1e      	ldr	r3, [pc, #120]	@ (800b4bc <mem_malloc+0x1f4>)
 800b442:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800b446:	4922      	ldr	r1, [pc, #136]	@ (800b4d0 <mem_malloc+0x208>)
 800b448:	481e      	ldr	r0, [pc, #120]	@ (800b4c4 <mem_malloc+0x1fc>)
 800b44a:	f009 fc0b 	bl	8014c64 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	f003 0303 	and.w	r3, r3, #3
 800b454:	2b00      	cmp	r3, #0
 800b456:	d006      	beq.n	800b466 <mem_malloc+0x19e>
 800b458:	4b18      	ldr	r3, [pc, #96]	@ (800b4bc <mem_malloc+0x1f4>)
 800b45a:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800b45e:	491d      	ldr	r1, [pc, #116]	@ (800b4d4 <mem_malloc+0x20c>)
 800b460:	4818      	ldr	r0, [pc, #96]	@ (800b4c4 <mem_malloc+0x1fc>)
 800b462:	f009 fbff 	bl	8014c64 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	f003 0303 	and.w	r3, r3, #3
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d006      	beq.n	800b47e <mem_malloc+0x1b6>
 800b470:	4b12      	ldr	r3, [pc, #72]	@ (800b4bc <mem_malloc+0x1f4>)
 800b472:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800b476:	4918      	ldr	r1, [pc, #96]	@ (800b4d8 <mem_malloc+0x210>)
 800b478:	4812      	ldr	r0, [pc, #72]	@ (800b4c4 <mem_malloc+0x1fc>)
 800b47a:	f009 fbf3 	bl	8014c64 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	3308      	adds	r3, #8
 800b482:	e012      	b.n	800b4aa <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 800b484:	8bfb      	ldrh	r3, [r7, #30]
 800b486:	4618      	mov	r0, r3
 800b488:	f7ff fc28 	bl	800acdc <ptr_to_mem>
 800b48c:	4603      	mov	r3, r0
 800b48e:	881b      	ldrh	r3, [r3, #0]
 800b490:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b492:	8bfa      	ldrh	r2, [r7, #30]
 800b494:	8bb9      	ldrh	r1, [r7, #28]
 800b496:	f643 73e8 	movw	r3, #16360	@ 0x3fe8
 800b49a:	1a5b      	subs	r3, r3, r1
 800b49c:	429a      	cmp	r2, r3
 800b49e:	f4ff af3e 	bcc.w	800b31e <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b4a2:	4804      	ldr	r0, [pc, #16]	@ (800b4b4 <mem_malloc+0x1ec>)
 800b4a4:	f009 fa8d 	bl	80149c2 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b4a8:	2300      	movs	r3, #0
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3720      	adds	r7, #32
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	2000986c 	.word	0x2000986c
 800b4b8:	20009870 	.word	0x20009870
 800b4bc:	08015c68 	.word	0x08015c68
 800b4c0:	08015e2c 	.word	0x08015e2c
 800b4c4:	08015cb0 	.word	0x08015cb0
 800b4c8:	20009868 	.word	0x20009868
 800b4cc:	08015e40 	.word	0x08015e40
 800b4d0:	08015e5c 	.word	0x08015e5c
 800b4d4:	08015e8c 	.word	0x08015e8c
 800b4d8:	08015ebc 	.word	0x08015ebc

0800b4dc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b085      	sub	sp, #20
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	689b      	ldr	r3, [r3, #8]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	3303      	adds	r3, #3
 800b4f2:	f023 0303 	bic.w	r3, r3, #3
 800b4f6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	60fb      	str	r3, [r7, #12]
 800b4fc:	e011      	b.n	800b522 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	689b      	ldr	r3, [r3, #8]
 800b502:	681a      	ldr	r2, [r3, #0]
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	689b      	ldr	r3, [r3, #8]
 800b50c:	68ba      	ldr	r2, [r7, #8]
 800b50e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	881b      	ldrh	r3, [r3, #0]
 800b514:	461a      	mov	r2, r3
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	4413      	add	r3, r2
 800b51a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	3301      	adds	r3, #1
 800b520:	60fb      	str	r3, [r7, #12]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	885b      	ldrh	r3, [r3, #2]
 800b526:	461a      	mov	r2, r3
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	4293      	cmp	r3, r2
 800b52c:	dbe7      	blt.n	800b4fe <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b52e:	bf00      	nop
 800b530:	bf00      	nop
 800b532:	3714      	adds	r7, #20
 800b534:	46bd      	mov	sp, r7
 800b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53a:	4770      	bx	lr

0800b53c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b082      	sub	sp, #8
 800b540:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b542:	2300      	movs	r3, #0
 800b544:	80fb      	strh	r3, [r7, #6]
 800b546:	e009      	b.n	800b55c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b548:	88fb      	ldrh	r3, [r7, #6]
 800b54a:	4a08      	ldr	r2, [pc, #32]	@ (800b56c <memp_init+0x30>)
 800b54c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b550:	4618      	mov	r0, r3
 800b552:	f7ff ffc3 	bl	800b4dc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b556:	88fb      	ldrh	r3, [r7, #6]
 800b558:	3301      	adds	r3, #1
 800b55a:	80fb      	strh	r3, [r7, #6]
 800b55c:	88fb      	ldrh	r3, [r7, #6]
 800b55e:	2b0c      	cmp	r3, #12
 800b560:	d9f2      	bls.n	800b548 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b562:	bf00      	nop
 800b564:	bf00      	nop
 800b566:	3708      	adds	r7, #8
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}
 800b56c:	080186d0 	.word	0x080186d0

0800b570 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b578:	f009 fa56 	bl	8014a28 <sys_arch_protect>
 800b57c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	689b      	ldr	r3, [r3, #8]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d015      	beq.n	800b5b8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	68ba      	ldr	r2, [r7, #8]
 800b592:	6812      	ldr	r2, [r2, #0]
 800b594:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	f003 0303 	and.w	r3, r3, #3
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d006      	beq.n	800b5ae <do_memp_malloc_pool+0x3e>
 800b5a0:	4b09      	ldr	r3, [pc, #36]	@ (800b5c8 <do_memp_malloc_pool+0x58>)
 800b5a2:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800b5a6:	4909      	ldr	r1, [pc, #36]	@ (800b5cc <do_memp_malloc_pool+0x5c>)
 800b5a8:	4809      	ldr	r0, [pc, #36]	@ (800b5d0 <do_memp_malloc_pool+0x60>)
 800b5aa:	f009 fb5b 	bl	8014c64 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b5ae:	68f8      	ldr	r0, [r7, #12]
 800b5b0:	f009 fa48 	bl	8014a44 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	e003      	b.n	800b5c0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	f009 fa43 	bl	8014a44 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b5be:	2300      	movs	r3, #0
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3710      	adds	r7, #16
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}
 800b5c8:	08015ee0 	.word	0x08015ee0
 800b5cc:	08015f10 	.word	0x08015f10
 800b5d0:	08015f34 	.word	0x08015f34

0800b5d4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d106      	bne.n	800b5f0 <memp_malloc_pool+0x1c>
 800b5e2:	4b0a      	ldr	r3, [pc, #40]	@ (800b60c <memp_malloc_pool+0x38>)
 800b5e4:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800b5e8:	4909      	ldr	r1, [pc, #36]	@ (800b610 <memp_malloc_pool+0x3c>)
 800b5ea:	480a      	ldr	r0, [pc, #40]	@ (800b614 <memp_malloc_pool+0x40>)
 800b5ec:	f009 fb3a 	bl	8014c64 <iprintf>
  if (desc == NULL) {
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d101      	bne.n	800b5fa <memp_malloc_pool+0x26>
    return NULL;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	e003      	b.n	800b602 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f7ff ffb8 	bl	800b570 <do_memp_malloc_pool>
 800b600:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800b602:	4618      	mov	r0, r3
 800b604:	3708      	adds	r7, #8
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
 800b60a:	bf00      	nop
 800b60c:	08015ee0 	.word	0x08015ee0
 800b610:	08015f5c 	.word	0x08015f5c
 800b614:	08015f34 	.word	0x08015f34

0800b618 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b084      	sub	sp, #16
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	4603      	mov	r3, r0
 800b620:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b622:	79fb      	ldrb	r3, [r7, #7]
 800b624:	2b0c      	cmp	r3, #12
 800b626:	d908      	bls.n	800b63a <memp_malloc+0x22>
 800b628:	4b0a      	ldr	r3, [pc, #40]	@ (800b654 <memp_malloc+0x3c>)
 800b62a:	f240 1257 	movw	r2, #343	@ 0x157
 800b62e:	490a      	ldr	r1, [pc, #40]	@ (800b658 <memp_malloc+0x40>)
 800b630:	480a      	ldr	r0, [pc, #40]	@ (800b65c <memp_malloc+0x44>)
 800b632:	f009 fb17 	bl	8014c64 <iprintf>
 800b636:	2300      	movs	r3, #0
 800b638:	e008      	b.n	800b64c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b63a:	79fb      	ldrb	r3, [r7, #7]
 800b63c:	4a08      	ldr	r2, [pc, #32]	@ (800b660 <memp_malloc+0x48>)
 800b63e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b642:	4618      	mov	r0, r3
 800b644:	f7ff ff94 	bl	800b570 <do_memp_malloc_pool>
 800b648:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b64a:	68fb      	ldr	r3, [r7, #12]
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3710      	adds	r7, #16
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	08015ee0 	.word	0x08015ee0
 800b658:	08015f70 	.word	0x08015f70
 800b65c:	08015f34 	.word	0x08015f34
 800b660:	080186d0 	.word	0x080186d0

0800b664 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b084      	sub	sp, #16
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	f003 0303 	and.w	r3, r3, #3
 800b674:	2b00      	cmp	r3, #0
 800b676:	d006      	beq.n	800b686 <do_memp_free_pool+0x22>
 800b678:	4b0d      	ldr	r3, [pc, #52]	@ (800b6b0 <do_memp_free_pool+0x4c>)
 800b67a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800b67e:	490d      	ldr	r1, [pc, #52]	@ (800b6b4 <do_memp_free_pool+0x50>)
 800b680:	480d      	ldr	r0, [pc, #52]	@ (800b6b8 <do_memp_free_pool+0x54>)
 800b682:	f009 faef 	bl	8014c64 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b68a:	f009 f9cd 	bl	8014a28 <sys_arch_protect>
 800b68e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	689b      	ldr	r3, [r3, #8]
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	689b      	ldr	r3, [r3, #8]
 800b69e:	68fa      	ldr	r2, [r7, #12]
 800b6a0:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b6a2:	68b8      	ldr	r0, [r7, #8]
 800b6a4:	f009 f9ce 	bl	8014a44 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b6a8:	bf00      	nop
 800b6aa:	3710      	adds	r7, #16
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}
 800b6b0:	08015ee0 	.word	0x08015ee0
 800b6b4:	08015f90 	.word	0x08015f90
 800b6b8:	08015f34 	.word	0x08015f34

0800b6bc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b082      	sub	sp, #8
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d106      	bne.n	800b6da <memp_free_pool+0x1e>
 800b6cc:	4b0a      	ldr	r3, [pc, #40]	@ (800b6f8 <memp_free_pool+0x3c>)
 800b6ce:	f240 1295 	movw	r2, #405	@ 0x195
 800b6d2:	490a      	ldr	r1, [pc, #40]	@ (800b6fc <memp_free_pool+0x40>)
 800b6d4:	480a      	ldr	r0, [pc, #40]	@ (800b700 <memp_free_pool+0x44>)
 800b6d6:	f009 fac5 	bl	8014c64 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d007      	beq.n	800b6f0 <memp_free_pool+0x34>
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d004      	beq.n	800b6f0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800b6e6:	6839      	ldr	r1, [r7, #0]
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f7ff ffbb 	bl	800b664 <do_memp_free_pool>
 800b6ee:	e000      	b.n	800b6f2 <memp_free_pool+0x36>
    return;
 800b6f0:	bf00      	nop
}
 800b6f2:	3708      	adds	r7, #8
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	08015ee0 	.word	0x08015ee0
 800b6fc:	08015f5c 	.word	0x08015f5c
 800b700:	08015f34 	.word	0x08015f34

0800b704 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b082      	sub	sp, #8
 800b708:	af00      	add	r7, sp, #0
 800b70a:	4603      	mov	r3, r0
 800b70c:	6039      	str	r1, [r7, #0]
 800b70e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b710:	79fb      	ldrb	r3, [r7, #7]
 800b712:	2b0c      	cmp	r3, #12
 800b714:	d907      	bls.n	800b726 <memp_free+0x22>
 800b716:	4b0c      	ldr	r3, [pc, #48]	@ (800b748 <memp_free+0x44>)
 800b718:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800b71c:	490b      	ldr	r1, [pc, #44]	@ (800b74c <memp_free+0x48>)
 800b71e:	480c      	ldr	r0, [pc, #48]	@ (800b750 <memp_free+0x4c>)
 800b720:	f009 faa0 	bl	8014c64 <iprintf>
 800b724:	e00c      	b.n	800b740 <memp_free+0x3c>

  if (mem == NULL) {
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d008      	beq.n	800b73e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b72c:	79fb      	ldrb	r3, [r7, #7]
 800b72e:	4a09      	ldr	r2, [pc, #36]	@ (800b754 <memp_free+0x50>)
 800b730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b734:	6839      	ldr	r1, [r7, #0]
 800b736:	4618      	mov	r0, r3
 800b738:	f7ff ff94 	bl	800b664 <do_memp_free_pool>
 800b73c:	e000      	b.n	800b740 <memp_free+0x3c>
    return;
 800b73e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b740:	3708      	adds	r7, #8
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
 800b746:	bf00      	nop
 800b748:	08015ee0 	.word	0x08015ee0
 800b74c:	08015fb0 	.word	0x08015fb0
 800b750:	08015f34 	.word	0x08015f34
 800b754:	080186d0 	.word	0x080186d0

0800b758 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b758:	b480      	push	{r7}
 800b75a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b75c:	bf00      	nop
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr
	...

0800b768 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b086      	sub	sp, #24
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	60b9      	str	r1, [r7, #8]
 800b772:	607a      	str	r2, [r7, #4]
 800b774:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d108      	bne.n	800b78e <netif_add+0x26>
 800b77c:	4b57      	ldr	r3, [pc, #348]	@ (800b8dc <netif_add+0x174>)
 800b77e:	f240 1227 	movw	r2, #295	@ 0x127
 800b782:	4957      	ldr	r1, [pc, #348]	@ (800b8e0 <netif_add+0x178>)
 800b784:	4857      	ldr	r0, [pc, #348]	@ (800b8e4 <netif_add+0x17c>)
 800b786:	f009 fa6d 	bl	8014c64 <iprintf>
 800b78a:	2300      	movs	r3, #0
 800b78c:	e0a2      	b.n	800b8d4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b790:	2b00      	cmp	r3, #0
 800b792:	d108      	bne.n	800b7a6 <netif_add+0x3e>
 800b794:	4b51      	ldr	r3, [pc, #324]	@ (800b8dc <netif_add+0x174>)
 800b796:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800b79a:	4953      	ldr	r1, [pc, #332]	@ (800b8e8 <netif_add+0x180>)
 800b79c:	4851      	ldr	r0, [pc, #324]	@ (800b8e4 <netif_add+0x17c>)
 800b79e:	f009 fa61 	bl	8014c64 <iprintf>
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	e096      	b.n	800b8d4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d101      	bne.n	800b7b0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b7ac:	4b4f      	ldr	r3, [pc, #316]	@ (800b8ec <netif_add+0x184>)
 800b7ae:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d101      	bne.n	800b7ba <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b7b6:	4b4d      	ldr	r3, [pc, #308]	@ (800b8ec <netif_add+0x184>)
 800b7b8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d101      	bne.n	800b7c4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b7c0:	4b4a      	ldr	r3, [pc, #296]	@ (800b8ec <netif_add+0x184>)
 800b7c2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	4a45      	ldr	r2, [pc, #276]	@ (800b8f0 <netif_add+0x188>)
 800b7da:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	6a3a      	ldr	r2, [r7, #32]
 800b7f4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b7f6:	4b3f      	ldr	r3, [pc, #252]	@ (800b8f4 <netif_add+0x18c>)
 800b7f8:	781a      	ldrb	r2, [r3, #0]
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b804:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	687a      	ldr	r2, [r7, #4]
 800b80a:	68b9      	ldr	r1, [r7, #8]
 800b80c:	68f8      	ldr	r0, [r7, #12]
 800b80e:	f000 f913 	bl	800ba38 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b814:	68f8      	ldr	r0, [r7, #12]
 800b816:	4798      	blx	r3
 800b818:	4603      	mov	r3, r0
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d001      	beq.n	800b822 <netif_add+0xba>
    return NULL;
 800b81e:	2300      	movs	r3, #0
 800b820:	e058      	b.n	800b8d4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b828:	2bff      	cmp	r3, #255	@ 0xff
 800b82a:	d103      	bne.n	800b834 <netif_add+0xcc>
        netif->num = 0;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	2200      	movs	r2, #0
 800b830:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800b834:	2300      	movs	r3, #0
 800b836:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b838:	4b2f      	ldr	r3, [pc, #188]	@ (800b8f8 <netif_add+0x190>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	617b      	str	r3, [r7, #20]
 800b83e:	e02b      	b.n	800b898 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b840:	697a      	ldr	r2, [r7, #20]
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	429a      	cmp	r2, r3
 800b846:	d106      	bne.n	800b856 <netif_add+0xee>
 800b848:	4b24      	ldr	r3, [pc, #144]	@ (800b8dc <netif_add+0x174>)
 800b84a:	f240 128b 	movw	r2, #395	@ 0x18b
 800b84e:	492b      	ldr	r1, [pc, #172]	@ (800b8fc <netif_add+0x194>)
 800b850:	4824      	ldr	r0, [pc, #144]	@ (800b8e4 <netif_add+0x17c>)
 800b852:	f009 fa07 	bl	8014c64 <iprintf>
        num_netifs++;
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	3301      	adds	r3, #1
 800b85a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	2bff      	cmp	r3, #255	@ 0xff
 800b860:	dd06      	ble.n	800b870 <netif_add+0x108>
 800b862:	4b1e      	ldr	r3, [pc, #120]	@ (800b8dc <netif_add+0x174>)
 800b864:	f240 128d 	movw	r2, #397	@ 0x18d
 800b868:	4925      	ldr	r1, [pc, #148]	@ (800b900 <netif_add+0x198>)
 800b86a:	481e      	ldr	r0, [pc, #120]	@ (800b8e4 <netif_add+0x17c>)
 800b86c:	f009 f9fa 	bl	8014c64 <iprintf>
        if (netif2->num == netif->num) {
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d108      	bne.n	800b892 <netif_add+0x12a>
          netif->num++;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b886:	3301      	adds	r3, #1
 800b888:	b2da      	uxtb	r2, r3
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800b890:	e005      	b.n	800b89e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	617b      	str	r3, [r7, #20]
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d1d0      	bne.n	800b840 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d1be      	bne.n	800b822 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b8aa:	2bfe      	cmp	r3, #254	@ 0xfe
 800b8ac:	d103      	bne.n	800b8b6 <netif_add+0x14e>
    netif_num = 0;
 800b8ae:	4b11      	ldr	r3, [pc, #68]	@ (800b8f4 <netif_add+0x18c>)
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	701a      	strb	r2, [r3, #0]
 800b8b4:	e006      	b.n	800b8c4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b8bc:	3301      	adds	r3, #1
 800b8be:	b2da      	uxtb	r2, r3
 800b8c0:	4b0c      	ldr	r3, [pc, #48]	@ (800b8f4 <netif_add+0x18c>)
 800b8c2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b8c4:	4b0c      	ldr	r3, [pc, #48]	@ (800b8f8 <netif_add+0x190>)
 800b8c6:	681a      	ldr	r2, [r3, #0]
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b8cc:	4a0a      	ldr	r2, [pc, #40]	@ (800b8f8 <netif_add+0x190>)
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3718      	adds	r7, #24
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}
 800b8dc:	08015fcc 	.word	0x08015fcc
 800b8e0:	08016060 	.word	0x08016060
 800b8e4:	0801601c 	.word	0x0801601c
 800b8e8:	0801607c 	.word	0x0801607c
 800b8ec:	08018744 	.word	0x08018744
 800b8f0:	0800bd13 	.word	0x0800bd13
 800b8f4:	20010308 	.word	0x20010308
 800b8f8:	20010300 	.word	0x20010300
 800b8fc:	080160a0 	.word	0x080160a0
 800b900:	080160b4 	.word	0x080160b4

0800b904 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b90e:	6839      	ldr	r1, [r7, #0]
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f002 fb87 	bl	800e024 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b916:	6839      	ldr	r1, [r7, #0]
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f006 fc97 	bl	801224c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b91e:	bf00      	nop
 800b920:	3708      	adds	r7, #8
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
	...

0800b928 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b086      	sub	sp, #24
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	60f8      	str	r0, [r7, #12]
 800b930:	60b9      	str	r1, [r7, #8]
 800b932:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d106      	bne.n	800b948 <netif_do_set_ipaddr+0x20>
 800b93a:	4b1d      	ldr	r3, [pc, #116]	@ (800b9b0 <netif_do_set_ipaddr+0x88>)
 800b93c:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800b940:	491c      	ldr	r1, [pc, #112]	@ (800b9b4 <netif_do_set_ipaddr+0x8c>)
 800b942:	481d      	ldr	r0, [pc, #116]	@ (800b9b8 <netif_do_set_ipaddr+0x90>)
 800b944:	f009 f98e 	bl	8014c64 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d106      	bne.n	800b95c <netif_do_set_ipaddr+0x34>
 800b94e:	4b18      	ldr	r3, [pc, #96]	@ (800b9b0 <netif_do_set_ipaddr+0x88>)
 800b950:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800b954:	4917      	ldr	r1, [pc, #92]	@ (800b9b4 <netif_do_set_ipaddr+0x8c>)
 800b956:	4818      	ldr	r0, [pc, #96]	@ (800b9b8 <netif_do_set_ipaddr+0x90>)
 800b958:	f009 f984 	bl	8014c64 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	3304      	adds	r3, #4
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	429a      	cmp	r2, r3
 800b968:	d01c      	beq.n	800b9a4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	3304      	adds	r3, #4
 800b974:	681a      	ldr	r2, [r3, #0]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b97a:	f107 0314 	add.w	r3, r7, #20
 800b97e:	4619      	mov	r1, r3
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f7ff ffbf 	bl	800b904 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d002      	beq.n	800b992 <netif_do_set_ipaddr+0x6a>
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	e000      	b.n	800b994 <netif_do_set_ipaddr+0x6c>
 800b992:	2300      	movs	r3, #0
 800b994:	68fa      	ldr	r2, [r7, #12]
 800b996:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b998:	2101      	movs	r1, #1
 800b99a:	68f8      	ldr	r0, [r7, #12]
 800b99c:	f000 f8d2 	bl	800bb44 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	e000      	b.n	800b9a6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b9a4:	2300      	movs	r3, #0
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3718      	adds	r7, #24
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	bf00      	nop
 800b9b0:	08015fcc 	.word	0x08015fcc
 800b9b4:	080160e4 	.word	0x080160e4
 800b9b8:	0801601c 	.word	0x0801601c

0800b9bc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b085      	sub	sp, #20
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	60f8      	str	r0, [r7, #12]
 800b9c4:	60b9      	str	r1, [r7, #8]
 800b9c6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	681a      	ldr	r2, [r3, #0]
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	3308      	adds	r3, #8
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d00a      	beq.n	800b9ec <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d002      	beq.n	800b9e2 <netif_do_set_netmask+0x26>
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	e000      	b.n	800b9e4 <netif_do_set_netmask+0x28>
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	68fa      	ldr	r2, [r7, #12]
 800b9e6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	e000      	b.n	800b9ee <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b9ec:	2300      	movs	r3, #0
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3714      	adds	r7, #20
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f8:	4770      	bx	lr

0800b9fa <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b9fa:	b480      	push	{r7}
 800b9fc:	b085      	sub	sp, #20
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	60f8      	str	r0, [r7, #12]
 800ba02:	60b9      	str	r1, [r7, #8]
 800ba04:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	681a      	ldr	r2, [r3, #0]
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	330c      	adds	r3, #12
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d00a      	beq.n	800ba2a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d002      	beq.n	800ba20 <netif_do_set_gw+0x26>
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	e000      	b.n	800ba22 <netif_do_set_gw+0x28>
 800ba20:	2300      	movs	r3, #0
 800ba22:	68fa      	ldr	r2, [r7, #12]
 800ba24:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800ba26:	2301      	movs	r3, #1
 800ba28:	e000      	b.n	800ba2c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800ba2a:	2300      	movs	r3, #0
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3714      	adds	r7, #20
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr

0800ba38 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b088      	sub	sp, #32
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	60f8      	str	r0, [r7, #12]
 800ba40:	60b9      	str	r1, [r7, #8]
 800ba42:	607a      	str	r2, [r7, #4]
 800ba44:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ba46:	2300      	movs	r3, #0
 800ba48:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d101      	bne.n	800ba58 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800ba54:	4b1c      	ldr	r3, [pc, #112]	@ (800bac8 <netif_set_addr+0x90>)
 800ba56:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d101      	bne.n	800ba62 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800ba5e:	4b1a      	ldr	r3, [pc, #104]	@ (800bac8 <netif_set_addr+0x90>)
 800ba60:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d101      	bne.n	800ba6c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800ba68:	4b17      	ldr	r3, [pc, #92]	@ (800bac8 <netif_set_addr+0x90>)
 800ba6a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d003      	beq.n	800ba7a <netif_set_addr+0x42>
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d101      	bne.n	800ba7e <netif_set_addr+0x46>
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	e000      	b.n	800ba80 <netif_set_addr+0x48>
 800ba7e:	2300      	movs	r3, #0
 800ba80:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d006      	beq.n	800ba96 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ba88:	f107 0310 	add.w	r3, r7, #16
 800ba8c:	461a      	mov	r2, r3
 800ba8e:	68b9      	ldr	r1, [r7, #8]
 800ba90:	68f8      	ldr	r0, [r7, #12]
 800ba92:	f7ff ff49 	bl	800b928 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ba96:	69fa      	ldr	r2, [r7, #28]
 800ba98:	6879      	ldr	r1, [r7, #4]
 800ba9a:	68f8      	ldr	r0, [r7, #12]
 800ba9c:	f7ff ff8e 	bl	800b9bc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800baa0:	69ba      	ldr	r2, [r7, #24]
 800baa2:	6839      	ldr	r1, [r7, #0]
 800baa4:	68f8      	ldr	r0, [r7, #12]
 800baa6:	f7ff ffa8 	bl	800b9fa <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d106      	bne.n	800babe <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800bab0:	f107 0310 	add.w	r3, r7, #16
 800bab4:	461a      	mov	r2, r3
 800bab6:	68b9      	ldr	r1, [r7, #8]
 800bab8:	68f8      	ldr	r0, [r7, #12]
 800baba:	f7ff ff35 	bl	800b928 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800babe:	bf00      	nop
 800bac0:	3720      	adds	r7, #32
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop
 800bac8:	08018744 	.word	0x08018744

0800bacc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800bacc:	b480      	push	{r7}
 800bace:	b083      	sub	sp, #12
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800bad4:	4a04      	ldr	r2, [pc, #16]	@ (800bae8 <netif_set_default+0x1c>)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800bada:	bf00      	nop
 800badc:	370c      	adds	r7, #12
 800bade:	46bd      	mov	sp, r7
 800bae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae4:	4770      	bx	lr
 800bae6:	bf00      	nop
 800bae8:	20010304 	.word	0x20010304

0800baec <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d107      	bne.n	800bb0a <netif_set_up+0x1e>
 800bafa:	4b0f      	ldr	r3, [pc, #60]	@ (800bb38 <netif_set_up+0x4c>)
 800bafc:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800bb00:	490e      	ldr	r1, [pc, #56]	@ (800bb3c <netif_set_up+0x50>)
 800bb02:	480f      	ldr	r0, [pc, #60]	@ (800bb40 <netif_set_up+0x54>)
 800bb04:	f009 f8ae 	bl	8014c64 <iprintf>
 800bb08:	e013      	b.n	800bb32 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bb10:	f003 0301 	and.w	r3, r3, #1
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d10c      	bne.n	800bb32 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bb1e:	f043 0301 	orr.w	r3, r3, #1
 800bb22:	b2da      	uxtb	r2, r3
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bb2a:	2103      	movs	r1, #3
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f000 f809 	bl	800bb44 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800bb32:	3708      	adds	r7, #8
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}
 800bb38:	08015fcc 	.word	0x08015fcc
 800bb3c:	08016154 	.word	0x08016154
 800bb40:	0801601c 	.word	0x0801601c

0800bb44 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b082      	sub	sp, #8
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d106      	bne.n	800bb64 <netif_issue_reports+0x20>
 800bb56:	4b18      	ldr	r3, [pc, #96]	@ (800bbb8 <netif_issue_reports+0x74>)
 800bb58:	f240 326d 	movw	r2, #877	@ 0x36d
 800bb5c:	4917      	ldr	r1, [pc, #92]	@ (800bbbc <netif_issue_reports+0x78>)
 800bb5e:	4818      	ldr	r0, [pc, #96]	@ (800bbc0 <netif_issue_reports+0x7c>)
 800bb60:	f009 f880 	bl	8014c64 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bb6a:	f003 0304 	and.w	r3, r3, #4
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d01e      	beq.n	800bbb0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bb78:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d017      	beq.n	800bbb0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bb80:	78fb      	ldrb	r3, [r7, #3]
 800bb82:	f003 0301 	and.w	r3, r3, #1
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d013      	beq.n	800bbb2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	3304      	adds	r3, #4
 800bb8e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d00e      	beq.n	800bbb2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bb9a:	f003 0308 	and.w	r3, r3, #8
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d007      	beq.n	800bbb2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	3304      	adds	r3, #4
 800bba6:	4619      	mov	r1, r3
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f007 fab9 	bl	8013120 <etharp_request>
 800bbae:	e000      	b.n	800bbb2 <netif_issue_reports+0x6e>
    return;
 800bbb0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800bbb2:	3708      	adds	r7, #8
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}
 800bbb8:	08015fcc 	.word	0x08015fcc
 800bbbc:	08016170 	.word	0x08016170
 800bbc0:	0801601c 	.word	0x0801601c

0800bbc4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d107      	bne.n	800bbe2 <netif_set_down+0x1e>
 800bbd2:	4b12      	ldr	r3, [pc, #72]	@ (800bc1c <netif_set_down+0x58>)
 800bbd4:	f240 329b 	movw	r2, #923	@ 0x39b
 800bbd8:	4911      	ldr	r1, [pc, #68]	@ (800bc20 <netif_set_down+0x5c>)
 800bbda:	4812      	ldr	r0, [pc, #72]	@ (800bc24 <netif_set_down+0x60>)
 800bbdc:	f009 f842 	bl	8014c64 <iprintf>
 800bbe0:	e019      	b.n	800bc16 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bbe8:	f003 0301 	and.w	r3, r3, #1
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d012      	beq.n	800bc16 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bbf6:	f023 0301 	bic.w	r3, r3, #1
 800bbfa:	b2da      	uxtb	r2, r3
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bc08:	f003 0308 	and.w	r3, r3, #8
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d002      	beq.n	800bc16 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f006 fe43 	bl	801289c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800bc16:	3708      	adds	r7, #8
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	08015fcc 	.word	0x08015fcc
 800bc20:	08016194 	.word	0x08016194
 800bc24:	0801601c 	.word	0x0801601c

0800bc28 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d107      	bne.n	800bc46 <netif_set_link_up+0x1e>
 800bc36:	4b13      	ldr	r3, [pc, #76]	@ (800bc84 <netif_set_link_up+0x5c>)
 800bc38:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800bc3c:	4912      	ldr	r1, [pc, #72]	@ (800bc88 <netif_set_link_up+0x60>)
 800bc3e:	4813      	ldr	r0, [pc, #76]	@ (800bc8c <netif_set_link_up+0x64>)
 800bc40:	f009 f810 	bl	8014c64 <iprintf>
 800bc44:	e01b      	b.n	800bc7e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bc4c:	f003 0304 	and.w	r3, r3, #4
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d114      	bne.n	800bc7e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bc5a:	f043 0304 	orr.w	r3, r3, #4
 800bc5e:	b2da      	uxtb	r2, r3
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bc66:	2103      	movs	r1, #3
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f7ff ff6b 	bl	800bb44 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	69db      	ldr	r3, [r3, #28]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d003      	beq.n	800bc7e <netif_set_link_up+0x56>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	69db      	ldr	r3, [r3, #28]
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bc7e:	3708      	adds	r7, #8
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}
 800bc84:	08015fcc 	.word	0x08015fcc
 800bc88:	080161b4 	.word	0x080161b4
 800bc8c:	0801601c 	.word	0x0801601c

0800bc90 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b082      	sub	sp, #8
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d107      	bne.n	800bcae <netif_set_link_down+0x1e>
 800bc9e:	4b11      	ldr	r3, [pc, #68]	@ (800bce4 <netif_set_link_down+0x54>)
 800bca0:	f240 4206 	movw	r2, #1030	@ 0x406
 800bca4:	4910      	ldr	r1, [pc, #64]	@ (800bce8 <netif_set_link_down+0x58>)
 800bca6:	4811      	ldr	r0, [pc, #68]	@ (800bcec <netif_set_link_down+0x5c>)
 800bca8:	f008 ffdc 	bl	8014c64 <iprintf>
 800bcac:	e017      	b.n	800bcde <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bcb4:	f003 0304 	and.w	r3, r3, #4
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d010      	beq.n	800bcde <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bcc2:	f023 0304 	bic.w	r3, r3, #4
 800bcc6:	b2da      	uxtb	r2, r3
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	69db      	ldr	r3, [r3, #28]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d003      	beq.n	800bcde <netif_set_link_down+0x4e>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	69db      	ldr	r3, [r3, #28]
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bcde:	3708      	adds	r7, #8
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}
 800bce4:	08015fcc 	.word	0x08015fcc
 800bce8:	080161d8 	.word	0x080161d8
 800bcec:	0801601c 	.word	0x0801601c

0800bcf0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b083      	sub	sp, #12
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d002      	beq.n	800bd06 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	683a      	ldr	r2, [r7, #0]
 800bd04:	61da      	str	r2, [r3, #28]
  }
}
 800bd06:	bf00      	nop
 800bd08:	370c      	adds	r7, #12
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd10:	4770      	bx	lr

0800bd12 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800bd12:	b480      	push	{r7}
 800bd14:	b085      	sub	sp, #20
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	60f8      	str	r0, [r7, #12]
 800bd1a:	60b9      	str	r1, [r7, #8]
 800bd1c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800bd1e:	f06f 030b 	mvn.w	r3, #11
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3714      	adds	r7, #20
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr
	...

0800bd30 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b085      	sub	sp, #20
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	4603      	mov	r3, r0
 800bd38:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800bd3a:	79fb      	ldrb	r3, [r7, #7]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d013      	beq.n	800bd68 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800bd40:	4b0d      	ldr	r3, [pc, #52]	@ (800bd78 <netif_get_by_index+0x48>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	60fb      	str	r3, [r7, #12]
 800bd46:	e00c      	b.n	800bd62 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bd4e:	3301      	adds	r3, #1
 800bd50:	b2db      	uxtb	r3, r3
 800bd52:	79fa      	ldrb	r2, [r7, #7]
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d101      	bne.n	800bd5c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	e006      	b.n	800bd6a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	60fb      	str	r3, [r7, #12]
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d1ef      	bne.n	800bd48 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800bd68:	2300      	movs	r3, #0
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3714      	adds	r7, #20
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd74:	4770      	bx	lr
 800bd76:	bf00      	nop
 800bd78:	20010300 	.word	0x20010300

0800bd7c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b082      	sub	sp, #8
 800bd80:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800bd82:	f008 fe51 	bl	8014a28 <sys_arch_protect>
 800bd86:	6038      	str	r0, [r7, #0]
 800bd88:	4b0d      	ldr	r3, [pc, #52]	@ (800bdc0 <pbuf_free_ooseq+0x44>)
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	701a      	strb	r2, [r3, #0]
 800bd8e:	6838      	ldr	r0, [r7, #0]
 800bd90:	f008 fe58 	bl	8014a44 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bd94:	4b0b      	ldr	r3, [pc, #44]	@ (800bdc4 <pbuf_free_ooseq+0x48>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	607b      	str	r3, [r7, #4]
 800bd9a:	e00a      	b.n	800bdb2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d003      	beq.n	800bdac <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f002 f97b 	bl	800e0a0 <tcp_free_ooseq>
      return;
 800bdaa:	e005      	b.n	800bdb8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	68db      	ldr	r3, [r3, #12]
 800bdb0:	607b      	str	r3, [r7, #4]
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d1f1      	bne.n	800bd9c <pbuf_free_ooseq+0x20>
    }
  }
}
 800bdb8:	3708      	adds	r7, #8
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}
 800bdbe:	bf00      	nop
 800bdc0:	20010309 	.word	0x20010309
 800bdc4:	20010318 	.word	0x20010318

0800bdc8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b082      	sub	sp, #8
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800bdd0:	f7ff ffd4 	bl	800bd7c <pbuf_free_ooseq>
}
 800bdd4:	bf00      	nop
 800bdd6:	3708      	adds	r7, #8
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}

0800bddc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800bde2:	f008 fe21 	bl	8014a28 <sys_arch_protect>
 800bde6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800bde8:	4b0f      	ldr	r3, [pc, #60]	@ (800be28 <pbuf_pool_is_empty+0x4c>)
 800bdea:	781b      	ldrb	r3, [r3, #0]
 800bdec:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800bdee:	4b0e      	ldr	r3, [pc, #56]	@ (800be28 <pbuf_pool_is_empty+0x4c>)
 800bdf0:	2201      	movs	r2, #1
 800bdf2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f008 fe25 	bl	8014a44 <sys_arch_unprotect>

  if (!queued) {
 800bdfa:	78fb      	ldrb	r3, [r7, #3]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d10f      	bne.n	800be20 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800be00:	2100      	movs	r1, #0
 800be02:	480a      	ldr	r0, [pc, #40]	@ (800be2c <pbuf_pool_is_empty+0x50>)
 800be04:	f7fe fe9a 	bl	800ab3c <tcpip_try_callback>
 800be08:	4603      	mov	r3, r0
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d008      	beq.n	800be20 <pbuf_pool_is_empty+0x44>
 800be0e:	f008 fe0b 	bl	8014a28 <sys_arch_protect>
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	4b04      	ldr	r3, [pc, #16]	@ (800be28 <pbuf_pool_is_empty+0x4c>)
 800be16:	2200      	movs	r2, #0
 800be18:	701a      	strb	r2, [r3, #0]
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f008 fe12 	bl	8014a44 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800be20:	bf00      	nop
 800be22:	3708      	adds	r7, #8
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}
 800be28:	20010309 	.word	0x20010309
 800be2c:	0800bdc9 	.word	0x0800bdc9

0800be30 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800be30:	b480      	push	{r7}
 800be32:	b085      	sub	sp, #20
 800be34:	af00      	add	r7, sp, #0
 800be36:	60f8      	str	r0, [r7, #12]
 800be38:	60b9      	str	r1, [r7, #8]
 800be3a:	4611      	mov	r1, r2
 800be3c:	461a      	mov	r2, r3
 800be3e:	460b      	mov	r3, r1
 800be40:	80fb      	strh	r3, [r7, #6]
 800be42:	4613      	mov	r3, r2
 800be44:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2200      	movs	r2, #0
 800be4a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	68ba      	ldr	r2, [r7, #8]
 800be50:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	88fa      	ldrh	r2, [r7, #6]
 800be56:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	88ba      	ldrh	r2, [r7, #4]
 800be5c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800be5e:	8b3b      	ldrh	r3, [r7, #24]
 800be60:	b2da      	uxtb	r2, r3
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	7f3a      	ldrb	r2, [r7, #28]
 800be6a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2201      	movs	r2, #1
 800be70:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2200      	movs	r2, #0
 800be76:	73da      	strb	r2, [r3, #15]
}
 800be78:	bf00      	nop
 800be7a:	3714      	adds	r7, #20
 800be7c:	46bd      	mov	sp, r7
 800be7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be82:	4770      	bx	lr

0800be84 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b08c      	sub	sp, #48	@ 0x30
 800be88:	af02      	add	r7, sp, #8
 800be8a:	4603      	mov	r3, r0
 800be8c:	71fb      	strb	r3, [r7, #7]
 800be8e:	460b      	mov	r3, r1
 800be90:	80bb      	strh	r3, [r7, #4]
 800be92:	4613      	mov	r3, r2
 800be94:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800be96:	79fb      	ldrb	r3, [r7, #7]
 800be98:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800be9a:	887b      	ldrh	r3, [r7, #2]
 800be9c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800bea0:	f000 8082 	beq.w	800bfa8 <pbuf_alloc+0x124>
 800bea4:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800bea8:	f300 80ca 	bgt.w	800c040 <pbuf_alloc+0x1bc>
 800beac:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800beb0:	d010      	beq.n	800bed4 <pbuf_alloc+0x50>
 800beb2:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800beb6:	f300 80c3 	bgt.w	800c040 <pbuf_alloc+0x1bc>
 800beba:	2b01      	cmp	r3, #1
 800bebc:	d002      	beq.n	800bec4 <pbuf_alloc+0x40>
 800bebe:	2b41      	cmp	r3, #65	@ 0x41
 800bec0:	f040 80be 	bne.w	800c040 <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800bec4:	887a      	ldrh	r2, [r7, #2]
 800bec6:	88bb      	ldrh	r3, [r7, #4]
 800bec8:	4619      	mov	r1, r3
 800beca:	2000      	movs	r0, #0
 800becc:	f000 f8d4 	bl	800c078 <pbuf_alloc_reference>
 800bed0:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800bed2:	e0bf      	b.n	800c054 <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800bed4:	2300      	movs	r3, #0
 800bed6:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800bed8:	2300      	movs	r3, #0
 800beda:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800bedc:	88bb      	ldrh	r3, [r7, #4]
 800bede:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bee0:	200c      	movs	r0, #12
 800bee2:	f7ff fb99 	bl	800b618 <memp_malloc>
 800bee6:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d109      	bne.n	800bf02 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 800beee:	f7ff ff75 	bl	800bddc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800bef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d002      	beq.n	800befe <pbuf_alloc+0x7a>
            pbuf_free(p);
 800bef8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800befa:	f000 faab 	bl	800c454 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800befe:	2300      	movs	r3, #0
 800bf00:	e0a9      	b.n	800c056 <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800bf02:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bf04:	3303      	adds	r3, #3
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	f023 0303 	bic.w	r3, r3, #3
 800bf0c:	b29a      	uxth	r2, r3
 800bf0e:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 800bf12:	1a9b      	subs	r3, r3, r2
 800bf14:	b29b      	uxth	r3, r3
 800bf16:	8b7a      	ldrh	r2, [r7, #26]
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	bf28      	it	cs
 800bf1c:	4613      	movcs	r3, r2
 800bf1e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800bf20:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bf22:	3310      	adds	r3, #16
 800bf24:	693a      	ldr	r2, [r7, #16]
 800bf26:	4413      	add	r3, r2
 800bf28:	3303      	adds	r3, #3
 800bf2a:	f023 0303 	bic.w	r3, r3, #3
 800bf2e:	4618      	mov	r0, r3
 800bf30:	89f9      	ldrh	r1, [r7, #14]
 800bf32:	8b7a      	ldrh	r2, [r7, #26]
 800bf34:	2300      	movs	r3, #0
 800bf36:	9301      	str	r3, [sp, #4]
 800bf38:	887b      	ldrh	r3, [r7, #2]
 800bf3a:	9300      	str	r3, [sp, #0]
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	4601      	mov	r1, r0
 800bf40:	6938      	ldr	r0, [r7, #16]
 800bf42:	f7ff ff75 	bl	800be30 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	685b      	ldr	r3, [r3, #4]
 800bf4a:	f003 0303 	and.w	r3, r3, #3
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d006      	beq.n	800bf60 <pbuf_alloc+0xdc>
 800bf52:	4b43      	ldr	r3, [pc, #268]	@ (800c060 <pbuf_alloc+0x1dc>)
 800bf54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bf58:	4942      	ldr	r1, [pc, #264]	@ (800c064 <pbuf_alloc+0x1e0>)
 800bf5a:	4843      	ldr	r0, [pc, #268]	@ (800c068 <pbuf_alloc+0x1e4>)
 800bf5c:	f008 fe82 	bl	8014c64 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800bf60:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bf62:	3303      	adds	r3, #3
 800bf64:	f023 0303 	bic.w	r3, r3, #3
 800bf68:	f240 52ec 	movw	r2, #1516	@ 0x5ec
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d106      	bne.n	800bf7e <pbuf_alloc+0xfa>
 800bf70:	4b3b      	ldr	r3, [pc, #236]	@ (800c060 <pbuf_alloc+0x1dc>)
 800bf72:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800bf76:	493d      	ldr	r1, [pc, #244]	@ (800c06c <pbuf_alloc+0x1e8>)
 800bf78:	483b      	ldr	r0, [pc, #236]	@ (800c068 <pbuf_alloc+0x1e4>)
 800bf7a:	f008 fe73 	bl	8014c64 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800bf7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d102      	bne.n	800bf8a <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf88:	e002      	b.n	800bf90 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800bf8a:	69fb      	ldr	r3, [r7, #28]
 800bf8c:	693a      	ldr	r2, [r7, #16]
 800bf8e:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800bf90:	693b      	ldr	r3, [r7, #16]
 800bf92:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800bf94:	8b7a      	ldrh	r2, [r7, #26]
 800bf96:	89fb      	ldrh	r3, [r7, #14]
 800bf98:	1ad3      	subs	r3, r2, r3
 800bf9a:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800bfa0:	8b7b      	ldrh	r3, [r7, #26]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d19c      	bne.n	800bee0 <pbuf_alloc+0x5c>
      break;
 800bfa6:	e055      	b.n	800c054 <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800bfa8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bfaa:	3303      	adds	r3, #3
 800bfac:	b29b      	uxth	r3, r3
 800bfae:	f023 0303 	bic.w	r3, r3, #3
 800bfb2:	b29a      	uxth	r2, r3
 800bfb4:	88bb      	ldrh	r3, [r7, #4]
 800bfb6:	3303      	adds	r3, #3
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	f023 0303 	bic.w	r3, r3, #3
 800bfbe:	b29b      	uxth	r3, r3
 800bfc0:	4413      	add	r3, r2
 800bfc2:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800bfc4:	8b3b      	ldrh	r3, [r7, #24]
 800bfc6:	3310      	adds	r3, #16
 800bfc8:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bfca:	8b3a      	ldrh	r2, [r7, #24]
 800bfcc:	88bb      	ldrh	r3, [r7, #4]
 800bfce:	3303      	adds	r3, #3
 800bfd0:	f023 0303 	bic.w	r3, r3, #3
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d306      	bcc.n	800bfe6 <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800bfd8:	8afa      	ldrh	r2, [r7, #22]
 800bfda:	88bb      	ldrh	r3, [r7, #4]
 800bfdc:	3303      	adds	r3, #3
 800bfde:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d201      	bcs.n	800bfea <pbuf_alloc+0x166>
        return NULL;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	e035      	b.n	800c056 <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800bfea:	8afb      	ldrh	r3, [r7, #22]
 800bfec:	4618      	mov	r0, r3
 800bfee:	f7ff f96b 	bl	800b2c8 <mem_malloc>
 800bff2:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800bff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d101      	bne.n	800bffe <pbuf_alloc+0x17a>
        return NULL;
 800bffa:	2300      	movs	r3, #0
 800bffc:	e02b      	b.n	800c056 <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800bffe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c000:	3310      	adds	r3, #16
 800c002:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c004:	4413      	add	r3, r2
 800c006:	3303      	adds	r3, #3
 800c008:	f023 0303 	bic.w	r3, r3, #3
 800c00c:	4618      	mov	r0, r3
 800c00e:	88b9      	ldrh	r1, [r7, #4]
 800c010:	88ba      	ldrh	r2, [r7, #4]
 800c012:	2300      	movs	r3, #0
 800c014:	9301      	str	r3, [sp, #4]
 800c016:	887b      	ldrh	r3, [r7, #2]
 800c018:	9300      	str	r3, [sp, #0]
 800c01a:	460b      	mov	r3, r1
 800c01c:	4601      	mov	r1, r0
 800c01e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c020:	f7ff ff06 	bl	800be30 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	f003 0303 	and.w	r3, r3, #3
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d010      	beq.n	800c052 <pbuf_alloc+0x1ce>
 800c030:	4b0b      	ldr	r3, [pc, #44]	@ (800c060 <pbuf_alloc+0x1dc>)
 800c032:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800c036:	490e      	ldr	r1, [pc, #56]	@ (800c070 <pbuf_alloc+0x1ec>)
 800c038:	480b      	ldr	r0, [pc, #44]	@ (800c068 <pbuf_alloc+0x1e4>)
 800c03a:	f008 fe13 	bl	8014c64 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c03e:	e008      	b.n	800c052 <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c040:	4b07      	ldr	r3, [pc, #28]	@ (800c060 <pbuf_alloc+0x1dc>)
 800c042:	f240 1227 	movw	r2, #295	@ 0x127
 800c046:	490b      	ldr	r1, [pc, #44]	@ (800c074 <pbuf_alloc+0x1f0>)
 800c048:	4807      	ldr	r0, [pc, #28]	@ (800c068 <pbuf_alloc+0x1e4>)
 800c04a:	f008 fe0b 	bl	8014c64 <iprintf>
      return NULL;
 800c04e:	2300      	movs	r3, #0
 800c050:	e001      	b.n	800c056 <pbuf_alloc+0x1d2>
      break;
 800c052:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c056:	4618      	mov	r0, r3
 800c058:	3728      	adds	r7, #40	@ 0x28
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}
 800c05e:	bf00      	nop
 800c060:	080161fc 	.word	0x080161fc
 800c064:	0801622c 	.word	0x0801622c
 800c068:	0801625c 	.word	0x0801625c
 800c06c:	08016284 	.word	0x08016284
 800c070:	080162b8 	.word	0x080162b8
 800c074:	080162e4 	.word	0x080162e4

0800c078 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b086      	sub	sp, #24
 800c07c:	af02      	add	r7, sp, #8
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	460b      	mov	r3, r1
 800c082:	807b      	strh	r3, [r7, #2]
 800c084:	4613      	mov	r3, r2
 800c086:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c088:	883b      	ldrh	r3, [r7, #0]
 800c08a:	2b41      	cmp	r3, #65	@ 0x41
 800c08c:	d009      	beq.n	800c0a2 <pbuf_alloc_reference+0x2a>
 800c08e:	883b      	ldrh	r3, [r7, #0]
 800c090:	2b01      	cmp	r3, #1
 800c092:	d006      	beq.n	800c0a2 <pbuf_alloc_reference+0x2a>
 800c094:	4b0f      	ldr	r3, [pc, #60]	@ (800c0d4 <pbuf_alloc_reference+0x5c>)
 800c096:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800c09a:	490f      	ldr	r1, [pc, #60]	@ (800c0d8 <pbuf_alloc_reference+0x60>)
 800c09c:	480f      	ldr	r0, [pc, #60]	@ (800c0dc <pbuf_alloc_reference+0x64>)
 800c09e:	f008 fde1 	bl	8014c64 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c0a2:	200b      	movs	r0, #11
 800c0a4:	f7ff fab8 	bl	800b618 <memp_malloc>
 800c0a8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d101      	bne.n	800c0b4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	e00b      	b.n	800c0cc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c0b4:	8879      	ldrh	r1, [r7, #2]
 800c0b6:	887a      	ldrh	r2, [r7, #2]
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	9301      	str	r3, [sp, #4]
 800c0bc:	883b      	ldrh	r3, [r7, #0]
 800c0be:	9300      	str	r3, [sp, #0]
 800c0c0:	460b      	mov	r3, r1
 800c0c2:	6879      	ldr	r1, [r7, #4]
 800c0c4:	68f8      	ldr	r0, [r7, #12]
 800c0c6:	f7ff feb3 	bl	800be30 <pbuf_init_alloced_pbuf>
  return p;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3710      	adds	r7, #16
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}
 800c0d4:	080161fc 	.word	0x080161fc
 800c0d8:	08016300 	.word	0x08016300
 800c0dc:	0801625c 	.word	0x0801625c

0800c0e0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b088      	sub	sp, #32
 800c0e4:	af02      	add	r7, sp, #8
 800c0e6:	607b      	str	r3, [r7, #4]
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	73fb      	strb	r3, [r7, #15]
 800c0ec:	460b      	mov	r3, r1
 800c0ee:	81bb      	strh	r3, [r7, #12]
 800c0f0:	4613      	mov	r3, r2
 800c0f2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c0f4:	7bfb      	ldrb	r3, [r7, #15]
 800c0f6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c0f8:	8a7b      	ldrh	r3, [r7, #18]
 800c0fa:	3303      	adds	r3, #3
 800c0fc:	f023 0203 	bic.w	r2, r3, #3
 800c100:	89bb      	ldrh	r3, [r7, #12]
 800c102:	441a      	add	r2, r3
 800c104:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c106:	429a      	cmp	r2, r3
 800c108:	d901      	bls.n	800c10e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c10a:	2300      	movs	r3, #0
 800c10c:	e018      	b.n	800c140 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c10e:	6a3b      	ldr	r3, [r7, #32]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d007      	beq.n	800c124 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c114:	8a7b      	ldrh	r3, [r7, #18]
 800c116:	3303      	adds	r3, #3
 800c118:	f023 0303 	bic.w	r3, r3, #3
 800c11c:	6a3a      	ldr	r2, [r7, #32]
 800c11e:	4413      	add	r3, r2
 800c120:	617b      	str	r3, [r7, #20]
 800c122:	e001      	b.n	800c128 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c124:	2300      	movs	r3, #0
 800c126:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	89b9      	ldrh	r1, [r7, #12]
 800c12c:	89ba      	ldrh	r2, [r7, #12]
 800c12e:	2302      	movs	r3, #2
 800c130:	9301      	str	r3, [sp, #4]
 800c132:	897b      	ldrh	r3, [r7, #10]
 800c134:	9300      	str	r3, [sp, #0]
 800c136:	460b      	mov	r3, r1
 800c138:	6979      	ldr	r1, [r7, #20]
 800c13a:	f7ff fe79 	bl	800be30 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c13e:	687b      	ldr	r3, [r7, #4]
}
 800c140:	4618      	mov	r0, r3
 800c142:	3718      	adds	r7, #24
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}

0800c148 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b084      	sub	sp, #16
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	460b      	mov	r3, r1
 800c152:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d106      	bne.n	800c168 <pbuf_realloc+0x20>
 800c15a:	4b3a      	ldr	r3, [pc, #232]	@ (800c244 <pbuf_realloc+0xfc>)
 800c15c:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800c160:	4939      	ldr	r1, [pc, #228]	@ (800c248 <pbuf_realloc+0x100>)
 800c162:	483a      	ldr	r0, [pc, #232]	@ (800c24c <pbuf_realloc+0x104>)
 800c164:	f008 fd7e 	bl	8014c64 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	891b      	ldrh	r3, [r3, #8]
 800c16c:	887a      	ldrh	r2, [r7, #2]
 800c16e:	429a      	cmp	r2, r3
 800c170:	d263      	bcs.n	800c23a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	891a      	ldrh	r2, [r3, #8]
 800c176:	887b      	ldrh	r3, [r7, #2]
 800c178:	1ad3      	subs	r3, r2, r3
 800c17a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c17c:	887b      	ldrh	r3, [r7, #2]
 800c17e:	817b      	strh	r3, [r7, #10]
  q = p;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c184:	e018      	b.n	800c1b8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	895b      	ldrh	r3, [r3, #10]
 800c18a:	897a      	ldrh	r2, [r7, #10]
 800c18c:	1ad3      	subs	r3, r2, r3
 800c18e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	891a      	ldrh	r2, [r3, #8]
 800c194:	893b      	ldrh	r3, [r7, #8]
 800c196:	1ad3      	subs	r3, r2, r3
 800c198:	b29a      	uxth	r2, r3
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d106      	bne.n	800c1b8 <pbuf_realloc+0x70>
 800c1aa:	4b26      	ldr	r3, [pc, #152]	@ (800c244 <pbuf_realloc+0xfc>)
 800c1ac:	f240 12af 	movw	r2, #431	@ 0x1af
 800c1b0:	4927      	ldr	r1, [pc, #156]	@ (800c250 <pbuf_realloc+0x108>)
 800c1b2:	4826      	ldr	r0, [pc, #152]	@ (800c24c <pbuf_realloc+0x104>)
 800c1b4:	f008 fd56 	bl	8014c64 <iprintf>
  while (rem_len > q->len) {
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	895b      	ldrh	r3, [r3, #10]
 800c1bc:	897a      	ldrh	r2, [r7, #10]
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d8e1      	bhi.n	800c186 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	7b1b      	ldrb	r3, [r3, #12]
 800c1c6:	f003 030f 	and.w	r3, r3, #15
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d121      	bne.n	800c212 <pbuf_realloc+0xca>
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	895b      	ldrh	r3, [r3, #10]
 800c1d2:	897a      	ldrh	r2, [r7, #10]
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	d01c      	beq.n	800c212 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	7b5b      	ldrb	r3, [r3, #13]
 800c1dc:	f003 0302 	and.w	r3, r3, #2
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d116      	bne.n	800c212 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	685a      	ldr	r2, [r3, #4]
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	1ad3      	subs	r3, r2, r3
 800c1ec:	b29a      	uxth	r2, r3
 800c1ee:	897b      	ldrh	r3, [r7, #10]
 800c1f0:	4413      	add	r3, r2
 800c1f2:	b29b      	uxth	r3, r3
 800c1f4:	4619      	mov	r1, r3
 800c1f6:	68f8      	ldr	r0, [r7, #12]
 800c1f8:	f7fe ff56 	bl	800b0a8 <mem_trim>
 800c1fc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d106      	bne.n	800c212 <pbuf_realloc+0xca>
 800c204:	4b0f      	ldr	r3, [pc, #60]	@ (800c244 <pbuf_realloc+0xfc>)
 800c206:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800c20a:	4912      	ldr	r1, [pc, #72]	@ (800c254 <pbuf_realloc+0x10c>)
 800c20c:	480f      	ldr	r0, [pc, #60]	@ (800c24c <pbuf_realloc+0x104>)
 800c20e:	f008 fd29 	bl	8014c64 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	897a      	ldrh	r2, [r7, #10]
 800c216:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	895a      	ldrh	r2, [r3, #10]
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d004      	beq.n	800c232 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	4618      	mov	r0, r3
 800c22e:	f000 f911 	bl	800c454 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	2200      	movs	r2, #0
 800c236:	601a      	str	r2, [r3, #0]
 800c238:	e000      	b.n	800c23c <pbuf_realloc+0xf4>
    return;
 800c23a:	bf00      	nop

}
 800c23c:	3710      	adds	r7, #16
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
 800c242:	bf00      	nop
 800c244:	080161fc 	.word	0x080161fc
 800c248:	08016314 	.word	0x08016314
 800c24c:	0801625c 	.word	0x0801625c
 800c250:	0801632c 	.word	0x0801632c
 800c254:	08016344 	.word	0x08016344

0800c258 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b086      	sub	sp, #24
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	4613      	mov	r3, r2
 800c264:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d106      	bne.n	800c27a <pbuf_add_header_impl+0x22>
 800c26c:	4b2b      	ldr	r3, [pc, #172]	@ (800c31c <pbuf_add_header_impl+0xc4>)
 800c26e:	f240 12df 	movw	r2, #479	@ 0x1df
 800c272:	492b      	ldr	r1, [pc, #172]	@ (800c320 <pbuf_add_header_impl+0xc8>)
 800c274:	482b      	ldr	r0, [pc, #172]	@ (800c324 <pbuf_add_header_impl+0xcc>)
 800c276:	f008 fcf5 	bl	8014c64 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d003      	beq.n	800c288 <pbuf_add_header_impl+0x30>
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c286:	d301      	bcc.n	800c28c <pbuf_add_header_impl+0x34>
    return 1;
 800c288:	2301      	movs	r3, #1
 800c28a:	e043      	b.n	800c314 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d101      	bne.n	800c296 <pbuf_add_header_impl+0x3e>
    return 0;
 800c292:	2300      	movs	r3, #0
 800c294:	e03e      	b.n	800c314 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	891a      	ldrh	r2, [r3, #8]
 800c29e:	8a7b      	ldrh	r3, [r7, #18]
 800c2a0:	4413      	add	r3, r2
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	8a7a      	ldrh	r2, [r7, #18]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d901      	bls.n	800c2ae <pbuf_add_header_impl+0x56>
    return 1;
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	e032      	b.n	800c314 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	7b1b      	ldrb	r3, [r3, #12]
 800c2b2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c2b4:	8a3b      	ldrh	r3, [r7, #16]
 800c2b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d00c      	beq.n	800c2d8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	685a      	ldr	r2, [r3, #4]
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	425b      	negs	r3, r3
 800c2c6:	4413      	add	r3, r2
 800c2c8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	3310      	adds	r3, #16
 800c2ce:	697a      	ldr	r2, [r7, #20]
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d20d      	bcs.n	800c2f0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	e01d      	b.n	800c314 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c2d8:	79fb      	ldrb	r3, [r7, #7]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d006      	beq.n	800c2ec <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	685a      	ldr	r2, [r3, #4]
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	425b      	negs	r3, r3
 800c2e6:	4413      	add	r3, r2
 800c2e8:	617b      	str	r3, [r7, #20]
 800c2ea:	e001      	b.n	800c2f0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	e011      	b.n	800c314 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	697a      	ldr	r2, [r7, #20]
 800c2f4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	895a      	ldrh	r2, [r3, #10]
 800c2fa:	8a7b      	ldrh	r3, [r7, #18]
 800c2fc:	4413      	add	r3, r2
 800c2fe:	b29a      	uxth	r2, r3
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	891a      	ldrh	r2, [r3, #8]
 800c308:	8a7b      	ldrh	r3, [r7, #18]
 800c30a:	4413      	add	r3, r2
 800c30c:	b29a      	uxth	r2, r3
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	811a      	strh	r2, [r3, #8]


  return 0;
 800c312:	2300      	movs	r3, #0
}
 800c314:	4618      	mov	r0, r3
 800c316:	3718      	adds	r7, #24
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}
 800c31c:	080161fc 	.word	0x080161fc
 800c320:	08016360 	.word	0x08016360
 800c324:	0801625c 	.word	0x0801625c

0800c328 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b082      	sub	sp, #8
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c332:	2200      	movs	r2, #0
 800c334:	6839      	ldr	r1, [r7, #0]
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f7ff ff8e 	bl	800c258 <pbuf_add_header_impl>
 800c33c:	4603      	mov	r3, r0
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3708      	adds	r7, #8
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
	...

0800c348 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b084      	sub	sp, #16
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d106      	bne.n	800c366 <pbuf_remove_header+0x1e>
 800c358:	4b20      	ldr	r3, [pc, #128]	@ (800c3dc <pbuf_remove_header+0x94>)
 800c35a:	f240 224b 	movw	r2, #587	@ 0x24b
 800c35e:	4920      	ldr	r1, [pc, #128]	@ (800c3e0 <pbuf_remove_header+0x98>)
 800c360:	4820      	ldr	r0, [pc, #128]	@ (800c3e4 <pbuf_remove_header+0x9c>)
 800c362:	f008 fc7f 	bl	8014c64 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d003      	beq.n	800c374 <pbuf_remove_header+0x2c>
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c372:	d301      	bcc.n	800c378 <pbuf_remove_header+0x30>
    return 1;
 800c374:	2301      	movs	r3, #1
 800c376:	e02c      	b.n	800c3d2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d101      	bne.n	800c382 <pbuf_remove_header+0x3a>
    return 0;
 800c37e:	2300      	movs	r3, #0
 800c380:	e027      	b.n	800c3d2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	895b      	ldrh	r3, [r3, #10]
 800c38a:	89fa      	ldrh	r2, [r7, #14]
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d908      	bls.n	800c3a2 <pbuf_remove_header+0x5a>
 800c390:	4b12      	ldr	r3, [pc, #72]	@ (800c3dc <pbuf_remove_header+0x94>)
 800c392:	f240 2255 	movw	r2, #597	@ 0x255
 800c396:	4914      	ldr	r1, [pc, #80]	@ (800c3e8 <pbuf_remove_header+0xa0>)
 800c398:	4812      	ldr	r0, [pc, #72]	@ (800c3e4 <pbuf_remove_header+0x9c>)
 800c39a:	f008 fc63 	bl	8014c64 <iprintf>
 800c39e:	2301      	movs	r3, #1
 800c3a0:	e017      	b.n	800c3d2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	685b      	ldr	r3, [r3, #4]
 800c3a6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	685a      	ldr	r2, [r3, #4]
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	441a      	add	r2, r3
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	895a      	ldrh	r2, [r3, #10]
 800c3b8:	89fb      	ldrh	r3, [r7, #14]
 800c3ba:	1ad3      	subs	r3, r2, r3
 800c3bc:	b29a      	uxth	r2, r3
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	891a      	ldrh	r2, [r3, #8]
 800c3c6:	89fb      	ldrh	r3, [r7, #14]
 800c3c8:	1ad3      	subs	r3, r2, r3
 800c3ca:	b29a      	uxth	r2, r3
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c3d0:	2300      	movs	r3, #0
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3710      	adds	r7, #16
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}
 800c3da:	bf00      	nop
 800c3dc:	080161fc 	.word	0x080161fc
 800c3e0:	08016360 	.word	0x08016360
 800c3e4:	0801625c 	.word	0x0801625c
 800c3e8:	0801636c 	.word	0x0801636c

0800c3ec <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b082      	sub	sp, #8
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	807b      	strh	r3, [r7, #2]
 800c3f8:	4613      	mov	r3, r2
 800c3fa:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c3fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c400:	2b00      	cmp	r3, #0
 800c402:	da08      	bge.n	800c416 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c404:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c408:	425b      	negs	r3, r3
 800c40a:	4619      	mov	r1, r3
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f7ff ff9b 	bl	800c348 <pbuf_remove_header>
 800c412:	4603      	mov	r3, r0
 800c414:	e007      	b.n	800c426 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c416:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c41a:	787a      	ldrb	r2, [r7, #1]
 800c41c:	4619      	mov	r1, r3
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f7ff ff1a 	bl	800c258 <pbuf_add_header_impl>
 800c424:	4603      	mov	r3, r0
  }
}
 800c426:	4618      	mov	r0, r3
 800c428:	3708      	adds	r7, #8
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}

0800c42e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c42e:	b580      	push	{r7, lr}
 800c430:	b082      	sub	sp, #8
 800c432:	af00      	add	r7, sp, #0
 800c434:	6078      	str	r0, [r7, #4]
 800c436:	460b      	mov	r3, r1
 800c438:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c43a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c43e:	2201      	movs	r2, #1
 800c440:	4619      	mov	r1, r3
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f7ff ffd2 	bl	800c3ec <pbuf_header_impl>
 800c448:	4603      	mov	r3, r0
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3708      	adds	r7, #8
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
	...

0800c454 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b088      	sub	sp, #32
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d10b      	bne.n	800c47a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d106      	bne.n	800c476 <pbuf_free+0x22>
 800c468:	4b3b      	ldr	r3, [pc, #236]	@ (800c558 <pbuf_free+0x104>)
 800c46a:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800c46e:	493b      	ldr	r1, [pc, #236]	@ (800c55c <pbuf_free+0x108>)
 800c470:	483b      	ldr	r0, [pc, #236]	@ (800c560 <pbuf_free+0x10c>)
 800c472:	f008 fbf7 	bl	8014c64 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c476:	2300      	movs	r3, #0
 800c478:	e069      	b.n	800c54e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c47a:	2300      	movs	r3, #0
 800c47c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c47e:	e062      	b.n	800c546 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c480:	f008 fad2 	bl	8014a28 <sys_arch_protect>
 800c484:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	7b9b      	ldrb	r3, [r3, #14]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d106      	bne.n	800c49c <pbuf_free+0x48>
 800c48e:	4b32      	ldr	r3, [pc, #200]	@ (800c558 <pbuf_free+0x104>)
 800c490:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800c494:	4933      	ldr	r1, [pc, #204]	@ (800c564 <pbuf_free+0x110>)
 800c496:	4832      	ldr	r0, [pc, #200]	@ (800c560 <pbuf_free+0x10c>)
 800c498:	f008 fbe4 	bl	8014c64 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	7b9b      	ldrb	r3, [r3, #14]
 800c4a0:	3b01      	subs	r3, #1
 800c4a2:	b2da      	uxtb	r2, r3
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	739a      	strb	r2, [r3, #14]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	7b9b      	ldrb	r3, [r3, #14]
 800c4ac:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800c4ae:	69b8      	ldr	r0, [r7, #24]
 800c4b0:	f008 fac8 	bl	8014a44 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c4b4:	7dfb      	ldrb	r3, [r7, #23]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d143      	bne.n	800c542 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	7b1b      	ldrb	r3, [r3, #12]
 800c4c4:	f003 030f 	and.w	r3, r3, #15
 800c4c8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	7b5b      	ldrb	r3, [r3, #13]
 800c4ce:	f003 0302 	and.w	r3, r3, #2
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d011      	beq.n	800c4fa <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	691b      	ldr	r3, [r3, #16]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d106      	bne.n	800c4f0 <pbuf_free+0x9c>
 800c4e2:	4b1d      	ldr	r3, [pc, #116]	@ (800c558 <pbuf_free+0x104>)
 800c4e4:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800c4e8:	491f      	ldr	r1, [pc, #124]	@ (800c568 <pbuf_free+0x114>)
 800c4ea:	481d      	ldr	r0, [pc, #116]	@ (800c560 <pbuf_free+0x10c>)
 800c4ec:	f008 fbba 	bl	8014c64 <iprintf>
        pc->custom_free_function(p);
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	691b      	ldr	r3, [r3, #16]
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	4798      	blx	r3
 800c4f8:	e01d      	b.n	800c536 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c4fa:	7bfb      	ldrb	r3, [r7, #15]
 800c4fc:	2b02      	cmp	r3, #2
 800c4fe:	d104      	bne.n	800c50a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800c500:	6879      	ldr	r1, [r7, #4]
 800c502:	200c      	movs	r0, #12
 800c504:	f7ff f8fe 	bl	800b704 <memp_free>
 800c508:	e015      	b.n	800c536 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c50a:	7bfb      	ldrb	r3, [r7, #15]
 800c50c:	2b01      	cmp	r3, #1
 800c50e:	d104      	bne.n	800c51a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800c510:	6879      	ldr	r1, [r7, #4]
 800c512:	200b      	movs	r0, #11
 800c514:	f7ff f8f6 	bl	800b704 <memp_free>
 800c518:	e00d      	b.n	800c536 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c51a:	7bfb      	ldrb	r3, [r7, #15]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d103      	bne.n	800c528 <pbuf_free+0xd4>
          mem_free(p);
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f7fe fd31 	bl	800af88 <mem_free>
 800c526:	e006      	b.n	800c536 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c528:	4b0b      	ldr	r3, [pc, #44]	@ (800c558 <pbuf_free+0x104>)
 800c52a:	f240 320f 	movw	r2, #783	@ 0x30f
 800c52e:	490f      	ldr	r1, [pc, #60]	@ (800c56c <pbuf_free+0x118>)
 800c530:	480b      	ldr	r0, [pc, #44]	@ (800c560 <pbuf_free+0x10c>)
 800c532:	f008 fb97 	bl	8014c64 <iprintf>
        }
      }
      count++;
 800c536:	7ffb      	ldrb	r3, [r7, #31]
 800c538:	3301      	adds	r3, #1
 800c53a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c53c:	693b      	ldr	r3, [r7, #16]
 800c53e:	607b      	str	r3, [r7, #4]
 800c540:	e001      	b.n	800c546 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c542:	2300      	movs	r3, #0
 800c544:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d199      	bne.n	800c480 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c54c:	7ffb      	ldrb	r3, [r7, #31]
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3720      	adds	r7, #32
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}
 800c556:	bf00      	nop
 800c558:	080161fc 	.word	0x080161fc
 800c55c:	08016360 	.word	0x08016360
 800c560:	0801625c 	.word	0x0801625c
 800c564:	0801638c 	.word	0x0801638c
 800c568:	080163a4 	.word	0x080163a4
 800c56c:	080163c8 	.word	0x080163c8

0800c570 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c570:	b480      	push	{r7}
 800c572:	b085      	sub	sp, #20
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c578:	2300      	movs	r3, #0
 800c57a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c57c:	e005      	b.n	800c58a <pbuf_clen+0x1a>
    ++len;
 800c57e:	89fb      	ldrh	r3, [r7, #14]
 800c580:	3301      	adds	r3, #1
 800c582:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d1f6      	bne.n	800c57e <pbuf_clen+0xe>
  }
  return len;
 800c590:	89fb      	ldrh	r3, [r7, #14]
}
 800c592:	4618      	mov	r0, r3
 800c594:	3714      	adds	r7, #20
 800c596:	46bd      	mov	sp, r7
 800c598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59c:	4770      	bx	lr
	...

0800c5a0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b084      	sub	sp, #16
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d016      	beq.n	800c5dc <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c5ae:	f008 fa3b 	bl	8014a28 <sys_arch_protect>
 800c5b2:	60f8      	str	r0, [r7, #12]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	7b9b      	ldrb	r3, [r3, #14]
 800c5b8:	3301      	adds	r3, #1
 800c5ba:	b2da      	uxtb	r2, r3
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	739a      	strb	r2, [r3, #14]
 800c5c0:	68f8      	ldr	r0, [r7, #12]
 800c5c2:	f008 fa3f 	bl	8014a44 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	7b9b      	ldrb	r3, [r3, #14]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d106      	bne.n	800c5dc <pbuf_ref+0x3c>
 800c5ce:	4b05      	ldr	r3, [pc, #20]	@ (800c5e4 <pbuf_ref+0x44>)
 800c5d0:	f240 3242 	movw	r2, #834	@ 0x342
 800c5d4:	4904      	ldr	r1, [pc, #16]	@ (800c5e8 <pbuf_ref+0x48>)
 800c5d6:	4805      	ldr	r0, [pc, #20]	@ (800c5ec <pbuf_ref+0x4c>)
 800c5d8:	f008 fb44 	bl	8014c64 <iprintf>
  }
}
 800c5dc:	bf00      	nop
 800c5de:	3710      	adds	r7, #16
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}
 800c5e4:	080161fc 	.word	0x080161fc
 800c5e8:	080163dc 	.word	0x080163dc
 800c5ec:	0801625c 	.word	0x0801625c

0800c5f0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b084      	sub	sp, #16
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d002      	beq.n	800c606 <pbuf_cat+0x16>
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d107      	bne.n	800c616 <pbuf_cat+0x26>
 800c606:	4b20      	ldr	r3, [pc, #128]	@ (800c688 <pbuf_cat+0x98>)
 800c608:	f240 3259 	movw	r2, #857	@ 0x359
 800c60c:	491f      	ldr	r1, [pc, #124]	@ (800c68c <pbuf_cat+0x9c>)
 800c60e:	4820      	ldr	r0, [pc, #128]	@ (800c690 <pbuf_cat+0xa0>)
 800c610:	f008 fb28 	bl	8014c64 <iprintf>
 800c614:	e034      	b.n	800c680 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	60fb      	str	r3, [r7, #12]
 800c61a:	e00a      	b.n	800c632 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	891a      	ldrh	r2, [r3, #8]
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	891b      	ldrh	r3, [r3, #8]
 800c624:	4413      	add	r3, r2
 800c626:	b29a      	uxth	r2, r3
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	60fb      	str	r3, [r7, #12]
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d1f0      	bne.n	800c61c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	891a      	ldrh	r2, [r3, #8]
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	895b      	ldrh	r3, [r3, #10]
 800c642:	429a      	cmp	r2, r3
 800c644:	d006      	beq.n	800c654 <pbuf_cat+0x64>
 800c646:	4b10      	ldr	r3, [pc, #64]	@ (800c688 <pbuf_cat+0x98>)
 800c648:	f240 3262 	movw	r2, #866	@ 0x362
 800c64c:	4911      	ldr	r1, [pc, #68]	@ (800c694 <pbuf_cat+0xa4>)
 800c64e:	4810      	ldr	r0, [pc, #64]	@ (800c690 <pbuf_cat+0xa0>)
 800c650:	f008 fb08 	bl	8014c64 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d006      	beq.n	800c66a <pbuf_cat+0x7a>
 800c65c:	4b0a      	ldr	r3, [pc, #40]	@ (800c688 <pbuf_cat+0x98>)
 800c65e:	f240 3263 	movw	r2, #867	@ 0x363
 800c662:	490d      	ldr	r1, [pc, #52]	@ (800c698 <pbuf_cat+0xa8>)
 800c664:	480a      	ldr	r0, [pc, #40]	@ (800c690 <pbuf_cat+0xa0>)
 800c666:	f008 fafd 	bl	8014c64 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	891a      	ldrh	r2, [r3, #8]
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	891b      	ldrh	r3, [r3, #8]
 800c672:	4413      	add	r3, r2
 800c674:	b29a      	uxth	r2, r3
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	683a      	ldr	r2, [r7, #0]
 800c67e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c680:	3710      	adds	r7, #16
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
 800c686:	bf00      	nop
 800c688:	080161fc 	.word	0x080161fc
 800c68c:	080163f0 	.word	0x080163f0
 800c690:	0801625c 	.word	0x0801625c
 800c694:	08016428 	.word	0x08016428
 800c698:	08016458 	.word	0x08016458

0800c69c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b086      	sub	sp, #24
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	617b      	str	r3, [r7, #20]
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d008      	beq.n	800c6c6 <pbuf_copy+0x2a>
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d005      	beq.n	800c6c6 <pbuf_copy+0x2a>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	891a      	ldrh	r2, [r3, #8]
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	891b      	ldrh	r3, [r3, #8]
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d209      	bcs.n	800c6da <pbuf_copy+0x3e>
 800c6c6:	4b57      	ldr	r3, [pc, #348]	@ (800c824 <pbuf_copy+0x188>)
 800c6c8:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800c6cc:	4956      	ldr	r1, [pc, #344]	@ (800c828 <pbuf_copy+0x18c>)
 800c6ce:	4857      	ldr	r0, [pc, #348]	@ (800c82c <pbuf_copy+0x190>)
 800c6d0:	f008 fac8 	bl	8014c64 <iprintf>
 800c6d4:	f06f 030f 	mvn.w	r3, #15
 800c6d8:	e09f      	b.n	800c81a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	895b      	ldrh	r3, [r3, #10]
 800c6de:	461a      	mov	r2, r3
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	1ad2      	subs	r2, r2, r3
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	895b      	ldrh	r3, [r3, #10]
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	1acb      	subs	r3, r1, r3
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	d306      	bcc.n	800c700 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	895b      	ldrh	r3, [r3, #10]
 800c6f6:	461a      	mov	r2, r3
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	1ad3      	subs	r3, r2, r3
 800c6fc:	60fb      	str	r3, [r7, #12]
 800c6fe:	e005      	b.n	800c70c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	895b      	ldrh	r3, [r3, #10]
 800c704:	461a      	mov	r2, r3
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	1ad3      	subs	r3, r2, r3
 800c70a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	685a      	ldr	r2, [r3, #4]
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	18d0      	adds	r0, r2, r3
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	685a      	ldr	r2, [r3, #4]
 800c718:	693b      	ldr	r3, [r7, #16]
 800c71a:	4413      	add	r3, r2
 800c71c:	68fa      	ldr	r2, [r7, #12]
 800c71e:	4619      	mov	r1, r3
 800c720:	f008 fb7b 	bl	8014e1a <memcpy>
    offset_to += len;
 800c724:	697a      	ldr	r2, [r7, #20]
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	4413      	add	r3, r2
 800c72a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c72c:	693a      	ldr	r2, [r7, #16]
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	4413      	add	r3, r2
 800c732:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	895b      	ldrh	r3, [r3, #10]
 800c738:	461a      	mov	r2, r3
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d906      	bls.n	800c74e <pbuf_copy+0xb2>
 800c740:	4b38      	ldr	r3, [pc, #224]	@ (800c824 <pbuf_copy+0x188>)
 800c742:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800c746:	493a      	ldr	r1, [pc, #232]	@ (800c830 <pbuf_copy+0x194>)
 800c748:	4838      	ldr	r0, [pc, #224]	@ (800c82c <pbuf_copy+0x190>)
 800c74a:	f008 fa8b 	bl	8014c64 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	895b      	ldrh	r3, [r3, #10]
 800c752:	461a      	mov	r2, r3
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	4293      	cmp	r3, r2
 800c758:	d906      	bls.n	800c768 <pbuf_copy+0xcc>
 800c75a:	4b32      	ldr	r3, [pc, #200]	@ (800c824 <pbuf_copy+0x188>)
 800c75c:	f240 32da 	movw	r2, #986	@ 0x3da
 800c760:	4934      	ldr	r1, [pc, #208]	@ (800c834 <pbuf_copy+0x198>)
 800c762:	4832      	ldr	r0, [pc, #200]	@ (800c82c <pbuf_copy+0x190>)
 800c764:	f008 fa7e 	bl	8014c64 <iprintf>
    if (offset_from >= p_from->len) {
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	895b      	ldrh	r3, [r3, #10]
 800c76c:	461a      	mov	r2, r3
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	4293      	cmp	r3, r2
 800c772:	d304      	bcc.n	800c77e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c774:	2300      	movs	r3, #0
 800c776:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	895b      	ldrh	r3, [r3, #10]
 800c782:	461a      	mov	r2, r3
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	4293      	cmp	r3, r2
 800c788:	d114      	bne.n	800c7b4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c78a:	2300      	movs	r3, #0
 800c78c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d10c      	bne.n	800c7b4 <pbuf_copy+0x118>
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d009      	beq.n	800c7b4 <pbuf_copy+0x118>
 800c7a0:	4b20      	ldr	r3, [pc, #128]	@ (800c824 <pbuf_copy+0x188>)
 800c7a2:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800c7a6:	4924      	ldr	r1, [pc, #144]	@ (800c838 <pbuf_copy+0x19c>)
 800c7a8:	4820      	ldr	r0, [pc, #128]	@ (800c82c <pbuf_copy+0x190>)
 800c7aa:	f008 fa5b 	bl	8014c64 <iprintf>
 800c7ae:	f06f 030f 	mvn.w	r3, #15
 800c7b2:	e032      	b.n	800c81a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d013      	beq.n	800c7e2 <pbuf_copy+0x146>
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	895a      	ldrh	r2, [r3, #10]
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	891b      	ldrh	r3, [r3, #8]
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d10d      	bne.n	800c7e2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d009      	beq.n	800c7e2 <pbuf_copy+0x146>
 800c7ce:	4b15      	ldr	r3, [pc, #84]	@ (800c824 <pbuf_copy+0x188>)
 800c7d0:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800c7d4:	4919      	ldr	r1, [pc, #100]	@ (800c83c <pbuf_copy+0x1a0>)
 800c7d6:	4815      	ldr	r0, [pc, #84]	@ (800c82c <pbuf_copy+0x190>)
 800c7d8:	f008 fa44 	bl	8014c64 <iprintf>
 800c7dc:	f06f 0305 	mvn.w	r3, #5
 800c7e0:	e01b      	b.n	800c81a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d013      	beq.n	800c810 <pbuf_copy+0x174>
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	895a      	ldrh	r2, [r3, #10]
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	891b      	ldrh	r3, [r3, #8]
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d10d      	bne.n	800c810 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d009      	beq.n	800c810 <pbuf_copy+0x174>
 800c7fc:	4b09      	ldr	r3, [pc, #36]	@ (800c824 <pbuf_copy+0x188>)
 800c7fe:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800c802:	490e      	ldr	r1, [pc, #56]	@ (800c83c <pbuf_copy+0x1a0>)
 800c804:	4809      	ldr	r0, [pc, #36]	@ (800c82c <pbuf_copy+0x190>)
 800c806:	f008 fa2d 	bl	8014c64 <iprintf>
 800c80a:	f06f 0305 	mvn.w	r3, #5
 800c80e:	e004      	b.n	800c81a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	2b00      	cmp	r3, #0
 800c814:	f47f af61 	bne.w	800c6da <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c818:	2300      	movs	r3, #0
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3718      	adds	r7, #24
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}
 800c822:	bf00      	nop
 800c824:	080161fc 	.word	0x080161fc
 800c828:	080164a4 	.word	0x080164a4
 800c82c:	0801625c 	.word	0x0801625c
 800c830:	080164d4 	.word	0x080164d4
 800c834:	080164ec 	.word	0x080164ec
 800c838:	08016508 	.word	0x08016508
 800c83c:	08016518 	.word	0x08016518

0800c840 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b088      	sub	sp, #32
 800c844:	af00      	add	r7, sp, #0
 800c846:	60f8      	str	r0, [r7, #12]
 800c848:	60b9      	str	r1, [r7, #8]
 800c84a:	4611      	mov	r1, r2
 800c84c:	461a      	mov	r2, r3
 800c84e:	460b      	mov	r3, r1
 800c850:	80fb      	strh	r3, [r7, #6]
 800c852:	4613      	mov	r3, r2
 800c854:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c856:	2300      	movs	r3, #0
 800c858:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c85a:	2300      	movs	r3, #0
 800c85c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d108      	bne.n	800c876 <pbuf_copy_partial+0x36>
 800c864:	4b2b      	ldr	r3, [pc, #172]	@ (800c914 <pbuf_copy_partial+0xd4>)
 800c866:	f240 420a 	movw	r2, #1034	@ 0x40a
 800c86a:	492b      	ldr	r1, [pc, #172]	@ (800c918 <pbuf_copy_partial+0xd8>)
 800c86c:	482b      	ldr	r0, [pc, #172]	@ (800c91c <pbuf_copy_partial+0xdc>)
 800c86e:	f008 f9f9 	bl	8014c64 <iprintf>
 800c872:	2300      	movs	r3, #0
 800c874:	e04a      	b.n	800c90c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d108      	bne.n	800c88e <pbuf_copy_partial+0x4e>
 800c87c:	4b25      	ldr	r3, [pc, #148]	@ (800c914 <pbuf_copy_partial+0xd4>)
 800c87e:	f240 420b 	movw	r2, #1035	@ 0x40b
 800c882:	4927      	ldr	r1, [pc, #156]	@ (800c920 <pbuf_copy_partial+0xe0>)
 800c884:	4825      	ldr	r0, [pc, #148]	@ (800c91c <pbuf_copy_partial+0xdc>)
 800c886:	f008 f9ed 	bl	8014c64 <iprintf>
 800c88a:	2300      	movs	r3, #0
 800c88c:	e03e      	b.n	800c90c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	61fb      	str	r3, [r7, #28]
 800c892:	e034      	b.n	800c8fe <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c894:	88bb      	ldrh	r3, [r7, #4]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d00a      	beq.n	800c8b0 <pbuf_copy_partial+0x70>
 800c89a:	69fb      	ldr	r3, [r7, #28]
 800c89c:	895b      	ldrh	r3, [r3, #10]
 800c89e:	88ba      	ldrh	r2, [r7, #4]
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d305      	bcc.n	800c8b0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c8a4:	69fb      	ldr	r3, [r7, #28]
 800c8a6:	895b      	ldrh	r3, [r3, #10]
 800c8a8:	88ba      	ldrh	r2, [r7, #4]
 800c8aa:	1ad3      	subs	r3, r2, r3
 800c8ac:	80bb      	strh	r3, [r7, #4]
 800c8ae:	e023      	b.n	800c8f8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c8b0:	69fb      	ldr	r3, [r7, #28]
 800c8b2:	895a      	ldrh	r2, [r3, #10]
 800c8b4:	88bb      	ldrh	r3, [r7, #4]
 800c8b6:	1ad3      	subs	r3, r2, r3
 800c8b8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c8ba:	8b3a      	ldrh	r2, [r7, #24]
 800c8bc:	88fb      	ldrh	r3, [r7, #6]
 800c8be:	429a      	cmp	r2, r3
 800c8c0:	d901      	bls.n	800c8c6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c8c2:	88fb      	ldrh	r3, [r7, #6]
 800c8c4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c8c6:	8b7b      	ldrh	r3, [r7, #26]
 800c8c8:	68ba      	ldr	r2, [r7, #8]
 800c8ca:	18d0      	adds	r0, r2, r3
 800c8cc:	69fb      	ldr	r3, [r7, #28]
 800c8ce:	685a      	ldr	r2, [r3, #4]
 800c8d0:	88bb      	ldrh	r3, [r7, #4]
 800c8d2:	4413      	add	r3, r2
 800c8d4:	8b3a      	ldrh	r2, [r7, #24]
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	f008 fa9f 	bl	8014e1a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c8dc:	8afa      	ldrh	r2, [r7, #22]
 800c8de:	8b3b      	ldrh	r3, [r7, #24]
 800c8e0:	4413      	add	r3, r2
 800c8e2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c8e4:	8b7a      	ldrh	r2, [r7, #26]
 800c8e6:	8b3b      	ldrh	r3, [r7, #24]
 800c8e8:	4413      	add	r3, r2
 800c8ea:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c8ec:	88fa      	ldrh	r2, [r7, #6]
 800c8ee:	8b3b      	ldrh	r3, [r7, #24]
 800c8f0:	1ad3      	subs	r3, r2, r3
 800c8f2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c8f8:	69fb      	ldr	r3, [r7, #28]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	61fb      	str	r3, [r7, #28]
 800c8fe:	88fb      	ldrh	r3, [r7, #6]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d002      	beq.n	800c90a <pbuf_copy_partial+0xca>
 800c904:	69fb      	ldr	r3, [r7, #28]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d1c4      	bne.n	800c894 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c90a:	8afb      	ldrh	r3, [r7, #22]
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	3720      	adds	r7, #32
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}
 800c914:	080161fc 	.word	0x080161fc
 800c918:	08016544 	.word	0x08016544
 800c91c:	0801625c 	.word	0x0801625c
 800c920:	08016564 	.word	0x08016564

0800c924 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	af00      	add	r7, sp, #0
 800c92a:	4603      	mov	r3, r0
 800c92c:	603a      	str	r2, [r7, #0]
 800c92e:	71fb      	strb	r3, [r7, #7]
 800c930:	460b      	mov	r3, r1
 800c932:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	8919      	ldrh	r1, [r3, #8]
 800c938:	88ba      	ldrh	r2, [r7, #4]
 800c93a:	79fb      	ldrb	r3, [r7, #7]
 800c93c:	4618      	mov	r0, r3
 800c93e:	f7ff faa1 	bl	800be84 <pbuf_alloc>
 800c942:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d101      	bne.n	800c94e <pbuf_clone+0x2a>
    return NULL;
 800c94a:	2300      	movs	r3, #0
 800c94c:	e011      	b.n	800c972 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c94e:	6839      	ldr	r1, [r7, #0]
 800c950:	68f8      	ldr	r0, [r7, #12]
 800c952:	f7ff fea3 	bl	800c69c <pbuf_copy>
 800c956:	4603      	mov	r3, r0
 800c958:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c95a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d006      	beq.n	800c970 <pbuf_clone+0x4c>
 800c962:	4b06      	ldr	r3, [pc, #24]	@ (800c97c <pbuf_clone+0x58>)
 800c964:	f240 5224 	movw	r2, #1316	@ 0x524
 800c968:	4905      	ldr	r1, [pc, #20]	@ (800c980 <pbuf_clone+0x5c>)
 800c96a:	4806      	ldr	r0, [pc, #24]	@ (800c984 <pbuf_clone+0x60>)
 800c96c:	f008 f97a 	bl	8014c64 <iprintf>
  return q;
 800c970:	68fb      	ldr	r3, [r7, #12]
}
 800c972:	4618      	mov	r0, r3
 800c974:	3710      	adds	r7, #16
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop
 800c97c:	080161fc 	.word	0x080161fc
 800c980:	08016670 	.word	0x08016670
 800c984:	0801625c 	.word	0x0801625c

0800c988 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c98c:	f008 f86a 	bl	8014a64 <rand>
 800c990:	4603      	mov	r3, r0
 800c992:	b29b      	uxth	r3, r3
 800c994:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c998:	b29b      	uxth	r3, r3
 800c99a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800c99e:	b29a      	uxth	r2, r3
 800c9a0:	4b01      	ldr	r3, [pc, #4]	@ (800c9a8 <tcp_init+0x20>)
 800c9a2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c9a4:	bf00      	nop
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	20000024 	.word	0x20000024

0800c9ac <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b082      	sub	sp, #8
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	7d1b      	ldrb	r3, [r3, #20]
 800c9b8:	2b01      	cmp	r3, #1
 800c9ba:	d105      	bne.n	800c9c8 <tcp_free+0x1c>
 800c9bc:	4b06      	ldr	r3, [pc, #24]	@ (800c9d8 <tcp_free+0x2c>)
 800c9be:	22d4      	movs	r2, #212	@ 0xd4
 800c9c0:	4906      	ldr	r1, [pc, #24]	@ (800c9dc <tcp_free+0x30>)
 800c9c2:	4807      	ldr	r0, [pc, #28]	@ (800c9e0 <tcp_free+0x34>)
 800c9c4:	f008 f94e 	bl	8014c64 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c9c8:	6879      	ldr	r1, [r7, #4]
 800c9ca:	2001      	movs	r0, #1
 800c9cc:	f7fe fe9a 	bl	800b704 <memp_free>
}
 800c9d0:	bf00      	nop
 800c9d2:	3708      	adds	r7, #8
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}
 800c9d8:	080166fc 	.word	0x080166fc
 800c9dc:	0801672c 	.word	0x0801672c
 800c9e0:	08016740 	.word	0x08016740

0800c9e4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b082      	sub	sp, #8
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	7d1b      	ldrb	r3, [r3, #20]
 800c9f0:	2b01      	cmp	r3, #1
 800c9f2:	d105      	bne.n	800ca00 <tcp_free_listen+0x1c>
 800c9f4:	4b06      	ldr	r3, [pc, #24]	@ (800ca10 <tcp_free_listen+0x2c>)
 800c9f6:	22df      	movs	r2, #223	@ 0xdf
 800c9f8:	4906      	ldr	r1, [pc, #24]	@ (800ca14 <tcp_free_listen+0x30>)
 800c9fa:	4807      	ldr	r0, [pc, #28]	@ (800ca18 <tcp_free_listen+0x34>)
 800c9fc:	f008 f932 	bl	8014c64 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ca00:	6879      	ldr	r1, [r7, #4]
 800ca02:	2002      	movs	r0, #2
 800ca04:	f7fe fe7e 	bl	800b704 <memp_free>
}
 800ca08:	bf00      	nop
 800ca0a:	3708      	adds	r7, #8
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}
 800ca10:	080166fc 	.word	0x080166fc
 800ca14:	08016768 	.word	0x08016768
 800ca18:	08016740 	.word	0x08016740

0800ca1c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ca20:	f000 fea6 	bl	800d770 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ca24:	4b07      	ldr	r3, [pc, #28]	@ (800ca44 <tcp_tmr+0x28>)
 800ca26:	781b      	ldrb	r3, [r3, #0]
 800ca28:	3301      	adds	r3, #1
 800ca2a:	b2da      	uxtb	r2, r3
 800ca2c:	4b05      	ldr	r3, [pc, #20]	@ (800ca44 <tcp_tmr+0x28>)
 800ca2e:	701a      	strb	r2, [r3, #0]
 800ca30:	4b04      	ldr	r3, [pc, #16]	@ (800ca44 <tcp_tmr+0x28>)
 800ca32:	781b      	ldrb	r3, [r3, #0]
 800ca34:	f003 0301 	and.w	r3, r3, #1
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d001      	beq.n	800ca40 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ca3c:	f000 fb56 	bl	800d0ec <tcp_slowtmr>
  }
}
 800ca40:	bf00      	nop
 800ca42:	bd80      	pop	{r7, pc}
 800ca44:	20010321 	.word	0x20010321

0800ca48 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b084      	sub	sp, #16
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
 800ca50:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d105      	bne.n	800ca64 <tcp_remove_listener+0x1c>
 800ca58:	4b0d      	ldr	r3, [pc, #52]	@ (800ca90 <tcp_remove_listener+0x48>)
 800ca5a:	22ff      	movs	r2, #255	@ 0xff
 800ca5c:	490d      	ldr	r1, [pc, #52]	@ (800ca94 <tcp_remove_listener+0x4c>)
 800ca5e:	480e      	ldr	r0, [pc, #56]	@ (800ca98 <tcp_remove_listener+0x50>)
 800ca60:	f008 f900 	bl	8014c64 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	60fb      	str	r3, [r7, #12]
 800ca68:	e00a      	b.n	800ca80 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ca6e:	683a      	ldr	r2, [r7, #0]
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d102      	bne.n	800ca7a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2200      	movs	r2, #0
 800ca78:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	68db      	ldr	r3, [r3, #12]
 800ca7e:	60fb      	str	r3, [r7, #12]
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d1f1      	bne.n	800ca6a <tcp_remove_listener+0x22>
    }
  }
}
 800ca86:	bf00      	nop
 800ca88:	bf00      	nop
 800ca8a:	3710      	adds	r7, #16
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}
 800ca90:	080166fc 	.word	0x080166fc
 800ca94:	08016784 	.word	0x08016784
 800ca98:	08016740 	.word	0x08016740

0800ca9c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b084      	sub	sp, #16
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d106      	bne.n	800cab8 <tcp_listen_closed+0x1c>
 800caaa:	4b14      	ldr	r3, [pc, #80]	@ (800cafc <tcp_listen_closed+0x60>)
 800caac:	f240 1211 	movw	r2, #273	@ 0x111
 800cab0:	4913      	ldr	r1, [pc, #76]	@ (800cb00 <tcp_listen_closed+0x64>)
 800cab2:	4814      	ldr	r0, [pc, #80]	@ (800cb04 <tcp_listen_closed+0x68>)
 800cab4:	f008 f8d6 	bl	8014c64 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	7d1b      	ldrb	r3, [r3, #20]
 800cabc:	2b01      	cmp	r3, #1
 800cabe:	d006      	beq.n	800cace <tcp_listen_closed+0x32>
 800cac0:	4b0e      	ldr	r3, [pc, #56]	@ (800cafc <tcp_listen_closed+0x60>)
 800cac2:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800cac6:	4910      	ldr	r1, [pc, #64]	@ (800cb08 <tcp_listen_closed+0x6c>)
 800cac8:	480e      	ldr	r0, [pc, #56]	@ (800cb04 <tcp_listen_closed+0x68>)
 800caca:	f008 f8cb 	bl	8014c64 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cace:	2301      	movs	r3, #1
 800cad0:	60fb      	str	r3, [r7, #12]
 800cad2:	e00b      	b.n	800caec <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800cad4:	4a0d      	ldr	r2, [pc, #52]	@ (800cb0c <tcp_listen_closed+0x70>)
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	6879      	ldr	r1, [r7, #4]
 800cae0:	4618      	mov	r0, r3
 800cae2:	f7ff ffb1 	bl	800ca48 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	3301      	adds	r3, #1
 800caea:	60fb      	str	r3, [r7, #12]
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	2b03      	cmp	r3, #3
 800caf0:	d9f0      	bls.n	800cad4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800caf2:	bf00      	nop
 800caf4:	bf00      	nop
 800caf6:	3710      	adds	r7, #16
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}
 800cafc:	080166fc 	.word	0x080166fc
 800cb00:	080167ac 	.word	0x080167ac
 800cb04:	08016740 	.word	0x08016740
 800cb08:	080167b8 	.word	0x080167b8
 800cb0c:	0801871c 	.word	0x0801871c

0800cb10 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800cb10:	b5b0      	push	{r4, r5, r7, lr}
 800cb12:	b088      	sub	sp, #32
 800cb14:	af04      	add	r7, sp, #16
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	460b      	mov	r3, r1
 800cb1a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d106      	bne.n	800cb30 <tcp_close_shutdown+0x20>
 800cb22:	4b63      	ldr	r3, [pc, #396]	@ (800ccb0 <tcp_close_shutdown+0x1a0>)
 800cb24:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800cb28:	4962      	ldr	r1, [pc, #392]	@ (800ccb4 <tcp_close_shutdown+0x1a4>)
 800cb2a:	4863      	ldr	r0, [pc, #396]	@ (800ccb8 <tcp_close_shutdown+0x1a8>)
 800cb2c:	f008 f89a 	bl	8014c64 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800cb30:	78fb      	ldrb	r3, [r7, #3]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d067      	beq.n	800cc06 <tcp_close_shutdown+0xf6>
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	7d1b      	ldrb	r3, [r3, #20]
 800cb3a:	2b04      	cmp	r3, #4
 800cb3c:	d003      	beq.n	800cb46 <tcp_close_shutdown+0x36>
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	7d1b      	ldrb	r3, [r3, #20]
 800cb42:	2b07      	cmp	r3, #7
 800cb44:	d15f      	bne.n	800cc06 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d105      	bne.n	800cb5a <tcp_close_shutdown+0x4a>
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cb52:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d055      	beq.n	800cc06 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	8b5b      	ldrh	r3, [r3, #26]
 800cb5e:	f003 0310 	and.w	r3, r3, #16
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d106      	bne.n	800cb74 <tcp_close_shutdown+0x64>
 800cb66:	4b52      	ldr	r3, [pc, #328]	@ (800ccb0 <tcp_close_shutdown+0x1a0>)
 800cb68:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800cb6c:	4953      	ldr	r1, [pc, #332]	@ (800ccbc <tcp_close_shutdown+0x1ac>)
 800cb6e:	4852      	ldr	r0, [pc, #328]	@ (800ccb8 <tcp_close_shutdown+0x1a8>)
 800cb70:	f008 f878 	bl	8014c64 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800cb7c:	687d      	ldr	r5, [r7, #4]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	3304      	adds	r3, #4
 800cb82:	687a      	ldr	r2, [r7, #4]
 800cb84:	8ad2      	ldrh	r2, [r2, #22]
 800cb86:	6879      	ldr	r1, [r7, #4]
 800cb88:	8b09      	ldrh	r1, [r1, #24]
 800cb8a:	9102      	str	r1, [sp, #8]
 800cb8c:	9201      	str	r2, [sp, #4]
 800cb8e:	9300      	str	r3, [sp, #0]
 800cb90:	462b      	mov	r3, r5
 800cb92:	4622      	mov	r2, r4
 800cb94:	4601      	mov	r1, r0
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f004 fe92 	bl	80118c0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f001 f8cb 	bl	800dd38 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800cba2:	4b47      	ldr	r3, [pc, #284]	@ (800ccc0 <tcp_close_shutdown+0x1b0>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	687a      	ldr	r2, [r7, #4]
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d105      	bne.n	800cbb8 <tcp_close_shutdown+0xa8>
 800cbac:	4b44      	ldr	r3, [pc, #272]	@ (800ccc0 <tcp_close_shutdown+0x1b0>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	68db      	ldr	r3, [r3, #12]
 800cbb2:	4a43      	ldr	r2, [pc, #268]	@ (800ccc0 <tcp_close_shutdown+0x1b0>)
 800cbb4:	6013      	str	r3, [r2, #0]
 800cbb6:	e013      	b.n	800cbe0 <tcp_close_shutdown+0xd0>
 800cbb8:	4b41      	ldr	r3, [pc, #260]	@ (800ccc0 <tcp_close_shutdown+0x1b0>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	60fb      	str	r3, [r7, #12]
 800cbbe:	e00c      	b.n	800cbda <tcp_close_shutdown+0xca>
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	68db      	ldr	r3, [r3, #12]
 800cbc4:	687a      	ldr	r2, [r7, #4]
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d104      	bne.n	800cbd4 <tcp_close_shutdown+0xc4>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	68da      	ldr	r2, [r3, #12]
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	60da      	str	r2, [r3, #12]
 800cbd2:	e005      	b.n	800cbe0 <tcp_close_shutdown+0xd0>
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	68db      	ldr	r3, [r3, #12]
 800cbd8:	60fb      	str	r3, [r7, #12]
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d1ef      	bne.n	800cbc0 <tcp_close_shutdown+0xb0>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	60da      	str	r2, [r3, #12]
 800cbe6:	4b37      	ldr	r3, [pc, #220]	@ (800ccc4 <tcp_close_shutdown+0x1b4>)
 800cbe8:	2201      	movs	r2, #1
 800cbea:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800cbec:	4b36      	ldr	r3, [pc, #216]	@ (800ccc8 <tcp_close_shutdown+0x1b8>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	687a      	ldr	r2, [r7, #4]
 800cbf2:	429a      	cmp	r2, r3
 800cbf4:	d102      	bne.n	800cbfc <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800cbf6:	f003 fd61 	bl	80106bc <tcp_trigger_input_pcb_close>
 800cbfa:	e002      	b.n	800cc02 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f7ff fed5 	bl	800c9ac <tcp_free>
      }
      return ERR_OK;
 800cc02:	2300      	movs	r3, #0
 800cc04:	e050      	b.n	800cca8 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	7d1b      	ldrb	r3, [r3, #20]
 800cc0a:	2b02      	cmp	r3, #2
 800cc0c:	d03b      	beq.n	800cc86 <tcp_close_shutdown+0x176>
 800cc0e:	2b02      	cmp	r3, #2
 800cc10:	dc44      	bgt.n	800cc9c <tcp_close_shutdown+0x18c>
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d002      	beq.n	800cc1c <tcp_close_shutdown+0x10c>
 800cc16:	2b01      	cmp	r3, #1
 800cc18:	d02a      	beq.n	800cc70 <tcp_close_shutdown+0x160>
 800cc1a:	e03f      	b.n	800cc9c <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	8adb      	ldrh	r3, [r3, #22]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d021      	beq.n	800cc68 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cc24:	4b29      	ldr	r3, [pc, #164]	@ (800cccc <tcp_close_shutdown+0x1bc>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	687a      	ldr	r2, [r7, #4]
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	d105      	bne.n	800cc3a <tcp_close_shutdown+0x12a>
 800cc2e:	4b27      	ldr	r3, [pc, #156]	@ (800cccc <tcp_close_shutdown+0x1bc>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	68db      	ldr	r3, [r3, #12]
 800cc34:	4a25      	ldr	r2, [pc, #148]	@ (800cccc <tcp_close_shutdown+0x1bc>)
 800cc36:	6013      	str	r3, [r2, #0]
 800cc38:	e013      	b.n	800cc62 <tcp_close_shutdown+0x152>
 800cc3a:	4b24      	ldr	r3, [pc, #144]	@ (800cccc <tcp_close_shutdown+0x1bc>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	60bb      	str	r3, [r7, #8]
 800cc40:	e00c      	b.n	800cc5c <tcp_close_shutdown+0x14c>
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	68db      	ldr	r3, [r3, #12]
 800cc46:	687a      	ldr	r2, [r7, #4]
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	d104      	bne.n	800cc56 <tcp_close_shutdown+0x146>
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	68da      	ldr	r2, [r3, #12]
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	60da      	str	r2, [r3, #12]
 800cc54:	e005      	b.n	800cc62 <tcp_close_shutdown+0x152>
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	68db      	ldr	r3, [r3, #12]
 800cc5a:	60bb      	str	r3, [r7, #8]
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d1ef      	bne.n	800cc42 <tcp_close_shutdown+0x132>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2200      	movs	r2, #0
 800cc66:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f7ff fe9f 	bl	800c9ac <tcp_free>
      break;
 800cc6e:	e01a      	b.n	800cca6 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f7ff ff13 	bl	800ca9c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800cc76:	6879      	ldr	r1, [r7, #4]
 800cc78:	4815      	ldr	r0, [pc, #84]	@ (800ccd0 <tcp_close_shutdown+0x1c0>)
 800cc7a:	f001 f8ad 	bl	800ddd8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f7ff feb0 	bl	800c9e4 <tcp_free_listen>
      break;
 800cc84:	e00f      	b.n	800cca6 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cc86:	6879      	ldr	r1, [r7, #4]
 800cc88:	480d      	ldr	r0, [pc, #52]	@ (800ccc0 <tcp_close_shutdown+0x1b0>)
 800cc8a:	f001 f8a5 	bl	800ddd8 <tcp_pcb_remove>
 800cc8e:	4b0d      	ldr	r3, [pc, #52]	@ (800ccc4 <tcp_close_shutdown+0x1b4>)
 800cc90:	2201      	movs	r2, #1
 800cc92:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f7ff fe89 	bl	800c9ac <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800cc9a:	e004      	b.n	800cca6 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f000 f819 	bl	800ccd4 <tcp_close_shutdown_fin>
 800cca2:	4603      	mov	r3, r0
 800cca4:	e000      	b.n	800cca8 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 800cca6:	2300      	movs	r3, #0
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3710      	adds	r7, #16
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bdb0      	pop	{r4, r5, r7, pc}
 800ccb0:	080166fc 	.word	0x080166fc
 800ccb4:	080167d0 	.word	0x080167d0
 800ccb8:	08016740 	.word	0x08016740
 800ccbc:	080167f0 	.word	0x080167f0
 800ccc0:	20010318 	.word	0x20010318
 800ccc4:	20010320 	.word	0x20010320
 800ccc8:	20010358 	.word	0x20010358
 800cccc:	20010310 	.word	0x20010310
 800ccd0:	20010314 	.word	0x20010314

0800ccd4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b084      	sub	sp, #16
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d106      	bne.n	800ccf0 <tcp_close_shutdown_fin+0x1c>
 800cce2:	4b2e      	ldr	r3, [pc, #184]	@ (800cd9c <tcp_close_shutdown_fin+0xc8>)
 800cce4:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800cce8:	492d      	ldr	r1, [pc, #180]	@ (800cda0 <tcp_close_shutdown_fin+0xcc>)
 800ccea:	482e      	ldr	r0, [pc, #184]	@ (800cda4 <tcp_close_shutdown_fin+0xd0>)
 800ccec:	f007 ffba 	bl	8014c64 <iprintf>

  switch (pcb->state) {
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	7d1b      	ldrb	r3, [r3, #20]
 800ccf4:	2b07      	cmp	r3, #7
 800ccf6:	d020      	beq.n	800cd3a <tcp_close_shutdown_fin+0x66>
 800ccf8:	2b07      	cmp	r3, #7
 800ccfa:	dc2b      	bgt.n	800cd54 <tcp_close_shutdown_fin+0x80>
 800ccfc:	2b03      	cmp	r3, #3
 800ccfe:	d002      	beq.n	800cd06 <tcp_close_shutdown_fin+0x32>
 800cd00:	2b04      	cmp	r3, #4
 800cd02:	d00d      	beq.n	800cd20 <tcp_close_shutdown_fin+0x4c>
 800cd04:	e026      	b.n	800cd54 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f003 fee8 	bl	8010adc <tcp_send_fin>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cd10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d11f      	bne.n	800cd58 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2205      	movs	r2, #5
 800cd1c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cd1e:	e01b      	b.n	800cd58 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f003 fedb 	bl	8010adc <tcp_send_fin>
 800cd26:	4603      	mov	r3, r0
 800cd28:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cd2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d114      	bne.n	800cd5c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2205      	movs	r2, #5
 800cd36:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cd38:	e010      	b.n	800cd5c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f003 fece 	bl	8010adc <tcp_send_fin>
 800cd40:	4603      	mov	r3, r0
 800cd42:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cd44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d109      	bne.n	800cd60 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2209      	movs	r2, #9
 800cd50:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cd52:	e005      	b.n	800cd60 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800cd54:	2300      	movs	r3, #0
 800cd56:	e01c      	b.n	800cd92 <tcp_close_shutdown_fin+0xbe>
      break;
 800cd58:	bf00      	nop
 800cd5a:	e002      	b.n	800cd62 <tcp_close_shutdown_fin+0x8e>
      break;
 800cd5c:	bf00      	nop
 800cd5e:	e000      	b.n	800cd62 <tcp_close_shutdown_fin+0x8e>
      break;
 800cd60:	bf00      	nop
  }

  if (err == ERR_OK) {
 800cd62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d103      	bne.n	800cd72 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f003 fff4 	bl	8010d58 <tcp_output>
 800cd70:	e00d      	b.n	800cd8e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800cd72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cd7a:	d108      	bne.n	800cd8e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	8b5b      	ldrh	r3, [r3, #26]
 800cd80:	f043 0308 	orr.w	r3, r3, #8
 800cd84:	b29a      	uxth	r2, r3
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	e001      	b.n	800cd92 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800cd8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	3710      	adds	r7, #16
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}
 800cd9a:	bf00      	nop
 800cd9c:	080166fc 	.word	0x080166fc
 800cda0:	080167ac 	.word	0x080167ac
 800cda4:	08016740 	.word	0x08016740

0800cda8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b082      	sub	sp, #8
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d109      	bne.n	800cdca <tcp_close+0x22>
 800cdb6:	4b0f      	ldr	r3, [pc, #60]	@ (800cdf4 <tcp_close+0x4c>)
 800cdb8:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800cdbc:	490e      	ldr	r1, [pc, #56]	@ (800cdf8 <tcp_close+0x50>)
 800cdbe:	480f      	ldr	r0, [pc, #60]	@ (800cdfc <tcp_close+0x54>)
 800cdc0:	f007 ff50 	bl	8014c64 <iprintf>
 800cdc4:	f06f 030f 	mvn.w	r3, #15
 800cdc8:	e00f      	b.n	800cdea <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	7d1b      	ldrb	r3, [r3, #20]
 800cdce:	2b01      	cmp	r3, #1
 800cdd0:	d006      	beq.n	800cde0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	8b5b      	ldrh	r3, [r3, #26]
 800cdd6:	f043 0310 	orr.w	r3, r3, #16
 800cdda:	b29a      	uxth	r2, r3
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800cde0:	2101      	movs	r1, #1
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f7ff fe94 	bl	800cb10 <tcp_close_shutdown>
 800cde8:	4603      	mov	r3, r0
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3708      	adds	r7, #8
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}
 800cdf2:	bf00      	nop
 800cdf4:	080166fc 	.word	0x080166fc
 800cdf8:	0801680c 	.word	0x0801680c
 800cdfc:	08016740 	.word	0x08016740

0800ce00 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b08e      	sub	sp, #56	@ 0x38
 800ce04:	af04      	add	r7, sp, #16
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d107      	bne.n	800ce20 <tcp_abandon+0x20>
 800ce10:	4b52      	ldr	r3, [pc, #328]	@ (800cf5c <tcp_abandon+0x15c>)
 800ce12:	f240 223d 	movw	r2, #573	@ 0x23d
 800ce16:	4952      	ldr	r1, [pc, #328]	@ (800cf60 <tcp_abandon+0x160>)
 800ce18:	4852      	ldr	r0, [pc, #328]	@ (800cf64 <tcp_abandon+0x164>)
 800ce1a:	f007 ff23 	bl	8014c64 <iprintf>
 800ce1e:	e099      	b.n	800cf54 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	7d1b      	ldrb	r3, [r3, #20]
 800ce24:	2b01      	cmp	r3, #1
 800ce26:	d106      	bne.n	800ce36 <tcp_abandon+0x36>
 800ce28:	4b4c      	ldr	r3, [pc, #304]	@ (800cf5c <tcp_abandon+0x15c>)
 800ce2a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800ce2e:	494e      	ldr	r1, [pc, #312]	@ (800cf68 <tcp_abandon+0x168>)
 800ce30:	484c      	ldr	r0, [pc, #304]	@ (800cf64 <tcp_abandon+0x164>)
 800ce32:	f007 ff17 	bl	8014c64 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	7d1b      	ldrb	r3, [r3, #20]
 800ce3a:	2b0a      	cmp	r3, #10
 800ce3c:	d107      	bne.n	800ce4e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800ce3e:	6879      	ldr	r1, [r7, #4]
 800ce40:	484a      	ldr	r0, [pc, #296]	@ (800cf6c <tcp_abandon+0x16c>)
 800ce42:	f000 ffc9 	bl	800ddd8 <tcp_pcb_remove>
    tcp_free(pcb);
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f7ff fdb0 	bl	800c9ac <tcp_free>
 800ce4c:	e082      	b.n	800cf54 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800ce52:	2300      	movs	r3, #0
 800ce54:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce5a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce60:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce68:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	691b      	ldr	r3, [r3, #16]
 800ce6e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	7d1b      	ldrb	r3, [r3, #20]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d126      	bne.n	800cec6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	8adb      	ldrh	r3, [r3, #22]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d02e      	beq.n	800cede <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ce80:	4b3b      	ldr	r3, [pc, #236]	@ (800cf70 <tcp_abandon+0x170>)
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	687a      	ldr	r2, [r7, #4]
 800ce86:	429a      	cmp	r2, r3
 800ce88:	d105      	bne.n	800ce96 <tcp_abandon+0x96>
 800ce8a:	4b39      	ldr	r3, [pc, #228]	@ (800cf70 <tcp_abandon+0x170>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	68db      	ldr	r3, [r3, #12]
 800ce90:	4a37      	ldr	r2, [pc, #220]	@ (800cf70 <tcp_abandon+0x170>)
 800ce92:	6013      	str	r3, [r2, #0]
 800ce94:	e013      	b.n	800cebe <tcp_abandon+0xbe>
 800ce96:	4b36      	ldr	r3, [pc, #216]	@ (800cf70 <tcp_abandon+0x170>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	61fb      	str	r3, [r7, #28]
 800ce9c:	e00c      	b.n	800ceb8 <tcp_abandon+0xb8>
 800ce9e:	69fb      	ldr	r3, [r7, #28]
 800cea0:	68db      	ldr	r3, [r3, #12]
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d104      	bne.n	800ceb2 <tcp_abandon+0xb2>
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	68da      	ldr	r2, [r3, #12]
 800ceac:	69fb      	ldr	r3, [r7, #28]
 800ceae:	60da      	str	r2, [r3, #12]
 800ceb0:	e005      	b.n	800cebe <tcp_abandon+0xbe>
 800ceb2:	69fb      	ldr	r3, [r7, #28]
 800ceb4:	68db      	ldr	r3, [r3, #12]
 800ceb6:	61fb      	str	r3, [r7, #28]
 800ceb8:	69fb      	ldr	r3, [r7, #28]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d1ef      	bne.n	800ce9e <tcp_abandon+0x9e>
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2200      	movs	r2, #0
 800cec2:	60da      	str	r2, [r3, #12]
 800cec4:	e00b      	b.n	800cede <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	8adb      	ldrh	r3, [r3, #22]
 800cece:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ced0:	6879      	ldr	r1, [r7, #4]
 800ced2:	4828      	ldr	r0, [pc, #160]	@ (800cf74 <tcp_abandon+0x174>)
 800ced4:	f000 ff80 	bl	800ddd8 <tcp_pcb_remove>
 800ced8:	4b27      	ldr	r3, [pc, #156]	@ (800cf78 <tcp_abandon+0x178>)
 800ceda:	2201      	movs	r2, #1
 800cedc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d004      	beq.n	800cef0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ceea:	4618      	mov	r0, r3
 800ceec:	f000 fd22 	bl	800d934 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d004      	beq.n	800cf02 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cefc:	4618      	mov	r0, r3
 800cefe:	f000 fd19 	bl	800d934 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d004      	beq.n	800cf14 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f000 fd10 	bl	800d934 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800cf14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d00e      	beq.n	800cf38 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800cf1a:	6879      	ldr	r1, [r7, #4]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	3304      	adds	r3, #4
 800cf20:	687a      	ldr	r2, [r7, #4]
 800cf22:	8b12      	ldrh	r2, [r2, #24]
 800cf24:	9202      	str	r2, [sp, #8]
 800cf26:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800cf28:	9201      	str	r2, [sp, #4]
 800cf2a:	9300      	str	r3, [sp, #0]
 800cf2c:	460b      	mov	r3, r1
 800cf2e:	697a      	ldr	r2, [r7, #20]
 800cf30:	69b9      	ldr	r1, [r7, #24]
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f004 fcc4 	bl	80118c0 <tcp_rst>
    }
    last_state = pcb->state;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	7d1b      	ldrb	r3, [r3, #20]
 800cf3c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f7ff fd34 	bl	800c9ac <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d004      	beq.n	800cf54 <tcp_abandon+0x154>
 800cf4a:	693b      	ldr	r3, [r7, #16]
 800cf4c:	f06f 010c 	mvn.w	r1, #12
 800cf50:	68f8      	ldr	r0, [r7, #12]
 800cf52:	4798      	blx	r3
  }
}
 800cf54:	3728      	adds	r7, #40	@ 0x28
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
 800cf5a:	bf00      	nop
 800cf5c:	080166fc 	.word	0x080166fc
 800cf60:	08016840 	.word	0x08016840
 800cf64:	08016740 	.word	0x08016740
 800cf68:	0801685c 	.word	0x0801685c
 800cf6c:	2001031c 	.word	0x2001031c
 800cf70:	20010310 	.word	0x20010310
 800cf74:	20010318 	.word	0x20010318
 800cf78:	20010320 	.word	0x20010320

0800cf7c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b082      	sub	sp, #8
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800cf84:	2101      	movs	r1, #1
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f7ff ff3a 	bl	800ce00 <tcp_abandon>
}
 800cf8c:	bf00      	nop
 800cf8e:	3708      	adds	r7, #8
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}

0800cf94 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b084      	sub	sp, #16
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d106      	bne.n	800cfb0 <tcp_update_rcv_ann_wnd+0x1c>
 800cfa2:	4b25      	ldr	r3, [pc, #148]	@ (800d038 <tcp_update_rcv_ann_wnd+0xa4>)
 800cfa4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800cfa8:	4924      	ldr	r1, [pc, #144]	@ (800d03c <tcp_update_rcv_ann_wnd+0xa8>)
 800cfaa:	4825      	ldr	r0, [pc, #148]	@ (800d040 <tcp_update_rcv_ann_wnd+0xac>)
 800cfac:	f007 fe5a 	bl	8014c64 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfb4:	687a      	ldr	r2, [r7, #4]
 800cfb6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800cfb8:	4413      	add	r3, r2
 800cfba:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfc0:	687a      	ldr	r2, [r7, #4]
 800cfc2:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800cfc4:	f640 3168 	movw	r1, #2920	@ 0xb68
 800cfc8:	428a      	cmp	r2, r1
 800cfca:	bf28      	it	cs
 800cfcc:	460a      	movcs	r2, r1
 800cfce:	b292      	uxth	r2, r2
 800cfd0:	4413      	add	r3, r2
 800cfd2:	68fa      	ldr	r2, [r7, #12]
 800cfd4:	1ad3      	subs	r3, r2, r3
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	db08      	blt.n	800cfec <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfe6:	68fa      	ldr	r2, [r7, #12]
 800cfe8:	1ad3      	subs	r3, r2, r3
 800cfea:	e020      	b.n	800d02e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cff4:	1ad3      	subs	r3, r2, r3
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	dd03      	ble.n	800d002 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2200      	movs	r2, #0
 800cffe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d000:	e014      	b.n	800d02c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d00a:	1ad3      	subs	r3, r2, r3
 800d00c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d014:	d306      	bcc.n	800d024 <tcp_update_rcv_ann_wnd+0x90>
 800d016:	4b08      	ldr	r3, [pc, #32]	@ (800d038 <tcp_update_rcv_ann_wnd+0xa4>)
 800d018:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800d01c:	4909      	ldr	r1, [pc, #36]	@ (800d044 <tcp_update_rcv_ann_wnd+0xb0>)
 800d01e:	4808      	ldr	r0, [pc, #32]	@ (800d040 <tcp_update_rcv_ann_wnd+0xac>)
 800d020:	f007 fe20 	bl	8014c64 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	b29a      	uxth	r2, r3
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800d02c:	2300      	movs	r3, #0
  }
}
 800d02e:	4618      	mov	r0, r3
 800d030:	3710      	adds	r7, #16
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
 800d036:	bf00      	nop
 800d038:	080166fc 	.word	0x080166fc
 800d03c:	08016958 	.word	0x08016958
 800d040:	08016740 	.word	0x08016740
 800d044:	0801697c 	.word	0x0801697c

0800d048 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b084      	sub	sp, #16
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	460b      	mov	r3, r1
 800d052:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d107      	bne.n	800d06a <tcp_recved+0x22>
 800d05a:	4b20      	ldr	r3, [pc, #128]	@ (800d0dc <tcp_recved+0x94>)
 800d05c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800d060:	491f      	ldr	r1, [pc, #124]	@ (800d0e0 <tcp_recved+0x98>)
 800d062:	4820      	ldr	r0, [pc, #128]	@ (800d0e4 <tcp_recved+0x9c>)
 800d064:	f007 fdfe 	bl	8014c64 <iprintf>
 800d068:	e034      	b.n	800d0d4 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	7d1b      	ldrb	r3, [r3, #20]
 800d06e:	2b01      	cmp	r3, #1
 800d070:	d106      	bne.n	800d080 <tcp_recved+0x38>
 800d072:	4b1a      	ldr	r3, [pc, #104]	@ (800d0dc <tcp_recved+0x94>)
 800d074:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800d078:	491b      	ldr	r1, [pc, #108]	@ (800d0e8 <tcp_recved+0xa0>)
 800d07a:	481a      	ldr	r0, [pc, #104]	@ (800d0e4 <tcp_recved+0x9c>)
 800d07c:	f007 fdf2 	bl	8014c64 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d084:	887b      	ldrh	r3, [r7, #2]
 800d086:	4413      	add	r3, r2
 800d088:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d08a:	89fb      	ldrh	r3, [r7, #14]
 800d08c:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800d090:	4293      	cmp	r3, r2
 800d092:	d804      	bhi.n	800d09e <tcp_recved+0x56>
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d098:	89fa      	ldrh	r2, [r7, #14]
 800d09a:	429a      	cmp	r2, r3
 800d09c:	d204      	bcs.n	800d0a8 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800d0a4:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d0a6:	e002      	b.n	800d0ae <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	89fa      	ldrh	r2, [r7, #14]
 800d0ac:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f7ff ff70 	bl	800cf94 <tcp_update_rcv_ann_wnd>
 800d0b4:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d909      	bls.n	800d0d4 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	8b5b      	ldrh	r3, [r3, #26]
 800d0c4:	f043 0302 	orr.w	r3, r3, #2
 800d0c8:	b29a      	uxth	r2, r3
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f003 fe42 	bl	8010d58 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d0d4:	3710      	adds	r7, #16
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}
 800d0da:	bf00      	nop
 800d0dc:	080166fc 	.word	0x080166fc
 800d0e0:	08016998 	.word	0x08016998
 800d0e4:	08016740 	.word	0x08016740
 800d0e8:	080169b0 	.word	0x080169b0

0800d0ec <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d0ec:	b5b0      	push	{r4, r5, r7, lr}
 800d0ee:	b090      	sub	sp, #64	@ 0x40
 800d0f0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800d0f8:	4b95      	ldr	r3, [pc, #596]	@ (800d350 <tcp_slowtmr+0x264>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	4a94      	ldr	r2, [pc, #592]	@ (800d350 <tcp_slowtmr+0x264>)
 800d100:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d102:	4b94      	ldr	r3, [pc, #592]	@ (800d354 <tcp_slowtmr+0x268>)
 800d104:	781b      	ldrb	r3, [r3, #0]
 800d106:	3301      	adds	r3, #1
 800d108:	b2da      	uxtb	r2, r3
 800d10a:	4b92      	ldr	r3, [pc, #584]	@ (800d354 <tcp_slowtmr+0x268>)
 800d10c:	701a      	strb	r2, [r3, #0]
 800d10e:	e000      	b.n	800d112 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800d110:	bf00      	nop
  prev = NULL;
 800d112:	2300      	movs	r3, #0
 800d114:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800d116:	4b90      	ldr	r3, [pc, #576]	@ (800d358 <tcp_slowtmr+0x26c>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d11c:	e29d      	b.n	800d65a <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d11e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d120:	7d1b      	ldrb	r3, [r3, #20]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d106      	bne.n	800d134 <tcp_slowtmr+0x48>
 800d126:	4b8d      	ldr	r3, [pc, #564]	@ (800d35c <tcp_slowtmr+0x270>)
 800d128:	f240 42be 	movw	r2, #1214	@ 0x4be
 800d12c:	498c      	ldr	r1, [pc, #560]	@ (800d360 <tcp_slowtmr+0x274>)
 800d12e:	488d      	ldr	r0, [pc, #564]	@ (800d364 <tcp_slowtmr+0x278>)
 800d130:	f007 fd98 	bl	8014c64 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d136:	7d1b      	ldrb	r3, [r3, #20]
 800d138:	2b01      	cmp	r3, #1
 800d13a:	d106      	bne.n	800d14a <tcp_slowtmr+0x5e>
 800d13c:	4b87      	ldr	r3, [pc, #540]	@ (800d35c <tcp_slowtmr+0x270>)
 800d13e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800d142:	4989      	ldr	r1, [pc, #548]	@ (800d368 <tcp_slowtmr+0x27c>)
 800d144:	4887      	ldr	r0, [pc, #540]	@ (800d364 <tcp_slowtmr+0x278>)
 800d146:	f007 fd8d 	bl	8014c64 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d14a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d14c:	7d1b      	ldrb	r3, [r3, #20]
 800d14e:	2b0a      	cmp	r3, #10
 800d150:	d106      	bne.n	800d160 <tcp_slowtmr+0x74>
 800d152:	4b82      	ldr	r3, [pc, #520]	@ (800d35c <tcp_slowtmr+0x270>)
 800d154:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800d158:	4984      	ldr	r1, [pc, #528]	@ (800d36c <tcp_slowtmr+0x280>)
 800d15a:	4882      	ldr	r0, [pc, #520]	@ (800d364 <tcp_slowtmr+0x278>)
 800d15c:	f007 fd82 	bl	8014c64 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d162:	7f9a      	ldrb	r2, [r3, #30]
 800d164:	4b7b      	ldr	r3, [pc, #492]	@ (800d354 <tcp_slowtmr+0x268>)
 800d166:	781b      	ldrb	r3, [r3, #0]
 800d168:	429a      	cmp	r2, r3
 800d16a:	d105      	bne.n	800d178 <tcp_slowtmr+0x8c>
      prev = pcb;
 800d16c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d16e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d172:	68db      	ldr	r3, [r3, #12]
 800d174:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800d176:	e270      	b.n	800d65a <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800d178:	4b76      	ldr	r3, [pc, #472]	@ (800d354 <tcp_slowtmr+0x268>)
 800d17a:	781a      	ldrb	r2, [r3, #0]
 800d17c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d17e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800d180:	2300      	movs	r3, #0
 800d182:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800d186:	2300      	movs	r3, #0
 800d188:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d18c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d18e:	7d1b      	ldrb	r3, [r3, #20]
 800d190:	2b02      	cmp	r3, #2
 800d192:	d10a      	bne.n	800d1aa <tcp_slowtmr+0xbe>
 800d194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d196:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d19a:	2b05      	cmp	r3, #5
 800d19c:	d905      	bls.n	800d1aa <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800d19e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d1a2:	3301      	adds	r3, #1
 800d1a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d1a8:	e11e      	b.n	800d3e8 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d1aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d1b0:	2b0b      	cmp	r3, #11
 800d1b2:	d905      	bls.n	800d1c0 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800d1b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d1b8:	3301      	adds	r3, #1
 800d1ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d1be:	e113      	b.n	800d3e8 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800d1c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1c2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d075      	beq.n	800d2b6 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d1ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d006      	beq.n	800d1e0 <tcp_slowtmr+0xf4>
 800d1d2:	4b62      	ldr	r3, [pc, #392]	@ (800d35c <tcp_slowtmr+0x270>)
 800d1d4:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800d1d8:	4965      	ldr	r1, [pc, #404]	@ (800d370 <tcp_slowtmr+0x284>)
 800d1da:	4862      	ldr	r0, [pc, #392]	@ (800d364 <tcp_slowtmr+0x278>)
 800d1dc:	f007 fd42 	bl	8014c64 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d106      	bne.n	800d1f6 <tcp_slowtmr+0x10a>
 800d1e8:	4b5c      	ldr	r3, [pc, #368]	@ (800d35c <tcp_slowtmr+0x270>)
 800d1ea:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800d1ee:	4961      	ldr	r1, [pc, #388]	@ (800d374 <tcp_slowtmr+0x288>)
 800d1f0:	485c      	ldr	r0, [pc, #368]	@ (800d364 <tcp_slowtmr+0x278>)
 800d1f2:	f007 fd37 	bl	8014c64 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d1f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1f8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800d1fc:	2b0b      	cmp	r3, #11
 800d1fe:	d905      	bls.n	800d20c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800d200:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d204:	3301      	adds	r3, #1
 800d206:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d20a:	e0ed      	b.n	800d3e8 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d20c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d20e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d212:	3b01      	subs	r3, #1
 800d214:	4a58      	ldr	r2, [pc, #352]	@ (800d378 <tcp_slowtmr+0x28c>)
 800d216:	5cd3      	ldrb	r3, [r2, r3]
 800d218:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d21a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d21c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800d220:	7c7a      	ldrb	r2, [r7, #17]
 800d222:	429a      	cmp	r2, r3
 800d224:	d907      	bls.n	800d236 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800d226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d228:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800d22c:	3301      	adds	r3, #1
 800d22e:	b2da      	uxtb	r2, r3
 800d230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d232:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800d236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d238:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800d23c:	7c7a      	ldrb	r2, [r7, #17]
 800d23e:	429a      	cmp	r2, r3
 800d240:	f200 80d2 	bhi.w	800d3e8 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800d244:	2301      	movs	r3, #1
 800d246:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800d248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d24a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d108      	bne.n	800d264 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d252:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d254:	f004 fc28 	bl	8011aa8 <tcp_zero_window_probe>
 800d258:	4603      	mov	r3, r0
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d014      	beq.n	800d288 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800d25e:	2300      	movs	r3, #0
 800d260:	623b      	str	r3, [r7, #32]
 800d262:	e011      	b.n	800d288 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d266:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d26a:	4619      	mov	r1, r3
 800d26c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d26e:	f003 faed 	bl	801084c <tcp_split_unsent_seg>
 800d272:	4603      	mov	r3, r0
 800d274:	2b00      	cmp	r3, #0
 800d276:	d107      	bne.n	800d288 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800d278:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d27a:	f003 fd6d 	bl	8010d58 <tcp_output>
 800d27e:	4603      	mov	r3, r0
 800d280:	2b00      	cmp	r3, #0
 800d282:	d101      	bne.n	800d288 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800d284:	2300      	movs	r3, #0
 800d286:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800d288:	6a3b      	ldr	r3, [r7, #32]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	f000 80ac 	beq.w	800d3e8 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800d290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d292:	2200      	movs	r2, #0
 800d294:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d29a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d29e:	2b06      	cmp	r3, #6
 800d2a0:	f200 80a2 	bhi.w	800d3e8 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800d2a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2a6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d2aa:	3301      	adds	r3, #1
 800d2ac:	b2da      	uxtb	r2, r3
 800d2ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2b0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800d2b4:	e098      	b.n	800d3e8 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d2b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	db0f      	blt.n	800d2e0 <tcp_slowtmr+0x1f4>
 800d2c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d2c6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d008      	beq.n	800d2e0 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800d2ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d2d4:	b29b      	uxth	r3, r3
 800d2d6:	3301      	adds	r3, #1
 800d2d8:	b29b      	uxth	r3, r3
 800d2da:	b21a      	sxth	r2, r3
 800d2dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2de:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800d2e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2e2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800d2e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2e8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	db7b      	blt.n	800d3e8 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d2f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d2f2:	f004 f825 	bl	8011340 <tcp_rexmit_rto_prepare>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d007      	beq.n	800d30c <tcp_slowtmr+0x220>
 800d2fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d300:	2b00      	cmp	r3, #0
 800d302:	d171      	bne.n	800d3e8 <tcp_slowtmr+0x2fc>
 800d304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d306:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d06d      	beq.n	800d3e8 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800d30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d30e:	7d1b      	ldrb	r3, [r3, #20]
 800d310:	2b02      	cmp	r3, #2
 800d312:	d03a      	beq.n	800d38a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d316:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d31a:	2b0c      	cmp	r3, #12
 800d31c:	bf28      	it	cs
 800d31e:	230c      	movcs	r3, #12
 800d320:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d324:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d328:	10db      	asrs	r3, r3, #3
 800d32a:	b21b      	sxth	r3, r3
 800d32c:	461a      	mov	r2, r3
 800d32e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d330:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d334:	4413      	add	r3, r2
 800d336:	7efa      	ldrb	r2, [r7, #27]
 800d338:	4910      	ldr	r1, [pc, #64]	@ (800d37c <tcp_slowtmr+0x290>)
 800d33a:	5c8a      	ldrb	r2, [r1, r2]
 800d33c:	4093      	lsls	r3, r2
 800d33e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d340:	697b      	ldr	r3, [r7, #20]
 800d342:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800d346:	4293      	cmp	r3, r2
 800d348:	dc1a      	bgt.n	800d380 <tcp_slowtmr+0x294>
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	b21a      	sxth	r2, r3
 800d34e:	e019      	b.n	800d384 <tcp_slowtmr+0x298>
 800d350:	2001030c 	.word	0x2001030c
 800d354:	20010322 	.word	0x20010322
 800d358:	20010318 	.word	0x20010318
 800d35c:	080166fc 	.word	0x080166fc
 800d360:	08016a40 	.word	0x08016a40
 800d364:	08016740 	.word	0x08016740
 800d368:	08016a6c 	.word	0x08016a6c
 800d36c:	08016a98 	.word	0x08016a98
 800d370:	08016ac8 	.word	0x08016ac8
 800d374:	08016afc 	.word	0x08016afc
 800d378:	08018714 	.word	0x08018714
 800d37c:	08018704 	.word	0x08018704
 800d380:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800d384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d386:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800d38a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d38c:	2200      	movs	r2, #0
 800d38e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d392:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d398:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d39c:	4293      	cmp	r3, r2
 800d39e:	bf28      	it	cs
 800d3a0:	4613      	movcs	r3, r2
 800d3a2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d3a4:	8a7b      	ldrh	r3, [r7, #18]
 800d3a6:	085b      	lsrs	r3, r3, #1
 800d3a8:	b29a      	uxth	r2, r3
 800d3aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3ac:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d3b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3b2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800d3b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d3ba:	005b      	lsls	r3, r3, #1
 800d3bc:	b29b      	uxth	r3, r3
 800d3be:	429a      	cmp	r2, r3
 800d3c0:	d206      	bcs.n	800d3d0 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d3c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d3c6:	005b      	lsls	r3, r3, #1
 800d3c8:	b29a      	uxth	r2, r3
 800d3ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3cc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800d3d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3d2:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800d3d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3d6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800d3da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3dc:	2200      	movs	r2, #0
 800d3de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800d3e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d3e4:	f004 f81c 	bl	8011420 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800d3e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3ea:	7d1b      	ldrb	r3, [r3, #20]
 800d3ec:	2b06      	cmp	r3, #6
 800d3ee:	d111      	bne.n	800d414 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800d3f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3f2:	8b5b      	ldrh	r3, [r3, #26]
 800d3f4:	f003 0310 	and.w	r3, r3, #16
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d00b      	beq.n	800d414 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d3fc:	4b9c      	ldr	r3, [pc, #624]	@ (800d670 <tcp_slowtmr+0x584>)
 800d3fe:	681a      	ldr	r2, [r3, #0]
 800d400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d402:	6a1b      	ldr	r3, [r3, #32]
 800d404:	1ad3      	subs	r3, r2, r3
 800d406:	2b28      	cmp	r3, #40	@ 0x28
 800d408:	d904      	bls.n	800d414 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800d40a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d40e:	3301      	adds	r3, #1
 800d410:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d416:	7a5b      	ldrb	r3, [r3, #9]
 800d418:	f003 0308 	and.w	r3, r3, #8
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d04a      	beq.n	800d4b6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800d420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d422:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d424:	2b04      	cmp	r3, #4
 800d426:	d003      	beq.n	800d430 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800d428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d42a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d42c:	2b07      	cmp	r3, #7
 800d42e:	d142      	bne.n	800d4b6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d430:	4b8f      	ldr	r3, [pc, #572]	@ (800d670 <tcp_slowtmr+0x584>)
 800d432:	681a      	ldr	r2, [r3, #0]
 800d434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d436:	6a1b      	ldr	r3, [r3, #32]
 800d438:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d43a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d43c:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800d440:	4b8c      	ldr	r3, [pc, #560]	@ (800d674 <tcp_slowtmr+0x588>)
 800d442:	440b      	add	r3, r1
 800d444:	498c      	ldr	r1, [pc, #560]	@ (800d678 <tcp_slowtmr+0x58c>)
 800d446:	fba1 1303 	umull	r1, r3, r1, r3
 800d44a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d90a      	bls.n	800d466 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800d450:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d454:	3301      	adds	r3, #1
 800d456:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800d45a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d45e:	3301      	adds	r3, #1
 800d460:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d464:	e027      	b.n	800d4b6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d466:	4b82      	ldr	r3, [pc, #520]	@ (800d670 <tcp_slowtmr+0x584>)
 800d468:	681a      	ldr	r2, [r3, #0]
 800d46a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d46c:	6a1b      	ldr	r3, [r3, #32]
 800d46e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d472:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800d476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d478:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800d47c:	4618      	mov	r0, r3
 800d47e:	4b7f      	ldr	r3, [pc, #508]	@ (800d67c <tcp_slowtmr+0x590>)
 800d480:	fb00 f303 	mul.w	r3, r0, r3
 800d484:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d486:	497c      	ldr	r1, [pc, #496]	@ (800d678 <tcp_slowtmr+0x58c>)
 800d488:	fba1 1303 	umull	r1, r3, r1, r3
 800d48c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d48e:	429a      	cmp	r2, r3
 800d490:	d911      	bls.n	800d4b6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800d492:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d494:	f004 fac8 	bl	8011a28 <tcp_keepalive>
 800d498:	4603      	mov	r3, r0
 800d49a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800d49e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d107      	bne.n	800d4b6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800d4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4a8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800d4ac:	3301      	adds	r3, #1
 800d4ae:	b2da      	uxtb	r2, r3
 800d4b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4b2:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800d4b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d011      	beq.n	800d4e2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d4be:	4b6c      	ldr	r3, [pc, #432]	@ (800d670 <tcp_slowtmr+0x584>)
 800d4c0:	681a      	ldr	r2, [r3, #0]
 800d4c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4c4:	6a1b      	ldr	r3, [r3, #32]
 800d4c6:	1ad2      	subs	r2, r2, r3
 800d4c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4ca:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800d4ce:	4619      	mov	r1, r3
 800d4d0:	460b      	mov	r3, r1
 800d4d2:	005b      	lsls	r3, r3, #1
 800d4d4:	440b      	add	r3, r1
 800d4d6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d4d8:	429a      	cmp	r2, r3
 800d4da:	d302      	bcc.n	800d4e2 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800d4dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d4de:	f000 fddf 	bl	800e0a0 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800d4e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4e4:	7d1b      	ldrb	r3, [r3, #20]
 800d4e6:	2b03      	cmp	r3, #3
 800d4e8:	d10b      	bne.n	800d502 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d4ea:	4b61      	ldr	r3, [pc, #388]	@ (800d670 <tcp_slowtmr+0x584>)
 800d4ec:	681a      	ldr	r2, [r3, #0]
 800d4ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4f0:	6a1b      	ldr	r3, [r3, #32]
 800d4f2:	1ad3      	subs	r3, r2, r3
 800d4f4:	2b28      	cmp	r3, #40	@ 0x28
 800d4f6:	d904      	bls.n	800d502 <tcp_slowtmr+0x416>
        ++pcb_remove;
 800d4f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d4fc:	3301      	adds	r3, #1
 800d4fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800d502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d504:	7d1b      	ldrb	r3, [r3, #20]
 800d506:	2b09      	cmp	r3, #9
 800d508:	d10b      	bne.n	800d522 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d50a:	4b59      	ldr	r3, [pc, #356]	@ (800d670 <tcp_slowtmr+0x584>)
 800d50c:	681a      	ldr	r2, [r3, #0]
 800d50e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d510:	6a1b      	ldr	r3, [r3, #32]
 800d512:	1ad3      	subs	r3, r2, r3
 800d514:	2bf0      	cmp	r3, #240	@ 0xf0
 800d516:	d904      	bls.n	800d522 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800d518:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d51c:	3301      	adds	r3, #1
 800d51e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800d522:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d526:	2b00      	cmp	r3, #0
 800d528:	d060      	beq.n	800d5ec <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800d52a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d52c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d530:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800d532:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d534:	f000 fc00 	bl	800dd38 <tcp_pcb_purge>
      if (prev != NULL) {
 800d538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d010      	beq.n	800d560 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d53e:	4b50      	ldr	r3, [pc, #320]	@ (800d680 <tcp_slowtmr+0x594>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d544:	429a      	cmp	r2, r3
 800d546:	d106      	bne.n	800d556 <tcp_slowtmr+0x46a>
 800d548:	4b4e      	ldr	r3, [pc, #312]	@ (800d684 <tcp_slowtmr+0x598>)
 800d54a:	f240 526d 	movw	r2, #1389	@ 0x56d
 800d54e:	494e      	ldr	r1, [pc, #312]	@ (800d688 <tcp_slowtmr+0x59c>)
 800d550:	484e      	ldr	r0, [pc, #312]	@ (800d68c <tcp_slowtmr+0x5a0>)
 800d552:	f007 fb87 	bl	8014c64 <iprintf>
        prev->next = pcb->next;
 800d556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d558:	68da      	ldr	r2, [r3, #12]
 800d55a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d55c:	60da      	str	r2, [r3, #12]
 800d55e:	e00f      	b.n	800d580 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d560:	4b47      	ldr	r3, [pc, #284]	@ (800d680 <tcp_slowtmr+0x594>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d566:	429a      	cmp	r2, r3
 800d568:	d006      	beq.n	800d578 <tcp_slowtmr+0x48c>
 800d56a:	4b46      	ldr	r3, [pc, #280]	@ (800d684 <tcp_slowtmr+0x598>)
 800d56c:	f240 5271 	movw	r2, #1393	@ 0x571
 800d570:	4947      	ldr	r1, [pc, #284]	@ (800d690 <tcp_slowtmr+0x5a4>)
 800d572:	4846      	ldr	r0, [pc, #280]	@ (800d68c <tcp_slowtmr+0x5a0>)
 800d574:	f007 fb76 	bl	8014c64 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d57a:	68db      	ldr	r3, [r3, #12]
 800d57c:	4a40      	ldr	r2, [pc, #256]	@ (800d680 <tcp_slowtmr+0x594>)
 800d57e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800d580:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d584:	2b00      	cmp	r3, #0
 800d586:	d013      	beq.n	800d5b0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d58a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800d58c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d58e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d590:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800d592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d594:	3304      	adds	r3, #4
 800d596:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d598:	8ad2      	ldrh	r2, [r2, #22]
 800d59a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d59c:	8b09      	ldrh	r1, [r1, #24]
 800d59e:	9102      	str	r1, [sp, #8]
 800d5a0:	9201      	str	r2, [sp, #4]
 800d5a2:	9300      	str	r3, [sp, #0]
 800d5a4:	462b      	mov	r3, r5
 800d5a6:	4622      	mov	r2, r4
 800d5a8:	4601      	mov	r1, r0
 800d5aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d5ac:	f004 f988 	bl	80118c0 <tcp_rst>
      err_arg = pcb->callback_arg;
 800d5b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5b2:	691b      	ldr	r3, [r3, #16]
 800d5b4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d5b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5b8:	7d1b      	ldrb	r3, [r3, #20]
 800d5ba:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d5bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5be:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d5c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5c2:	68db      	ldr	r3, [r3, #12]
 800d5c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800d5c6:	6838      	ldr	r0, [r7, #0]
 800d5c8:	f7ff f9f0 	bl	800c9ac <tcp_free>
      tcp_active_pcbs_changed = 0;
 800d5cc:	4b31      	ldr	r3, [pc, #196]	@ (800d694 <tcp_slowtmr+0x5a8>)
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d004      	beq.n	800d5e2 <tcp_slowtmr+0x4f6>
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	f06f 010c 	mvn.w	r1, #12
 800d5de:	68b8      	ldr	r0, [r7, #8]
 800d5e0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d5e2:	4b2c      	ldr	r3, [pc, #176]	@ (800d694 <tcp_slowtmr+0x5a8>)
 800d5e4:	781b      	ldrb	r3, [r3, #0]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d037      	beq.n	800d65a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800d5ea:	e592      	b.n	800d112 <tcp_slowtmr+0x26>
      prev = pcb;
 800d5ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d5f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5f2:	68db      	ldr	r3, [r3, #12]
 800d5f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800d5f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5f8:	7f1b      	ldrb	r3, [r3, #28]
 800d5fa:	3301      	adds	r3, #1
 800d5fc:	b2da      	uxtb	r2, r3
 800d5fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d600:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d604:	7f1a      	ldrb	r2, [r3, #28]
 800d606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d608:	7f5b      	ldrb	r3, [r3, #29]
 800d60a:	429a      	cmp	r2, r3
 800d60c:	d325      	bcc.n	800d65a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800d60e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d610:	2200      	movs	r2, #0
 800d612:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800d614:	4b1f      	ldr	r3, [pc, #124]	@ (800d694 <tcp_slowtmr+0x5a8>)
 800d616:	2200      	movs	r2, #0
 800d618:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d61a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d61c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d620:	2b00      	cmp	r3, #0
 800d622:	d00b      	beq.n	800d63c <tcp_slowtmr+0x550>
 800d624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d626:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d62a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d62c:	6912      	ldr	r2, [r2, #16]
 800d62e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d630:	4610      	mov	r0, r2
 800d632:	4798      	blx	r3
 800d634:	4603      	mov	r3, r0
 800d636:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800d63a:	e002      	b.n	800d642 <tcp_slowtmr+0x556>
 800d63c:	2300      	movs	r3, #0
 800d63e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800d642:	4b14      	ldr	r3, [pc, #80]	@ (800d694 <tcp_slowtmr+0x5a8>)
 800d644:	781b      	ldrb	r3, [r3, #0]
 800d646:	2b00      	cmp	r3, #0
 800d648:	f47f ad62 	bne.w	800d110 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d64c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800d650:	2b00      	cmp	r3, #0
 800d652:	d102      	bne.n	800d65a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800d654:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d656:	f003 fb7f 	bl	8010d58 <tcp_output>
  while (pcb != NULL) {
 800d65a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	f47f ad5e 	bne.w	800d11e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d662:	2300      	movs	r3, #0
 800d664:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800d666:	4b0c      	ldr	r3, [pc, #48]	@ (800d698 <tcp_slowtmr+0x5ac>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d66c:	e069      	b.n	800d742 <tcp_slowtmr+0x656>
 800d66e:	bf00      	nop
 800d670:	2001030c 	.word	0x2001030c
 800d674:	000a4cb8 	.word	0x000a4cb8
 800d678:	10624dd3 	.word	0x10624dd3
 800d67c:	000124f8 	.word	0x000124f8
 800d680:	20010318 	.word	0x20010318
 800d684:	080166fc 	.word	0x080166fc
 800d688:	08016b34 	.word	0x08016b34
 800d68c:	08016740 	.word	0x08016740
 800d690:	08016b60 	.word	0x08016b60
 800d694:	20010320 	.word	0x20010320
 800d698:	2001031c 	.word	0x2001031c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d69c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d69e:	7d1b      	ldrb	r3, [r3, #20]
 800d6a0:	2b0a      	cmp	r3, #10
 800d6a2:	d006      	beq.n	800d6b2 <tcp_slowtmr+0x5c6>
 800d6a4:	4b2b      	ldr	r3, [pc, #172]	@ (800d754 <tcp_slowtmr+0x668>)
 800d6a6:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800d6aa:	492b      	ldr	r1, [pc, #172]	@ (800d758 <tcp_slowtmr+0x66c>)
 800d6ac:	482b      	ldr	r0, [pc, #172]	@ (800d75c <tcp_slowtmr+0x670>)
 800d6ae:	f007 fad9 	bl	8014c64 <iprintf>
    pcb_remove = 0;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d6b8:	4b29      	ldr	r3, [pc, #164]	@ (800d760 <tcp_slowtmr+0x674>)
 800d6ba:	681a      	ldr	r2, [r3, #0]
 800d6bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6be:	6a1b      	ldr	r3, [r3, #32]
 800d6c0:	1ad3      	subs	r3, r2, r3
 800d6c2:	2bf0      	cmp	r3, #240	@ 0xf0
 800d6c4:	d904      	bls.n	800d6d0 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800d6c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d6ca:	3301      	adds	r3, #1
 800d6cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d6d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d02f      	beq.n	800d738 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d6d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d6da:	f000 fb2d 	bl	800dd38 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d6de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d010      	beq.n	800d706 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d6e4:	4b1f      	ldr	r3, [pc, #124]	@ (800d764 <tcp_slowtmr+0x678>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d106      	bne.n	800d6fc <tcp_slowtmr+0x610>
 800d6ee:	4b19      	ldr	r3, [pc, #100]	@ (800d754 <tcp_slowtmr+0x668>)
 800d6f0:	f240 52af 	movw	r2, #1455	@ 0x5af
 800d6f4:	491c      	ldr	r1, [pc, #112]	@ (800d768 <tcp_slowtmr+0x67c>)
 800d6f6:	4819      	ldr	r0, [pc, #100]	@ (800d75c <tcp_slowtmr+0x670>)
 800d6f8:	f007 fab4 	bl	8014c64 <iprintf>
        prev->next = pcb->next;
 800d6fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6fe:	68da      	ldr	r2, [r3, #12]
 800d700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d702:	60da      	str	r2, [r3, #12]
 800d704:	e00f      	b.n	800d726 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d706:	4b17      	ldr	r3, [pc, #92]	@ (800d764 <tcp_slowtmr+0x678>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d70c:	429a      	cmp	r2, r3
 800d70e:	d006      	beq.n	800d71e <tcp_slowtmr+0x632>
 800d710:	4b10      	ldr	r3, [pc, #64]	@ (800d754 <tcp_slowtmr+0x668>)
 800d712:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800d716:	4915      	ldr	r1, [pc, #84]	@ (800d76c <tcp_slowtmr+0x680>)
 800d718:	4810      	ldr	r0, [pc, #64]	@ (800d75c <tcp_slowtmr+0x670>)
 800d71a:	f007 faa3 	bl	8014c64 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d71e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d720:	68db      	ldr	r3, [r3, #12]
 800d722:	4a10      	ldr	r2, [pc, #64]	@ (800d764 <tcp_slowtmr+0x678>)
 800d724:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d728:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d72a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d72c:	68db      	ldr	r3, [r3, #12]
 800d72e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800d730:	69f8      	ldr	r0, [r7, #28]
 800d732:	f7ff f93b 	bl	800c9ac <tcp_free>
 800d736:	e004      	b.n	800d742 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800d738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d73a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d73c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d73e:	68db      	ldr	r3, [r3, #12]
 800d740:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d744:	2b00      	cmp	r3, #0
 800d746:	d1a9      	bne.n	800d69c <tcp_slowtmr+0x5b0>
    }
  }
}
 800d748:	bf00      	nop
 800d74a:	bf00      	nop
 800d74c:	3730      	adds	r7, #48	@ 0x30
 800d74e:	46bd      	mov	sp, r7
 800d750:	bdb0      	pop	{r4, r5, r7, pc}
 800d752:	bf00      	nop
 800d754:	080166fc 	.word	0x080166fc
 800d758:	08016b8c 	.word	0x08016b8c
 800d75c:	08016740 	.word	0x08016740
 800d760:	2001030c 	.word	0x2001030c
 800d764:	2001031c 	.word	0x2001031c
 800d768:	08016bbc 	.word	0x08016bbc
 800d76c:	08016be4 	.word	0x08016be4

0800d770 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b082      	sub	sp, #8
 800d774:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d776:	4b2d      	ldr	r3, [pc, #180]	@ (800d82c <tcp_fasttmr+0xbc>)
 800d778:	781b      	ldrb	r3, [r3, #0]
 800d77a:	3301      	adds	r3, #1
 800d77c:	b2da      	uxtb	r2, r3
 800d77e:	4b2b      	ldr	r3, [pc, #172]	@ (800d82c <tcp_fasttmr+0xbc>)
 800d780:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d782:	4b2b      	ldr	r3, [pc, #172]	@ (800d830 <tcp_fasttmr+0xc0>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d788:	e048      	b.n	800d81c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	7f9a      	ldrb	r2, [r3, #30]
 800d78e:	4b27      	ldr	r3, [pc, #156]	@ (800d82c <tcp_fasttmr+0xbc>)
 800d790:	781b      	ldrb	r3, [r3, #0]
 800d792:	429a      	cmp	r2, r3
 800d794:	d03f      	beq.n	800d816 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d796:	4b25      	ldr	r3, [pc, #148]	@ (800d82c <tcp_fasttmr+0xbc>)
 800d798:	781a      	ldrb	r2, [r3, #0]
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	8b5b      	ldrh	r3, [r3, #26]
 800d7a2:	f003 0301 	and.w	r3, r3, #1
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d010      	beq.n	800d7cc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	8b5b      	ldrh	r3, [r3, #26]
 800d7ae:	f043 0302 	orr.w	r3, r3, #2
 800d7b2:	b29a      	uxth	r2, r3
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f003 facd 	bl	8010d58 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	8b5b      	ldrh	r3, [r3, #26]
 800d7c2:	f023 0303 	bic.w	r3, r3, #3
 800d7c6:	b29a      	uxth	r2, r3
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	8b5b      	ldrh	r3, [r3, #26]
 800d7d0:	f003 0308 	and.w	r3, r3, #8
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d009      	beq.n	800d7ec <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	8b5b      	ldrh	r3, [r3, #26]
 800d7dc:	f023 0308 	bic.w	r3, r3, #8
 800d7e0:	b29a      	uxth	r2, r3
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f7ff fa74 	bl	800ccd4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	68db      	ldr	r3, [r3, #12]
 800d7f0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d00a      	beq.n	800d810 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d7fa:	4b0e      	ldr	r3, [pc, #56]	@ (800d834 <tcp_fasttmr+0xc4>)
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d800:	6878      	ldr	r0, [r7, #4]
 800d802:	f000 f819 	bl	800d838 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d806:	4b0b      	ldr	r3, [pc, #44]	@ (800d834 <tcp_fasttmr+0xc4>)
 800d808:	781b      	ldrb	r3, [r3, #0]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d000      	beq.n	800d810 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d80e:	e7b8      	b.n	800d782 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	607b      	str	r3, [r7, #4]
 800d814:	e002      	b.n	800d81c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	68db      	ldr	r3, [r3, #12]
 800d81a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d1b3      	bne.n	800d78a <tcp_fasttmr+0x1a>
    }
  }
}
 800d822:	bf00      	nop
 800d824:	bf00      	nop
 800d826:	3708      	adds	r7, #8
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}
 800d82c:	20010322 	.word	0x20010322
 800d830:	20010318 	.word	0x20010318
 800d834:	20010320 	.word	0x20010320

0800d838 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d838:	b590      	push	{r4, r7, lr}
 800d83a:	b085      	sub	sp, #20
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d109      	bne.n	800d85a <tcp_process_refused_data+0x22>
 800d846:	4b38      	ldr	r3, [pc, #224]	@ (800d928 <tcp_process_refused_data+0xf0>)
 800d848:	f240 6209 	movw	r2, #1545	@ 0x609
 800d84c:	4937      	ldr	r1, [pc, #220]	@ (800d92c <tcp_process_refused_data+0xf4>)
 800d84e:	4838      	ldr	r0, [pc, #224]	@ (800d930 <tcp_process_refused_data+0xf8>)
 800d850:	f007 fa08 	bl	8014c64 <iprintf>
 800d854:	f06f 030f 	mvn.w	r3, #15
 800d858:	e061      	b.n	800d91e <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d85e:	7b5b      	ldrb	r3, [r3, #13]
 800d860:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d866:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2200      	movs	r2, #0
 800d86c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d874:	2b00      	cmp	r3, #0
 800d876:	d00b      	beq.n	800d890 <tcp_process_refused_data+0x58>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6918      	ldr	r0, [r3, #16]
 800d882:	2300      	movs	r3, #0
 800d884:	68ba      	ldr	r2, [r7, #8]
 800d886:	6879      	ldr	r1, [r7, #4]
 800d888:	47a0      	blx	r4
 800d88a:	4603      	mov	r3, r0
 800d88c:	73fb      	strb	r3, [r7, #15]
 800d88e:	e007      	b.n	800d8a0 <tcp_process_refused_data+0x68>
 800d890:	2300      	movs	r3, #0
 800d892:	68ba      	ldr	r2, [r7, #8]
 800d894:	6879      	ldr	r1, [r7, #4]
 800d896:	2000      	movs	r0, #0
 800d898:	f000 f8a6 	bl	800d9e8 <tcp_recv_null>
 800d89c:	4603      	mov	r3, r0
 800d89e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d8a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d12b      	bne.n	800d900 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d8a8:	7bbb      	ldrb	r3, [r7, #14]
 800d8aa:	f003 0320 	and.w	r3, r3, #32
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d034      	beq.n	800d91c <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d8b6:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	d005      	beq.n	800d8ca <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d8c2:	3301      	adds	r3, #1
 800d8c4:	b29a      	uxth	r2, r3
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d00b      	beq.n	800d8ec <tcp_process_refused_data+0xb4>
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6918      	ldr	r0, [r3, #16]
 800d8de:	2300      	movs	r3, #0
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	6879      	ldr	r1, [r7, #4]
 800d8e4:	47a0      	blx	r4
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	73fb      	strb	r3, [r7, #15]
 800d8ea:	e001      	b.n	800d8f0 <tcp_process_refused_data+0xb8>
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d8f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8f4:	f113 0f0d 	cmn.w	r3, #13
 800d8f8:	d110      	bne.n	800d91c <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 800d8fa:	f06f 030c 	mvn.w	r3, #12
 800d8fe:	e00e      	b.n	800d91e <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 800d900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d904:	f113 0f0d 	cmn.w	r3, #13
 800d908:	d102      	bne.n	800d910 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d90a:	f06f 030c 	mvn.w	r3, #12
 800d90e:	e006      	b.n	800d91e <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	68ba      	ldr	r2, [r7, #8]
 800d914:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800d916:	f06f 0304 	mvn.w	r3, #4
 800d91a:	e000      	b.n	800d91e <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 800d91c:	2300      	movs	r3, #0
}
 800d91e:	4618      	mov	r0, r3
 800d920:	3714      	adds	r7, #20
 800d922:	46bd      	mov	sp, r7
 800d924:	bd90      	pop	{r4, r7, pc}
 800d926:	bf00      	nop
 800d928:	080166fc 	.word	0x080166fc
 800d92c:	08016c0c 	.word	0x08016c0c
 800d930:	08016740 	.word	0x08016740

0800d934 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b084      	sub	sp, #16
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d93c:	e007      	b.n	800d94e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	f000 f80a 	bl	800d95e <tcp_seg_free>
    seg = next;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d1f4      	bne.n	800d93e <tcp_segs_free+0xa>
  }
}
 800d954:	bf00      	nop
 800d956:	bf00      	nop
 800d958:	3710      	adds	r7, #16
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}

0800d95e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d95e:	b580      	push	{r7, lr}
 800d960:	b082      	sub	sp, #8
 800d962:	af00      	add	r7, sp, #0
 800d964:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d00c      	beq.n	800d986 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	685b      	ldr	r3, [r3, #4]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d004      	beq.n	800d97e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	685b      	ldr	r3, [r3, #4]
 800d978:	4618      	mov	r0, r3
 800d97a:	f7fe fd6b 	bl	800c454 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d97e:	6879      	ldr	r1, [r7, #4]
 800d980:	2003      	movs	r0, #3
 800d982:	f7fd febf 	bl	800b704 <memp_free>
  }
}
 800d986:	bf00      	nop
 800d988:	3708      	adds	r7, #8
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}
	...

0800d990 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b084      	sub	sp, #16
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d106      	bne.n	800d9ac <tcp_seg_copy+0x1c>
 800d99e:	4b0f      	ldr	r3, [pc, #60]	@ (800d9dc <tcp_seg_copy+0x4c>)
 800d9a0:	f240 6282 	movw	r2, #1666	@ 0x682
 800d9a4:	490e      	ldr	r1, [pc, #56]	@ (800d9e0 <tcp_seg_copy+0x50>)
 800d9a6:	480f      	ldr	r0, [pc, #60]	@ (800d9e4 <tcp_seg_copy+0x54>)
 800d9a8:	f007 f95c 	bl	8014c64 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d9ac:	2003      	movs	r0, #3
 800d9ae:	f7fd fe33 	bl	800b618 <memp_malloc>
 800d9b2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d101      	bne.n	800d9be <tcp_seg_copy+0x2e>
    return NULL;
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	e00a      	b.n	800d9d4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d9be:	2210      	movs	r2, #16
 800d9c0:	6879      	ldr	r1, [r7, #4]
 800d9c2:	68f8      	ldr	r0, [r7, #12]
 800d9c4:	f007 fa29 	bl	8014e1a <memcpy>
  pbuf_ref(cseg->p);
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	685b      	ldr	r3, [r3, #4]
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	f7fe fde7 	bl	800c5a0 <pbuf_ref>
  return cseg;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3710      	adds	r7, #16
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}
 800d9dc:	080166fc 	.word	0x080166fc
 800d9e0:	08016c50 	.word	0x08016c50
 800d9e4:	08016740 	.word	0x08016740

0800d9e8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b084      	sub	sp, #16
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	60f8      	str	r0, [r7, #12]
 800d9f0:	60b9      	str	r1, [r7, #8]
 800d9f2:	607a      	str	r2, [r7, #4]
 800d9f4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d109      	bne.n	800da10 <tcp_recv_null+0x28>
 800d9fc:	4b12      	ldr	r3, [pc, #72]	@ (800da48 <tcp_recv_null+0x60>)
 800d9fe:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800da02:	4912      	ldr	r1, [pc, #72]	@ (800da4c <tcp_recv_null+0x64>)
 800da04:	4812      	ldr	r0, [pc, #72]	@ (800da50 <tcp_recv_null+0x68>)
 800da06:	f007 f92d 	bl	8014c64 <iprintf>
 800da0a:	f06f 030f 	mvn.w	r3, #15
 800da0e:	e016      	b.n	800da3e <tcp_recv_null+0x56>

  if (p != NULL) {
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d009      	beq.n	800da2a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	891b      	ldrh	r3, [r3, #8]
 800da1a:	4619      	mov	r1, r3
 800da1c:	68b8      	ldr	r0, [r7, #8]
 800da1e:	f7ff fb13 	bl	800d048 <tcp_recved>
    pbuf_free(p);
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f7fe fd16 	bl	800c454 <pbuf_free>
 800da28:	e008      	b.n	800da3c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800da2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d104      	bne.n	800da3c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800da32:	68b8      	ldr	r0, [r7, #8]
 800da34:	f7ff f9b8 	bl	800cda8 <tcp_close>
 800da38:	4603      	mov	r3, r0
 800da3a:	e000      	b.n	800da3e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800da3c:	2300      	movs	r3, #0
}
 800da3e:	4618      	mov	r0, r3
 800da40:	3710      	adds	r7, #16
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}
 800da46:	bf00      	nop
 800da48:	080166fc 	.word	0x080166fc
 800da4c:	08016c6c 	.word	0x08016c6c
 800da50:	08016740 	.word	0x08016740

0800da54 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b086      	sub	sp, #24
 800da58:	af00      	add	r7, sp, #0
 800da5a:	4603      	mov	r3, r0
 800da5c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800da5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800da62:	2b00      	cmp	r3, #0
 800da64:	db01      	blt.n	800da6a <tcp_kill_prio+0x16>
 800da66:	79fb      	ldrb	r3, [r7, #7]
 800da68:	e000      	b.n	800da6c <tcp_kill_prio+0x18>
 800da6a:	237f      	movs	r3, #127	@ 0x7f
 800da6c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800da6e:	7afb      	ldrb	r3, [r7, #11]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d034      	beq.n	800dade <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800da74:	7afb      	ldrb	r3, [r7, #11]
 800da76:	3b01      	subs	r3, #1
 800da78:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800da7a:	2300      	movs	r3, #0
 800da7c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800da7e:	2300      	movs	r3, #0
 800da80:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800da82:	4b19      	ldr	r3, [pc, #100]	@ (800dae8 <tcp_kill_prio+0x94>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	617b      	str	r3, [r7, #20]
 800da88:	e01f      	b.n	800daca <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800da8a:	697b      	ldr	r3, [r7, #20]
 800da8c:	7d5b      	ldrb	r3, [r3, #21]
 800da8e:	7afa      	ldrb	r2, [r7, #11]
 800da90:	429a      	cmp	r2, r3
 800da92:	d80c      	bhi.n	800daae <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800da94:	697b      	ldr	r3, [r7, #20]
 800da96:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800da98:	7afa      	ldrb	r2, [r7, #11]
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d112      	bne.n	800dac4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800da9e:	4b13      	ldr	r3, [pc, #76]	@ (800daec <tcp_kill_prio+0x98>)
 800daa0:	681a      	ldr	r2, [r3, #0]
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	6a1b      	ldr	r3, [r3, #32]
 800daa6:	1ad3      	subs	r3, r2, r3
 800daa8:	68fa      	ldr	r2, [r7, #12]
 800daaa:	429a      	cmp	r2, r3
 800daac:	d80a      	bhi.n	800dac4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800daae:	4b0f      	ldr	r3, [pc, #60]	@ (800daec <tcp_kill_prio+0x98>)
 800dab0:	681a      	ldr	r2, [r3, #0]
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	6a1b      	ldr	r3, [r3, #32]
 800dab6:	1ad3      	subs	r3, r2, r3
 800dab8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800dabe:	697b      	ldr	r3, [r7, #20]
 800dac0:	7d5b      	ldrb	r3, [r3, #21]
 800dac2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	68db      	ldr	r3, [r3, #12]
 800dac8:	617b      	str	r3, [r7, #20]
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d1dc      	bne.n	800da8a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800dad0:	693b      	ldr	r3, [r7, #16]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d004      	beq.n	800dae0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dad6:	6938      	ldr	r0, [r7, #16]
 800dad8:	f7ff fa50 	bl	800cf7c <tcp_abort>
 800dadc:	e000      	b.n	800dae0 <tcp_kill_prio+0x8c>
    return;
 800dade:	bf00      	nop
  }
}
 800dae0:	3718      	adds	r7, #24
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}
 800dae6:	bf00      	nop
 800dae8:	20010318 	.word	0x20010318
 800daec:	2001030c 	.word	0x2001030c

0800daf0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b086      	sub	sp, #24
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	4603      	mov	r3, r0
 800daf8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800dafa:	79fb      	ldrb	r3, [r7, #7]
 800dafc:	2b08      	cmp	r3, #8
 800dafe:	d009      	beq.n	800db14 <tcp_kill_state+0x24>
 800db00:	79fb      	ldrb	r3, [r7, #7]
 800db02:	2b09      	cmp	r3, #9
 800db04:	d006      	beq.n	800db14 <tcp_kill_state+0x24>
 800db06:	4b1a      	ldr	r3, [pc, #104]	@ (800db70 <tcp_kill_state+0x80>)
 800db08:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800db0c:	4919      	ldr	r1, [pc, #100]	@ (800db74 <tcp_kill_state+0x84>)
 800db0e:	481a      	ldr	r0, [pc, #104]	@ (800db78 <tcp_kill_state+0x88>)
 800db10:	f007 f8a8 	bl	8014c64 <iprintf>

  inactivity = 0;
 800db14:	2300      	movs	r3, #0
 800db16:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800db18:	2300      	movs	r3, #0
 800db1a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800db1c:	4b17      	ldr	r3, [pc, #92]	@ (800db7c <tcp_kill_state+0x8c>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	617b      	str	r3, [r7, #20]
 800db22:	e017      	b.n	800db54 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	7d1b      	ldrb	r3, [r3, #20]
 800db28:	79fa      	ldrb	r2, [r7, #7]
 800db2a:	429a      	cmp	r2, r3
 800db2c:	d10f      	bne.n	800db4e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800db2e:	4b14      	ldr	r3, [pc, #80]	@ (800db80 <tcp_kill_state+0x90>)
 800db30:	681a      	ldr	r2, [r3, #0]
 800db32:	697b      	ldr	r3, [r7, #20]
 800db34:	6a1b      	ldr	r3, [r3, #32]
 800db36:	1ad3      	subs	r3, r2, r3
 800db38:	68fa      	ldr	r2, [r7, #12]
 800db3a:	429a      	cmp	r2, r3
 800db3c:	d807      	bhi.n	800db4e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800db3e:	4b10      	ldr	r3, [pc, #64]	@ (800db80 <tcp_kill_state+0x90>)
 800db40:	681a      	ldr	r2, [r3, #0]
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	6a1b      	ldr	r3, [r3, #32]
 800db46:	1ad3      	subs	r3, r2, r3
 800db48:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	68db      	ldr	r3, [r3, #12]
 800db52:	617b      	str	r3, [r7, #20]
 800db54:	697b      	ldr	r3, [r7, #20]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d1e4      	bne.n	800db24 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800db5a:	693b      	ldr	r3, [r7, #16]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d003      	beq.n	800db68 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800db60:	2100      	movs	r1, #0
 800db62:	6938      	ldr	r0, [r7, #16]
 800db64:	f7ff f94c 	bl	800ce00 <tcp_abandon>
  }
}
 800db68:	bf00      	nop
 800db6a:	3718      	adds	r7, #24
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}
 800db70:	080166fc 	.word	0x080166fc
 800db74:	08016c88 	.word	0x08016c88
 800db78:	08016740 	.word	0x08016740
 800db7c:	20010318 	.word	0x20010318
 800db80:	2001030c 	.word	0x2001030c

0800db84 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b084      	sub	sp, #16
 800db88:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800db8a:	2300      	movs	r3, #0
 800db8c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800db8e:	2300      	movs	r3, #0
 800db90:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800db92:	4b12      	ldr	r3, [pc, #72]	@ (800dbdc <tcp_kill_timewait+0x58>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	60fb      	str	r3, [r7, #12]
 800db98:	e012      	b.n	800dbc0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800db9a:	4b11      	ldr	r3, [pc, #68]	@ (800dbe0 <tcp_kill_timewait+0x5c>)
 800db9c:	681a      	ldr	r2, [r3, #0]
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	6a1b      	ldr	r3, [r3, #32]
 800dba2:	1ad3      	subs	r3, r2, r3
 800dba4:	687a      	ldr	r2, [r7, #4]
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d807      	bhi.n	800dbba <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800dbaa:	4b0d      	ldr	r3, [pc, #52]	@ (800dbe0 <tcp_kill_timewait+0x5c>)
 800dbac:	681a      	ldr	r2, [r3, #0]
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	6a1b      	ldr	r3, [r3, #32]
 800dbb2:	1ad3      	subs	r3, r2, r3
 800dbb4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	68db      	ldr	r3, [r3, #12]
 800dbbe:	60fb      	str	r3, [r7, #12]
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d1e9      	bne.n	800db9a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d002      	beq.n	800dbd2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dbcc:	68b8      	ldr	r0, [r7, #8]
 800dbce:	f7ff f9d5 	bl	800cf7c <tcp_abort>
  }
}
 800dbd2:	bf00      	nop
 800dbd4:	3710      	adds	r7, #16
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}
 800dbda:	bf00      	nop
 800dbdc:	2001031c 	.word	0x2001031c
 800dbe0:	2001030c 	.word	0x2001030c

0800dbe4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b082      	sub	sp, #8
 800dbe8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800dbea:	4b10      	ldr	r3, [pc, #64]	@ (800dc2c <tcp_handle_closepend+0x48>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800dbf0:	e014      	b.n	800dc1c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	68db      	ldr	r3, [r3, #12]
 800dbf6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	8b5b      	ldrh	r3, [r3, #26]
 800dbfc:	f003 0308 	and.w	r3, r3, #8
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d009      	beq.n	800dc18 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	8b5b      	ldrh	r3, [r3, #26]
 800dc08:	f023 0308 	bic.w	r3, r3, #8
 800dc0c:	b29a      	uxth	r2, r3
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f7ff f85e 	bl	800ccd4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d1e7      	bne.n	800dbf2 <tcp_handle_closepend+0xe>
  }
}
 800dc22:	bf00      	nop
 800dc24:	bf00      	nop
 800dc26:	3708      	adds	r7, #8
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}
 800dc2c:	20010318 	.word	0x20010318

0800dc30 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b084      	sub	sp, #16
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	4603      	mov	r3, r0
 800dc38:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dc3a:	2001      	movs	r0, #1
 800dc3c:	f7fd fcec 	bl	800b618 <memp_malloc>
 800dc40:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d126      	bne.n	800dc96 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800dc48:	f7ff ffcc 	bl	800dbe4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800dc4c:	f7ff ff9a 	bl	800db84 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dc50:	2001      	movs	r0, #1
 800dc52:	f7fd fce1 	bl	800b618 <memp_malloc>
 800dc56:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d11b      	bne.n	800dc96 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800dc5e:	2009      	movs	r0, #9
 800dc60:	f7ff ff46 	bl	800daf0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dc64:	2001      	movs	r0, #1
 800dc66:	f7fd fcd7 	bl	800b618 <memp_malloc>
 800dc6a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d111      	bne.n	800dc96 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800dc72:	2008      	movs	r0, #8
 800dc74:	f7ff ff3c 	bl	800daf0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dc78:	2001      	movs	r0, #1
 800dc7a:	f7fd fccd 	bl	800b618 <memp_malloc>
 800dc7e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d107      	bne.n	800dc96 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800dc86:	79fb      	ldrb	r3, [r7, #7]
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f7ff fee3 	bl	800da54 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dc8e:	2001      	movs	r0, #1
 800dc90:	f7fd fcc2 	bl	800b618 <memp_malloc>
 800dc94:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d03f      	beq.n	800dd1c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800dc9c:	229c      	movs	r2, #156	@ 0x9c
 800dc9e:	2100      	movs	r1, #0
 800dca0:	68f8      	ldr	r0, [r7, #12]
 800dca2:	f007 f844 	bl	8014d2e <memset>
    pcb->prio = prio;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	79fa      	ldrb	r2, [r7, #7]
 800dcaa:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800dcb2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800dcbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	22ff      	movs	r2, #255	@ 0xff
 800dcca:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800dcd2:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	2206      	movs	r2, #6
 800dcd8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	2206      	movs	r2, #6
 800dce0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dce8:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	2201      	movs	r2, #1
 800dcee:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800dcf2:	4b0d      	ldr	r3, [pc, #52]	@ (800dd28 <tcp_alloc+0xf8>)
 800dcf4:	681a      	ldr	r2, [r3, #0]
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800dcfa:	4b0c      	ldr	r3, [pc, #48]	@ (800dd2c <tcp_alloc+0xfc>)
 800dcfc:	781a      	ldrb	r2, [r3, #0]
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800dd08:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	4a08      	ldr	r2, [pc, #32]	@ (800dd30 <tcp_alloc+0x100>)
 800dd10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	4a07      	ldr	r2, [pc, #28]	@ (800dd34 <tcp_alloc+0x104>)
 800dd18:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	3710      	adds	r7, #16
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}
 800dd26:	bf00      	nop
 800dd28:	2001030c 	.word	0x2001030c
 800dd2c:	20010322 	.word	0x20010322
 800dd30:	0800d9e9 	.word	0x0800d9e9
 800dd34:	006ddd00 	.word	0x006ddd00

0800dd38 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b082      	sub	sp, #8
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d107      	bne.n	800dd56 <tcp_pcb_purge+0x1e>
 800dd46:	4b21      	ldr	r3, [pc, #132]	@ (800ddcc <tcp_pcb_purge+0x94>)
 800dd48:	f640 0251 	movw	r2, #2129	@ 0x851
 800dd4c:	4920      	ldr	r1, [pc, #128]	@ (800ddd0 <tcp_pcb_purge+0x98>)
 800dd4e:	4821      	ldr	r0, [pc, #132]	@ (800ddd4 <tcp_pcb_purge+0x9c>)
 800dd50:	f006 ff88 	bl	8014c64 <iprintf>
 800dd54:	e037      	b.n	800ddc6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	7d1b      	ldrb	r3, [r3, #20]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d033      	beq.n	800ddc6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800dd62:	2b0a      	cmp	r3, #10
 800dd64:	d02f      	beq.n	800ddc6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800dd6a:	2b01      	cmp	r3, #1
 800dd6c:	d02b      	beq.n	800ddc6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d007      	beq.n	800dd86 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f7fe fb6a 	bl	800c454 <pbuf_free>
      pcb->refused_data = NULL;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2200      	movs	r2, #0
 800dd84:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d002      	beq.n	800dd94 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f000 f986 	bl	800e0a0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dd9a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dda0:	4618      	mov	r0, r3
 800dda2:	f7ff fdc7 	bl	800d934 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f7ff fdc2 	bl	800d934 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ddc6:	3708      	adds	r7, #8
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}
 800ddcc:	080166fc 	.word	0x080166fc
 800ddd0:	08016d48 	.word	0x08016d48
 800ddd4:	08016740 	.word	0x08016740

0800ddd8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b084      	sub	sp, #16
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d106      	bne.n	800ddf6 <tcp_pcb_remove+0x1e>
 800dde8:	4b3e      	ldr	r3, [pc, #248]	@ (800dee4 <tcp_pcb_remove+0x10c>)
 800ddea:	f640 0283 	movw	r2, #2179	@ 0x883
 800ddee:	493e      	ldr	r1, [pc, #248]	@ (800dee8 <tcp_pcb_remove+0x110>)
 800ddf0:	483e      	ldr	r0, [pc, #248]	@ (800deec <tcp_pcb_remove+0x114>)
 800ddf2:	f006 ff37 	bl	8014c64 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d106      	bne.n	800de0a <tcp_pcb_remove+0x32>
 800ddfc:	4b39      	ldr	r3, [pc, #228]	@ (800dee4 <tcp_pcb_remove+0x10c>)
 800ddfe:	f640 0284 	movw	r2, #2180	@ 0x884
 800de02:	493b      	ldr	r1, [pc, #236]	@ (800def0 <tcp_pcb_remove+0x118>)
 800de04:	4839      	ldr	r0, [pc, #228]	@ (800deec <tcp_pcb_remove+0x114>)
 800de06:	f006 ff2d 	bl	8014c64 <iprintf>

  TCP_RMV(pcblist, pcb);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	683a      	ldr	r2, [r7, #0]
 800de10:	429a      	cmp	r2, r3
 800de12:	d105      	bne.n	800de20 <tcp_pcb_remove+0x48>
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	68da      	ldr	r2, [r3, #12]
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	601a      	str	r2, [r3, #0]
 800de1e:	e013      	b.n	800de48 <tcp_pcb_remove+0x70>
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	60fb      	str	r3, [r7, #12]
 800de26:	e00c      	b.n	800de42 <tcp_pcb_remove+0x6a>
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	68db      	ldr	r3, [r3, #12]
 800de2c:	683a      	ldr	r2, [r7, #0]
 800de2e:	429a      	cmp	r2, r3
 800de30:	d104      	bne.n	800de3c <tcp_pcb_remove+0x64>
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	68da      	ldr	r2, [r3, #12]
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	60da      	str	r2, [r3, #12]
 800de3a:	e005      	b.n	800de48 <tcp_pcb_remove+0x70>
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	68db      	ldr	r3, [r3, #12]
 800de40:	60fb      	str	r3, [r7, #12]
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d1ef      	bne.n	800de28 <tcp_pcb_remove+0x50>
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	2200      	movs	r2, #0
 800de4c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800de4e:	6838      	ldr	r0, [r7, #0]
 800de50:	f7ff ff72 	bl	800dd38 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	7d1b      	ldrb	r3, [r3, #20]
 800de58:	2b0a      	cmp	r3, #10
 800de5a:	d013      	beq.n	800de84 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800de60:	2b01      	cmp	r3, #1
 800de62:	d00f      	beq.n	800de84 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	8b5b      	ldrh	r3, [r3, #26]
 800de68:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d009      	beq.n	800de84 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	8b5b      	ldrh	r3, [r3, #26]
 800de74:	f043 0302 	orr.w	r3, r3, #2
 800de78:	b29a      	uxth	r2, r3
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800de7e:	6838      	ldr	r0, [r7, #0]
 800de80:	f002 ff6a 	bl	8010d58 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	7d1b      	ldrb	r3, [r3, #20]
 800de88:	2b01      	cmp	r3, #1
 800de8a:	d020      	beq.n	800dece <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de90:	2b00      	cmp	r3, #0
 800de92:	d006      	beq.n	800dea2 <tcp_pcb_remove+0xca>
 800de94:	4b13      	ldr	r3, [pc, #76]	@ (800dee4 <tcp_pcb_remove+0x10c>)
 800de96:	f640 0293 	movw	r2, #2195	@ 0x893
 800de9a:	4916      	ldr	r1, [pc, #88]	@ (800def4 <tcp_pcb_remove+0x11c>)
 800de9c:	4813      	ldr	r0, [pc, #76]	@ (800deec <tcp_pcb_remove+0x114>)
 800de9e:	f006 fee1 	bl	8014c64 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d006      	beq.n	800deb8 <tcp_pcb_remove+0xe0>
 800deaa:	4b0e      	ldr	r3, [pc, #56]	@ (800dee4 <tcp_pcb_remove+0x10c>)
 800deac:	f640 0294 	movw	r2, #2196	@ 0x894
 800deb0:	4911      	ldr	r1, [pc, #68]	@ (800def8 <tcp_pcb_remove+0x120>)
 800deb2:	480e      	ldr	r0, [pc, #56]	@ (800deec <tcp_pcb_remove+0x114>)
 800deb4:	f006 fed6 	bl	8014c64 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800debc:	2b00      	cmp	r3, #0
 800debe:	d006      	beq.n	800dece <tcp_pcb_remove+0xf6>
 800dec0:	4b08      	ldr	r3, [pc, #32]	@ (800dee4 <tcp_pcb_remove+0x10c>)
 800dec2:	f640 0296 	movw	r2, #2198	@ 0x896
 800dec6:	490d      	ldr	r1, [pc, #52]	@ (800defc <tcp_pcb_remove+0x124>)
 800dec8:	4808      	ldr	r0, [pc, #32]	@ (800deec <tcp_pcb_remove+0x114>)
 800deca:	f006 fecb 	bl	8014c64 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	2200      	movs	r2, #0
 800ded2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	2200      	movs	r2, #0
 800ded8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800deda:	bf00      	nop
 800dedc:	3710      	adds	r7, #16
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}
 800dee2:	bf00      	nop
 800dee4:	080166fc 	.word	0x080166fc
 800dee8:	08016d64 	.word	0x08016d64
 800deec:	08016740 	.word	0x08016740
 800def0:	08016d80 	.word	0x08016d80
 800def4:	08016da0 	.word	0x08016da0
 800def8:	08016db8 	.word	0x08016db8
 800defc:	08016dd4 	.word	0x08016dd4

0800df00 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b082      	sub	sp, #8
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d106      	bne.n	800df1c <tcp_next_iss+0x1c>
 800df0e:	4b0a      	ldr	r3, [pc, #40]	@ (800df38 <tcp_next_iss+0x38>)
 800df10:	f640 02af 	movw	r2, #2223	@ 0x8af
 800df14:	4909      	ldr	r1, [pc, #36]	@ (800df3c <tcp_next_iss+0x3c>)
 800df16:	480a      	ldr	r0, [pc, #40]	@ (800df40 <tcp_next_iss+0x40>)
 800df18:	f006 fea4 	bl	8014c64 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800df1c:	4b09      	ldr	r3, [pc, #36]	@ (800df44 <tcp_next_iss+0x44>)
 800df1e:	681a      	ldr	r2, [r3, #0]
 800df20:	4b09      	ldr	r3, [pc, #36]	@ (800df48 <tcp_next_iss+0x48>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	4413      	add	r3, r2
 800df26:	4a07      	ldr	r2, [pc, #28]	@ (800df44 <tcp_next_iss+0x44>)
 800df28:	6013      	str	r3, [r2, #0]
  return iss;
 800df2a:	4b06      	ldr	r3, [pc, #24]	@ (800df44 <tcp_next_iss+0x44>)
 800df2c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800df2e:	4618      	mov	r0, r3
 800df30:	3708      	adds	r7, #8
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}
 800df36:	bf00      	nop
 800df38:	080166fc 	.word	0x080166fc
 800df3c:	08016dec 	.word	0x08016dec
 800df40:	08016740 	.word	0x08016740
 800df44:	20000028 	.word	0x20000028
 800df48:	2001030c 	.word	0x2001030c

0800df4c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b086      	sub	sp, #24
 800df50:	af00      	add	r7, sp, #0
 800df52:	4603      	mov	r3, r0
 800df54:	60b9      	str	r1, [r7, #8]
 800df56:	607a      	str	r2, [r7, #4]
 800df58:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d106      	bne.n	800df6e <tcp_eff_send_mss_netif+0x22>
 800df60:	4b14      	ldr	r3, [pc, #80]	@ (800dfb4 <tcp_eff_send_mss_netif+0x68>)
 800df62:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800df66:	4914      	ldr	r1, [pc, #80]	@ (800dfb8 <tcp_eff_send_mss_netif+0x6c>)
 800df68:	4814      	ldr	r0, [pc, #80]	@ (800dfbc <tcp_eff_send_mss_netif+0x70>)
 800df6a:	f006 fe7b 	bl	8014c64 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d101      	bne.n	800df78 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800df74:	89fb      	ldrh	r3, [r7, #14]
 800df76:	e019      	b.n	800dfac <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800df7c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800df7e:	8afb      	ldrh	r3, [r7, #22]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d012      	beq.n	800dfaa <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800df84:	2328      	movs	r3, #40	@ 0x28
 800df86:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800df88:	8afa      	ldrh	r2, [r7, #22]
 800df8a:	8abb      	ldrh	r3, [r7, #20]
 800df8c:	429a      	cmp	r2, r3
 800df8e:	d904      	bls.n	800df9a <tcp_eff_send_mss_netif+0x4e>
 800df90:	8afa      	ldrh	r2, [r7, #22]
 800df92:	8abb      	ldrh	r3, [r7, #20]
 800df94:	1ad3      	subs	r3, r2, r3
 800df96:	b29b      	uxth	r3, r3
 800df98:	e000      	b.n	800df9c <tcp_eff_send_mss_netif+0x50>
 800df9a:	2300      	movs	r3, #0
 800df9c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800df9e:	8a7a      	ldrh	r2, [r7, #18]
 800dfa0:	89fb      	ldrh	r3, [r7, #14]
 800dfa2:	4293      	cmp	r3, r2
 800dfa4:	bf28      	it	cs
 800dfa6:	4613      	movcs	r3, r2
 800dfa8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800dfaa:	89fb      	ldrh	r3, [r7, #14]
}
 800dfac:	4618      	mov	r0, r3
 800dfae:	3718      	adds	r7, #24
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd80      	pop	{r7, pc}
 800dfb4:	080166fc 	.word	0x080166fc
 800dfb8:	08016e08 	.word	0x08016e08
 800dfbc:	08016740 	.word	0x08016740

0800dfc0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b084      	sub	sp, #16
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
 800dfc8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d119      	bne.n	800e008 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800dfd4:	4b10      	ldr	r3, [pc, #64]	@ (800e018 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800dfd6:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800dfda:	4910      	ldr	r1, [pc, #64]	@ (800e01c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800dfdc:	4810      	ldr	r0, [pc, #64]	@ (800e020 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800dfde:	f006 fe41 	bl	8014c64 <iprintf>

  while (pcb != NULL) {
 800dfe2:	e011      	b.n	800e008 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	681a      	ldr	r2, [r3, #0]
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d108      	bne.n	800e002 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	68db      	ldr	r3, [r3, #12]
 800dff4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800dff6:	68f8      	ldr	r0, [r7, #12]
 800dff8:	f7fe ffc0 	bl	800cf7c <tcp_abort>
      pcb = next;
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	60fb      	str	r3, [r7, #12]
 800e000:	e002      	b.n	800e008 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	68db      	ldr	r3, [r3, #12]
 800e006:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d1ea      	bne.n	800dfe4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e00e:	bf00      	nop
 800e010:	bf00      	nop
 800e012:	3710      	adds	r7, #16
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}
 800e018:	080166fc 	.word	0x080166fc
 800e01c:	08016e30 	.word	0x08016e30
 800e020:	08016740 	.word	0x08016740

0800e024 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b084      	sub	sp, #16
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
 800e02c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d02a      	beq.n	800e08a <tcp_netif_ip_addr_changed+0x66>
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d026      	beq.n	800e08a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e03c:	4b15      	ldr	r3, [pc, #84]	@ (800e094 <tcp_netif_ip_addr_changed+0x70>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	4619      	mov	r1, r3
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f7ff ffbc 	bl	800dfc0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e048:	4b13      	ldr	r3, [pc, #76]	@ (800e098 <tcp_netif_ip_addr_changed+0x74>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	4619      	mov	r1, r3
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	f7ff ffb6 	bl	800dfc0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d017      	beq.n	800e08a <tcp_netif_ip_addr_changed+0x66>
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d013      	beq.n	800e08a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e062:	4b0e      	ldr	r3, [pc, #56]	@ (800e09c <tcp_netif_ip_addr_changed+0x78>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	60fb      	str	r3, [r7, #12]
 800e068:	e00c      	b.n	800e084 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	681a      	ldr	r2, [r3, #0]
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	429a      	cmp	r2, r3
 800e074:	d103      	bne.n	800e07e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	681a      	ldr	r2, [r3, #0]
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	68db      	ldr	r3, [r3, #12]
 800e082:	60fb      	str	r3, [r7, #12]
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d1ef      	bne.n	800e06a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e08a:	bf00      	nop
 800e08c:	3710      	adds	r7, #16
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd80      	pop	{r7, pc}
 800e092:	bf00      	nop
 800e094:	20010318 	.word	0x20010318
 800e098:	20010310 	.word	0x20010310
 800e09c:	20010314 	.word	0x20010314

0800e0a0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b082      	sub	sp, #8
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d007      	beq.n	800e0c0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f7ff fc3d 	bl	800d934 <tcp_segs_free>
    pcb->ooseq = NULL;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2200      	movs	r2, #0
 800e0be:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e0c0:	bf00      	nop
 800e0c2:	3708      	adds	r7, #8
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}

0800e0c8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e0c8:	b590      	push	{r4, r7, lr}
 800e0ca:	b08d      	sub	sp, #52	@ 0x34
 800e0cc:	af04      	add	r7, sp, #16
 800e0ce:	6078      	str	r0, [r7, #4]
 800e0d0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d105      	bne.n	800e0e4 <tcp_input+0x1c>
 800e0d8:	4b9b      	ldr	r3, [pc, #620]	@ (800e348 <tcp_input+0x280>)
 800e0da:	2283      	movs	r2, #131	@ 0x83
 800e0dc:	499b      	ldr	r1, [pc, #620]	@ (800e34c <tcp_input+0x284>)
 800e0de:	489c      	ldr	r0, [pc, #624]	@ (800e350 <tcp_input+0x288>)
 800e0e0:	f006 fdc0 	bl	8014c64 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	685b      	ldr	r3, [r3, #4]
 800e0e8:	4a9a      	ldr	r2, [pc, #616]	@ (800e354 <tcp_input+0x28c>)
 800e0ea:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	895b      	ldrh	r3, [r3, #10]
 800e0f0:	2b13      	cmp	r3, #19
 800e0f2:	f240 83d1 	bls.w	800e898 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e0f6:	4b98      	ldr	r3, [pc, #608]	@ (800e358 <tcp_input+0x290>)
 800e0f8:	695b      	ldr	r3, [r3, #20]
 800e0fa:	4a97      	ldr	r2, [pc, #604]	@ (800e358 <tcp_input+0x290>)
 800e0fc:	6812      	ldr	r2, [r2, #0]
 800e0fe:	4611      	mov	r1, r2
 800e100:	4618      	mov	r0, r3
 800e102:	f005 fc43 	bl	801398c <ip4_addr_isbroadcast_u32>
 800e106:	4603      	mov	r3, r0
 800e108:	2b00      	cmp	r3, #0
 800e10a:	f040 83c7 	bne.w	800e89c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e10e:	4b92      	ldr	r3, [pc, #584]	@ (800e358 <tcp_input+0x290>)
 800e110:	695b      	ldr	r3, [r3, #20]
 800e112:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e116:	2be0      	cmp	r3, #224	@ 0xe0
 800e118:	f000 83c0 	beq.w	800e89c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e11c:	4b8d      	ldr	r3, [pc, #564]	@ (800e354 <tcp_input+0x28c>)
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	899b      	ldrh	r3, [r3, #12]
 800e122:	b29b      	uxth	r3, r3
 800e124:	4618      	mov	r0, r3
 800e126:	f7fc fd93 	bl	800ac50 <lwip_htons>
 800e12a:	4603      	mov	r3, r0
 800e12c:	0b1b      	lsrs	r3, r3, #12
 800e12e:	b29b      	uxth	r3, r3
 800e130:	b2db      	uxtb	r3, r3
 800e132:	009b      	lsls	r3, r3, #2
 800e134:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e136:	7cbb      	ldrb	r3, [r7, #18]
 800e138:	2b13      	cmp	r3, #19
 800e13a:	f240 83b1 	bls.w	800e8a0 <tcp_input+0x7d8>
 800e13e:	7cbb      	ldrb	r3, [r7, #18]
 800e140:	b29a      	uxth	r2, r3
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	891b      	ldrh	r3, [r3, #8]
 800e146:	429a      	cmp	r2, r3
 800e148:	f200 83aa 	bhi.w	800e8a0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e14c:	7cbb      	ldrb	r3, [r7, #18]
 800e14e:	b29b      	uxth	r3, r3
 800e150:	3b14      	subs	r3, #20
 800e152:	b29a      	uxth	r2, r3
 800e154:	4b81      	ldr	r3, [pc, #516]	@ (800e35c <tcp_input+0x294>)
 800e156:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e158:	4b81      	ldr	r3, [pc, #516]	@ (800e360 <tcp_input+0x298>)
 800e15a:	2200      	movs	r2, #0
 800e15c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	895a      	ldrh	r2, [r3, #10]
 800e162:	7cbb      	ldrb	r3, [r7, #18]
 800e164:	b29b      	uxth	r3, r3
 800e166:	429a      	cmp	r2, r3
 800e168:	d309      	bcc.n	800e17e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e16a:	4b7c      	ldr	r3, [pc, #496]	@ (800e35c <tcp_input+0x294>)
 800e16c:	881a      	ldrh	r2, [r3, #0]
 800e16e:	4b7d      	ldr	r3, [pc, #500]	@ (800e364 <tcp_input+0x29c>)
 800e170:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e172:	7cbb      	ldrb	r3, [r7, #18]
 800e174:	4619      	mov	r1, r3
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f7fe f8e6 	bl	800c348 <pbuf_remove_header>
 800e17c:	e04e      	b.n	800e21c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d105      	bne.n	800e192 <tcp_input+0xca>
 800e186:	4b70      	ldr	r3, [pc, #448]	@ (800e348 <tcp_input+0x280>)
 800e188:	22c2      	movs	r2, #194	@ 0xc2
 800e18a:	4977      	ldr	r1, [pc, #476]	@ (800e368 <tcp_input+0x2a0>)
 800e18c:	4870      	ldr	r0, [pc, #448]	@ (800e350 <tcp_input+0x288>)
 800e18e:	f006 fd69 	bl	8014c64 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e192:	2114      	movs	r1, #20
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f7fe f8d7 	bl	800c348 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	895a      	ldrh	r2, [r3, #10]
 800e19e:	4b71      	ldr	r3, [pc, #452]	@ (800e364 <tcp_input+0x29c>)
 800e1a0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e1a2:	4b6e      	ldr	r3, [pc, #440]	@ (800e35c <tcp_input+0x294>)
 800e1a4:	881a      	ldrh	r2, [r3, #0]
 800e1a6:	4b6f      	ldr	r3, [pc, #444]	@ (800e364 <tcp_input+0x29c>)
 800e1a8:	881b      	ldrh	r3, [r3, #0]
 800e1aa:	1ad3      	subs	r3, r2, r3
 800e1ac:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e1ae:	4b6d      	ldr	r3, [pc, #436]	@ (800e364 <tcp_input+0x29c>)
 800e1b0:	881b      	ldrh	r3, [r3, #0]
 800e1b2:	4619      	mov	r1, r3
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f7fe f8c7 	bl	800c348 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	895b      	ldrh	r3, [r3, #10]
 800e1c0:	8a3a      	ldrh	r2, [r7, #16]
 800e1c2:	429a      	cmp	r2, r3
 800e1c4:	f200 836e 	bhi.w	800e8a4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	685b      	ldr	r3, [r3, #4]
 800e1ce:	4a64      	ldr	r2, [pc, #400]	@ (800e360 <tcp_input+0x298>)
 800e1d0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	8a3a      	ldrh	r2, [r7, #16]
 800e1d8:	4611      	mov	r1, r2
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f7fe f8b4 	bl	800c348 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	891a      	ldrh	r2, [r3, #8]
 800e1e4:	8a3b      	ldrh	r3, [r7, #16]
 800e1e6:	1ad3      	subs	r3, r2, r3
 800e1e8:	b29a      	uxth	r2, r3
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	895b      	ldrh	r3, [r3, #10]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d005      	beq.n	800e202 <tcp_input+0x13a>
 800e1f6:	4b54      	ldr	r3, [pc, #336]	@ (800e348 <tcp_input+0x280>)
 800e1f8:	22df      	movs	r2, #223	@ 0xdf
 800e1fa:	495c      	ldr	r1, [pc, #368]	@ (800e36c <tcp_input+0x2a4>)
 800e1fc:	4854      	ldr	r0, [pc, #336]	@ (800e350 <tcp_input+0x288>)
 800e1fe:	f006 fd31 	bl	8014c64 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	891a      	ldrh	r2, [r3, #8]
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	891b      	ldrh	r3, [r3, #8]
 800e20c:	429a      	cmp	r2, r3
 800e20e:	d005      	beq.n	800e21c <tcp_input+0x154>
 800e210:	4b4d      	ldr	r3, [pc, #308]	@ (800e348 <tcp_input+0x280>)
 800e212:	22e0      	movs	r2, #224	@ 0xe0
 800e214:	4956      	ldr	r1, [pc, #344]	@ (800e370 <tcp_input+0x2a8>)
 800e216:	484e      	ldr	r0, [pc, #312]	@ (800e350 <tcp_input+0x288>)
 800e218:	f006 fd24 	bl	8014c64 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e21c:	4b4d      	ldr	r3, [pc, #308]	@ (800e354 <tcp_input+0x28c>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	881b      	ldrh	r3, [r3, #0]
 800e222:	b29b      	uxth	r3, r3
 800e224:	4a4b      	ldr	r2, [pc, #300]	@ (800e354 <tcp_input+0x28c>)
 800e226:	6814      	ldr	r4, [r2, #0]
 800e228:	4618      	mov	r0, r3
 800e22a:	f7fc fd11 	bl	800ac50 <lwip_htons>
 800e22e:	4603      	mov	r3, r0
 800e230:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e232:	4b48      	ldr	r3, [pc, #288]	@ (800e354 <tcp_input+0x28c>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	885b      	ldrh	r3, [r3, #2]
 800e238:	b29b      	uxth	r3, r3
 800e23a:	4a46      	ldr	r2, [pc, #280]	@ (800e354 <tcp_input+0x28c>)
 800e23c:	6814      	ldr	r4, [r2, #0]
 800e23e:	4618      	mov	r0, r3
 800e240:	f7fc fd06 	bl	800ac50 <lwip_htons>
 800e244:	4603      	mov	r3, r0
 800e246:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e248:	4b42      	ldr	r3, [pc, #264]	@ (800e354 <tcp_input+0x28c>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	685b      	ldr	r3, [r3, #4]
 800e24e:	4a41      	ldr	r2, [pc, #260]	@ (800e354 <tcp_input+0x28c>)
 800e250:	6814      	ldr	r4, [r2, #0]
 800e252:	4618      	mov	r0, r3
 800e254:	f7fc fd11 	bl	800ac7a <lwip_htonl>
 800e258:	4603      	mov	r3, r0
 800e25a:	6063      	str	r3, [r4, #4]
 800e25c:	6863      	ldr	r3, [r4, #4]
 800e25e:	4a45      	ldr	r2, [pc, #276]	@ (800e374 <tcp_input+0x2ac>)
 800e260:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e262:	4b3c      	ldr	r3, [pc, #240]	@ (800e354 <tcp_input+0x28c>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	689b      	ldr	r3, [r3, #8]
 800e268:	4a3a      	ldr	r2, [pc, #232]	@ (800e354 <tcp_input+0x28c>)
 800e26a:	6814      	ldr	r4, [r2, #0]
 800e26c:	4618      	mov	r0, r3
 800e26e:	f7fc fd04 	bl	800ac7a <lwip_htonl>
 800e272:	4603      	mov	r3, r0
 800e274:	60a3      	str	r3, [r4, #8]
 800e276:	68a3      	ldr	r3, [r4, #8]
 800e278:	4a3f      	ldr	r2, [pc, #252]	@ (800e378 <tcp_input+0x2b0>)
 800e27a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e27c:	4b35      	ldr	r3, [pc, #212]	@ (800e354 <tcp_input+0x28c>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	89db      	ldrh	r3, [r3, #14]
 800e282:	b29b      	uxth	r3, r3
 800e284:	4a33      	ldr	r2, [pc, #204]	@ (800e354 <tcp_input+0x28c>)
 800e286:	6814      	ldr	r4, [r2, #0]
 800e288:	4618      	mov	r0, r3
 800e28a:	f7fc fce1 	bl	800ac50 <lwip_htons>
 800e28e:	4603      	mov	r3, r0
 800e290:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e292:	4b30      	ldr	r3, [pc, #192]	@ (800e354 <tcp_input+0x28c>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	899b      	ldrh	r3, [r3, #12]
 800e298:	b29b      	uxth	r3, r3
 800e29a:	4618      	mov	r0, r3
 800e29c:	f7fc fcd8 	bl	800ac50 <lwip_htons>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	b2db      	uxtb	r3, r3
 800e2a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e2a8:	b2da      	uxtb	r2, r3
 800e2aa:	4b34      	ldr	r3, [pc, #208]	@ (800e37c <tcp_input+0x2b4>)
 800e2ac:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	891a      	ldrh	r2, [r3, #8]
 800e2b2:	4b33      	ldr	r3, [pc, #204]	@ (800e380 <tcp_input+0x2b8>)
 800e2b4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e2b6:	4b31      	ldr	r3, [pc, #196]	@ (800e37c <tcp_input+0x2b4>)
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	f003 0303 	and.w	r3, r3, #3
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d00c      	beq.n	800e2dc <tcp_input+0x214>
    tcplen++;
 800e2c2:	4b2f      	ldr	r3, [pc, #188]	@ (800e380 <tcp_input+0x2b8>)
 800e2c4:	881b      	ldrh	r3, [r3, #0]
 800e2c6:	3301      	adds	r3, #1
 800e2c8:	b29a      	uxth	r2, r3
 800e2ca:	4b2d      	ldr	r3, [pc, #180]	@ (800e380 <tcp_input+0x2b8>)
 800e2cc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	891a      	ldrh	r2, [r3, #8]
 800e2d2:	4b2b      	ldr	r3, [pc, #172]	@ (800e380 <tcp_input+0x2b8>)
 800e2d4:	881b      	ldrh	r3, [r3, #0]
 800e2d6:	429a      	cmp	r2, r3
 800e2d8:	f200 82e6 	bhi.w	800e8a8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e2dc:	2300      	movs	r3, #0
 800e2de:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e2e0:	4b28      	ldr	r3, [pc, #160]	@ (800e384 <tcp_input+0x2bc>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	61fb      	str	r3, [r7, #28]
 800e2e6:	e09d      	b.n	800e424 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e2e8:	69fb      	ldr	r3, [r7, #28]
 800e2ea:	7d1b      	ldrb	r3, [r3, #20]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d105      	bne.n	800e2fc <tcp_input+0x234>
 800e2f0:	4b15      	ldr	r3, [pc, #84]	@ (800e348 <tcp_input+0x280>)
 800e2f2:	22fb      	movs	r2, #251	@ 0xfb
 800e2f4:	4924      	ldr	r1, [pc, #144]	@ (800e388 <tcp_input+0x2c0>)
 800e2f6:	4816      	ldr	r0, [pc, #88]	@ (800e350 <tcp_input+0x288>)
 800e2f8:	f006 fcb4 	bl	8014c64 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e2fc:	69fb      	ldr	r3, [r7, #28]
 800e2fe:	7d1b      	ldrb	r3, [r3, #20]
 800e300:	2b0a      	cmp	r3, #10
 800e302:	d105      	bne.n	800e310 <tcp_input+0x248>
 800e304:	4b10      	ldr	r3, [pc, #64]	@ (800e348 <tcp_input+0x280>)
 800e306:	22fc      	movs	r2, #252	@ 0xfc
 800e308:	4920      	ldr	r1, [pc, #128]	@ (800e38c <tcp_input+0x2c4>)
 800e30a:	4811      	ldr	r0, [pc, #68]	@ (800e350 <tcp_input+0x288>)
 800e30c:	f006 fcaa 	bl	8014c64 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e310:	69fb      	ldr	r3, [r7, #28]
 800e312:	7d1b      	ldrb	r3, [r3, #20]
 800e314:	2b01      	cmp	r3, #1
 800e316:	d105      	bne.n	800e324 <tcp_input+0x25c>
 800e318:	4b0b      	ldr	r3, [pc, #44]	@ (800e348 <tcp_input+0x280>)
 800e31a:	22fd      	movs	r2, #253	@ 0xfd
 800e31c:	491c      	ldr	r1, [pc, #112]	@ (800e390 <tcp_input+0x2c8>)
 800e31e:	480c      	ldr	r0, [pc, #48]	@ (800e350 <tcp_input+0x288>)
 800e320:	f006 fca0 	bl	8014c64 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e324:	69fb      	ldr	r3, [r7, #28]
 800e326:	7a1b      	ldrb	r3, [r3, #8]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d033      	beq.n	800e394 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e32c:	69fb      	ldr	r3, [r7, #28]
 800e32e:	7a1a      	ldrb	r2, [r3, #8]
 800e330:	4b09      	ldr	r3, [pc, #36]	@ (800e358 <tcp_input+0x290>)
 800e332:	685b      	ldr	r3, [r3, #4]
 800e334:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e338:	3301      	adds	r3, #1
 800e33a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d029      	beq.n	800e394 <tcp_input+0x2cc>
      prev = pcb;
 800e340:	69fb      	ldr	r3, [r7, #28]
 800e342:	61bb      	str	r3, [r7, #24]
      continue;
 800e344:	e06b      	b.n	800e41e <tcp_input+0x356>
 800e346:	bf00      	nop
 800e348:	08016e64 	.word	0x08016e64
 800e34c:	08016e98 	.word	0x08016e98
 800e350:	08016eb0 	.word	0x08016eb0
 800e354:	20010334 	.word	0x20010334
 800e358:	2000984c 	.word	0x2000984c
 800e35c:	20010338 	.word	0x20010338
 800e360:	2001033c 	.word	0x2001033c
 800e364:	2001033a 	.word	0x2001033a
 800e368:	08016ed8 	.word	0x08016ed8
 800e36c:	08016ee8 	.word	0x08016ee8
 800e370:	08016ef4 	.word	0x08016ef4
 800e374:	20010344 	.word	0x20010344
 800e378:	20010348 	.word	0x20010348
 800e37c:	20010350 	.word	0x20010350
 800e380:	2001034e 	.word	0x2001034e
 800e384:	20010318 	.word	0x20010318
 800e388:	08016f14 	.word	0x08016f14
 800e38c:	08016f3c 	.word	0x08016f3c
 800e390:	08016f68 	.word	0x08016f68
    }

    if (pcb->remote_port == tcphdr->src &&
 800e394:	69fb      	ldr	r3, [r7, #28]
 800e396:	8b1a      	ldrh	r2, [r3, #24]
 800e398:	4b72      	ldr	r3, [pc, #456]	@ (800e564 <tcp_input+0x49c>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	881b      	ldrh	r3, [r3, #0]
 800e39e:	b29b      	uxth	r3, r3
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d13a      	bne.n	800e41a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e3a4:	69fb      	ldr	r3, [r7, #28]
 800e3a6:	8ada      	ldrh	r2, [r3, #22]
 800e3a8:	4b6e      	ldr	r3, [pc, #440]	@ (800e564 <tcp_input+0x49c>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	885b      	ldrh	r3, [r3, #2]
 800e3ae:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e3b0:	429a      	cmp	r2, r3
 800e3b2:	d132      	bne.n	800e41a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e3b4:	69fb      	ldr	r3, [r7, #28]
 800e3b6:	685a      	ldr	r2, [r3, #4]
 800e3b8:	4b6b      	ldr	r3, [pc, #428]	@ (800e568 <tcp_input+0x4a0>)
 800e3ba:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e3bc:	429a      	cmp	r2, r3
 800e3be:	d12c      	bne.n	800e41a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e3c0:	69fb      	ldr	r3, [r7, #28]
 800e3c2:	681a      	ldr	r2, [r3, #0]
 800e3c4:	4b68      	ldr	r3, [pc, #416]	@ (800e568 <tcp_input+0x4a0>)
 800e3c6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	d126      	bne.n	800e41a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e3cc:	69fb      	ldr	r3, [r7, #28]
 800e3ce:	68db      	ldr	r3, [r3, #12]
 800e3d0:	69fa      	ldr	r2, [r7, #28]
 800e3d2:	429a      	cmp	r2, r3
 800e3d4:	d106      	bne.n	800e3e4 <tcp_input+0x31c>
 800e3d6:	4b65      	ldr	r3, [pc, #404]	@ (800e56c <tcp_input+0x4a4>)
 800e3d8:	f240 120d 	movw	r2, #269	@ 0x10d
 800e3dc:	4964      	ldr	r1, [pc, #400]	@ (800e570 <tcp_input+0x4a8>)
 800e3de:	4865      	ldr	r0, [pc, #404]	@ (800e574 <tcp_input+0x4ac>)
 800e3e0:	f006 fc40 	bl	8014c64 <iprintf>
      if (prev != NULL) {
 800e3e4:	69bb      	ldr	r3, [r7, #24]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d00a      	beq.n	800e400 <tcp_input+0x338>
        prev->next = pcb->next;
 800e3ea:	69fb      	ldr	r3, [r7, #28]
 800e3ec:	68da      	ldr	r2, [r3, #12]
 800e3ee:	69bb      	ldr	r3, [r7, #24]
 800e3f0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e3f2:	4b61      	ldr	r3, [pc, #388]	@ (800e578 <tcp_input+0x4b0>)
 800e3f4:	681a      	ldr	r2, [r3, #0]
 800e3f6:	69fb      	ldr	r3, [r7, #28]
 800e3f8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e3fa:	4a5f      	ldr	r2, [pc, #380]	@ (800e578 <tcp_input+0x4b0>)
 800e3fc:	69fb      	ldr	r3, [r7, #28]
 800e3fe:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e400:	69fb      	ldr	r3, [r7, #28]
 800e402:	68db      	ldr	r3, [r3, #12]
 800e404:	69fa      	ldr	r2, [r7, #28]
 800e406:	429a      	cmp	r2, r3
 800e408:	d111      	bne.n	800e42e <tcp_input+0x366>
 800e40a:	4b58      	ldr	r3, [pc, #352]	@ (800e56c <tcp_input+0x4a4>)
 800e40c:	f240 1215 	movw	r2, #277	@ 0x115
 800e410:	495a      	ldr	r1, [pc, #360]	@ (800e57c <tcp_input+0x4b4>)
 800e412:	4858      	ldr	r0, [pc, #352]	@ (800e574 <tcp_input+0x4ac>)
 800e414:	f006 fc26 	bl	8014c64 <iprintf>
      break;
 800e418:	e009      	b.n	800e42e <tcp_input+0x366>
    }
    prev = pcb;
 800e41a:	69fb      	ldr	r3, [r7, #28]
 800e41c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e41e:	69fb      	ldr	r3, [r7, #28]
 800e420:	68db      	ldr	r3, [r3, #12]
 800e422:	61fb      	str	r3, [r7, #28]
 800e424:	69fb      	ldr	r3, [r7, #28]
 800e426:	2b00      	cmp	r3, #0
 800e428:	f47f af5e 	bne.w	800e2e8 <tcp_input+0x220>
 800e42c:	e000      	b.n	800e430 <tcp_input+0x368>
      break;
 800e42e:	bf00      	nop
  }

  if (pcb == NULL) {
 800e430:	69fb      	ldr	r3, [r7, #28]
 800e432:	2b00      	cmp	r3, #0
 800e434:	f040 80aa 	bne.w	800e58c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e438:	4b51      	ldr	r3, [pc, #324]	@ (800e580 <tcp_input+0x4b8>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	61fb      	str	r3, [r7, #28]
 800e43e:	e03f      	b.n	800e4c0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e440:	69fb      	ldr	r3, [r7, #28]
 800e442:	7d1b      	ldrb	r3, [r3, #20]
 800e444:	2b0a      	cmp	r3, #10
 800e446:	d006      	beq.n	800e456 <tcp_input+0x38e>
 800e448:	4b48      	ldr	r3, [pc, #288]	@ (800e56c <tcp_input+0x4a4>)
 800e44a:	f240 121f 	movw	r2, #287	@ 0x11f
 800e44e:	494d      	ldr	r1, [pc, #308]	@ (800e584 <tcp_input+0x4bc>)
 800e450:	4848      	ldr	r0, [pc, #288]	@ (800e574 <tcp_input+0x4ac>)
 800e452:	f006 fc07 	bl	8014c64 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e456:	69fb      	ldr	r3, [r7, #28]
 800e458:	7a1b      	ldrb	r3, [r3, #8]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d009      	beq.n	800e472 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e45e:	69fb      	ldr	r3, [r7, #28]
 800e460:	7a1a      	ldrb	r2, [r3, #8]
 800e462:	4b41      	ldr	r3, [pc, #260]	@ (800e568 <tcp_input+0x4a0>)
 800e464:	685b      	ldr	r3, [r3, #4]
 800e466:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e46a:	3301      	adds	r3, #1
 800e46c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e46e:	429a      	cmp	r2, r3
 800e470:	d122      	bne.n	800e4b8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e472:	69fb      	ldr	r3, [r7, #28]
 800e474:	8b1a      	ldrh	r2, [r3, #24]
 800e476:	4b3b      	ldr	r3, [pc, #236]	@ (800e564 <tcp_input+0x49c>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	881b      	ldrh	r3, [r3, #0]
 800e47c:	b29b      	uxth	r3, r3
 800e47e:	429a      	cmp	r2, r3
 800e480:	d11b      	bne.n	800e4ba <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e482:	69fb      	ldr	r3, [r7, #28]
 800e484:	8ada      	ldrh	r2, [r3, #22]
 800e486:	4b37      	ldr	r3, [pc, #220]	@ (800e564 <tcp_input+0x49c>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	885b      	ldrh	r3, [r3, #2]
 800e48c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e48e:	429a      	cmp	r2, r3
 800e490:	d113      	bne.n	800e4ba <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e492:	69fb      	ldr	r3, [r7, #28]
 800e494:	685a      	ldr	r2, [r3, #4]
 800e496:	4b34      	ldr	r3, [pc, #208]	@ (800e568 <tcp_input+0x4a0>)
 800e498:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e49a:	429a      	cmp	r2, r3
 800e49c:	d10d      	bne.n	800e4ba <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e49e:	69fb      	ldr	r3, [r7, #28]
 800e4a0:	681a      	ldr	r2, [r3, #0]
 800e4a2:	4b31      	ldr	r3, [pc, #196]	@ (800e568 <tcp_input+0x4a0>)
 800e4a4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	d107      	bne.n	800e4ba <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e4aa:	69f8      	ldr	r0, [r7, #28]
 800e4ac:	f000 fb56 	bl	800eb5c <tcp_timewait_input>
        }
        pbuf_free(p);
 800e4b0:	6878      	ldr	r0, [r7, #4]
 800e4b2:	f7fd ffcf 	bl	800c454 <pbuf_free>
        return;
 800e4b6:	e1fd      	b.n	800e8b4 <tcp_input+0x7ec>
        continue;
 800e4b8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e4ba:	69fb      	ldr	r3, [r7, #28]
 800e4bc:	68db      	ldr	r3, [r3, #12]
 800e4be:	61fb      	str	r3, [r7, #28]
 800e4c0:	69fb      	ldr	r3, [r7, #28]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d1bc      	bne.n	800e440 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e4ca:	4b2f      	ldr	r3, [pc, #188]	@ (800e588 <tcp_input+0x4c0>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	617b      	str	r3, [r7, #20]
 800e4d0:	e02a      	b.n	800e528 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	7a1b      	ldrb	r3, [r3, #8]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d00c      	beq.n	800e4f4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	7a1a      	ldrb	r2, [r3, #8]
 800e4de:	4b22      	ldr	r3, [pc, #136]	@ (800e568 <tcp_input+0x4a0>)
 800e4e0:	685b      	ldr	r3, [r3, #4]
 800e4e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e4e6:	3301      	adds	r3, #1
 800e4e8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d002      	beq.n	800e4f4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e4ee:	697b      	ldr	r3, [r7, #20]
 800e4f0:	61bb      	str	r3, [r7, #24]
        continue;
 800e4f2:	e016      	b.n	800e522 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	8ada      	ldrh	r2, [r3, #22]
 800e4f8:	4b1a      	ldr	r3, [pc, #104]	@ (800e564 <tcp_input+0x49c>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	885b      	ldrh	r3, [r3, #2]
 800e4fe:	b29b      	uxth	r3, r3
 800e500:	429a      	cmp	r2, r3
 800e502:	d10c      	bne.n	800e51e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e504:	697b      	ldr	r3, [r7, #20]
 800e506:	681a      	ldr	r2, [r3, #0]
 800e508:	4b17      	ldr	r3, [pc, #92]	@ (800e568 <tcp_input+0x4a0>)
 800e50a:	695b      	ldr	r3, [r3, #20]
 800e50c:	429a      	cmp	r2, r3
 800e50e:	d00f      	beq.n	800e530 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e510:	697b      	ldr	r3, [r7, #20]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d00d      	beq.n	800e532 <tcp_input+0x46a>
 800e516:	697b      	ldr	r3, [r7, #20]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d009      	beq.n	800e532 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e51e:	697b      	ldr	r3, [r7, #20]
 800e520:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	68db      	ldr	r3, [r3, #12]
 800e526:	617b      	str	r3, [r7, #20]
 800e528:	697b      	ldr	r3, [r7, #20]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d1d1      	bne.n	800e4d2 <tcp_input+0x40a>
 800e52e:	e000      	b.n	800e532 <tcp_input+0x46a>
            break;
 800e530:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e532:	697b      	ldr	r3, [r7, #20]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d029      	beq.n	800e58c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e538:	69bb      	ldr	r3, [r7, #24]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d00a      	beq.n	800e554 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e53e:	697b      	ldr	r3, [r7, #20]
 800e540:	68da      	ldr	r2, [r3, #12]
 800e542:	69bb      	ldr	r3, [r7, #24]
 800e544:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e546:	4b10      	ldr	r3, [pc, #64]	@ (800e588 <tcp_input+0x4c0>)
 800e548:	681a      	ldr	r2, [r3, #0]
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e54e:	4a0e      	ldr	r2, [pc, #56]	@ (800e588 <tcp_input+0x4c0>)
 800e550:	697b      	ldr	r3, [r7, #20]
 800e552:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e554:	6978      	ldr	r0, [r7, #20]
 800e556:	f000 fa03 	bl	800e960 <tcp_listen_input>
      }
      pbuf_free(p);
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f7fd ff7a 	bl	800c454 <pbuf_free>
      return;
 800e560:	e1a8      	b.n	800e8b4 <tcp_input+0x7ec>
 800e562:	bf00      	nop
 800e564:	20010334 	.word	0x20010334
 800e568:	2000984c 	.word	0x2000984c
 800e56c:	08016e64 	.word	0x08016e64
 800e570:	08016f90 	.word	0x08016f90
 800e574:	08016eb0 	.word	0x08016eb0
 800e578:	20010318 	.word	0x20010318
 800e57c:	08016fbc 	.word	0x08016fbc
 800e580:	2001031c 	.word	0x2001031c
 800e584:	08016fe8 	.word	0x08016fe8
 800e588:	20010314 	.word	0x20010314
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e58c:	69fb      	ldr	r3, [r7, #28]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	f000 8158 	beq.w	800e844 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e594:	4b95      	ldr	r3, [pc, #596]	@ (800e7ec <tcp_input+0x724>)
 800e596:	2200      	movs	r2, #0
 800e598:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	891a      	ldrh	r2, [r3, #8]
 800e59e:	4b93      	ldr	r3, [pc, #588]	@ (800e7ec <tcp_input+0x724>)
 800e5a0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e5a2:	4a92      	ldr	r2, [pc, #584]	@ (800e7ec <tcp_input+0x724>)
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e5a8:	4b91      	ldr	r3, [pc, #580]	@ (800e7f0 <tcp_input+0x728>)
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	4a8f      	ldr	r2, [pc, #572]	@ (800e7ec <tcp_input+0x724>)
 800e5ae:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e5b0:	4b90      	ldr	r3, [pc, #576]	@ (800e7f4 <tcp_input+0x72c>)
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e5b6:	4b90      	ldr	r3, [pc, #576]	@ (800e7f8 <tcp_input+0x730>)
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e5bc:	4b8f      	ldr	r3, [pc, #572]	@ (800e7fc <tcp_input+0x734>)
 800e5be:	2200      	movs	r2, #0
 800e5c0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e5c2:	4b8f      	ldr	r3, [pc, #572]	@ (800e800 <tcp_input+0x738>)
 800e5c4:	781b      	ldrb	r3, [r3, #0]
 800e5c6:	f003 0308 	and.w	r3, r3, #8
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d006      	beq.n	800e5dc <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	7b5b      	ldrb	r3, [r3, #13]
 800e5d2:	f043 0301 	orr.w	r3, r3, #1
 800e5d6:	b2da      	uxtb	r2, r3
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e5dc:	69fb      	ldr	r3, [r7, #28]
 800e5de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d017      	beq.n	800e614 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e5e4:	69f8      	ldr	r0, [r7, #28]
 800e5e6:	f7ff f927 	bl	800d838 <tcp_process_refused_data>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	f113 0f0d 	cmn.w	r3, #13
 800e5f0:	d007      	beq.n	800e602 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e5f2:	69fb      	ldr	r3, [r7, #28]
 800e5f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d00c      	beq.n	800e614 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e5fa:	4b82      	ldr	r3, [pc, #520]	@ (800e804 <tcp_input+0x73c>)
 800e5fc:	881b      	ldrh	r3, [r3, #0]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d008      	beq.n	800e614 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e602:	69fb      	ldr	r3, [r7, #28]
 800e604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e606:	2b00      	cmp	r3, #0
 800e608:	f040 80e4 	bne.w	800e7d4 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e60c:	69f8      	ldr	r0, [r7, #28]
 800e60e:	f003 f9a9 	bl	8011964 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e612:	e0df      	b.n	800e7d4 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 800e614:	4a7c      	ldr	r2, [pc, #496]	@ (800e808 <tcp_input+0x740>)
 800e616:	69fb      	ldr	r3, [r7, #28]
 800e618:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e61a:	69f8      	ldr	r0, [r7, #28]
 800e61c:	f000 fb18 	bl	800ec50 <tcp_process>
 800e620:	4603      	mov	r3, r0
 800e622:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e624:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e628:	f113 0f0d 	cmn.w	r3, #13
 800e62c:	f000 80d4 	beq.w	800e7d8 <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 800e630:	4b71      	ldr	r3, [pc, #452]	@ (800e7f8 <tcp_input+0x730>)
 800e632:	781b      	ldrb	r3, [r3, #0]
 800e634:	f003 0308 	and.w	r3, r3, #8
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d015      	beq.n	800e668 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e63c:	69fb      	ldr	r3, [r7, #28]
 800e63e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e642:	2b00      	cmp	r3, #0
 800e644:	d008      	beq.n	800e658 <tcp_input+0x590>
 800e646:	69fb      	ldr	r3, [r7, #28]
 800e648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e64c:	69fa      	ldr	r2, [r7, #28]
 800e64e:	6912      	ldr	r2, [r2, #16]
 800e650:	f06f 010d 	mvn.w	r1, #13
 800e654:	4610      	mov	r0, r2
 800e656:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e658:	69f9      	ldr	r1, [r7, #28]
 800e65a:	486c      	ldr	r0, [pc, #432]	@ (800e80c <tcp_input+0x744>)
 800e65c:	f7ff fbbc 	bl	800ddd8 <tcp_pcb_remove>
        tcp_free(pcb);
 800e660:	69f8      	ldr	r0, [r7, #28]
 800e662:	f7fe f9a3 	bl	800c9ac <tcp_free>
 800e666:	e0da      	b.n	800e81e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800e668:	2300      	movs	r3, #0
 800e66a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e66c:	4b63      	ldr	r3, [pc, #396]	@ (800e7fc <tcp_input+0x734>)
 800e66e:	881b      	ldrh	r3, [r3, #0]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d01d      	beq.n	800e6b0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e674:	4b61      	ldr	r3, [pc, #388]	@ (800e7fc <tcp_input+0x734>)
 800e676:	881b      	ldrh	r3, [r3, #0]
 800e678:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e67a:	69fb      	ldr	r3, [r7, #28]
 800e67c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e680:	2b00      	cmp	r3, #0
 800e682:	d00a      	beq.n	800e69a <tcp_input+0x5d2>
 800e684:	69fb      	ldr	r3, [r7, #28]
 800e686:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e68a:	69fa      	ldr	r2, [r7, #28]
 800e68c:	6910      	ldr	r0, [r2, #16]
 800e68e:	89fa      	ldrh	r2, [r7, #14]
 800e690:	69f9      	ldr	r1, [r7, #28]
 800e692:	4798      	blx	r3
 800e694:	4603      	mov	r3, r0
 800e696:	74fb      	strb	r3, [r7, #19]
 800e698:	e001      	b.n	800e69e <tcp_input+0x5d6>
 800e69a:	2300      	movs	r3, #0
 800e69c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e69e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e6a2:	f113 0f0d 	cmn.w	r3, #13
 800e6a6:	f000 8099 	beq.w	800e7dc <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e6aa:	4b54      	ldr	r3, [pc, #336]	@ (800e7fc <tcp_input+0x734>)
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e6b0:	69f8      	ldr	r0, [r7, #28]
 800e6b2:	f000 f915 	bl	800e8e0 <tcp_input_delayed_close>
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	f040 8091 	bne.w	800e7e0 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e6be:	4b4d      	ldr	r3, [pc, #308]	@ (800e7f4 <tcp_input+0x72c>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d041      	beq.n	800e74a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e6c6:	69fb      	ldr	r3, [r7, #28]
 800e6c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d006      	beq.n	800e6dc <tcp_input+0x614>
 800e6ce:	4b50      	ldr	r3, [pc, #320]	@ (800e810 <tcp_input+0x748>)
 800e6d0:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800e6d4:	494f      	ldr	r1, [pc, #316]	@ (800e814 <tcp_input+0x74c>)
 800e6d6:	4850      	ldr	r0, [pc, #320]	@ (800e818 <tcp_input+0x750>)
 800e6d8:	f006 fac4 	bl	8014c64 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e6dc:	69fb      	ldr	r3, [r7, #28]
 800e6de:	8b5b      	ldrh	r3, [r3, #26]
 800e6e0:	f003 0310 	and.w	r3, r3, #16
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d008      	beq.n	800e6fa <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e6e8:	4b42      	ldr	r3, [pc, #264]	@ (800e7f4 <tcp_input+0x72c>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f7fd feb1 	bl	800c454 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e6f2:	69f8      	ldr	r0, [r7, #28]
 800e6f4:	f7fe fc42 	bl	800cf7c <tcp_abort>
            goto aborted;
 800e6f8:	e091      	b.n	800e81e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e6fa:	69fb      	ldr	r3, [r7, #28]
 800e6fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e700:	2b00      	cmp	r3, #0
 800e702:	d00c      	beq.n	800e71e <tcp_input+0x656>
 800e704:	69fb      	ldr	r3, [r7, #28]
 800e706:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e70a:	69fb      	ldr	r3, [r7, #28]
 800e70c:	6918      	ldr	r0, [r3, #16]
 800e70e:	4b39      	ldr	r3, [pc, #228]	@ (800e7f4 <tcp_input+0x72c>)
 800e710:	681a      	ldr	r2, [r3, #0]
 800e712:	2300      	movs	r3, #0
 800e714:	69f9      	ldr	r1, [r7, #28]
 800e716:	47a0      	blx	r4
 800e718:	4603      	mov	r3, r0
 800e71a:	74fb      	strb	r3, [r7, #19]
 800e71c:	e008      	b.n	800e730 <tcp_input+0x668>
 800e71e:	4b35      	ldr	r3, [pc, #212]	@ (800e7f4 <tcp_input+0x72c>)
 800e720:	681a      	ldr	r2, [r3, #0]
 800e722:	2300      	movs	r3, #0
 800e724:	69f9      	ldr	r1, [r7, #28]
 800e726:	2000      	movs	r0, #0
 800e728:	f7ff f95e 	bl	800d9e8 <tcp_recv_null>
 800e72c:	4603      	mov	r3, r0
 800e72e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e730:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e734:	f113 0f0d 	cmn.w	r3, #13
 800e738:	d054      	beq.n	800e7e4 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e73a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d003      	beq.n	800e74a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e742:	4b2c      	ldr	r3, [pc, #176]	@ (800e7f4 <tcp_input+0x72c>)
 800e744:	681a      	ldr	r2, [r3, #0]
 800e746:	69fb      	ldr	r3, [r7, #28]
 800e748:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e74a:	4b2b      	ldr	r3, [pc, #172]	@ (800e7f8 <tcp_input+0x730>)
 800e74c:	781b      	ldrb	r3, [r3, #0]
 800e74e:	f003 0320 	and.w	r3, r3, #32
 800e752:	2b00      	cmp	r3, #0
 800e754:	d031      	beq.n	800e7ba <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 800e756:	69fb      	ldr	r3, [r7, #28]
 800e758:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d009      	beq.n	800e772 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e75e:	69fb      	ldr	r3, [r7, #28]
 800e760:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e762:	7b5a      	ldrb	r2, [r3, #13]
 800e764:	69fb      	ldr	r3, [r7, #28]
 800e766:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e768:	f042 0220 	orr.w	r2, r2, #32
 800e76c:	b2d2      	uxtb	r2, r2
 800e76e:	735a      	strb	r2, [r3, #13]
 800e770:	e023      	b.n	800e7ba <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e772:	69fb      	ldr	r3, [r7, #28]
 800e774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e776:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800e77a:	4293      	cmp	r3, r2
 800e77c:	d005      	beq.n	800e78a <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 800e77e:	69fb      	ldr	r3, [r7, #28]
 800e780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e782:	3301      	adds	r3, #1
 800e784:	b29a      	uxth	r2, r3
 800e786:	69fb      	ldr	r3, [r7, #28]
 800e788:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e78a:	69fb      	ldr	r3, [r7, #28]
 800e78c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e790:	2b00      	cmp	r3, #0
 800e792:	d00b      	beq.n	800e7ac <tcp_input+0x6e4>
 800e794:	69fb      	ldr	r3, [r7, #28]
 800e796:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e79a:	69fb      	ldr	r3, [r7, #28]
 800e79c:	6918      	ldr	r0, [r3, #16]
 800e79e:	2300      	movs	r3, #0
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	69f9      	ldr	r1, [r7, #28]
 800e7a4:	47a0      	blx	r4
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	74fb      	strb	r3, [r7, #19]
 800e7aa:	e001      	b.n	800e7b0 <tcp_input+0x6e8>
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e7b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e7b4:	f113 0f0d 	cmn.w	r3, #13
 800e7b8:	d016      	beq.n	800e7e8 <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e7ba:	4b13      	ldr	r3, [pc, #76]	@ (800e808 <tcp_input+0x740>)
 800e7bc:	2200      	movs	r2, #0
 800e7be:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e7c0:	69f8      	ldr	r0, [r7, #28]
 800e7c2:	f000 f88d 	bl	800e8e0 <tcp_input_delayed_close>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d127      	bne.n	800e81c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e7cc:	69f8      	ldr	r0, [r7, #28]
 800e7ce:	f002 fac3 	bl	8010d58 <tcp_output>
 800e7d2:	e024      	b.n	800e81e <tcp_input+0x756>
        goto aborted;
 800e7d4:	bf00      	nop
 800e7d6:	e022      	b.n	800e81e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e7d8:	bf00      	nop
 800e7da:	e020      	b.n	800e81e <tcp_input+0x756>
              goto aborted;
 800e7dc:	bf00      	nop
 800e7de:	e01e      	b.n	800e81e <tcp_input+0x756>
          goto aborted;
 800e7e0:	bf00      	nop
 800e7e2:	e01c      	b.n	800e81e <tcp_input+0x756>
            goto aborted;
 800e7e4:	bf00      	nop
 800e7e6:	e01a      	b.n	800e81e <tcp_input+0x756>
              goto aborted;
 800e7e8:	bf00      	nop
 800e7ea:	e018      	b.n	800e81e <tcp_input+0x756>
 800e7ec:	20010324 	.word	0x20010324
 800e7f0:	20010334 	.word	0x20010334
 800e7f4:	20010354 	.word	0x20010354
 800e7f8:	20010351 	.word	0x20010351
 800e7fc:	2001034c 	.word	0x2001034c
 800e800:	20010350 	.word	0x20010350
 800e804:	2001034e 	.word	0x2001034e
 800e808:	20010358 	.word	0x20010358
 800e80c:	20010318 	.word	0x20010318
 800e810:	08016e64 	.word	0x08016e64
 800e814:	08017018 	.word	0x08017018
 800e818:	08016eb0 	.word	0x08016eb0
          goto aborted;
 800e81c:	bf00      	nop
    tcp_input_pcb = NULL;
 800e81e:	4b27      	ldr	r3, [pc, #156]	@ (800e8bc <tcp_input+0x7f4>)
 800e820:	2200      	movs	r2, #0
 800e822:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e824:	4b26      	ldr	r3, [pc, #152]	@ (800e8c0 <tcp_input+0x7f8>)
 800e826:	2200      	movs	r2, #0
 800e828:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e82a:	4b26      	ldr	r3, [pc, #152]	@ (800e8c4 <tcp_input+0x7fc>)
 800e82c:	685b      	ldr	r3, [r3, #4]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d03f      	beq.n	800e8b2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800e832:	4b24      	ldr	r3, [pc, #144]	@ (800e8c4 <tcp_input+0x7fc>)
 800e834:	685b      	ldr	r3, [r3, #4]
 800e836:	4618      	mov	r0, r3
 800e838:	f7fd fe0c 	bl	800c454 <pbuf_free>
      inseg.p = NULL;
 800e83c:	4b21      	ldr	r3, [pc, #132]	@ (800e8c4 <tcp_input+0x7fc>)
 800e83e:	2200      	movs	r2, #0
 800e840:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e842:	e036      	b.n	800e8b2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e844:	4b20      	ldr	r3, [pc, #128]	@ (800e8c8 <tcp_input+0x800>)
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	899b      	ldrh	r3, [r3, #12]
 800e84a:	b29b      	uxth	r3, r3
 800e84c:	4618      	mov	r0, r3
 800e84e:	f7fc f9ff 	bl	800ac50 <lwip_htons>
 800e852:	4603      	mov	r3, r0
 800e854:	b2db      	uxtb	r3, r3
 800e856:	f003 0304 	and.w	r3, r3, #4
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d118      	bne.n	800e890 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e85e:	4b1b      	ldr	r3, [pc, #108]	@ (800e8cc <tcp_input+0x804>)
 800e860:	6819      	ldr	r1, [r3, #0]
 800e862:	4b1b      	ldr	r3, [pc, #108]	@ (800e8d0 <tcp_input+0x808>)
 800e864:	881b      	ldrh	r3, [r3, #0]
 800e866:	461a      	mov	r2, r3
 800e868:	4b1a      	ldr	r3, [pc, #104]	@ (800e8d4 <tcp_input+0x80c>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e86e:	4b16      	ldr	r3, [pc, #88]	@ (800e8c8 <tcp_input+0x800>)
 800e870:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e872:	885b      	ldrh	r3, [r3, #2]
 800e874:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e876:	4a14      	ldr	r2, [pc, #80]	@ (800e8c8 <tcp_input+0x800>)
 800e878:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e87a:	8812      	ldrh	r2, [r2, #0]
 800e87c:	b292      	uxth	r2, r2
 800e87e:	9202      	str	r2, [sp, #8]
 800e880:	9301      	str	r3, [sp, #4]
 800e882:	4b15      	ldr	r3, [pc, #84]	@ (800e8d8 <tcp_input+0x810>)
 800e884:	9300      	str	r3, [sp, #0]
 800e886:	4b15      	ldr	r3, [pc, #84]	@ (800e8dc <tcp_input+0x814>)
 800e888:	4602      	mov	r2, r0
 800e88a:	2000      	movs	r0, #0
 800e88c:	f003 f818 	bl	80118c0 <tcp_rst>
    pbuf_free(p);
 800e890:	6878      	ldr	r0, [r7, #4]
 800e892:	f7fd fddf 	bl	800c454 <pbuf_free>
  return;
 800e896:	e00c      	b.n	800e8b2 <tcp_input+0x7ea>
    goto dropped;
 800e898:	bf00      	nop
 800e89a:	e006      	b.n	800e8aa <tcp_input+0x7e2>
    goto dropped;
 800e89c:	bf00      	nop
 800e89e:	e004      	b.n	800e8aa <tcp_input+0x7e2>
    goto dropped;
 800e8a0:	bf00      	nop
 800e8a2:	e002      	b.n	800e8aa <tcp_input+0x7e2>
      goto dropped;
 800e8a4:	bf00      	nop
 800e8a6:	e000      	b.n	800e8aa <tcp_input+0x7e2>
      goto dropped;
 800e8a8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f7fd fdd2 	bl	800c454 <pbuf_free>
 800e8b0:	e000      	b.n	800e8b4 <tcp_input+0x7ec>
  return;
 800e8b2:	bf00      	nop
}
 800e8b4:	3724      	adds	r7, #36	@ 0x24
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd90      	pop	{r4, r7, pc}
 800e8ba:	bf00      	nop
 800e8bc:	20010358 	.word	0x20010358
 800e8c0:	20010354 	.word	0x20010354
 800e8c4:	20010324 	.word	0x20010324
 800e8c8:	20010334 	.word	0x20010334
 800e8cc:	20010348 	.word	0x20010348
 800e8d0:	2001034e 	.word	0x2001034e
 800e8d4:	20010344 	.word	0x20010344
 800e8d8:	2000985c 	.word	0x2000985c
 800e8dc:	20009860 	.word	0x20009860

0800e8e0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b082      	sub	sp, #8
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d106      	bne.n	800e8fc <tcp_input_delayed_close+0x1c>
 800e8ee:	4b17      	ldr	r3, [pc, #92]	@ (800e94c <tcp_input_delayed_close+0x6c>)
 800e8f0:	f240 225a 	movw	r2, #602	@ 0x25a
 800e8f4:	4916      	ldr	r1, [pc, #88]	@ (800e950 <tcp_input_delayed_close+0x70>)
 800e8f6:	4817      	ldr	r0, [pc, #92]	@ (800e954 <tcp_input_delayed_close+0x74>)
 800e8f8:	f006 f9b4 	bl	8014c64 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e8fc:	4b16      	ldr	r3, [pc, #88]	@ (800e958 <tcp_input_delayed_close+0x78>)
 800e8fe:	781b      	ldrb	r3, [r3, #0]
 800e900:	f003 0310 	and.w	r3, r3, #16
 800e904:	2b00      	cmp	r3, #0
 800e906:	d01c      	beq.n	800e942 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	8b5b      	ldrh	r3, [r3, #26]
 800e90c:	f003 0310 	and.w	r3, r3, #16
 800e910:	2b00      	cmp	r3, #0
 800e912:	d10d      	bne.n	800e930 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d008      	beq.n	800e930 <tcp_input_delayed_close+0x50>
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e924:	687a      	ldr	r2, [r7, #4]
 800e926:	6912      	ldr	r2, [r2, #16]
 800e928:	f06f 010e 	mvn.w	r1, #14
 800e92c:	4610      	mov	r0, r2
 800e92e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e930:	6879      	ldr	r1, [r7, #4]
 800e932:	480a      	ldr	r0, [pc, #40]	@ (800e95c <tcp_input_delayed_close+0x7c>)
 800e934:	f7ff fa50 	bl	800ddd8 <tcp_pcb_remove>
    tcp_free(pcb);
 800e938:	6878      	ldr	r0, [r7, #4]
 800e93a:	f7fe f837 	bl	800c9ac <tcp_free>
    return 1;
 800e93e:	2301      	movs	r3, #1
 800e940:	e000      	b.n	800e944 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e942:	2300      	movs	r3, #0
}
 800e944:	4618      	mov	r0, r3
 800e946:	3708      	adds	r7, #8
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}
 800e94c:	08016e64 	.word	0x08016e64
 800e950:	08017034 	.word	0x08017034
 800e954:	08016eb0 	.word	0x08016eb0
 800e958:	20010351 	.word	0x20010351
 800e95c:	20010318 	.word	0x20010318

0800e960 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e960:	b590      	push	{r4, r7, lr}
 800e962:	b08b      	sub	sp, #44	@ 0x2c
 800e964:	af04      	add	r7, sp, #16
 800e966:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e968:	4b6f      	ldr	r3, [pc, #444]	@ (800eb28 <tcp_listen_input+0x1c8>)
 800e96a:	781b      	ldrb	r3, [r3, #0]
 800e96c:	f003 0304 	and.w	r3, r3, #4
 800e970:	2b00      	cmp	r3, #0
 800e972:	f040 80d2 	bne.w	800eb1a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d106      	bne.n	800e98a <tcp_listen_input+0x2a>
 800e97c:	4b6b      	ldr	r3, [pc, #428]	@ (800eb2c <tcp_listen_input+0x1cc>)
 800e97e:	f240 2281 	movw	r2, #641	@ 0x281
 800e982:	496b      	ldr	r1, [pc, #428]	@ (800eb30 <tcp_listen_input+0x1d0>)
 800e984:	486b      	ldr	r0, [pc, #428]	@ (800eb34 <tcp_listen_input+0x1d4>)
 800e986:	f006 f96d 	bl	8014c64 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e98a:	4b67      	ldr	r3, [pc, #412]	@ (800eb28 <tcp_listen_input+0x1c8>)
 800e98c:	781b      	ldrb	r3, [r3, #0]
 800e98e:	f003 0310 	and.w	r3, r3, #16
 800e992:	2b00      	cmp	r3, #0
 800e994:	d019      	beq.n	800e9ca <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e996:	4b68      	ldr	r3, [pc, #416]	@ (800eb38 <tcp_listen_input+0x1d8>)
 800e998:	6819      	ldr	r1, [r3, #0]
 800e99a:	4b68      	ldr	r3, [pc, #416]	@ (800eb3c <tcp_listen_input+0x1dc>)
 800e99c:	881b      	ldrh	r3, [r3, #0]
 800e99e:	461a      	mov	r2, r3
 800e9a0:	4b67      	ldr	r3, [pc, #412]	@ (800eb40 <tcp_listen_input+0x1e0>)
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e9a6:	4b67      	ldr	r3, [pc, #412]	@ (800eb44 <tcp_listen_input+0x1e4>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9aa:	885b      	ldrh	r3, [r3, #2]
 800e9ac:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e9ae:	4a65      	ldr	r2, [pc, #404]	@ (800eb44 <tcp_listen_input+0x1e4>)
 800e9b0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9b2:	8812      	ldrh	r2, [r2, #0]
 800e9b4:	b292      	uxth	r2, r2
 800e9b6:	9202      	str	r2, [sp, #8]
 800e9b8:	9301      	str	r3, [sp, #4]
 800e9ba:	4b63      	ldr	r3, [pc, #396]	@ (800eb48 <tcp_listen_input+0x1e8>)
 800e9bc:	9300      	str	r3, [sp, #0]
 800e9be:	4b63      	ldr	r3, [pc, #396]	@ (800eb4c <tcp_listen_input+0x1ec>)
 800e9c0:	4602      	mov	r2, r0
 800e9c2:	6878      	ldr	r0, [r7, #4]
 800e9c4:	f002 ff7c 	bl	80118c0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e9c8:	e0a9      	b.n	800eb1e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e9ca:	4b57      	ldr	r3, [pc, #348]	@ (800eb28 <tcp_listen_input+0x1c8>)
 800e9cc:	781b      	ldrb	r3, [r3, #0]
 800e9ce:	f003 0302 	and.w	r3, r3, #2
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	f000 80a3 	beq.w	800eb1e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	7d5b      	ldrb	r3, [r3, #21]
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f7ff f927 	bl	800dc30 <tcp_alloc>
 800e9e2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d111      	bne.n	800ea0e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	699b      	ldr	r3, [r3, #24]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d00a      	beq.n	800ea08 <tcp_listen_input+0xa8>
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	699b      	ldr	r3, [r3, #24]
 800e9f6:	687a      	ldr	r2, [r7, #4]
 800e9f8:	6910      	ldr	r0, [r2, #16]
 800e9fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e9fe:	2100      	movs	r1, #0
 800ea00:	4798      	blx	r3
 800ea02:	4603      	mov	r3, r0
 800ea04:	73bb      	strb	r3, [r7, #14]
      return;
 800ea06:	e08b      	b.n	800eb20 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ea08:	23f0      	movs	r3, #240	@ 0xf0
 800ea0a:	73bb      	strb	r3, [r7, #14]
      return;
 800ea0c:	e088      	b.n	800eb20 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ea0e:	4b50      	ldr	r3, [pc, #320]	@ (800eb50 <tcp_listen_input+0x1f0>)
 800ea10:	695a      	ldr	r2, [r3, #20]
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ea16:	4b4e      	ldr	r3, [pc, #312]	@ (800eb50 <tcp_listen_input+0x1f0>)
 800ea18:	691a      	ldr	r2, [r3, #16]
 800ea1a:	697b      	ldr	r3, [r7, #20]
 800ea1c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	8ada      	ldrh	r2, [r3, #22]
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ea26:	4b47      	ldr	r3, [pc, #284]	@ (800eb44 <tcp_listen_input+0x1e4>)
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	881b      	ldrh	r3, [r3, #0]
 800ea2c:	b29a      	uxth	r2, r3
 800ea2e:	697b      	ldr	r3, [r7, #20]
 800ea30:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ea32:	697b      	ldr	r3, [r7, #20]
 800ea34:	2203      	movs	r2, #3
 800ea36:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ea38:	4b41      	ldr	r3, [pc, #260]	@ (800eb40 <tcp_listen_input+0x1e0>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	1c5a      	adds	r2, r3, #1
 800ea3e:	697b      	ldr	r3, [r7, #20]
 800ea40:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ea46:	697b      	ldr	r3, [r7, #20]
 800ea48:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800ea4a:	6978      	ldr	r0, [r7, #20]
 800ea4c:	f7ff fa58 	bl	800df00 <tcp_next_iss>
 800ea50:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ea52:	697b      	ldr	r3, [r7, #20]
 800ea54:	693a      	ldr	r2, [r7, #16]
 800ea56:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800ea58:	697b      	ldr	r3, [r7, #20]
 800ea5a:	693a      	ldr	r2, [r7, #16]
 800ea5c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800ea5e:	697b      	ldr	r3, [r7, #20]
 800ea60:	693a      	ldr	r2, [r7, #16]
 800ea62:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	693a      	ldr	r2, [r7, #16]
 800ea68:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ea6a:	4b35      	ldr	r3, [pc, #212]	@ (800eb40 <tcp_listen_input+0x1e0>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	1e5a      	subs	r2, r3, #1
 800ea70:	697b      	ldr	r3, [r7, #20]
 800ea72:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	691a      	ldr	r2, [r3, #16]
 800ea78:	697b      	ldr	r3, [r7, #20]
 800ea7a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	687a      	ldr	r2, [r7, #4]
 800ea80:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	7a5b      	ldrb	r3, [r3, #9]
 800ea86:	f003 030c 	and.w	r3, r3, #12
 800ea8a:	b2da      	uxtb	r2, r3
 800ea8c:	697b      	ldr	r3, [r7, #20]
 800ea8e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	7a1a      	ldrb	r2, [r3, #8]
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ea98:	4b2e      	ldr	r3, [pc, #184]	@ (800eb54 <tcp_listen_input+0x1f4>)
 800ea9a:	681a      	ldr	r2, [r3, #0]
 800ea9c:	697b      	ldr	r3, [r7, #20]
 800ea9e:	60da      	str	r2, [r3, #12]
 800eaa0:	4a2c      	ldr	r2, [pc, #176]	@ (800eb54 <tcp_listen_input+0x1f4>)
 800eaa2:	697b      	ldr	r3, [r7, #20]
 800eaa4:	6013      	str	r3, [r2, #0]
 800eaa6:	f003 f8cd 	bl	8011c44 <tcp_timer_needed>
 800eaaa:	4b2b      	ldr	r3, [pc, #172]	@ (800eb58 <tcp_listen_input+0x1f8>)
 800eaac:	2201      	movs	r2, #1
 800eaae:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800eab0:	6978      	ldr	r0, [r7, #20]
 800eab2:	f001 fd8b 	bl	80105cc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800eab6:	4b23      	ldr	r3, [pc, #140]	@ (800eb44 <tcp_listen_input+0x1e4>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	89db      	ldrh	r3, [r3, #14]
 800eabc:	b29a      	uxth	r2, r3
 800eabe:	697b      	ldr	r3, [r7, #20]
 800eac0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800eac4:	697b      	ldr	r3, [r7, #20]
 800eac6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800eaca:	697b      	ldr	r3, [r7, #20]
 800eacc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800ead4:	697b      	ldr	r3, [r7, #20]
 800ead6:	3304      	adds	r3, #4
 800ead8:	4618      	mov	r0, r3
 800eada:	f004 fcc1 	bl	8013460 <ip4_route>
 800eade:	4601      	mov	r1, r0
 800eae0:	697b      	ldr	r3, [r7, #20]
 800eae2:	3304      	adds	r3, #4
 800eae4:	461a      	mov	r2, r3
 800eae6:	4620      	mov	r0, r4
 800eae8:	f7ff fa30 	bl	800df4c <tcp_eff_send_mss_netif>
 800eaec:	4603      	mov	r3, r0
 800eaee:	461a      	mov	r2, r3
 800eaf0:	697b      	ldr	r3, [r7, #20]
 800eaf2:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800eaf4:	2112      	movs	r1, #18
 800eaf6:	6978      	ldr	r0, [r7, #20]
 800eaf8:	f002 f840 	bl	8010b7c <tcp_enqueue_flags>
 800eafc:	4603      	mov	r3, r0
 800eafe:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800eb00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d004      	beq.n	800eb12 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800eb08:	2100      	movs	r1, #0
 800eb0a:	6978      	ldr	r0, [r7, #20]
 800eb0c:	f7fe f978 	bl	800ce00 <tcp_abandon>
      return;
 800eb10:	e006      	b.n	800eb20 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800eb12:	6978      	ldr	r0, [r7, #20]
 800eb14:	f002 f920 	bl	8010d58 <tcp_output>
  return;
 800eb18:	e001      	b.n	800eb1e <tcp_listen_input+0x1be>
    return;
 800eb1a:	bf00      	nop
 800eb1c:	e000      	b.n	800eb20 <tcp_listen_input+0x1c0>
  return;
 800eb1e:	bf00      	nop
}
 800eb20:	371c      	adds	r7, #28
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd90      	pop	{r4, r7, pc}
 800eb26:	bf00      	nop
 800eb28:	20010350 	.word	0x20010350
 800eb2c:	08016e64 	.word	0x08016e64
 800eb30:	0801705c 	.word	0x0801705c
 800eb34:	08016eb0 	.word	0x08016eb0
 800eb38:	20010348 	.word	0x20010348
 800eb3c:	2001034e 	.word	0x2001034e
 800eb40:	20010344 	.word	0x20010344
 800eb44:	20010334 	.word	0x20010334
 800eb48:	2000985c 	.word	0x2000985c
 800eb4c:	20009860 	.word	0x20009860
 800eb50:	2000984c 	.word	0x2000984c
 800eb54:	20010318 	.word	0x20010318
 800eb58:	20010320 	.word	0x20010320

0800eb5c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b086      	sub	sp, #24
 800eb60:	af04      	add	r7, sp, #16
 800eb62:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800eb64:	4b2f      	ldr	r3, [pc, #188]	@ (800ec24 <tcp_timewait_input+0xc8>)
 800eb66:	781b      	ldrb	r3, [r3, #0]
 800eb68:	f003 0304 	and.w	r3, r3, #4
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d153      	bne.n	800ec18 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d106      	bne.n	800eb84 <tcp_timewait_input+0x28>
 800eb76:	4b2c      	ldr	r3, [pc, #176]	@ (800ec28 <tcp_timewait_input+0xcc>)
 800eb78:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800eb7c:	492b      	ldr	r1, [pc, #172]	@ (800ec2c <tcp_timewait_input+0xd0>)
 800eb7e:	482c      	ldr	r0, [pc, #176]	@ (800ec30 <tcp_timewait_input+0xd4>)
 800eb80:	f006 f870 	bl	8014c64 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800eb84:	4b27      	ldr	r3, [pc, #156]	@ (800ec24 <tcp_timewait_input+0xc8>)
 800eb86:	781b      	ldrb	r3, [r3, #0]
 800eb88:	f003 0302 	and.w	r3, r3, #2
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d02a      	beq.n	800ebe6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800eb90:	4b28      	ldr	r3, [pc, #160]	@ (800ec34 <tcp_timewait_input+0xd8>)
 800eb92:	681a      	ldr	r2, [r3, #0]
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb98:	1ad3      	subs	r3, r2, r3
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	db2d      	blt.n	800ebfa <tcp_timewait_input+0x9e>
 800eb9e:	4b25      	ldr	r3, [pc, #148]	@ (800ec34 <tcp_timewait_input+0xd8>)
 800eba0:	681a      	ldr	r2, [r3, #0]
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eba6:	6879      	ldr	r1, [r7, #4]
 800eba8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ebaa:	440b      	add	r3, r1
 800ebac:	1ad3      	subs	r3, r2, r3
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	dc23      	bgt.n	800ebfa <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ebb2:	4b21      	ldr	r3, [pc, #132]	@ (800ec38 <tcp_timewait_input+0xdc>)
 800ebb4:	6819      	ldr	r1, [r3, #0]
 800ebb6:	4b21      	ldr	r3, [pc, #132]	@ (800ec3c <tcp_timewait_input+0xe0>)
 800ebb8:	881b      	ldrh	r3, [r3, #0]
 800ebba:	461a      	mov	r2, r3
 800ebbc:	4b1d      	ldr	r3, [pc, #116]	@ (800ec34 <tcp_timewait_input+0xd8>)
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ebc2:	4b1f      	ldr	r3, [pc, #124]	@ (800ec40 <tcp_timewait_input+0xe4>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ebc6:	885b      	ldrh	r3, [r3, #2]
 800ebc8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ebca:	4a1d      	ldr	r2, [pc, #116]	@ (800ec40 <tcp_timewait_input+0xe4>)
 800ebcc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ebce:	8812      	ldrh	r2, [r2, #0]
 800ebd0:	b292      	uxth	r2, r2
 800ebd2:	9202      	str	r2, [sp, #8]
 800ebd4:	9301      	str	r3, [sp, #4]
 800ebd6:	4b1b      	ldr	r3, [pc, #108]	@ (800ec44 <tcp_timewait_input+0xe8>)
 800ebd8:	9300      	str	r3, [sp, #0]
 800ebda:	4b1b      	ldr	r3, [pc, #108]	@ (800ec48 <tcp_timewait_input+0xec>)
 800ebdc:	4602      	mov	r2, r0
 800ebde:	6878      	ldr	r0, [r7, #4]
 800ebe0:	f002 fe6e 	bl	80118c0 <tcp_rst>
      return;
 800ebe4:	e01b      	b.n	800ec1e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800ebe6:	4b0f      	ldr	r3, [pc, #60]	@ (800ec24 <tcp_timewait_input+0xc8>)
 800ebe8:	781b      	ldrb	r3, [r3, #0]
 800ebea:	f003 0301 	and.w	r3, r3, #1
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d003      	beq.n	800ebfa <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ebf2:	4b16      	ldr	r3, [pc, #88]	@ (800ec4c <tcp_timewait_input+0xf0>)
 800ebf4:	681a      	ldr	r2, [r3, #0]
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ebfa:	4b10      	ldr	r3, [pc, #64]	@ (800ec3c <tcp_timewait_input+0xe0>)
 800ebfc:	881b      	ldrh	r3, [r3, #0]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d00c      	beq.n	800ec1c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	8b5b      	ldrh	r3, [r3, #26]
 800ec06:	f043 0302 	orr.w	r3, r3, #2
 800ec0a:	b29a      	uxth	r2, r3
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ec10:	6878      	ldr	r0, [r7, #4]
 800ec12:	f002 f8a1 	bl	8010d58 <tcp_output>
  }
  return;
 800ec16:	e001      	b.n	800ec1c <tcp_timewait_input+0xc0>
    return;
 800ec18:	bf00      	nop
 800ec1a:	e000      	b.n	800ec1e <tcp_timewait_input+0xc2>
  return;
 800ec1c:	bf00      	nop
}
 800ec1e:	3708      	adds	r7, #8
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd80      	pop	{r7, pc}
 800ec24:	20010350 	.word	0x20010350
 800ec28:	08016e64 	.word	0x08016e64
 800ec2c:	0801707c 	.word	0x0801707c
 800ec30:	08016eb0 	.word	0x08016eb0
 800ec34:	20010344 	.word	0x20010344
 800ec38:	20010348 	.word	0x20010348
 800ec3c:	2001034e 	.word	0x2001034e
 800ec40:	20010334 	.word	0x20010334
 800ec44:	2000985c 	.word	0x2000985c
 800ec48:	20009860 	.word	0x20009860
 800ec4c:	2001030c 	.word	0x2001030c

0800ec50 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ec50:	b590      	push	{r4, r7, lr}
 800ec52:	b08d      	sub	sp, #52	@ 0x34
 800ec54:	af04      	add	r7, sp, #16
 800ec56:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ec58:	2300      	movs	r3, #0
 800ec5a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d106      	bne.n	800ec74 <tcp_process+0x24>
 800ec66:	4b9d      	ldr	r3, [pc, #628]	@ (800eedc <tcp_process+0x28c>)
 800ec68:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800ec6c:	499c      	ldr	r1, [pc, #624]	@ (800eee0 <tcp_process+0x290>)
 800ec6e:	489d      	ldr	r0, [pc, #628]	@ (800eee4 <tcp_process+0x294>)
 800ec70:	f005 fff8 	bl	8014c64 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ec74:	4b9c      	ldr	r3, [pc, #624]	@ (800eee8 <tcp_process+0x298>)
 800ec76:	781b      	ldrb	r3, [r3, #0]
 800ec78:	f003 0304 	and.w	r3, r3, #4
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d04e      	beq.n	800ed1e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	7d1b      	ldrb	r3, [r3, #20]
 800ec84:	2b02      	cmp	r3, #2
 800ec86:	d108      	bne.n	800ec9a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec8c:	4b97      	ldr	r3, [pc, #604]	@ (800eeec <tcp_process+0x29c>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d123      	bne.n	800ecdc <tcp_process+0x8c>
        acceptable = 1;
 800ec94:	2301      	movs	r3, #1
 800ec96:	76fb      	strb	r3, [r7, #27]
 800ec98:	e020      	b.n	800ecdc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ec9e:	4b94      	ldr	r3, [pc, #592]	@ (800eef0 <tcp_process+0x2a0>)
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	429a      	cmp	r2, r3
 800eca4:	d102      	bne.n	800ecac <tcp_process+0x5c>
        acceptable = 1;
 800eca6:	2301      	movs	r3, #1
 800eca8:	76fb      	strb	r3, [r7, #27]
 800ecaa:	e017      	b.n	800ecdc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ecac:	4b90      	ldr	r3, [pc, #576]	@ (800eef0 <tcp_process+0x2a0>)
 800ecae:	681a      	ldr	r2, [r3, #0]
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecb4:	1ad3      	subs	r3, r2, r3
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	db10      	blt.n	800ecdc <tcp_process+0x8c>
 800ecba:	4b8d      	ldr	r3, [pc, #564]	@ (800eef0 <tcp_process+0x2a0>)
 800ecbc:	681a      	ldr	r2, [r3, #0]
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecc2:	6879      	ldr	r1, [r7, #4]
 800ecc4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ecc6:	440b      	add	r3, r1
 800ecc8:	1ad3      	subs	r3, r2, r3
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	dc06      	bgt.n	800ecdc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	8b5b      	ldrh	r3, [r3, #26]
 800ecd2:	f043 0302 	orr.w	r3, r3, #2
 800ecd6:	b29a      	uxth	r2, r3
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ecdc:	7efb      	ldrb	r3, [r7, #27]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d01b      	beq.n	800ed1a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	7d1b      	ldrb	r3, [r3, #20]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d106      	bne.n	800ecf8 <tcp_process+0xa8>
 800ecea:	4b7c      	ldr	r3, [pc, #496]	@ (800eedc <tcp_process+0x28c>)
 800ecec:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800ecf0:	4980      	ldr	r1, [pc, #512]	@ (800eef4 <tcp_process+0x2a4>)
 800ecf2:	487c      	ldr	r0, [pc, #496]	@ (800eee4 <tcp_process+0x294>)
 800ecf4:	f005 ffb6 	bl	8014c64 <iprintf>
      recv_flags |= TF_RESET;
 800ecf8:	4b7f      	ldr	r3, [pc, #508]	@ (800eef8 <tcp_process+0x2a8>)
 800ecfa:	781b      	ldrb	r3, [r3, #0]
 800ecfc:	f043 0308 	orr.w	r3, r3, #8
 800ed00:	b2da      	uxtb	r2, r3
 800ed02:	4b7d      	ldr	r3, [pc, #500]	@ (800eef8 <tcp_process+0x2a8>)
 800ed04:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	8b5b      	ldrh	r3, [r3, #26]
 800ed0a:	f023 0301 	bic.w	r3, r3, #1
 800ed0e:	b29a      	uxth	r2, r3
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ed14:	f06f 030d 	mvn.w	r3, #13
 800ed18:	e37a      	b.n	800f410 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	e378      	b.n	800f410 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ed1e:	4b72      	ldr	r3, [pc, #456]	@ (800eee8 <tcp_process+0x298>)
 800ed20:	781b      	ldrb	r3, [r3, #0]
 800ed22:	f003 0302 	and.w	r3, r3, #2
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d010      	beq.n	800ed4c <tcp_process+0xfc>
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	7d1b      	ldrb	r3, [r3, #20]
 800ed2e:	2b02      	cmp	r3, #2
 800ed30:	d00c      	beq.n	800ed4c <tcp_process+0xfc>
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	7d1b      	ldrb	r3, [r3, #20]
 800ed36:	2b03      	cmp	r3, #3
 800ed38:	d008      	beq.n	800ed4c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	8b5b      	ldrh	r3, [r3, #26]
 800ed3e:	f043 0302 	orr.w	r3, r3, #2
 800ed42:	b29a      	uxth	r2, r3
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ed48:	2300      	movs	r3, #0
 800ed4a:	e361      	b.n	800f410 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	8b5b      	ldrh	r3, [r3, #26]
 800ed50:	f003 0310 	and.w	r3, r3, #16
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d103      	bne.n	800ed60 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ed58:	4b68      	ldr	r3, [pc, #416]	@ (800eefc <tcp_process+0x2ac>)
 800ed5a:	681a      	ldr	r2, [r3, #0]
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2200      	movs	r2, #0
 800ed64:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800ed70:	6878      	ldr	r0, [r7, #4]
 800ed72:	f001 fc2b 	bl	80105cc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	7d1b      	ldrb	r3, [r3, #20]
 800ed7a:	3b02      	subs	r3, #2
 800ed7c:	2b07      	cmp	r3, #7
 800ed7e:	f200 8337 	bhi.w	800f3f0 <tcp_process+0x7a0>
 800ed82:	a201      	add	r2, pc, #4	@ (adr r2, 800ed88 <tcp_process+0x138>)
 800ed84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed88:	0800eda9 	.word	0x0800eda9
 800ed8c:	0800efd9 	.word	0x0800efd9
 800ed90:	0800f151 	.word	0x0800f151
 800ed94:	0800f17b 	.word	0x0800f17b
 800ed98:	0800f29f 	.word	0x0800f29f
 800ed9c:	0800f151 	.word	0x0800f151
 800eda0:	0800f32b 	.word	0x0800f32b
 800eda4:	0800f3bb 	.word	0x0800f3bb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800eda8:	4b4f      	ldr	r3, [pc, #316]	@ (800eee8 <tcp_process+0x298>)
 800edaa:	781b      	ldrb	r3, [r3, #0]
 800edac:	f003 0310 	and.w	r3, r3, #16
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	f000 80e4 	beq.w	800ef7e <tcp_process+0x32e>
 800edb6:	4b4c      	ldr	r3, [pc, #304]	@ (800eee8 <tcp_process+0x298>)
 800edb8:	781b      	ldrb	r3, [r3, #0]
 800edba:	f003 0302 	and.w	r3, r3, #2
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	f000 80dd 	beq.w	800ef7e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800edc8:	1c5a      	adds	r2, r3, #1
 800edca:	4b48      	ldr	r3, [pc, #288]	@ (800eeec <tcp_process+0x29c>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	429a      	cmp	r2, r3
 800edd0:	f040 80d5 	bne.w	800ef7e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800edd4:	4b46      	ldr	r3, [pc, #280]	@ (800eef0 <tcp_process+0x2a0>)
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	1c5a      	adds	r2, r3, #1
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800ede6:	4b41      	ldr	r3, [pc, #260]	@ (800eeec <tcp_process+0x29c>)
 800ede8:	681a      	ldr	r2, [r3, #0]
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800edee:	4b44      	ldr	r3, [pc, #272]	@ (800ef00 <tcp_process+0x2b0>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	89db      	ldrh	r3, [r3, #14]
 800edf4:	b29a      	uxth	r2, r3
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ee08:	4b39      	ldr	r3, [pc, #228]	@ (800eef0 <tcp_process+0x2a0>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	1e5a      	subs	r2, r3, #1
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	2204      	movs	r2, #4
 800ee16:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	3304      	adds	r3, #4
 800ee20:	4618      	mov	r0, r3
 800ee22:	f004 fb1d 	bl	8013460 <ip4_route>
 800ee26:	4601      	mov	r1, r0
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	3304      	adds	r3, #4
 800ee2c:	461a      	mov	r2, r3
 800ee2e:	4620      	mov	r0, r4
 800ee30:	f7ff f88c 	bl	800df4c <tcp_eff_send_mss_netif>
 800ee34:	4603      	mov	r3, r0
 800ee36:	461a      	mov	r2, r3
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ee40:	009a      	lsls	r2, r3, #2
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ee46:	005b      	lsls	r3, r3, #1
 800ee48:	f241 111c 	movw	r1, #4380	@ 0x111c
 800ee4c:	428b      	cmp	r3, r1
 800ee4e:	bf38      	it	cc
 800ee50:	460b      	movcc	r3, r1
 800ee52:	429a      	cmp	r2, r3
 800ee54:	d204      	bcs.n	800ee60 <tcp_process+0x210>
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ee5a:	009b      	lsls	r3, r3, #2
 800ee5c:	b29b      	uxth	r3, r3
 800ee5e:	e00d      	b.n	800ee7c <tcp_process+0x22c>
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ee64:	005b      	lsls	r3, r3, #1
 800ee66:	f241 121c 	movw	r2, #4380	@ 0x111c
 800ee6a:	4293      	cmp	r3, r2
 800ee6c:	d904      	bls.n	800ee78 <tcp_process+0x228>
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ee72:	005b      	lsls	r3, r3, #1
 800ee74:	b29b      	uxth	r3, r3
 800ee76:	e001      	b.n	800ee7c <tcp_process+0x22c>
 800ee78:	f241 131c 	movw	r3, #4380	@ 0x111c
 800ee7c:	687a      	ldr	r2, [r7, #4]
 800ee7e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d106      	bne.n	800ee9a <tcp_process+0x24a>
 800ee8c:	4b13      	ldr	r3, [pc, #76]	@ (800eedc <tcp_process+0x28c>)
 800ee8e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800ee92:	491c      	ldr	r1, [pc, #112]	@ (800ef04 <tcp_process+0x2b4>)
 800ee94:	4813      	ldr	r0, [pc, #76]	@ (800eee4 <tcp_process+0x294>)
 800ee96:	f005 fee5 	bl	8014c64 <iprintf>
        --pcb->snd_queuelen;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800eea0:	3b01      	subs	r3, #1
 800eea2:	b29a      	uxth	r2, r3
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eeae:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800eeb0:	69fb      	ldr	r3, [r7, #28]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d12a      	bne.n	800ef0c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eeba:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800eebc:	69fb      	ldr	r3, [r7, #28]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d106      	bne.n	800eed0 <tcp_process+0x280>
 800eec2:	4b06      	ldr	r3, [pc, #24]	@ (800eedc <tcp_process+0x28c>)
 800eec4:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800eec8:	490f      	ldr	r1, [pc, #60]	@ (800ef08 <tcp_process+0x2b8>)
 800eeca:	4806      	ldr	r0, [pc, #24]	@ (800eee4 <tcp_process+0x294>)
 800eecc:	f005 feca 	bl	8014c64 <iprintf>
          pcb->unsent = rseg->next;
 800eed0:	69fb      	ldr	r3, [r7, #28]
 800eed2:	681a      	ldr	r2, [r3, #0]
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	66da      	str	r2, [r3, #108]	@ 0x6c
 800eed8:	e01c      	b.n	800ef14 <tcp_process+0x2c4>
 800eeda:	bf00      	nop
 800eedc:	08016e64 	.word	0x08016e64
 800eee0:	0801709c 	.word	0x0801709c
 800eee4:	08016eb0 	.word	0x08016eb0
 800eee8:	20010350 	.word	0x20010350
 800eeec:	20010348 	.word	0x20010348
 800eef0:	20010344 	.word	0x20010344
 800eef4:	080170b8 	.word	0x080170b8
 800eef8:	20010351 	.word	0x20010351
 800eefc:	2001030c 	.word	0x2001030c
 800ef00:	20010334 	.word	0x20010334
 800ef04:	080170d8 	.word	0x080170d8
 800ef08:	080170f0 	.word	0x080170f0
        } else {
          pcb->unacked = rseg->next;
 800ef0c:	69fb      	ldr	r3, [r7, #28]
 800ef0e:	681a      	ldr	r2, [r3, #0]
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800ef14:	69f8      	ldr	r0, [r7, #28]
 800ef16:	f7fe fd22 	bl	800d95e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d104      	bne.n	800ef2c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ef28:	861a      	strh	r2, [r3, #48]	@ 0x30
 800ef2a:	e006      	b.n	800ef3a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2200      	movs	r2, #0
 800ef30:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	2200      	movs	r2, #0
 800ef36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d00a      	beq.n	800ef5a <tcp_process+0x30a>
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ef4a:	687a      	ldr	r2, [r7, #4]
 800ef4c:	6910      	ldr	r0, [r2, #16]
 800ef4e:	2200      	movs	r2, #0
 800ef50:	6879      	ldr	r1, [r7, #4]
 800ef52:	4798      	blx	r3
 800ef54:	4603      	mov	r3, r0
 800ef56:	76bb      	strb	r3, [r7, #26]
 800ef58:	e001      	b.n	800ef5e <tcp_process+0x30e>
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ef5e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ef62:	f113 0f0d 	cmn.w	r3, #13
 800ef66:	d102      	bne.n	800ef6e <tcp_process+0x31e>
          return ERR_ABRT;
 800ef68:	f06f 030c 	mvn.w	r3, #12
 800ef6c:	e250      	b.n	800f410 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	8b5b      	ldrh	r3, [r3, #26]
 800ef72:	f043 0302 	orr.w	r3, r3, #2
 800ef76:	b29a      	uxth	r2, r3
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800ef7c:	e23a      	b.n	800f3f4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ef7e:	4b98      	ldr	r3, [pc, #608]	@ (800f1e0 <tcp_process+0x590>)
 800ef80:	781b      	ldrb	r3, [r3, #0]
 800ef82:	f003 0310 	and.w	r3, r3, #16
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	f000 8234 	beq.w	800f3f4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef8c:	4b95      	ldr	r3, [pc, #596]	@ (800f1e4 <tcp_process+0x594>)
 800ef8e:	6819      	ldr	r1, [r3, #0]
 800ef90:	4b95      	ldr	r3, [pc, #596]	@ (800f1e8 <tcp_process+0x598>)
 800ef92:	881b      	ldrh	r3, [r3, #0]
 800ef94:	461a      	mov	r2, r3
 800ef96:	4b95      	ldr	r3, [pc, #596]	@ (800f1ec <tcp_process+0x59c>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ef9c:	4b94      	ldr	r3, [pc, #592]	@ (800f1f0 <tcp_process+0x5a0>)
 800ef9e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800efa0:	885b      	ldrh	r3, [r3, #2]
 800efa2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800efa4:	4a92      	ldr	r2, [pc, #584]	@ (800f1f0 <tcp_process+0x5a0>)
 800efa6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800efa8:	8812      	ldrh	r2, [r2, #0]
 800efaa:	b292      	uxth	r2, r2
 800efac:	9202      	str	r2, [sp, #8]
 800efae:	9301      	str	r3, [sp, #4]
 800efb0:	4b90      	ldr	r3, [pc, #576]	@ (800f1f4 <tcp_process+0x5a4>)
 800efb2:	9300      	str	r3, [sp, #0]
 800efb4:	4b90      	ldr	r3, [pc, #576]	@ (800f1f8 <tcp_process+0x5a8>)
 800efb6:	4602      	mov	r2, r0
 800efb8:	6878      	ldr	r0, [r7, #4]
 800efba:	f002 fc81 	bl	80118c0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800efc4:	2b05      	cmp	r3, #5
 800efc6:	f200 8215 	bhi.w	800f3f4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2200      	movs	r2, #0
 800efce:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800efd0:	6878      	ldr	r0, [r7, #4]
 800efd2:	f002 fa4d 	bl	8011470 <tcp_rexmit_rto>
      break;
 800efd6:	e20d      	b.n	800f3f4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800efd8:	4b81      	ldr	r3, [pc, #516]	@ (800f1e0 <tcp_process+0x590>)
 800efda:	781b      	ldrb	r3, [r3, #0]
 800efdc:	f003 0310 	and.w	r3, r3, #16
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	f000 80a1 	beq.w	800f128 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800efe6:	4b7f      	ldr	r3, [pc, #508]	@ (800f1e4 <tcp_process+0x594>)
 800efe8:	681a      	ldr	r2, [r3, #0]
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800efee:	1ad3      	subs	r3, r2, r3
 800eff0:	3b01      	subs	r3, #1
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	db7e      	blt.n	800f0f4 <tcp_process+0x4a4>
 800eff6:	4b7b      	ldr	r3, [pc, #492]	@ (800f1e4 <tcp_process+0x594>)
 800eff8:	681a      	ldr	r2, [r3, #0]
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800effe:	1ad3      	subs	r3, r2, r3
 800f000:	2b00      	cmp	r3, #0
 800f002:	dc77      	bgt.n	800f0f4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2204      	movs	r2, #4
 800f008:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d102      	bne.n	800f018 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f012:	23fa      	movs	r3, #250	@ 0xfa
 800f014:	76bb      	strb	r3, [r7, #26]
 800f016:	e01d      	b.n	800f054 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f01c:	699b      	ldr	r3, [r3, #24]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d106      	bne.n	800f030 <tcp_process+0x3e0>
 800f022:	4b76      	ldr	r3, [pc, #472]	@ (800f1fc <tcp_process+0x5ac>)
 800f024:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800f028:	4975      	ldr	r1, [pc, #468]	@ (800f200 <tcp_process+0x5b0>)
 800f02a:	4876      	ldr	r0, [pc, #472]	@ (800f204 <tcp_process+0x5b4>)
 800f02c:	f005 fe1a 	bl	8014c64 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f034:	699b      	ldr	r3, [r3, #24]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d00a      	beq.n	800f050 <tcp_process+0x400>
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f03e:	699b      	ldr	r3, [r3, #24]
 800f040:	687a      	ldr	r2, [r7, #4]
 800f042:	6910      	ldr	r0, [r2, #16]
 800f044:	2200      	movs	r2, #0
 800f046:	6879      	ldr	r1, [r7, #4]
 800f048:	4798      	blx	r3
 800f04a:	4603      	mov	r3, r0
 800f04c:	76bb      	strb	r3, [r7, #26]
 800f04e:	e001      	b.n	800f054 <tcp_process+0x404>
 800f050:	23f0      	movs	r3, #240	@ 0xf0
 800f052:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800f054:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d00a      	beq.n	800f072 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f05c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f060:	f113 0f0d 	cmn.w	r3, #13
 800f064:	d002      	beq.n	800f06c <tcp_process+0x41c>
              tcp_abort(pcb);
 800f066:	6878      	ldr	r0, [r7, #4]
 800f068:	f7fd ff88 	bl	800cf7c <tcp_abort>
            }
            return ERR_ABRT;
 800f06c:	f06f 030c 	mvn.w	r3, #12
 800f070:	e1ce      	b.n	800f410 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f072:	6878      	ldr	r0, [r7, #4]
 800f074:	f000 fae0 	bl	800f638 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f078:	4b63      	ldr	r3, [pc, #396]	@ (800f208 <tcp_process+0x5b8>)
 800f07a:	881b      	ldrh	r3, [r3, #0]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d005      	beq.n	800f08c <tcp_process+0x43c>
            recv_acked--;
 800f080:	4b61      	ldr	r3, [pc, #388]	@ (800f208 <tcp_process+0x5b8>)
 800f082:	881b      	ldrh	r3, [r3, #0]
 800f084:	3b01      	subs	r3, #1
 800f086:	b29a      	uxth	r2, r3
 800f088:	4b5f      	ldr	r3, [pc, #380]	@ (800f208 <tcp_process+0x5b8>)
 800f08a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f090:	009a      	lsls	r2, r3, #2
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f096:	005b      	lsls	r3, r3, #1
 800f098:	f241 111c 	movw	r1, #4380	@ 0x111c
 800f09c:	428b      	cmp	r3, r1
 800f09e:	bf38      	it	cc
 800f0a0:	460b      	movcc	r3, r1
 800f0a2:	429a      	cmp	r2, r3
 800f0a4:	d204      	bcs.n	800f0b0 <tcp_process+0x460>
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f0aa:	009b      	lsls	r3, r3, #2
 800f0ac:	b29b      	uxth	r3, r3
 800f0ae:	e00d      	b.n	800f0cc <tcp_process+0x47c>
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f0b4:	005b      	lsls	r3, r3, #1
 800f0b6:	f241 121c 	movw	r2, #4380	@ 0x111c
 800f0ba:	4293      	cmp	r3, r2
 800f0bc:	d904      	bls.n	800f0c8 <tcp_process+0x478>
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f0c2:	005b      	lsls	r3, r3, #1
 800f0c4:	b29b      	uxth	r3, r3
 800f0c6:	e001      	b.n	800f0cc <tcp_process+0x47c>
 800f0c8:	f241 131c 	movw	r3, #4380	@ 0x111c
 800f0cc:	687a      	ldr	r2, [r7, #4]
 800f0ce:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f0d2:	4b4e      	ldr	r3, [pc, #312]	@ (800f20c <tcp_process+0x5bc>)
 800f0d4:	781b      	ldrb	r3, [r3, #0]
 800f0d6:	f003 0320 	and.w	r3, r3, #32
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d037      	beq.n	800f14e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	8b5b      	ldrh	r3, [r3, #26]
 800f0e2:	f043 0302 	orr.w	r3, r3, #2
 800f0e6:	b29a      	uxth	r2, r3
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2207      	movs	r2, #7
 800f0f0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f0f2:	e02c      	b.n	800f14e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f0f4:	4b3b      	ldr	r3, [pc, #236]	@ (800f1e4 <tcp_process+0x594>)
 800f0f6:	6819      	ldr	r1, [r3, #0]
 800f0f8:	4b3b      	ldr	r3, [pc, #236]	@ (800f1e8 <tcp_process+0x598>)
 800f0fa:	881b      	ldrh	r3, [r3, #0]
 800f0fc:	461a      	mov	r2, r3
 800f0fe:	4b3b      	ldr	r3, [pc, #236]	@ (800f1ec <tcp_process+0x59c>)
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f104:	4b3a      	ldr	r3, [pc, #232]	@ (800f1f0 <tcp_process+0x5a0>)
 800f106:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f108:	885b      	ldrh	r3, [r3, #2]
 800f10a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f10c:	4a38      	ldr	r2, [pc, #224]	@ (800f1f0 <tcp_process+0x5a0>)
 800f10e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f110:	8812      	ldrh	r2, [r2, #0]
 800f112:	b292      	uxth	r2, r2
 800f114:	9202      	str	r2, [sp, #8]
 800f116:	9301      	str	r3, [sp, #4]
 800f118:	4b36      	ldr	r3, [pc, #216]	@ (800f1f4 <tcp_process+0x5a4>)
 800f11a:	9300      	str	r3, [sp, #0]
 800f11c:	4b36      	ldr	r3, [pc, #216]	@ (800f1f8 <tcp_process+0x5a8>)
 800f11e:	4602      	mov	r2, r0
 800f120:	6878      	ldr	r0, [r7, #4]
 800f122:	f002 fbcd 	bl	80118c0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f126:	e167      	b.n	800f3f8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f128:	4b2d      	ldr	r3, [pc, #180]	@ (800f1e0 <tcp_process+0x590>)
 800f12a:	781b      	ldrb	r3, [r3, #0]
 800f12c:	f003 0302 	and.w	r3, r3, #2
 800f130:	2b00      	cmp	r3, #0
 800f132:	f000 8161 	beq.w	800f3f8 <tcp_process+0x7a8>
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f13a:	1e5a      	subs	r2, r3, #1
 800f13c:	4b2b      	ldr	r3, [pc, #172]	@ (800f1ec <tcp_process+0x59c>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	429a      	cmp	r2, r3
 800f142:	f040 8159 	bne.w	800f3f8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f002 f9b4 	bl	80114b4 <tcp_rexmit>
      break;
 800f14c:	e154      	b.n	800f3f8 <tcp_process+0x7a8>
 800f14e:	e153      	b.n	800f3f8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	f000 fa71 	bl	800f638 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f156:	4b2d      	ldr	r3, [pc, #180]	@ (800f20c <tcp_process+0x5bc>)
 800f158:	781b      	ldrb	r3, [r3, #0]
 800f15a:	f003 0320 	and.w	r3, r3, #32
 800f15e:	2b00      	cmp	r3, #0
 800f160:	f000 814c 	beq.w	800f3fc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	8b5b      	ldrh	r3, [r3, #26]
 800f168:	f043 0302 	orr.w	r3, r3, #2
 800f16c:	b29a      	uxth	r2, r3
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	2207      	movs	r2, #7
 800f176:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f178:	e140      	b.n	800f3fc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f17a:	6878      	ldr	r0, [r7, #4]
 800f17c:	f000 fa5c 	bl	800f638 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f180:	4b22      	ldr	r3, [pc, #136]	@ (800f20c <tcp_process+0x5bc>)
 800f182:	781b      	ldrb	r3, [r3, #0]
 800f184:	f003 0320 	and.w	r3, r3, #32
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d071      	beq.n	800f270 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f18c:	4b14      	ldr	r3, [pc, #80]	@ (800f1e0 <tcp_process+0x590>)
 800f18e:	781b      	ldrb	r3, [r3, #0]
 800f190:	f003 0310 	and.w	r3, r3, #16
 800f194:	2b00      	cmp	r3, #0
 800f196:	d060      	beq.n	800f25a <tcp_process+0x60a>
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f19c:	4b11      	ldr	r3, [pc, #68]	@ (800f1e4 <tcp_process+0x594>)
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	429a      	cmp	r2, r3
 800f1a2:	d15a      	bne.n	800f25a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d156      	bne.n	800f25a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	8b5b      	ldrh	r3, [r3, #26]
 800f1b0:	f043 0302 	orr.w	r3, r3, #2
 800f1b4:	b29a      	uxth	r2, r3
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f1ba:	6878      	ldr	r0, [r7, #4]
 800f1bc:	f7fe fdbc 	bl	800dd38 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f1c0:	4b13      	ldr	r3, [pc, #76]	@ (800f210 <tcp_process+0x5c0>)
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	687a      	ldr	r2, [r7, #4]
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d105      	bne.n	800f1d6 <tcp_process+0x586>
 800f1ca:	4b11      	ldr	r3, [pc, #68]	@ (800f210 <tcp_process+0x5c0>)
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	68db      	ldr	r3, [r3, #12]
 800f1d0:	4a0f      	ldr	r2, [pc, #60]	@ (800f210 <tcp_process+0x5c0>)
 800f1d2:	6013      	str	r3, [r2, #0]
 800f1d4:	e02e      	b.n	800f234 <tcp_process+0x5e4>
 800f1d6:	4b0e      	ldr	r3, [pc, #56]	@ (800f210 <tcp_process+0x5c0>)
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	617b      	str	r3, [r7, #20]
 800f1dc:	e027      	b.n	800f22e <tcp_process+0x5de>
 800f1de:	bf00      	nop
 800f1e0:	20010350 	.word	0x20010350
 800f1e4:	20010348 	.word	0x20010348
 800f1e8:	2001034e 	.word	0x2001034e
 800f1ec:	20010344 	.word	0x20010344
 800f1f0:	20010334 	.word	0x20010334
 800f1f4:	2000985c 	.word	0x2000985c
 800f1f8:	20009860 	.word	0x20009860
 800f1fc:	08016e64 	.word	0x08016e64
 800f200:	08017104 	.word	0x08017104
 800f204:	08016eb0 	.word	0x08016eb0
 800f208:	2001034c 	.word	0x2001034c
 800f20c:	20010351 	.word	0x20010351
 800f210:	20010318 	.word	0x20010318
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	68db      	ldr	r3, [r3, #12]
 800f218:	687a      	ldr	r2, [r7, #4]
 800f21a:	429a      	cmp	r2, r3
 800f21c:	d104      	bne.n	800f228 <tcp_process+0x5d8>
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	68da      	ldr	r2, [r3, #12]
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	60da      	str	r2, [r3, #12]
 800f226:	e005      	b.n	800f234 <tcp_process+0x5e4>
 800f228:	697b      	ldr	r3, [r7, #20]
 800f22a:	68db      	ldr	r3, [r3, #12]
 800f22c:	617b      	str	r3, [r7, #20]
 800f22e:	697b      	ldr	r3, [r7, #20]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d1ef      	bne.n	800f214 <tcp_process+0x5c4>
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2200      	movs	r2, #0
 800f238:	60da      	str	r2, [r3, #12]
 800f23a:	4b77      	ldr	r3, [pc, #476]	@ (800f418 <tcp_process+0x7c8>)
 800f23c:	2201      	movs	r2, #1
 800f23e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	220a      	movs	r2, #10
 800f244:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f246:	4b75      	ldr	r3, [pc, #468]	@ (800f41c <tcp_process+0x7cc>)
 800f248:	681a      	ldr	r2, [r3, #0]
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	60da      	str	r2, [r3, #12]
 800f24e:	4a73      	ldr	r2, [pc, #460]	@ (800f41c <tcp_process+0x7cc>)
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	6013      	str	r3, [r2, #0]
 800f254:	f002 fcf6 	bl	8011c44 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f258:	e0d2      	b.n	800f400 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	8b5b      	ldrh	r3, [r3, #26]
 800f25e:	f043 0302 	orr.w	r3, r3, #2
 800f262:	b29a      	uxth	r2, r3
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2208      	movs	r2, #8
 800f26c:	751a      	strb	r2, [r3, #20]
      break;
 800f26e:	e0c7      	b.n	800f400 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f270:	4b6b      	ldr	r3, [pc, #428]	@ (800f420 <tcp_process+0x7d0>)
 800f272:	781b      	ldrb	r3, [r3, #0]
 800f274:	f003 0310 	and.w	r3, r3, #16
 800f278:	2b00      	cmp	r3, #0
 800f27a:	f000 80c1 	beq.w	800f400 <tcp_process+0x7b0>
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f282:	4b68      	ldr	r3, [pc, #416]	@ (800f424 <tcp_process+0x7d4>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	429a      	cmp	r2, r3
 800f288:	f040 80ba 	bne.w	800f400 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f290:	2b00      	cmp	r3, #0
 800f292:	f040 80b5 	bne.w	800f400 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	2206      	movs	r2, #6
 800f29a:	751a      	strb	r2, [r3, #20]
      break;
 800f29c:	e0b0      	b.n	800f400 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	f000 f9ca 	bl	800f638 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f2a4:	4b60      	ldr	r3, [pc, #384]	@ (800f428 <tcp_process+0x7d8>)
 800f2a6:	781b      	ldrb	r3, [r3, #0]
 800f2a8:	f003 0320 	and.w	r3, r3, #32
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	f000 80a9 	beq.w	800f404 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	8b5b      	ldrh	r3, [r3, #26]
 800f2b6:	f043 0302 	orr.w	r3, r3, #2
 800f2ba:	b29a      	uxth	r2, r3
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	f7fe fd39 	bl	800dd38 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f2c6:	4b59      	ldr	r3, [pc, #356]	@ (800f42c <tcp_process+0x7dc>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	687a      	ldr	r2, [r7, #4]
 800f2cc:	429a      	cmp	r2, r3
 800f2ce:	d105      	bne.n	800f2dc <tcp_process+0x68c>
 800f2d0:	4b56      	ldr	r3, [pc, #344]	@ (800f42c <tcp_process+0x7dc>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	68db      	ldr	r3, [r3, #12]
 800f2d6:	4a55      	ldr	r2, [pc, #340]	@ (800f42c <tcp_process+0x7dc>)
 800f2d8:	6013      	str	r3, [r2, #0]
 800f2da:	e013      	b.n	800f304 <tcp_process+0x6b4>
 800f2dc:	4b53      	ldr	r3, [pc, #332]	@ (800f42c <tcp_process+0x7dc>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	613b      	str	r3, [r7, #16]
 800f2e2:	e00c      	b.n	800f2fe <tcp_process+0x6ae>
 800f2e4:	693b      	ldr	r3, [r7, #16]
 800f2e6:	68db      	ldr	r3, [r3, #12]
 800f2e8:	687a      	ldr	r2, [r7, #4]
 800f2ea:	429a      	cmp	r2, r3
 800f2ec:	d104      	bne.n	800f2f8 <tcp_process+0x6a8>
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	68da      	ldr	r2, [r3, #12]
 800f2f2:	693b      	ldr	r3, [r7, #16]
 800f2f4:	60da      	str	r2, [r3, #12]
 800f2f6:	e005      	b.n	800f304 <tcp_process+0x6b4>
 800f2f8:	693b      	ldr	r3, [r7, #16]
 800f2fa:	68db      	ldr	r3, [r3, #12]
 800f2fc:	613b      	str	r3, [r7, #16]
 800f2fe:	693b      	ldr	r3, [r7, #16]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d1ef      	bne.n	800f2e4 <tcp_process+0x694>
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2200      	movs	r2, #0
 800f308:	60da      	str	r2, [r3, #12]
 800f30a:	4b43      	ldr	r3, [pc, #268]	@ (800f418 <tcp_process+0x7c8>)
 800f30c:	2201      	movs	r2, #1
 800f30e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	220a      	movs	r2, #10
 800f314:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f316:	4b41      	ldr	r3, [pc, #260]	@ (800f41c <tcp_process+0x7cc>)
 800f318:	681a      	ldr	r2, [r3, #0]
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	60da      	str	r2, [r3, #12]
 800f31e:	4a3f      	ldr	r2, [pc, #252]	@ (800f41c <tcp_process+0x7cc>)
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	6013      	str	r3, [r2, #0]
 800f324:	f002 fc8e 	bl	8011c44 <tcp_timer_needed>
      }
      break;
 800f328:	e06c      	b.n	800f404 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	f000 f984 	bl	800f638 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f330:	4b3b      	ldr	r3, [pc, #236]	@ (800f420 <tcp_process+0x7d0>)
 800f332:	781b      	ldrb	r3, [r3, #0]
 800f334:	f003 0310 	and.w	r3, r3, #16
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d065      	beq.n	800f408 <tcp_process+0x7b8>
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f340:	4b38      	ldr	r3, [pc, #224]	@ (800f424 <tcp_process+0x7d4>)
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	429a      	cmp	r2, r3
 800f346:	d15f      	bne.n	800f408 <tcp_process+0x7b8>
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d15b      	bne.n	800f408 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f7fe fcf1 	bl	800dd38 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f356:	4b35      	ldr	r3, [pc, #212]	@ (800f42c <tcp_process+0x7dc>)
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	687a      	ldr	r2, [r7, #4]
 800f35c:	429a      	cmp	r2, r3
 800f35e:	d105      	bne.n	800f36c <tcp_process+0x71c>
 800f360:	4b32      	ldr	r3, [pc, #200]	@ (800f42c <tcp_process+0x7dc>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	68db      	ldr	r3, [r3, #12]
 800f366:	4a31      	ldr	r2, [pc, #196]	@ (800f42c <tcp_process+0x7dc>)
 800f368:	6013      	str	r3, [r2, #0]
 800f36a:	e013      	b.n	800f394 <tcp_process+0x744>
 800f36c:	4b2f      	ldr	r3, [pc, #188]	@ (800f42c <tcp_process+0x7dc>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	60fb      	str	r3, [r7, #12]
 800f372:	e00c      	b.n	800f38e <tcp_process+0x73e>
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	68db      	ldr	r3, [r3, #12]
 800f378:	687a      	ldr	r2, [r7, #4]
 800f37a:	429a      	cmp	r2, r3
 800f37c:	d104      	bne.n	800f388 <tcp_process+0x738>
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	68da      	ldr	r2, [r3, #12]
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	60da      	str	r2, [r3, #12]
 800f386:	e005      	b.n	800f394 <tcp_process+0x744>
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	68db      	ldr	r3, [r3, #12]
 800f38c:	60fb      	str	r3, [r7, #12]
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d1ef      	bne.n	800f374 <tcp_process+0x724>
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2200      	movs	r2, #0
 800f398:	60da      	str	r2, [r3, #12]
 800f39a:	4b1f      	ldr	r3, [pc, #124]	@ (800f418 <tcp_process+0x7c8>)
 800f39c:	2201      	movs	r2, #1
 800f39e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	220a      	movs	r2, #10
 800f3a4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f3a6:	4b1d      	ldr	r3, [pc, #116]	@ (800f41c <tcp_process+0x7cc>)
 800f3a8:	681a      	ldr	r2, [r3, #0]
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	60da      	str	r2, [r3, #12]
 800f3ae:	4a1b      	ldr	r2, [pc, #108]	@ (800f41c <tcp_process+0x7cc>)
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	6013      	str	r3, [r2, #0]
 800f3b4:	f002 fc46 	bl	8011c44 <tcp_timer_needed>
      }
      break;
 800f3b8:	e026      	b.n	800f408 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f3ba:	6878      	ldr	r0, [r7, #4]
 800f3bc:	f000 f93c 	bl	800f638 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f3c0:	4b17      	ldr	r3, [pc, #92]	@ (800f420 <tcp_process+0x7d0>)
 800f3c2:	781b      	ldrb	r3, [r3, #0]
 800f3c4:	f003 0310 	and.w	r3, r3, #16
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d01f      	beq.n	800f40c <tcp_process+0x7bc>
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f3d0:	4b14      	ldr	r3, [pc, #80]	@ (800f424 <tcp_process+0x7d4>)
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	429a      	cmp	r2, r3
 800f3d6:	d119      	bne.n	800f40c <tcp_process+0x7bc>
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d115      	bne.n	800f40c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f3e0:	4b11      	ldr	r3, [pc, #68]	@ (800f428 <tcp_process+0x7d8>)
 800f3e2:	781b      	ldrb	r3, [r3, #0]
 800f3e4:	f043 0310 	orr.w	r3, r3, #16
 800f3e8:	b2da      	uxtb	r2, r3
 800f3ea:	4b0f      	ldr	r3, [pc, #60]	@ (800f428 <tcp_process+0x7d8>)
 800f3ec:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f3ee:	e00d      	b.n	800f40c <tcp_process+0x7bc>
    default:
      break;
 800f3f0:	bf00      	nop
 800f3f2:	e00c      	b.n	800f40e <tcp_process+0x7be>
      break;
 800f3f4:	bf00      	nop
 800f3f6:	e00a      	b.n	800f40e <tcp_process+0x7be>
      break;
 800f3f8:	bf00      	nop
 800f3fa:	e008      	b.n	800f40e <tcp_process+0x7be>
      break;
 800f3fc:	bf00      	nop
 800f3fe:	e006      	b.n	800f40e <tcp_process+0x7be>
      break;
 800f400:	bf00      	nop
 800f402:	e004      	b.n	800f40e <tcp_process+0x7be>
      break;
 800f404:	bf00      	nop
 800f406:	e002      	b.n	800f40e <tcp_process+0x7be>
      break;
 800f408:	bf00      	nop
 800f40a:	e000      	b.n	800f40e <tcp_process+0x7be>
      break;
 800f40c:	bf00      	nop
  }
  return ERR_OK;
 800f40e:	2300      	movs	r3, #0
}
 800f410:	4618      	mov	r0, r3
 800f412:	3724      	adds	r7, #36	@ 0x24
 800f414:	46bd      	mov	sp, r7
 800f416:	bd90      	pop	{r4, r7, pc}
 800f418:	20010320 	.word	0x20010320
 800f41c:	2001031c 	.word	0x2001031c
 800f420:	20010350 	.word	0x20010350
 800f424:	20010348 	.word	0x20010348
 800f428:	20010351 	.word	0x20010351
 800f42c:	20010318 	.word	0x20010318

0800f430 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f430:	b590      	push	{r4, r7, lr}
 800f432:	b085      	sub	sp, #20
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
 800f438:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d106      	bne.n	800f44e <tcp_oos_insert_segment+0x1e>
 800f440:	4b3b      	ldr	r3, [pc, #236]	@ (800f530 <tcp_oos_insert_segment+0x100>)
 800f442:	f240 421f 	movw	r2, #1055	@ 0x41f
 800f446:	493b      	ldr	r1, [pc, #236]	@ (800f534 <tcp_oos_insert_segment+0x104>)
 800f448:	483b      	ldr	r0, [pc, #236]	@ (800f538 <tcp_oos_insert_segment+0x108>)
 800f44a:	f005 fc0b 	bl	8014c64 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	68db      	ldr	r3, [r3, #12]
 800f452:	899b      	ldrh	r3, [r3, #12]
 800f454:	b29b      	uxth	r3, r3
 800f456:	4618      	mov	r0, r3
 800f458:	f7fb fbfa 	bl	800ac50 <lwip_htons>
 800f45c:	4603      	mov	r3, r0
 800f45e:	b2db      	uxtb	r3, r3
 800f460:	f003 0301 	and.w	r3, r3, #1
 800f464:	2b00      	cmp	r3, #0
 800f466:	d028      	beq.n	800f4ba <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f468:	6838      	ldr	r0, [r7, #0]
 800f46a:	f7fe fa63 	bl	800d934 <tcp_segs_free>
    next = NULL;
 800f46e:	2300      	movs	r3, #0
 800f470:	603b      	str	r3, [r7, #0]
 800f472:	e056      	b.n	800f522 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	68db      	ldr	r3, [r3, #12]
 800f478:	899b      	ldrh	r3, [r3, #12]
 800f47a:	b29b      	uxth	r3, r3
 800f47c:	4618      	mov	r0, r3
 800f47e:	f7fb fbe7 	bl	800ac50 <lwip_htons>
 800f482:	4603      	mov	r3, r0
 800f484:	b2db      	uxtb	r3, r3
 800f486:	f003 0301 	and.w	r3, r3, #1
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d00d      	beq.n	800f4aa <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	68db      	ldr	r3, [r3, #12]
 800f492:	899b      	ldrh	r3, [r3, #12]
 800f494:	b29c      	uxth	r4, r3
 800f496:	2001      	movs	r0, #1
 800f498:	f7fb fbda 	bl	800ac50 <lwip_htons>
 800f49c:	4603      	mov	r3, r0
 800f49e:	461a      	mov	r2, r3
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	68db      	ldr	r3, [r3, #12]
 800f4a4:	4322      	orrs	r2, r4
 800f4a6:	b292      	uxth	r2, r2
 800f4a8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f4b4:	68f8      	ldr	r0, [r7, #12]
 800f4b6:	f7fe fa52 	bl	800d95e <tcp_seg_free>
    while (next &&
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d00e      	beq.n	800f4de <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	891b      	ldrh	r3, [r3, #8]
 800f4c4:	461a      	mov	r2, r3
 800f4c6:	4b1d      	ldr	r3, [pc, #116]	@ (800f53c <tcp_oos_insert_segment+0x10c>)
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	441a      	add	r2, r3
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	68db      	ldr	r3, [r3, #12]
 800f4d0:	685b      	ldr	r3, [r3, #4]
 800f4d2:	6839      	ldr	r1, [r7, #0]
 800f4d4:	8909      	ldrh	r1, [r1, #8]
 800f4d6:	440b      	add	r3, r1
 800f4d8:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	daca      	bge.n	800f474 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d01e      	beq.n	800f522 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	891b      	ldrh	r3, [r3, #8]
 800f4e8:	461a      	mov	r2, r3
 800f4ea:	4b14      	ldr	r3, [pc, #80]	@ (800f53c <tcp_oos_insert_segment+0x10c>)
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	441a      	add	r2, r3
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	68db      	ldr	r3, [r3, #12]
 800f4f4:	685b      	ldr	r3, [r3, #4]
 800f4f6:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	dd12      	ble.n	800f522 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	68db      	ldr	r3, [r3, #12]
 800f500:	685b      	ldr	r3, [r3, #4]
 800f502:	b29a      	uxth	r2, r3
 800f504:	4b0d      	ldr	r3, [pc, #52]	@ (800f53c <tcp_oos_insert_segment+0x10c>)
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	b29b      	uxth	r3, r3
 800f50a:	1ad3      	subs	r3, r2, r3
 800f50c:	b29a      	uxth	r2, r3
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	685a      	ldr	r2, [r3, #4]
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	891b      	ldrh	r3, [r3, #8]
 800f51a:	4619      	mov	r1, r3
 800f51c:	4610      	mov	r0, r2
 800f51e:	f7fc fe13 	bl	800c148 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	683a      	ldr	r2, [r7, #0]
 800f526:	601a      	str	r2, [r3, #0]
}
 800f528:	bf00      	nop
 800f52a:	3714      	adds	r7, #20
 800f52c:	46bd      	mov	sp, r7
 800f52e:	bd90      	pop	{r4, r7, pc}
 800f530:	08016e64 	.word	0x08016e64
 800f534:	08017124 	.word	0x08017124
 800f538:	08016eb0 	.word	0x08016eb0
 800f53c:	20010344 	.word	0x20010344

0800f540 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f540:	b5b0      	push	{r4, r5, r7, lr}
 800f542:	b086      	sub	sp, #24
 800f544:	af00      	add	r7, sp, #0
 800f546:	60f8      	str	r0, [r7, #12]
 800f548:	60b9      	str	r1, [r7, #8]
 800f54a:	607a      	str	r2, [r7, #4]
 800f54c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f54e:	e03e      	b.n	800f5ce <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f554:	68bb      	ldr	r3, [r7, #8]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f55a:	697b      	ldr	r3, [r7, #20]
 800f55c:	685b      	ldr	r3, [r3, #4]
 800f55e:	4618      	mov	r0, r3
 800f560:	f7fd f806 	bl	800c570 <pbuf_clen>
 800f564:	4603      	mov	r3, r0
 800f566:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f56e:	8a7a      	ldrh	r2, [r7, #18]
 800f570:	429a      	cmp	r2, r3
 800f572:	d906      	bls.n	800f582 <tcp_free_acked_segments+0x42>
 800f574:	4b2a      	ldr	r3, [pc, #168]	@ (800f620 <tcp_free_acked_segments+0xe0>)
 800f576:	f240 4257 	movw	r2, #1111	@ 0x457
 800f57a:	492a      	ldr	r1, [pc, #168]	@ (800f624 <tcp_free_acked_segments+0xe4>)
 800f57c:	482a      	ldr	r0, [pc, #168]	@ (800f628 <tcp_free_acked_segments+0xe8>)
 800f57e:	f005 fb71 	bl	8014c64 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800f588:	8a7b      	ldrh	r3, [r7, #18]
 800f58a:	1ad3      	subs	r3, r2, r3
 800f58c:	b29a      	uxth	r2, r3
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f594:	697b      	ldr	r3, [r7, #20]
 800f596:	891a      	ldrh	r2, [r3, #8]
 800f598:	4b24      	ldr	r3, [pc, #144]	@ (800f62c <tcp_free_acked_segments+0xec>)
 800f59a:	881b      	ldrh	r3, [r3, #0]
 800f59c:	4413      	add	r3, r2
 800f59e:	b29a      	uxth	r2, r3
 800f5a0:	4b22      	ldr	r3, [pc, #136]	@ (800f62c <tcp_free_acked_segments+0xec>)
 800f5a2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f5a4:	6978      	ldr	r0, [r7, #20]
 800f5a6:	f7fe f9da 	bl	800d95e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d00c      	beq.n	800f5ce <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f5b4:	68bb      	ldr	r3, [r7, #8]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d109      	bne.n	800f5ce <tcp_free_acked_segments+0x8e>
 800f5ba:	683b      	ldr	r3, [r7, #0]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d106      	bne.n	800f5ce <tcp_free_acked_segments+0x8e>
 800f5c0:	4b17      	ldr	r3, [pc, #92]	@ (800f620 <tcp_free_acked_segments+0xe0>)
 800f5c2:	f240 4261 	movw	r2, #1121	@ 0x461
 800f5c6:	491a      	ldr	r1, [pc, #104]	@ (800f630 <tcp_free_acked_segments+0xf0>)
 800f5c8:	4817      	ldr	r0, [pc, #92]	@ (800f628 <tcp_free_acked_segments+0xe8>)
 800f5ca:	f005 fb4b 	bl	8014c64 <iprintf>
  while (seg_list != NULL &&
 800f5ce:	68bb      	ldr	r3, [r7, #8]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d020      	beq.n	800f616 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f5d4:	68bb      	ldr	r3, [r7, #8]
 800f5d6:	68db      	ldr	r3, [r3, #12]
 800f5d8:	685b      	ldr	r3, [r3, #4]
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f7fb fb4d 	bl	800ac7a <lwip_htonl>
 800f5e0:	4604      	mov	r4, r0
 800f5e2:	68bb      	ldr	r3, [r7, #8]
 800f5e4:	891b      	ldrh	r3, [r3, #8]
 800f5e6:	461d      	mov	r5, r3
 800f5e8:	68bb      	ldr	r3, [r7, #8]
 800f5ea:	68db      	ldr	r3, [r3, #12]
 800f5ec:	899b      	ldrh	r3, [r3, #12]
 800f5ee:	b29b      	uxth	r3, r3
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	f7fb fb2d 	bl	800ac50 <lwip_htons>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	b2db      	uxtb	r3, r3
 800f5fa:	f003 0303 	and.w	r3, r3, #3
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d001      	beq.n	800f606 <tcp_free_acked_segments+0xc6>
 800f602:	2301      	movs	r3, #1
 800f604:	e000      	b.n	800f608 <tcp_free_acked_segments+0xc8>
 800f606:	2300      	movs	r3, #0
 800f608:	442b      	add	r3, r5
 800f60a:	18e2      	adds	r2, r4, r3
 800f60c:	4b09      	ldr	r3, [pc, #36]	@ (800f634 <tcp_free_acked_segments+0xf4>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f612:	2b00      	cmp	r3, #0
 800f614:	dd9c      	ble.n	800f550 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f616:	68bb      	ldr	r3, [r7, #8]
}
 800f618:	4618      	mov	r0, r3
 800f61a:	3718      	adds	r7, #24
 800f61c:	46bd      	mov	sp, r7
 800f61e:	bdb0      	pop	{r4, r5, r7, pc}
 800f620:	08016e64 	.word	0x08016e64
 800f624:	0801714c 	.word	0x0801714c
 800f628:	08016eb0 	.word	0x08016eb0
 800f62c:	2001034c 	.word	0x2001034c
 800f630:	08017174 	.word	0x08017174
 800f634:	20010348 	.word	0x20010348

0800f638 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f638:	b5b0      	push	{r4, r5, r7, lr}
 800f63a:	b094      	sub	sp, #80	@ 0x50
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f640:	2300      	movs	r3, #0
 800f642:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d106      	bne.n	800f658 <tcp_receive+0x20>
 800f64a:	4b91      	ldr	r3, [pc, #580]	@ (800f890 <tcp_receive+0x258>)
 800f64c:	f240 427b 	movw	r2, #1147	@ 0x47b
 800f650:	4990      	ldr	r1, [pc, #576]	@ (800f894 <tcp_receive+0x25c>)
 800f652:	4891      	ldr	r0, [pc, #580]	@ (800f898 <tcp_receive+0x260>)
 800f654:	f005 fb06 	bl	8014c64 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	7d1b      	ldrb	r3, [r3, #20]
 800f65c:	2b03      	cmp	r3, #3
 800f65e:	d806      	bhi.n	800f66e <tcp_receive+0x36>
 800f660:	4b8b      	ldr	r3, [pc, #556]	@ (800f890 <tcp_receive+0x258>)
 800f662:	f240 427c 	movw	r2, #1148	@ 0x47c
 800f666:	498d      	ldr	r1, [pc, #564]	@ (800f89c <tcp_receive+0x264>)
 800f668:	488b      	ldr	r0, [pc, #556]	@ (800f898 <tcp_receive+0x260>)
 800f66a:	f005 fafb 	bl	8014c64 <iprintf>

  if (flags & TCP_ACK) {
 800f66e:	4b8c      	ldr	r3, [pc, #560]	@ (800f8a0 <tcp_receive+0x268>)
 800f670:	781b      	ldrb	r3, [r3, #0]
 800f672:	f003 0310 	and.w	r3, r3, #16
 800f676:	2b00      	cmp	r3, #0
 800f678:	f000 8264 	beq.w	800fb44 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f682:	461a      	mov	r2, r3
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f688:	4413      	add	r3, r2
 800f68a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f690:	4b84      	ldr	r3, [pc, #528]	@ (800f8a4 <tcp_receive+0x26c>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	1ad3      	subs	r3, r2, r3
 800f696:	2b00      	cmp	r3, #0
 800f698:	db1b      	blt.n	800f6d2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f69e:	4b81      	ldr	r3, [pc, #516]	@ (800f8a4 <tcp_receive+0x26c>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f6a2:	429a      	cmp	r2, r3
 800f6a4:	d106      	bne.n	800f6b4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f6aa:	4b7f      	ldr	r3, [pc, #508]	@ (800f8a8 <tcp_receive+0x270>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	1ad3      	subs	r3, r2, r3
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	db0e      	blt.n	800f6d2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f6b8:	4b7b      	ldr	r3, [pc, #492]	@ (800f8a8 <tcp_receive+0x270>)
 800f6ba:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f6bc:	429a      	cmp	r2, r3
 800f6be:	d125      	bne.n	800f70c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f6c0:	4b7a      	ldr	r3, [pc, #488]	@ (800f8ac <tcp_receive+0x274>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	89db      	ldrh	r3, [r3, #14]
 800f6c6:	b29a      	uxth	r2, r3
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f6ce:	429a      	cmp	r2, r3
 800f6d0:	d91c      	bls.n	800f70c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f6d2:	4b76      	ldr	r3, [pc, #472]	@ (800f8ac <tcp_receive+0x274>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	89db      	ldrh	r3, [r3, #14]
 800f6d8:	b29a      	uxth	r2, r3
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f6ec:	429a      	cmp	r2, r3
 800f6ee:	d205      	bcs.n	800f6fc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800f6fc:	4b69      	ldr	r3, [pc, #420]	@ (800f8a4 <tcp_receive+0x26c>)
 800f6fe:	681a      	ldr	r2, [r3, #0]
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800f704:	4b68      	ldr	r3, [pc, #416]	@ (800f8a8 <tcp_receive+0x270>)
 800f706:	681a      	ldr	r2, [r3, #0]
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f70c:	4b66      	ldr	r3, [pc, #408]	@ (800f8a8 <tcp_receive+0x270>)
 800f70e:	681a      	ldr	r2, [r3, #0]
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f714:	1ad3      	subs	r3, r2, r3
 800f716:	2b00      	cmp	r3, #0
 800f718:	dc58      	bgt.n	800f7cc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f71a:	4b65      	ldr	r3, [pc, #404]	@ (800f8b0 <tcp_receive+0x278>)
 800f71c:	881b      	ldrh	r3, [r3, #0]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d14b      	bne.n	800f7ba <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f726:	687a      	ldr	r2, [r7, #4]
 800f728:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800f72c:	4413      	add	r3, r2
 800f72e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f730:	429a      	cmp	r2, r3
 800f732:	d142      	bne.n	800f7ba <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	db3d      	blt.n	800f7ba <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f742:	4b59      	ldr	r3, [pc, #356]	@ (800f8a8 <tcp_receive+0x270>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	429a      	cmp	r2, r3
 800f748:	d137      	bne.n	800f7ba <tcp_receive+0x182>
              found_dupack = 1;
 800f74a:	2301      	movs	r3, #1
 800f74c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f754:	2bff      	cmp	r3, #255	@ 0xff
 800f756:	d007      	beq.n	800f768 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f75e:	3301      	adds	r3, #1
 800f760:	b2da      	uxtb	r2, r3
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f76e:	2b03      	cmp	r3, #3
 800f770:	d91b      	bls.n	800f7aa <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f77c:	4413      	add	r3, r2
 800f77e:	b29a      	uxth	r2, r3
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f786:	429a      	cmp	r2, r3
 800f788:	d30a      	bcc.n	800f7a0 <tcp_receive+0x168>
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f794:	4413      	add	r3, r2
 800f796:	b29a      	uxth	r2, r3
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f79e:	e004      	b.n	800f7aa <tcp_receive+0x172>
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f7a6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f7b0:	2b02      	cmp	r3, #2
 800f7b2:	d902      	bls.n	800f7ba <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f7b4:	6878      	ldr	r0, [r7, #4]
 800f7b6:	f001 fee9 	bl	801158c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f7ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	f040 8161 	bne.w	800fa84 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f7ca:	e15b      	b.n	800fa84 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f7cc:	4b36      	ldr	r3, [pc, #216]	@ (800f8a8 <tcp_receive+0x270>)
 800f7ce:	681a      	ldr	r2, [r3, #0]
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f7d4:	1ad3      	subs	r3, r2, r3
 800f7d6:	3b01      	subs	r3, #1
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	f2c0 814e 	blt.w	800fa7a <tcp_receive+0x442>
 800f7de:	4b32      	ldr	r3, [pc, #200]	@ (800f8a8 <tcp_receive+0x270>)
 800f7e0:	681a      	ldr	r2, [r3, #0]
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f7e6:	1ad3      	subs	r3, r2, r3
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	f300 8146 	bgt.w	800fa7a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	8b5b      	ldrh	r3, [r3, #26]
 800f7f2:	f003 0304 	and.w	r3, r3, #4
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d010      	beq.n	800f81c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	8b5b      	ldrh	r3, [r3, #26]
 800f7fe:	f023 0304 	bic.w	r3, r3, #4
 800f802:	b29a      	uxth	r2, r3
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2200      	movs	r2, #0
 800f818:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	2200      	movs	r2, #0
 800f820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f82a:	10db      	asrs	r3, r3, #3
 800f82c:	b21b      	sxth	r3, r3
 800f82e:	b29a      	uxth	r2, r3
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f836:	b29b      	uxth	r3, r3
 800f838:	4413      	add	r3, r2
 800f83a:	b29b      	uxth	r3, r3
 800f83c:	b21a      	sxth	r2, r3
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f844:	4b18      	ldr	r3, [pc, #96]	@ (800f8a8 <tcp_receive+0x270>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	b29a      	uxth	r2, r3
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f84e:	b29b      	uxth	r3, r3
 800f850:	1ad3      	subs	r3, r2, r3
 800f852:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2200      	movs	r2, #0
 800f858:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800f85c:	4b12      	ldr	r3, [pc, #72]	@ (800f8a8 <tcp_receive+0x270>)
 800f85e:	681a      	ldr	r2, [r3, #0]
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	7d1b      	ldrb	r3, [r3, #20]
 800f868:	2b03      	cmp	r3, #3
 800f86a:	f240 8097 	bls.w	800f99c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800f87a:	429a      	cmp	r2, r3
 800f87c:	d245      	bcs.n	800f90a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	8b5b      	ldrh	r3, [r3, #26]
 800f882:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f886:	2b00      	cmp	r3, #0
 800f888:	d014      	beq.n	800f8b4 <tcp_receive+0x27c>
 800f88a:	2301      	movs	r3, #1
 800f88c:	e013      	b.n	800f8b6 <tcp_receive+0x27e>
 800f88e:	bf00      	nop
 800f890:	08016e64 	.word	0x08016e64
 800f894:	08017194 	.word	0x08017194
 800f898:	08016eb0 	.word	0x08016eb0
 800f89c:	080171b0 	.word	0x080171b0
 800f8a0:	20010350 	.word	0x20010350
 800f8a4:	20010344 	.word	0x20010344
 800f8a8:	20010348 	.word	0x20010348
 800f8ac:	20010334 	.word	0x20010334
 800f8b0:	2001034e 	.word	0x2001034e
 800f8b4:	2302      	movs	r3, #2
 800f8b6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f8ba:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800f8be:	b29a      	uxth	r2, r3
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f8c4:	fb12 f303 	smulbb	r3, r2, r3
 800f8c8:	b29b      	uxth	r3, r3
 800f8ca:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f8cc:	4293      	cmp	r3, r2
 800f8ce:	bf28      	it	cs
 800f8d0:	4613      	movcs	r3, r2
 800f8d2:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f8da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f8dc:	4413      	add	r3, r2
 800f8de:	b29a      	uxth	r2, r3
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f8e6:	429a      	cmp	r2, r3
 800f8e8:	d309      	bcc.n	800f8fe <tcp_receive+0x2c6>
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f8f0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f8f2:	4413      	add	r3, r2
 800f8f4:	b29a      	uxth	r2, r3
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f8fc:	e04e      	b.n	800f99c <tcp_receive+0x364>
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f904:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f908:	e048      	b.n	800f99c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f910:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f912:	4413      	add	r3, r2
 800f914:	b29a      	uxth	r2, r3
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f91c:	429a      	cmp	r2, r3
 800f91e:	d309      	bcc.n	800f934 <tcp_receive+0x2fc>
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f926:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f928:	4413      	add	r3, r2
 800f92a:	b29a      	uxth	r2, r3
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f932:	e004      	b.n	800f93e <tcp_receive+0x306>
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f93a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f94a:	429a      	cmp	r2, r3
 800f94c:	d326      	bcc.n	800f99c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f95a:	1ad3      	subs	r3, r2, r3
 800f95c:	b29a      	uxth	r2, r3
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f96e:	4413      	add	r3, r2
 800f970:	b29a      	uxth	r2, r3
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f978:	429a      	cmp	r2, r3
 800f97a:	d30a      	bcc.n	800f992 <tcp_receive+0x35a>
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f986:	4413      	add	r3, r2
 800f988:	b29a      	uxth	r2, r3
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f990:	e004      	b.n	800f99c <tcp_receive+0x364>
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f998:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f9a4:	4a98      	ldr	r2, [pc, #608]	@ (800fc08 <tcp_receive+0x5d0>)
 800f9a6:	6878      	ldr	r0, [r7, #4]
 800f9a8:	f7ff fdca 	bl	800f540 <tcp_free_acked_segments>
 800f9ac:	4602      	mov	r2, r0
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f9ba:	4a94      	ldr	r2, [pc, #592]	@ (800fc0c <tcp_receive+0x5d4>)
 800f9bc:	6878      	ldr	r0, [r7, #4]
 800f9be:	f7ff fdbf 	bl	800f540 <tcp_free_acked_segments>
 800f9c2:	4602      	mov	r2, r0
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d104      	bne.n	800f9da <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f9d6:	861a      	strh	r2, [r3, #48]	@ 0x30
 800f9d8:	e002      	b.n	800f9e0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2200      	movs	r2, #0
 800f9de:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d103      	bne.n	800f9f6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800f9fc:	4b84      	ldr	r3, [pc, #528]	@ (800fc10 <tcp_receive+0x5d8>)
 800f9fe:	881b      	ldrh	r3, [r3, #0]
 800fa00:	4413      	add	r3, r2
 800fa02:	b29a      	uxth	r2, r3
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	8b5b      	ldrh	r3, [r3, #26]
 800fa0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d035      	beq.n	800fa82 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d118      	bne.n	800fa50 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d00c      	beq.n	800fa40 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fa2e:	68db      	ldr	r3, [r3, #12]
 800fa30:	685b      	ldr	r3, [r3, #4]
 800fa32:	4618      	mov	r0, r3
 800fa34:	f7fb f921 	bl	800ac7a <lwip_htonl>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	dc20      	bgt.n	800fa82 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	8b5b      	ldrh	r3, [r3, #26]
 800fa44:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fa48:	b29a      	uxth	r2, r3
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fa4e:	e018      	b.n	800fa82 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fa58:	68db      	ldr	r3, [r3, #12]
 800fa5a:	685b      	ldr	r3, [r3, #4]
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f7fb f90c 	bl	800ac7a <lwip_htonl>
 800fa62:	4603      	mov	r3, r0
 800fa64:	1ae3      	subs	r3, r4, r3
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	dc0b      	bgt.n	800fa82 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	8b5b      	ldrh	r3, [r3, #26]
 800fa6e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fa72:	b29a      	uxth	r2, r3
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fa78:	e003      	b.n	800fa82 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800fa7a:	6878      	ldr	r0, [r7, #4]
 800fa7c:	f001 ff72 	bl	8011964 <tcp_send_empty_ack>
 800fa80:	e000      	b.n	800fa84 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fa82:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d05b      	beq.n	800fb44 <tcp_receive+0x50c>
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fa90:	4b60      	ldr	r3, [pc, #384]	@ (800fc14 <tcp_receive+0x5dc>)
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	1ad3      	subs	r3, r2, r3
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	da54      	bge.n	800fb44 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800fa9a:	4b5f      	ldr	r3, [pc, #380]	@ (800fc18 <tcp_receive+0x5e0>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	b29a      	uxth	r2, r3
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800faa4:	b29b      	uxth	r3, r3
 800faa6:	1ad3      	subs	r3, r2, r3
 800faa8:	b29b      	uxth	r3, r3
 800faaa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800faae:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800fab8:	10db      	asrs	r3, r3, #3
 800faba:	b21b      	sxth	r3, r3
 800fabc:	b29b      	uxth	r3, r3
 800fabe:	1ad3      	subs	r3, r2, r3
 800fac0:	b29b      	uxth	r3, r3
 800fac2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800facc:	b29a      	uxth	r2, r3
 800face:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800fad2:	4413      	add	r3, r2
 800fad4:	b29b      	uxth	r3, r3
 800fad6:	b21a      	sxth	r2, r3
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800fadc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	da05      	bge.n	800faf0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800fae4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800fae8:	425b      	negs	r3, r3
 800faea:	b29b      	uxth	r3, r3
 800faec:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800faf0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800fafa:	109b      	asrs	r3, r3, #2
 800fafc:	b21b      	sxth	r3, r3
 800fafe:	b29b      	uxth	r3, r3
 800fb00:	1ad3      	subs	r3, r2, r3
 800fb02:	b29b      	uxth	r3, r3
 800fb04:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800fb0e:	b29a      	uxth	r2, r3
 800fb10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800fb14:	4413      	add	r3, r2
 800fb16:	b29b      	uxth	r3, r3
 800fb18:	b21a      	sxth	r2, r3
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800fb24:	10db      	asrs	r3, r3, #3
 800fb26:	b21b      	sxth	r3, r3
 800fb28:	b29a      	uxth	r2, r3
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800fb30:	b29b      	uxth	r3, r3
 800fb32:	4413      	add	r3, r2
 800fb34:	b29b      	uxth	r3, r3
 800fb36:	b21a      	sxth	r2, r3
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	2200      	movs	r2, #0
 800fb42:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800fb44:	4b35      	ldr	r3, [pc, #212]	@ (800fc1c <tcp_receive+0x5e4>)
 800fb46:	881b      	ldrh	r3, [r3, #0]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	f000 84df 	beq.w	801050c <tcp_receive+0xed4>
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	7d1b      	ldrb	r3, [r3, #20]
 800fb52:	2b06      	cmp	r3, #6
 800fb54:	f200 84da 	bhi.w	801050c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fb5c:	4b30      	ldr	r3, [pc, #192]	@ (800fc20 <tcp_receive+0x5e8>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	1ad3      	subs	r3, r2, r3
 800fb62:	3b01      	subs	r3, #1
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	f2c0 808f 	blt.w	800fc88 <tcp_receive+0x650>
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fb6e:	4b2b      	ldr	r3, [pc, #172]	@ (800fc1c <tcp_receive+0x5e4>)
 800fb70:	881b      	ldrh	r3, [r3, #0]
 800fb72:	4619      	mov	r1, r3
 800fb74:	4b2a      	ldr	r3, [pc, #168]	@ (800fc20 <tcp_receive+0x5e8>)
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	440b      	add	r3, r1
 800fb7a:	1ad3      	subs	r3, r2, r3
 800fb7c:	3301      	adds	r3, #1
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	f300 8082 	bgt.w	800fc88 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800fb84:	4b27      	ldr	r3, [pc, #156]	@ (800fc24 <tcp_receive+0x5ec>)
 800fb86:	685b      	ldr	r3, [r3, #4]
 800fb88:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fb8e:	4b24      	ldr	r3, [pc, #144]	@ (800fc20 <tcp_receive+0x5e8>)
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	1ad3      	subs	r3, r2, r3
 800fb94:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800fb96:	4b23      	ldr	r3, [pc, #140]	@ (800fc24 <tcp_receive+0x5ec>)
 800fb98:	685b      	ldr	r3, [r3, #4]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d106      	bne.n	800fbac <tcp_receive+0x574>
 800fb9e:	4b22      	ldr	r3, [pc, #136]	@ (800fc28 <tcp_receive+0x5f0>)
 800fba0:	f240 5294 	movw	r2, #1428	@ 0x594
 800fba4:	4921      	ldr	r1, [pc, #132]	@ (800fc2c <tcp_receive+0x5f4>)
 800fba6:	4822      	ldr	r0, [pc, #136]	@ (800fc30 <tcp_receive+0x5f8>)
 800fba8:	f005 f85c 	bl	8014c64 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800fbac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbae:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800fbb2:	4293      	cmp	r3, r2
 800fbb4:	d906      	bls.n	800fbc4 <tcp_receive+0x58c>
 800fbb6:	4b1c      	ldr	r3, [pc, #112]	@ (800fc28 <tcp_receive+0x5f0>)
 800fbb8:	f240 5295 	movw	r2, #1429	@ 0x595
 800fbbc:	491d      	ldr	r1, [pc, #116]	@ (800fc34 <tcp_receive+0x5fc>)
 800fbbe:	481c      	ldr	r0, [pc, #112]	@ (800fc30 <tcp_receive+0x5f8>)
 800fbc0:	f005 f850 	bl	8014c64 <iprintf>
      off = (u16_t)off32;
 800fbc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbc6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800fbca:	4b16      	ldr	r3, [pc, #88]	@ (800fc24 <tcp_receive+0x5ec>)
 800fbcc:	685b      	ldr	r3, [r3, #4]
 800fbce:	891b      	ldrh	r3, [r3, #8]
 800fbd0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	d906      	bls.n	800fbe6 <tcp_receive+0x5ae>
 800fbd8:	4b13      	ldr	r3, [pc, #76]	@ (800fc28 <tcp_receive+0x5f0>)
 800fbda:	f240 5297 	movw	r2, #1431	@ 0x597
 800fbde:	4916      	ldr	r1, [pc, #88]	@ (800fc38 <tcp_receive+0x600>)
 800fbe0:	4813      	ldr	r0, [pc, #76]	@ (800fc30 <tcp_receive+0x5f8>)
 800fbe2:	f005 f83f 	bl	8014c64 <iprintf>
      inseg.len -= off;
 800fbe6:	4b0f      	ldr	r3, [pc, #60]	@ (800fc24 <tcp_receive+0x5ec>)
 800fbe8:	891a      	ldrh	r2, [r3, #8]
 800fbea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fbee:	1ad3      	subs	r3, r2, r3
 800fbf0:	b29a      	uxth	r2, r3
 800fbf2:	4b0c      	ldr	r3, [pc, #48]	@ (800fc24 <tcp_receive+0x5ec>)
 800fbf4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800fbf6:	4b0b      	ldr	r3, [pc, #44]	@ (800fc24 <tcp_receive+0x5ec>)
 800fbf8:	685b      	ldr	r3, [r3, #4]
 800fbfa:	891a      	ldrh	r2, [r3, #8]
 800fbfc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fc00:	1ad3      	subs	r3, r2, r3
 800fc02:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800fc04:	e02a      	b.n	800fc5c <tcp_receive+0x624>
 800fc06:	bf00      	nop
 800fc08:	080171cc 	.word	0x080171cc
 800fc0c:	080171d4 	.word	0x080171d4
 800fc10:	2001034c 	.word	0x2001034c
 800fc14:	20010348 	.word	0x20010348
 800fc18:	2001030c 	.word	0x2001030c
 800fc1c:	2001034e 	.word	0x2001034e
 800fc20:	20010344 	.word	0x20010344
 800fc24:	20010324 	.word	0x20010324
 800fc28:	08016e64 	.word	0x08016e64
 800fc2c:	080171dc 	.word	0x080171dc
 800fc30:	08016eb0 	.word	0x08016eb0
 800fc34:	080171ec 	.word	0x080171ec
 800fc38:	080171fc 	.word	0x080171fc
        off -= p->len;
 800fc3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fc3e:	895b      	ldrh	r3, [r3, #10]
 800fc40:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800fc44:	1ad3      	subs	r3, r2, r3
 800fc46:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800fc4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fc4c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800fc4e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800fc50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fc52:	2200      	movs	r2, #0
 800fc54:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800fc56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800fc5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fc5e:	895b      	ldrh	r3, [r3, #10]
 800fc60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800fc64:	429a      	cmp	r2, r3
 800fc66:	d8e9      	bhi.n	800fc3c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800fc68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fc6c:	4619      	mov	r1, r3
 800fc6e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fc70:	f7fc fb6a 	bl	800c348 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc78:	4a90      	ldr	r2, [pc, #576]	@ (800febc <tcp_receive+0x884>)
 800fc7a:	6013      	str	r3, [r2, #0]
 800fc7c:	4b90      	ldr	r3, [pc, #576]	@ (800fec0 <tcp_receive+0x888>)
 800fc7e:	68db      	ldr	r3, [r3, #12]
 800fc80:	4a8e      	ldr	r2, [pc, #568]	@ (800febc <tcp_receive+0x884>)
 800fc82:	6812      	ldr	r2, [r2, #0]
 800fc84:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fc86:	e00d      	b.n	800fca4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800fc88:	4b8c      	ldr	r3, [pc, #560]	@ (800febc <tcp_receive+0x884>)
 800fc8a:	681a      	ldr	r2, [r3, #0]
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc90:	1ad3      	subs	r3, r2, r3
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	da06      	bge.n	800fca4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	8b5b      	ldrh	r3, [r3, #26]
 800fc9a:	f043 0302 	orr.w	r3, r3, #2
 800fc9e:	b29a      	uxth	r2, r3
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fca4:	4b85      	ldr	r3, [pc, #532]	@ (800febc <tcp_receive+0x884>)
 800fca6:	681a      	ldr	r2, [r3, #0]
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcac:	1ad3      	subs	r3, r2, r3
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	f2c0 8427 	blt.w	8010502 <tcp_receive+0xeca>
 800fcb4:	4b81      	ldr	r3, [pc, #516]	@ (800febc <tcp_receive+0x884>)
 800fcb6:	681a      	ldr	r2, [r3, #0]
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcbc:	6879      	ldr	r1, [r7, #4]
 800fcbe:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fcc0:	440b      	add	r3, r1
 800fcc2:	1ad3      	subs	r3, r2, r3
 800fcc4:	3301      	adds	r3, #1
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	f300 841b 	bgt.w	8010502 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fcd0:	4b7a      	ldr	r3, [pc, #488]	@ (800febc <tcp_receive+0x884>)
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	429a      	cmp	r2, r3
 800fcd6:	f040 8298 	bne.w	801020a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800fcda:	4b79      	ldr	r3, [pc, #484]	@ (800fec0 <tcp_receive+0x888>)
 800fcdc:	891c      	ldrh	r4, [r3, #8]
 800fcde:	4b78      	ldr	r3, [pc, #480]	@ (800fec0 <tcp_receive+0x888>)
 800fce0:	68db      	ldr	r3, [r3, #12]
 800fce2:	899b      	ldrh	r3, [r3, #12]
 800fce4:	b29b      	uxth	r3, r3
 800fce6:	4618      	mov	r0, r3
 800fce8:	f7fa ffb2 	bl	800ac50 <lwip_htons>
 800fcec:	4603      	mov	r3, r0
 800fcee:	b2db      	uxtb	r3, r3
 800fcf0:	f003 0303 	and.w	r3, r3, #3
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d001      	beq.n	800fcfc <tcp_receive+0x6c4>
 800fcf8:	2301      	movs	r3, #1
 800fcfa:	e000      	b.n	800fcfe <tcp_receive+0x6c6>
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	4423      	add	r3, r4
 800fd00:	b29a      	uxth	r2, r3
 800fd02:	4b70      	ldr	r3, [pc, #448]	@ (800fec4 <tcp_receive+0x88c>)
 800fd04:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fd0a:	4b6e      	ldr	r3, [pc, #440]	@ (800fec4 <tcp_receive+0x88c>)
 800fd0c:	881b      	ldrh	r3, [r3, #0]
 800fd0e:	429a      	cmp	r2, r3
 800fd10:	d274      	bcs.n	800fdfc <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fd12:	4b6b      	ldr	r3, [pc, #428]	@ (800fec0 <tcp_receive+0x888>)
 800fd14:	68db      	ldr	r3, [r3, #12]
 800fd16:	899b      	ldrh	r3, [r3, #12]
 800fd18:	b29b      	uxth	r3, r3
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f7fa ff98 	bl	800ac50 <lwip_htons>
 800fd20:	4603      	mov	r3, r0
 800fd22:	b2db      	uxtb	r3, r3
 800fd24:	f003 0301 	and.w	r3, r3, #1
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d01e      	beq.n	800fd6a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800fd2c:	4b64      	ldr	r3, [pc, #400]	@ (800fec0 <tcp_receive+0x888>)
 800fd2e:	68db      	ldr	r3, [r3, #12]
 800fd30:	899b      	ldrh	r3, [r3, #12]
 800fd32:	b29b      	uxth	r3, r3
 800fd34:	b21b      	sxth	r3, r3
 800fd36:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800fd3a:	b21c      	sxth	r4, r3
 800fd3c:	4b60      	ldr	r3, [pc, #384]	@ (800fec0 <tcp_receive+0x888>)
 800fd3e:	68db      	ldr	r3, [r3, #12]
 800fd40:	899b      	ldrh	r3, [r3, #12]
 800fd42:	b29b      	uxth	r3, r3
 800fd44:	4618      	mov	r0, r3
 800fd46:	f7fa ff83 	bl	800ac50 <lwip_htons>
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	b2db      	uxtb	r3, r3
 800fd4e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800fd52:	b29b      	uxth	r3, r3
 800fd54:	4618      	mov	r0, r3
 800fd56:	f7fa ff7b 	bl	800ac50 <lwip_htons>
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	b21b      	sxth	r3, r3
 800fd5e:	4323      	orrs	r3, r4
 800fd60:	b21a      	sxth	r2, r3
 800fd62:	4b57      	ldr	r3, [pc, #348]	@ (800fec0 <tcp_receive+0x888>)
 800fd64:	68db      	ldr	r3, [r3, #12]
 800fd66:	b292      	uxth	r2, r2
 800fd68:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fd6e:	4b54      	ldr	r3, [pc, #336]	@ (800fec0 <tcp_receive+0x888>)
 800fd70:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fd72:	4b53      	ldr	r3, [pc, #332]	@ (800fec0 <tcp_receive+0x888>)
 800fd74:	68db      	ldr	r3, [r3, #12]
 800fd76:	899b      	ldrh	r3, [r3, #12]
 800fd78:	b29b      	uxth	r3, r3
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f7fa ff68 	bl	800ac50 <lwip_htons>
 800fd80:	4603      	mov	r3, r0
 800fd82:	b2db      	uxtb	r3, r3
 800fd84:	f003 0302 	and.w	r3, r3, #2
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d005      	beq.n	800fd98 <tcp_receive+0x760>
            inseg.len -= 1;
 800fd8c:	4b4c      	ldr	r3, [pc, #304]	@ (800fec0 <tcp_receive+0x888>)
 800fd8e:	891b      	ldrh	r3, [r3, #8]
 800fd90:	3b01      	subs	r3, #1
 800fd92:	b29a      	uxth	r2, r3
 800fd94:	4b4a      	ldr	r3, [pc, #296]	@ (800fec0 <tcp_receive+0x888>)
 800fd96:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800fd98:	4b49      	ldr	r3, [pc, #292]	@ (800fec0 <tcp_receive+0x888>)
 800fd9a:	685b      	ldr	r3, [r3, #4]
 800fd9c:	4a48      	ldr	r2, [pc, #288]	@ (800fec0 <tcp_receive+0x888>)
 800fd9e:	8912      	ldrh	r2, [r2, #8]
 800fda0:	4611      	mov	r1, r2
 800fda2:	4618      	mov	r0, r3
 800fda4:	f7fc f9d0 	bl	800c148 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800fda8:	4b45      	ldr	r3, [pc, #276]	@ (800fec0 <tcp_receive+0x888>)
 800fdaa:	891c      	ldrh	r4, [r3, #8]
 800fdac:	4b44      	ldr	r3, [pc, #272]	@ (800fec0 <tcp_receive+0x888>)
 800fdae:	68db      	ldr	r3, [r3, #12]
 800fdb0:	899b      	ldrh	r3, [r3, #12]
 800fdb2:	b29b      	uxth	r3, r3
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	f7fa ff4b 	bl	800ac50 <lwip_htons>
 800fdba:	4603      	mov	r3, r0
 800fdbc:	b2db      	uxtb	r3, r3
 800fdbe:	f003 0303 	and.w	r3, r3, #3
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d001      	beq.n	800fdca <tcp_receive+0x792>
 800fdc6:	2301      	movs	r3, #1
 800fdc8:	e000      	b.n	800fdcc <tcp_receive+0x794>
 800fdca:	2300      	movs	r3, #0
 800fdcc:	4423      	add	r3, r4
 800fdce:	b29a      	uxth	r2, r3
 800fdd0:	4b3c      	ldr	r3, [pc, #240]	@ (800fec4 <tcp_receive+0x88c>)
 800fdd2:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fdd4:	4b3b      	ldr	r3, [pc, #236]	@ (800fec4 <tcp_receive+0x88c>)
 800fdd6:	881b      	ldrh	r3, [r3, #0]
 800fdd8:	461a      	mov	r2, r3
 800fdda:	4b38      	ldr	r3, [pc, #224]	@ (800febc <tcp_receive+0x884>)
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	441a      	add	r2, r3
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fde4:	6879      	ldr	r1, [r7, #4]
 800fde6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fde8:	440b      	add	r3, r1
 800fdea:	429a      	cmp	r2, r3
 800fdec:	d006      	beq.n	800fdfc <tcp_receive+0x7c4>
 800fdee:	4b36      	ldr	r3, [pc, #216]	@ (800fec8 <tcp_receive+0x890>)
 800fdf0:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800fdf4:	4935      	ldr	r1, [pc, #212]	@ (800fecc <tcp_receive+0x894>)
 800fdf6:	4836      	ldr	r0, [pc, #216]	@ (800fed0 <tcp_receive+0x898>)
 800fdf8:	f004 ff34 	bl	8014c64 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	f000 80e6 	beq.w	800ffd2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fe06:	4b2e      	ldr	r3, [pc, #184]	@ (800fec0 <tcp_receive+0x888>)
 800fe08:	68db      	ldr	r3, [r3, #12]
 800fe0a:	899b      	ldrh	r3, [r3, #12]
 800fe0c:	b29b      	uxth	r3, r3
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f7fa ff1e 	bl	800ac50 <lwip_htons>
 800fe14:	4603      	mov	r3, r0
 800fe16:	b2db      	uxtb	r3, r3
 800fe18:	f003 0301 	and.w	r3, r3, #1
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d010      	beq.n	800fe42 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800fe20:	e00a      	b.n	800fe38 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe26:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe2c:	681a      	ldr	r2, [r3, #0]
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800fe32:	68f8      	ldr	r0, [r7, #12]
 800fe34:	f7fd fd93 	bl	800d95e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d1f0      	bne.n	800fe22 <tcp_receive+0x7ea>
 800fe40:	e0c7      	b.n	800ffd2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe46:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800fe48:	e051      	b.n	800feee <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fe4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe4c:	68db      	ldr	r3, [r3, #12]
 800fe4e:	899b      	ldrh	r3, [r3, #12]
 800fe50:	b29b      	uxth	r3, r3
 800fe52:	4618      	mov	r0, r3
 800fe54:	f7fa fefc 	bl	800ac50 <lwip_htons>
 800fe58:	4603      	mov	r3, r0
 800fe5a:	b2db      	uxtb	r3, r3
 800fe5c:	f003 0301 	and.w	r3, r3, #1
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d03c      	beq.n	800fede <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800fe64:	4b16      	ldr	r3, [pc, #88]	@ (800fec0 <tcp_receive+0x888>)
 800fe66:	68db      	ldr	r3, [r3, #12]
 800fe68:	899b      	ldrh	r3, [r3, #12]
 800fe6a:	b29b      	uxth	r3, r3
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f7fa feef 	bl	800ac50 <lwip_htons>
 800fe72:	4603      	mov	r3, r0
 800fe74:	b2db      	uxtb	r3, r3
 800fe76:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d12f      	bne.n	800fede <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800fe7e:	4b10      	ldr	r3, [pc, #64]	@ (800fec0 <tcp_receive+0x888>)
 800fe80:	68db      	ldr	r3, [r3, #12]
 800fe82:	899b      	ldrh	r3, [r3, #12]
 800fe84:	b29c      	uxth	r4, r3
 800fe86:	2001      	movs	r0, #1
 800fe88:	f7fa fee2 	bl	800ac50 <lwip_htons>
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	461a      	mov	r2, r3
 800fe90:	4b0b      	ldr	r3, [pc, #44]	@ (800fec0 <tcp_receive+0x888>)
 800fe92:	68db      	ldr	r3, [r3, #12]
 800fe94:	4322      	orrs	r2, r4
 800fe96:	b292      	uxth	r2, r2
 800fe98:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800fe9a:	4b09      	ldr	r3, [pc, #36]	@ (800fec0 <tcp_receive+0x888>)
 800fe9c:	891c      	ldrh	r4, [r3, #8]
 800fe9e:	4b08      	ldr	r3, [pc, #32]	@ (800fec0 <tcp_receive+0x888>)
 800fea0:	68db      	ldr	r3, [r3, #12]
 800fea2:	899b      	ldrh	r3, [r3, #12]
 800fea4:	b29b      	uxth	r3, r3
 800fea6:	4618      	mov	r0, r3
 800fea8:	f7fa fed2 	bl	800ac50 <lwip_htons>
 800feac:	4603      	mov	r3, r0
 800feae:	b2db      	uxtb	r3, r3
 800feb0:	f003 0303 	and.w	r3, r3, #3
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d00d      	beq.n	800fed4 <tcp_receive+0x89c>
 800feb8:	2301      	movs	r3, #1
 800feba:	e00c      	b.n	800fed6 <tcp_receive+0x89e>
 800febc:	20010344 	.word	0x20010344
 800fec0:	20010324 	.word	0x20010324
 800fec4:	2001034e 	.word	0x2001034e
 800fec8:	08016e64 	.word	0x08016e64
 800fecc:	0801720c 	.word	0x0801720c
 800fed0:	08016eb0 	.word	0x08016eb0
 800fed4:	2300      	movs	r3, #0
 800fed6:	4423      	add	r3, r4
 800fed8:	b29a      	uxth	r2, r3
 800feda:	4b98      	ldr	r3, [pc, #608]	@ (801013c <tcp_receive+0xb04>)
 800fedc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800fede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fee0:	613b      	str	r3, [r7, #16]
              next = next->next;
 800fee2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800fee8:	6938      	ldr	r0, [r7, #16]
 800feea:	f7fd fd38 	bl	800d95e <tcp_seg_free>
            while (next &&
 800feee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d00e      	beq.n	800ff12 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800fef4:	4b91      	ldr	r3, [pc, #580]	@ (801013c <tcp_receive+0xb04>)
 800fef6:	881b      	ldrh	r3, [r3, #0]
 800fef8:	461a      	mov	r2, r3
 800fefa:	4b91      	ldr	r3, [pc, #580]	@ (8010140 <tcp_receive+0xb08>)
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	441a      	add	r2, r3
 800ff00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff02:	68db      	ldr	r3, [r3, #12]
 800ff04:	685b      	ldr	r3, [r3, #4]
 800ff06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ff08:	8909      	ldrh	r1, [r1, #8]
 800ff0a:	440b      	add	r3, r1
 800ff0c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	da9b      	bge.n	800fe4a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ff12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d059      	beq.n	800ffcc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800ff18:	4b88      	ldr	r3, [pc, #544]	@ (801013c <tcp_receive+0xb04>)
 800ff1a:	881b      	ldrh	r3, [r3, #0]
 800ff1c:	461a      	mov	r2, r3
 800ff1e:	4b88      	ldr	r3, [pc, #544]	@ (8010140 <tcp_receive+0xb08>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	441a      	add	r2, r3
 800ff24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff26:	68db      	ldr	r3, [r3, #12]
 800ff28:	685b      	ldr	r3, [r3, #4]
 800ff2a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	dd4d      	ble.n	800ffcc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ff30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff32:	68db      	ldr	r3, [r3, #12]
 800ff34:	685b      	ldr	r3, [r3, #4]
 800ff36:	b29a      	uxth	r2, r3
 800ff38:	4b81      	ldr	r3, [pc, #516]	@ (8010140 <tcp_receive+0xb08>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	b29b      	uxth	r3, r3
 800ff3e:	1ad3      	subs	r3, r2, r3
 800ff40:	b29a      	uxth	r2, r3
 800ff42:	4b80      	ldr	r3, [pc, #512]	@ (8010144 <tcp_receive+0xb0c>)
 800ff44:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ff46:	4b7f      	ldr	r3, [pc, #508]	@ (8010144 <tcp_receive+0xb0c>)
 800ff48:	68db      	ldr	r3, [r3, #12]
 800ff4a:	899b      	ldrh	r3, [r3, #12]
 800ff4c:	b29b      	uxth	r3, r3
 800ff4e:	4618      	mov	r0, r3
 800ff50:	f7fa fe7e 	bl	800ac50 <lwip_htons>
 800ff54:	4603      	mov	r3, r0
 800ff56:	b2db      	uxtb	r3, r3
 800ff58:	f003 0302 	and.w	r3, r3, #2
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d005      	beq.n	800ff6c <tcp_receive+0x934>
                inseg.len -= 1;
 800ff60:	4b78      	ldr	r3, [pc, #480]	@ (8010144 <tcp_receive+0xb0c>)
 800ff62:	891b      	ldrh	r3, [r3, #8]
 800ff64:	3b01      	subs	r3, #1
 800ff66:	b29a      	uxth	r2, r3
 800ff68:	4b76      	ldr	r3, [pc, #472]	@ (8010144 <tcp_receive+0xb0c>)
 800ff6a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ff6c:	4b75      	ldr	r3, [pc, #468]	@ (8010144 <tcp_receive+0xb0c>)
 800ff6e:	685b      	ldr	r3, [r3, #4]
 800ff70:	4a74      	ldr	r2, [pc, #464]	@ (8010144 <tcp_receive+0xb0c>)
 800ff72:	8912      	ldrh	r2, [r2, #8]
 800ff74:	4611      	mov	r1, r2
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7fc f8e6 	bl	800c148 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ff7c:	4b71      	ldr	r3, [pc, #452]	@ (8010144 <tcp_receive+0xb0c>)
 800ff7e:	891c      	ldrh	r4, [r3, #8]
 800ff80:	4b70      	ldr	r3, [pc, #448]	@ (8010144 <tcp_receive+0xb0c>)
 800ff82:	68db      	ldr	r3, [r3, #12]
 800ff84:	899b      	ldrh	r3, [r3, #12]
 800ff86:	b29b      	uxth	r3, r3
 800ff88:	4618      	mov	r0, r3
 800ff8a:	f7fa fe61 	bl	800ac50 <lwip_htons>
 800ff8e:	4603      	mov	r3, r0
 800ff90:	b2db      	uxtb	r3, r3
 800ff92:	f003 0303 	and.w	r3, r3, #3
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d001      	beq.n	800ff9e <tcp_receive+0x966>
 800ff9a:	2301      	movs	r3, #1
 800ff9c:	e000      	b.n	800ffa0 <tcp_receive+0x968>
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	4423      	add	r3, r4
 800ffa2:	b29a      	uxth	r2, r3
 800ffa4:	4b65      	ldr	r3, [pc, #404]	@ (801013c <tcp_receive+0xb04>)
 800ffa6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ffa8:	4b64      	ldr	r3, [pc, #400]	@ (801013c <tcp_receive+0xb04>)
 800ffaa:	881b      	ldrh	r3, [r3, #0]
 800ffac:	461a      	mov	r2, r3
 800ffae:	4b64      	ldr	r3, [pc, #400]	@ (8010140 <tcp_receive+0xb08>)
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	441a      	add	r2, r3
 800ffb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ffb6:	68db      	ldr	r3, [r3, #12]
 800ffb8:	685b      	ldr	r3, [r3, #4]
 800ffba:	429a      	cmp	r2, r3
 800ffbc:	d006      	beq.n	800ffcc <tcp_receive+0x994>
 800ffbe:	4b62      	ldr	r3, [pc, #392]	@ (8010148 <tcp_receive+0xb10>)
 800ffc0:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800ffc4:	4961      	ldr	r1, [pc, #388]	@ (801014c <tcp_receive+0xb14>)
 800ffc6:	4862      	ldr	r0, [pc, #392]	@ (8010150 <tcp_receive+0xb18>)
 800ffc8:	f004 fe4c 	bl	8014c64 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ffd0:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ffd2:	4b5a      	ldr	r3, [pc, #360]	@ (801013c <tcp_receive+0xb04>)
 800ffd4:	881b      	ldrh	r3, [r3, #0]
 800ffd6:	461a      	mov	r2, r3
 800ffd8:	4b59      	ldr	r3, [pc, #356]	@ (8010140 <tcp_receive+0xb08>)
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	441a      	add	r2, r3
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ffe6:	4b55      	ldr	r3, [pc, #340]	@ (801013c <tcp_receive+0xb04>)
 800ffe8:	881b      	ldrh	r3, [r3, #0]
 800ffea:	429a      	cmp	r2, r3
 800ffec:	d206      	bcs.n	800fffc <tcp_receive+0x9c4>
 800ffee:	4b56      	ldr	r3, [pc, #344]	@ (8010148 <tcp_receive+0xb10>)
 800fff0:	f240 6207 	movw	r2, #1543	@ 0x607
 800fff4:	4957      	ldr	r1, [pc, #348]	@ (8010154 <tcp_receive+0xb1c>)
 800fff6:	4856      	ldr	r0, [pc, #344]	@ (8010150 <tcp_receive+0xb18>)
 800fff8:	f004 fe34 	bl	8014c64 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010000:	4b4e      	ldr	r3, [pc, #312]	@ (801013c <tcp_receive+0xb04>)
 8010002:	881b      	ldrh	r3, [r3, #0]
 8010004:	1ad3      	subs	r3, r2, r3
 8010006:	b29a      	uxth	r2, r3
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801000c:	6878      	ldr	r0, [r7, #4]
 801000e:	f7fc ffc1 	bl	800cf94 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010012:	4b4c      	ldr	r3, [pc, #304]	@ (8010144 <tcp_receive+0xb0c>)
 8010014:	685b      	ldr	r3, [r3, #4]
 8010016:	891b      	ldrh	r3, [r3, #8]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d006      	beq.n	801002a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801001c:	4b49      	ldr	r3, [pc, #292]	@ (8010144 <tcp_receive+0xb0c>)
 801001e:	685b      	ldr	r3, [r3, #4]
 8010020:	4a4d      	ldr	r2, [pc, #308]	@ (8010158 <tcp_receive+0xb20>)
 8010022:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010024:	4b47      	ldr	r3, [pc, #284]	@ (8010144 <tcp_receive+0xb0c>)
 8010026:	2200      	movs	r2, #0
 8010028:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801002a:	4b46      	ldr	r3, [pc, #280]	@ (8010144 <tcp_receive+0xb0c>)
 801002c:	68db      	ldr	r3, [r3, #12]
 801002e:	899b      	ldrh	r3, [r3, #12]
 8010030:	b29b      	uxth	r3, r3
 8010032:	4618      	mov	r0, r3
 8010034:	f7fa fe0c 	bl	800ac50 <lwip_htons>
 8010038:	4603      	mov	r3, r0
 801003a:	b2db      	uxtb	r3, r3
 801003c:	f003 0301 	and.w	r3, r3, #1
 8010040:	2b00      	cmp	r3, #0
 8010042:	f000 80b8 	beq.w	80101b6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010046:	4b45      	ldr	r3, [pc, #276]	@ (801015c <tcp_receive+0xb24>)
 8010048:	781b      	ldrb	r3, [r3, #0]
 801004a:	f043 0320 	orr.w	r3, r3, #32
 801004e:	b2da      	uxtb	r2, r3
 8010050:	4b42      	ldr	r3, [pc, #264]	@ (801015c <tcp_receive+0xb24>)
 8010052:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010054:	e0af      	b.n	80101b6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801005a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010060:	68db      	ldr	r3, [r3, #12]
 8010062:	685b      	ldr	r3, [r3, #4]
 8010064:	4a36      	ldr	r2, [pc, #216]	@ (8010140 <tcp_receive+0xb08>)
 8010066:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010068:	68bb      	ldr	r3, [r7, #8]
 801006a:	891b      	ldrh	r3, [r3, #8]
 801006c:	461c      	mov	r4, r3
 801006e:	68bb      	ldr	r3, [r7, #8]
 8010070:	68db      	ldr	r3, [r3, #12]
 8010072:	899b      	ldrh	r3, [r3, #12]
 8010074:	b29b      	uxth	r3, r3
 8010076:	4618      	mov	r0, r3
 8010078:	f7fa fdea 	bl	800ac50 <lwip_htons>
 801007c:	4603      	mov	r3, r0
 801007e:	b2db      	uxtb	r3, r3
 8010080:	f003 0303 	and.w	r3, r3, #3
 8010084:	2b00      	cmp	r3, #0
 8010086:	d001      	beq.n	801008c <tcp_receive+0xa54>
 8010088:	2301      	movs	r3, #1
 801008a:	e000      	b.n	801008e <tcp_receive+0xa56>
 801008c:	2300      	movs	r3, #0
 801008e:	191a      	adds	r2, r3, r4
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010094:	441a      	add	r2, r3
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801009e:	461c      	mov	r4, r3
 80100a0:	68bb      	ldr	r3, [r7, #8]
 80100a2:	891b      	ldrh	r3, [r3, #8]
 80100a4:	461d      	mov	r5, r3
 80100a6:	68bb      	ldr	r3, [r7, #8]
 80100a8:	68db      	ldr	r3, [r3, #12]
 80100aa:	899b      	ldrh	r3, [r3, #12]
 80100ac:	b29b      	uxth	r3, r3
 80100ae:	4618      	mov	r0, r3
 80100b0:	f7fa fdce 	bl	800ac50 <lwip_htons>
 80100b4:	4603      	mov	r3, r0
 80100b6:	b2db      	uxtb	r3, r3
 80100b8:	f003 0303 	and.w	r3, r3, #3
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d001      	beq.n	80100c4 <tcp_receive+0xa8c>
 80100c0:	2301      	movs	r3, #1
 80100c2:	e000      	b.n	80100c6 <tcp_receive+0xa8e>
 80100c4:	2300      	movs	r3, #0
 80100c6:	442b      	add	r3, r5
 80100c8:	429c      	cmp	r4, r3
 80100ca:	d206      	bcs.n	80100da <tcp_receive+0xaa2>
 80100cc:	4b1e      	ldr	r3, [pc, #120]	@ (8010148 <tcp_receive+0xb10>)
 80100ce:	f240 622b 	movw	r2, #1579	@ 0x62b
 80100d2:	4923      	ldr	r1, [pc, #140]	@ (8010160 <tcp_receive+0xb28>)
 80100d4:	481e      	ldr	r0, [pc, #120]	@ (8010150 <tcp_receive+0xb18>)
 80100d6:	f004 fdc5 	bl	8014c64 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80100da:	68bb      	ldr	r3, [r7, #8]
 80100dc:	891b      	ldrh	r3, [r3, #8]
 80100de:	461c      	mov	r4, r3
 80100e0:	68bb      	ldr	r3, [r7, #8]
 80100e2:	68db      	ldr	r3, [r3, #12]
 80100e4:	899b      	ldrh	r3, [r3, #12]
 80100e6:	b29b      	uxth	r3, r3
 80100e8:	4618      	mov	r0, r3
 80100ea:	f7fa fdb1 	bl	800ac50 <lwip_htons>
 80100ee:	4603      	mov	r3, r0
 80100f0:	b2db      	uxtb	r3, r3
 80100f2:	f003 0303 	and.w	r3, r3, #3
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d001      	beq.n	80100fe <tcp_receive+0xac6>
 80100fa:	2301      	movs	r3, #1
 80100fc:	e000      	b.n	8010100 <tcp_receive+0xac8>
 80100fe:	2300      	movs	r3, #0
 8010100:	1919      	adds	r1, r3, r4
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010106:	b28b      	uxth	r3, r1
 8010108:	1ad3      	subs	r3, r2, r3
 801010a:	b29a      	uxth	r2, r3
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f7fc ff3f 	bl	800cf94 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010116:	68bb      	ldr	r3, [r7, #8]
 8010118:	685b      	ldr	r3, [r3, #4]
 801011a:	891b      	ldrh	r3, [r3, #8]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d028      	beq.n	8010172 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010120:	4b0d      	ldr	r3, [pc, #52]	@ (8010158 <tcp_receive+0xb20>)
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d01d      	beq.n	8010164 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8010128:	4b0b      	ldr	r3, [pc, #44]	@ (8010158 <tcp_receive+0xb20>)
 801012a:	681a      	ldr	r2, [r3, #0]
 801012c:	68bb      	ldr	r3, [r7, #8]
 801012e:	685b      	ldr	r3, [r3, #4]
 8010130:	4619      	mov	r1, r3
 8010132:	4610      	mov	r0, r2
 8010134:	f7fc fa5c 	bl	800c5f0 <pbuf_cat>
 8010138:	e018      	b.n	801016c <tcp_receive+0xb34>
 801013a:	bf00      	nop
 801013c:	2001034e 	.word	0x2001034e
 8010140:	20010344 	.word	0x20010344
 8010144:	20010324 	.word	0x20010324
 8010148:	08016e64 	.word	0x08016e64
 801014c:	08017244 	.word	0x08017244
 8010150:	08016eb0 	.word	0x08016eb0
 8010154:	08017280 	.word	0x08017280
 8010158:	20010354 	.word	0x20010354
 801015c:	20010351 	.word	0x20010351
 8010160:	080172a0 	.word	0x080172a0
            } else {
              recv_data = cseg->p;
 8010164:	68bb      	ldr	r3, [r7, #8]
 8010166:	685b      	ldr	r3, [r3, #4]
 8010168:	4a70      	ldr	r2, [pc, #448]	@ (801032c <tcp_receive+0xcf4>)
 801016a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801016c:	68bb      	ldr	r3, [r7, #8]
 801016e:	2200      	movs	r2, #0
 8010170:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010172:	68bb      	ldr	r3, [r7, #8]
 8010174:	68db      	ldr	r3, [r3, #12]
 8010176:	899b      	ldrh	r3, [r3, #12]
 8010178:	b29b      	uxth	r3, r3
 801017a:	4618      	mov	r0, r3
 801017c:	f7fa fd68 	bl	800ac50 <lwip_htons>
 8010180:	4603      	mov	r3, r0
 8010182:	b2db      	uxtb	r3, r3
 8010184:	f003 0301 	and.w	r3, r3, #1
 8010188:	2b00      	cmp	r3, #0
 801018a:	d00d      	beq.n	80101a8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801018c:	4b68      	ldr	r3, [pc, #416]	@ (8010330 <tcp_receive+0xcf8>)
 801018e:	781b      	ldrb	r3, [r3, #0]
 8010190:	f043 0320 	orr.w	r3, r3, #32
 8010194:	b2da      	uxtb	r2, r3
 8010196:	4b66      	ldr	r3, [pc, #408]	@ (8010330 <tcp_receive+0xcf8>)
 8010198:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	7d1b      	ldrb	r3, [r3, #20]
 801019e:	2b04      	cmp	r3, #4
 80101a0:	d102      	bne.n	80101a8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2207      	movs	r2, #7
 80101a6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80101a8:	68bb      	ldr	r3, [r7, #8]
 80101aa:	681a      	ldr	r2, [r3, #0]
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 80101b0:	68b8      	ldr	r0, [r7, #8]
 80101b2:	f7fd fbd4 	bl	800d95e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d008      	beq.n	80101d0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80101c2:	68db      	ldr	r3, [r3, #12]
 80101c4:	685a      	ldr	r2, [r3, #4]
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80101ca:	429a      	cmp	r2, r3
 80101cc:	f43f af43 	beq.w	8010056 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	8b5b      	ldrh	r3, [r3, #26]
 80101d4:	f003 0301 	and.w	r3, r3, #1
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d00e      	beq.n	80101fa <tcp_receive+0xbc2>
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	8b5b      	ldrh	r3, [r3, #26]
 80101e0:	f023 0301 	bic.w	r3, r3, #1
 80101e4:	b29a      	uxth	r2, r3
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	835a      	strh	r2, [r3, #26]
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	8b5b      	ldrh	r3, [r3, #26]
 80101ee:	f043 0302 	orr.w	r3, r3, #2
 80101f2:	b29a      	uxth	r2, r3
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80101f8:	e187      	b.n	801050a <tcp_receive+0xed2>
        tcp_ack(pcb);
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	8b5b      	ldrh	r3, [r3, #26]
 80101fe:	f043 0301 	orr.w	r3, r3, #1
 8010202:	b29a      	uxth	r2, r3
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010208:	e17f      	b.n	801050a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801020e:	2b00      	cmp	r3, #0
 8010210:	d106      	bne.n	8010220 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010212:	4848      	ldr	r0, [pc, #288]	@ (8010334 <tcp_receive+0xcfc>)
 8010214:	f7fd fbbc 	bl	800d990 <tcp_seg_copy>
 8010218:	4602      	mov	r2, r0
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	675a      	str	r2, [r3, #116]	@ 0x74
 801021e:	e16c      	b.n	80104fa <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010220:	2300      	movs	r3, #0
 8010222:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010228:	63bb      	str	r3, [r7, #56]	@ 0x38
 801022a:	e156      	b.n	80104da <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 801022c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801022e:	68db      	ldr	r3, [r3, #12]
 8010230:	685a      	ldr	r2, [r3, #4]
 8010232:	4b41      	ldr	r3, [pc, #260]	@ (8010338 <tcp_receive+0xd00>)
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	429a      	cmp	r2, r3
 8010238:	d11d      	bne.n	8010276 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801023a:	4b3e      	ldr	r3, [pc, #248]	@ (8010334 <tcp_receive+0xcfc>)
 801023c:	891a      	ldrh	r2, [r3, #8]
 801023e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010240:	891b      	ldrh	r3, [r3, #8]
 8010242:	429a      	cmp	r2, r3
 8010244:	f240 814e 	bls.w	80104e4 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010248:	483a      	ldr	r0, [pc, #232]	@ (8010334 <tcp_receive+0xcfc>)
 801024a:	f7fd fba1 	bl	800d990 <tcp_seg_copy>
 801024e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010250:	697b      	ldr	r3, [r7, #20]
 8010252:	2b00      	cmp	r3, #0
 8010254:	f000 8148 	beq.w	80104e8 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8010258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801025a:	2b00      	cmp	r3, #0
 801025c:	d003      	beq.n	8010266 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801025e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010260:	697a      	ldr	r2, [r7, #20]
 8010262:	601a      	str	r2, [r3, #0]
 8010264:	e002      	b.n	801026c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	697a      	ldr	r2, [r7, #20]
 801026a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801026c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801026e:	6978      	ldr	r0, [r7, #20]
 8010270:	f7ff f8de 	bl	800f430 <tcp_oos_insert_segment>
                }
                break;
 8010274:	e138      	b.n	80104e8 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010278:	2b00      	cmp	r3, #0
 801027a:	d117      	bne.n	80102ac <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801027c:	4b2e      	ldr	r3, [pc, #184]	@ (8010338 <tcp_receive+0xd00>)
 801027e:	681a      	ldr	r2, [r3, #0]
 8010280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010282:	68db      	ldr	r3, [r3, #12]
 8010284:	685b      	ldr	r3, [r3, #4]
 8010286:	1ad3      	subs	r3, r2, r3
 8010288:	2b00      	cmp	r3, #0
 801028a:	da57      	bge.n	801033c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801028c:	4829      	ldr	r0, [pc, #164]	@ (8010334 <tcp_receive+0xcfc>)
 801028e:	f7fd fb7f 	bl	800d990 <tcp_seg_copy>
 8010292:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010294:	69bb      	ldr	r3, [r7, #24]
 8010296:	2b00      	cmp	r3, #0
 8010298:	f000 8128 	beq.w	80104ec <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	69ba      	ldr	r2, [r7, #24]
 80102a0:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 80102a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80102a4:	69b8      	ldr	r0, [r7, #24]
 80102a6:	f7ff f8c3 	bl	800f430 <tcp_oos_insert_segment>
                  }
                  break;
 80102aa:	e11f      	b.n	80104ec <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80102ac:	4b22      	ldr	r3, [pc, #136]	@ (8010338 <tcp_receive+0xd00>)
 80102ae:	681a      	ldr	r2, [r3, #0]
 80102b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80102b2:	68db      	ldr	r3, [r3, #12]
 80102b4:	685b      	ldr	r3, [r3, #4]
 80102b6:	1ad3      	subs	r3, r2, r3
 80102b8:	3b01      	subs	r3, #1
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	db3e      	blt.n	801033c <tcp_receive+0xd04>
 80102be:	4b1e      	ldr	r3, [pc, #120]	@ (8010338 <tcp_receive+0xd00>)
 80102c0:	681a      	ldr	r2, [r3, #0]
 80102c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102c4:	68db      	ldr	r3, [r3, #12]
 80102c6:	685b      	ldr	r3, [r3, #4]
 80102c8:	1ad3      	subs	r3, r2, r3
 80102ca:	3301      	adds	r3, #1
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	dc35      	bgt.n	801033c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80102d0:	4818      	ldr	r0, [pc, #96]	@ (8010334 <tcp_receive+0xcfc>)
 80102d2:	f7fd fb5d 	bl	800d990 <tcp_seg_copy>
 80102d6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80102d8:	69fb      	ldr	r3, [r7, #28]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	f000 8108 	beq.w	80104f0 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80102e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80102e2:	68db      	ldr	r3, [r3, #12]
 80102e4:	685b      	ldr	r3, [r3, #4]
 80102e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80102e8:	8912      	ldrh	r2, [r2, #8]
 80102ea:	441a      	add	r2, r3
 80102ec:	4b12      	ldr	r3, [pc, #72]	@ (8010338 <tcp_receive+0xd00>)
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	1ad3      	subs	r3, r2, r3
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	dd12      	ble.n	801031c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80102f6:	4b10      	ldr	r3, [pc, #64]	@ (8010338 <tcp_receive+0xd00>)
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	b29a      	uxth	r2, r3
 80102fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80102fe:	68db      	ldr	r3, [r3, #12]
 8010300:	685b      	ldr	r3, [r3, #4]
 8010302:	b29b      	uxth	r3, r3
 8010304:	1ad3      	subs	r3, r2, r3
 8010306:	b29a      	uxth	r2, r3
 8010308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801030a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801030c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801030e:	685a      	ldr	r2, [r3, #4]
 8010310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010312:	891b      	ldrh	r3, [r3, #8]
 8010314:	4619      	mov	r1, r3
 8010316:	4610      	mov	r0, r2
 8010318:	f7fb ff16 	bl	800c148 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801031c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801031e:	69fa      	ldr	r2, [r7, #28]
 8010320:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010322:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010324:	69f8      	ldr	r0, [r7, #28]
 8010326:	f7ff f883 	bl	800f430 <tcp_oos_insert_segment>
                  }
                  break;
 801032a:	e0e1      	b.n	80104f0 <tcp_receive+0xeb8>
 801032c:	20010354 	.word	0x20010354
 8010330:	20010351 	.word	0x20010351
 8010334:	20010324 	.word	0x20010324
 8010338:	20010344 	.word	0x20010344
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801033c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801033e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	2b00      	cmp	r3, #0
 8010346:	f040 80c5 	bne.w	80104d4 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801034a:	4b7f      	ldr	r3, [pc, #508]	@ (8010548 <tcp_receive+0xf10>)
 801034c:	681a      	ldr	r2, [r3, #0]
 801034e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010350:	68db      	ldr	r3, [r3, #12]
 8010352:	685b      	ldr	r3, [r3, #4]
 8010354:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010356:	2b00      	cmp	r3, #0
 8010358:	f340 80bc 	ble.w	80104d4 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801035c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801035e:	68db      	ldr	r3, [r3, #12]
 8010360:	899b      	ldrh	r3, [r3, #12]
 8010362:	b29b      	uxth	r3, r3
 8010364:	4618      	mov	r0, r3
 8010366:	f7fa fc73 	bl	800ac50 <lwip_htons>
 801036a:	4603      	mov	r3, r0
 801036c:	b2db      	uxtb	r3, r3
 801036e:	f003 0301 	and.w	r3, r3, #1
 8010372:	2b00      	cmp	r3, #0
 8010374:	f040 80be 	bne.w	80104f4 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010378:	4874      	ldr	r0, [pc, #464]	@ (801054c <tcp_receive+0xf14>)
 801037a:	f7fd fb09 	bl	800d990 <tcp_seg_copy>
 801037e:	4602      	mov	r2, r0
 8010380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010382:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	2b00      	cmp	r3, #0
 801038a:	f000 80b5 	beq.w	80104f8 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801038e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010390:	68db      	ldr	r3, [r3, #12]
 8010392:	685b      	ldr	r3, [r3, #4]
 8010394:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010396:	8912      	ldrh	r2, [r2, #8]
 8010398:	441a      	add	r2, r3
 801039a:	4b6b      	ldr	r3, [pc, #428]	@ (8010548 <tcp_receive+0xf10>)
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	1ad3      	subs	r3, r2, r3
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	dd12      	ble.n	80103ca <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80103a4:	4b68      	ldr	r3, [pc, #416]	@ (8010548 <tcp_receive+0xf10>)
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	b29a      	uxth	r2, r3
 80103aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103ac:	68db      	ldr	r3, [r3, #12]
 80103ae:	685b      	ldr	r3, [r3, #4]
 80103b0:	b29b      	uxth	r3, r3
 80103b2:	1ad3      	subs	r3, r2, r3
 80103b4:	b29a      	uxth	r2, r3
 80103b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103b8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80103ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103bc:	685a      	ldr	r2, [r3, #4]
 80103be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103c0:	891b      	ldrh	r3, [r3, #8]
 80103c2:	4619      	mov	r1, r3
 80103c4:	4610      	mov	r0, r2
 80103c6:	f7fb febf 	bl	800c148 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80103ca:	4b61      	ldr	r3, [pc, #388]	@ (8010550 <tcp_receive+0xf18>)
 80103cc:	881b      	ldrh	r3, [r3, #0]
 80103ce:	461a      	mov	r2, r3
 80103d0:	4b5d      	ldr	r3, [pc, #372]	@ (8010548 <tcp_receive+0xf10>)
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	441a      	add	r2, r3
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103da:	6879      	ldr	r1, [r7, #4]
 80103dc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80103de:	440b      	add	r3, r1
 80103e0:	1ad3      	subs	r3, r2, r3
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	f340 8088 	ble.w	80104f8 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80103e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	68db      	ldr	r3, [r3, #12]
 80103ee:	899b      	ldrh	r3, [r3, #12]
 80103f0:	b29b      	uxth	r3, r3
 80103f2:	4618      	mov	r0, r3
 80103f4:	f7fa fc2c 	bl	800ac50 <lwip_htons>
 80103f8:	4603      	mov	r3, r0
 80103fa:	b2db      	uxtb	r3, r3
 80103fc:	f003 0301 	and.w	r3, r3, #1
 8010400:	2b00      	cmp	r3, #0
 8010402:	d021      	beq.n	8010448 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	68db      	ldr	r3, [r3, #12]
 801040a:	899b      	ldrh	r3, [r3, #12]
 801040c:	b29b      	uxth	r3, r3
 801040e:	b21b      	sxth	r3, r3
 8010410:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8010414:	b21c      	sxth	r4, r3
 8010416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	68db      	ldr	r3, [r3, #12]
 801041c:	899b      	ldrh	r3, [r3, #12]
 801041e:	b29b      	uxth	r3, r3
 8010420:	4618      	mov	r0, r3
 8010422:	f7fa fc15 	bl	800ac50 <lwip_htons>
 8010426:	4603      	mov	r3, r0
 8010428:	b2db      	uxtb	r3, r3
 801042a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801042e:	b29b      	uxth	r3, r3
 8010430:	4618      	mov	r0, r3
 8010432:	f7fa fc0d 	bl	800ac50 <lwip_htons>
 8010436:	4603      	mov	r3, r0
 8010438:	b21b      	sxth	r3, r3
 801043a:	4323      	orrs	r3, r4
 801043c:	b21a      	sxth	r2, r3
 801043e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	68db      	ldr	r3, [r3, #12]
 8010444:	b292      	uxth	r2, r2
 8010446:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801044c:	b29a      	uxth	r2, r3
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010452:	4413      	add	r3, r2
 8010454:	b299      	uxth	r1, r3
 8010456:	4b3c      	ldr	r3, [pc, #240]	@ (8010548 <tcp_receive+0xf10>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	b29a      	uxth	r2, r3
 801045c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	1a8a      	subs	r2, r1, r2
 8010462:	b292      	uxth	r2, r2
 8010464:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	685a      	ldr	r2, [r3, #4]
 801046c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	891b      	ldrh	r3, [r3, #8]
 8010472:	4619      	mov	r1, r3
 8010474:	4610      	mov	r0, r2
 8010476:	f7fb fe67 	bl	800c148 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801047a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	891c      	ldrh	r4, [r3, #8]
 8010480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	68db      	ldr	r3, [r3, #12]
 8010486:	899b      	ldrh	r3, [r3, #12]
 8010488:	b29b      	uxth	r3, r3
 801048a:	4618      	mov	r0, r3
 801048c:	f7fa fbe0 	bl	800ac50 <lwip_htons>
 8010490:	4603      	mov	r3, r0
 8010492:	b2db      	uxtb	r3, r3
 8010494:	f003 0303 	and.w	r3, r3, #3
 8010498:	2b00      	cmp	r3, #0
 801049a:	d001      	beq.n	80104a0 <tcp_receive+0xe68>
 801049c:	2301      	movs	r3, #1
 801049e:	e000      	b.n	80104a2 <tcp_receive+0xe6a>
 80104a0:	2300      	movs	r3, #0
 80104a2:	4423      	add	r3, r4
 80104a4:	b29a      	uxth	r2, r3
 80104a6:	4b2a      	ldr	r3, [pc, #168]	@ (8010550 <tcp_receive+0xf18>)
 80104a8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80104aa:	4b29      	ldr	r3, [pc, #164]	@ (8010550 <tcp_receive+0xf18>)
 80104ac:	881b      	ldrh	r3, [r3, #0]
 80104ae:	461a      	mov	r2, r3
 80104b0:	4b25      	ldr	r3, [pc, #148]	@ (8010548 <tcp_receive+0xf10>)
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	441a      	add	r2, r3
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104ba:	6879      	ldr	r1, [r7, #4]
 80104bc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80104be:	440b      	add	r3, r1
 80104c0:	429a      	cmp	r2, r3
 80104c2:	d019      	beq.n	80104f8 <tcp_receive+0xec0>
 80104c4:	4b23      	ldr	r3, [pc, #140]	@ (8010554 <tcp_receive+0xf1c>)
 80104c6:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80104ca:	4923      	ldr	r1, [pc, #140]	@ (8010558 <tcp_receive+0xf20>)
 80104cc:	4823      	ldr	r0, [pc, #140]	@ (801055c <tcp_receive+0xf24>)
 80104ce:	f004 fbc9 	bl	8014c64 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80104d2:	e011      	b.n	80104f8 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80104d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80104da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104dc:	2b00      	cmp	r3, #0
 80104de:	f47f aea5 	bne.w	801022c <tcp_receive+0xbf4>
 80104e2:	e00a      	b.n	80104fa <tcp_receive+0xec2>
                break;
 80104e4:	bf00      	nop
 80104e6:	e008      	b.n	80104fa <tcp_receive+0xec2>
                break;
 80104e8:	bf00      	nop
 80104ea:	e006      	b.n	80104fa <tcp_receive+0xec2>
                  break;
 80104ec:	bf00      	nop
 80104ee:	e004      	b.n	80104fa <tcp_receive+0xec2>
                  break;
 80104f0:	bf00      	nop
 80104f2:	e002      	b.n	80104fa <tcp_receive+0xec2>
                  break;
 80104f4:	bf00      	nop
 80104f6:	e000      	b.n	80104fa <tcp_receive+0xec2>
                break;
 80104f8:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80104fa:	6878      	ldr	r0, [r7, #4]
 80104fc:	f001 fa32 	bl	8011964 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8010500:	e003      	b.n	801050a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010502:	6878      	ldr	r0, [r7, #4]
 8010504:	f001 fa2e 	bl	8011964 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010508:	e01a      	b.n	8010540 <tcp_receive+0xf08>
 801050a:	e019      	b.n	8010540 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801050c:	4b0e      	ldr	r3, [pc, #56]	@ (8010548 <tcp_receive+0xf10>)
 801050e:	681a      	ldr	r2, [r3, #0]
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010514:	1ad3      	subs	r3, r2, r3
 8010516:	2b00      	cmp	r3, #0
 8010518:	db0a      	blt.n	8010530 <tcp_receive+0xef8>
 801051a:	4b0b      	ldr	r3, [pc, #44]	@ (8010548 <tcp_receive+0xf10>)
 801051c:	681a      	ldr	r2, [r3, #0]
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010522:	6879      	ldr	r1, [r7, #4]
 8010524:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010526:	440b      	add	r3, r1
 8010528:	1ad3      	subs	r3, r2, r3
 801052a:	3301      	adds	r3, #1
 801052c:	2b00      	cmp	r3, #0
 801052e:	dd07      	ble.n	8010540 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	8b5b      	ldrh	r3, [r3, #26]
 8010534:	f043 0302 	orr.w	r3, r3, #2
 8010538:	b29a      	uxth	r2, r3
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801053e:	e7ff      	b.n	8010540 <tcp_receive+0xf08>
 8010540:	bf00      	nop
 8010542:	3750      	adds	r7, #80	@ 0x50
 8010544:	46bd      	mov	sp, r7
 8010546:	bdb0      	pop	{r4, r5, r7, pc}
 8010548:	20010344 	.word	0x20010344
 801054c:	20010324 	.word	0x20010324
 8010550:	2001034e 	.word	0x2001034e
 8010554:	08016e64 	.word	0x08016e64
 8010558:	0801720c 	.word	0x0801720c
 801055c:	08016eb0 	.word	0x08016eb0

08010560 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010560:	b480      	push	{r7}
 8010562:	b083      	sub	sp, #12
 8010564:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010566:	4b15      	ldr	r3, [pc, #84]	@ (80105bc <tcp_get_next_optbyte+0x5c>)
 8010568:	881b      	ldrh	r3, [r3, #0]
 801056a:	1c5a      	adds	r2, r3, #1
 801056c:	b291      	uxth	r1, r2
 801056e:	4a13      	ldr	r2, [pc, #76]	@ (80105bc <tcp_get_next_optbyte+0x5c>)
 8010570:	8011      	strh	r1, [r2, #0]
 8010572:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010574:	4b12      	ldr	r3, [pc, #72]	@ (80105c0 <tcp_get_next_optbyte+0x60>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d004      	beq.n	8010586 <tcp_get_next_optbyte+0x26>
 801057c:	4b11      	ldr	r3, [pc, #68]	@ (80105c4 <tcp_get_next_optbyte+0x64>)
 801057e:	881b      	ldrh	r3, [r3, #0]
 8010580:	88fa      	ldrh	r2, [r7, #6]
 8010582:	429a      	cmp	r2, r3
 8010584:	d208      	bcs.n	8010598 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010586:	4b10      	ldr	r3, [pc, #64]	@ (80105c8 <tcp_get_next_optbyte+0x68>)
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	3314      	adds	r3, #20
 801058c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801058e:	88fb      	ldrh	r3, [r7, #6]
 8010590:	683a      	ldr	r2, [r7, #0]
 8010592:	4413      	add	r3, r2
 8010594:	781b      	ldrb	r3, [r3, #0]
 8010596:	e00b      	b.n	80105b0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010598:	88fb      	ldrh	r3, [r7, #6]
 801059a:	b2da      	uxtb	r2, r3
 801059c:	4b09      	ldr	r3, [pc, #36]	@ (80105c4 <tcp_get_next_optbyte+0x64>)
 801059e:	881b      	ldrh	r3, [r3, #0]
 80105a0:	b2db      	uxtb	r3, r3
 80105a2:	1ad3      	subs	r3, r2, r3
 80105a4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80105a6:	4b06      	ldr	r3, [pc, #24]	@ (80105c0 <tcp_get_next_optbyte+0x60>)
 80105a8:	681a      	ldr	r2, [r3, #0]
 80105aa:	797b      	ldrb	r3, [r7, #5]
 80105ac:	4413      	add	r3, r2
 80105ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80105b0:	4618      	mov	r0, r3
 80105b2:	370c      	adds	r7, #12
 80105b4:	46bd      	mov	sp, r7
 80105b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ba:	4770      	bx	lr
 80105bc:	20010340 	.word	0x20010340
 80105c0:	2001033c 	.word	0x2001033c
 80105c4:	2001033a 	.word	0x2001033a
 80105c8:	20010334 	.word	0x20010334

080105cc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b084      	sub	sp, #16
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d106      	bne.n	80105e8 <tcp_parseopt+0x1c>
 80105da:	4b33      	ldr	r3, [pc, #204]	@ (80106a8 <tcp_parseopt+0xdc>)
 80105dc:	f240 727d 	movw	r2, #1917	@ 0x77d
 80105e0:	4932      	ldr	r1, [pc, #200]	@ (80106ac <tcp_parseopt+0xe0>)
 80105e2:	4833      	ldr	r0, [pc, #204]	@ (80106b0 <tcp_parseopt+0xe4>)
 80105e4:	f004 fb3e 	bl	8014c64 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80105e8:	4b32      	ldr	r3, [pc, #200]	@ (80106b4 <tcp_parseopt+0xe8>)
 80105ea:	881b      	ldrh	r3, [r3, #0]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d057      	beq.n	80106a0 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80105f0:	4b31      	ldr	r3, [pc, #196]	@ (80106b8 <tcp_parseopt+0xec>)
 80105f2:	2200      	movs	r2, #0
 80105f4:	801a      	strh	r2, [r3, #0]
 80105f6:	e047      	b.n	8010688 <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 80105f8:	f7ff ffb2 	bl	8010560 <tcp_get_next_optbyte>
 80105fc:	4603      	mov	r3, r0
 80105fe:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010600:	7bfb      	ldrb	r3, [r7, #15]
 8010602:	2b02      	cmp	r3, #2
 8010604:	d006      	beq.n	8010614 <tcp_parseopt+0x48>
 8010606:	2b02      	cmp	r3, #2
 8010608:	dc2b      	bgt.n	8010662 <tcp_parseopt+0x96>
 801060a:	2b00      	cmp	r3, #0
 801060c:	d043      	beq.n	8010696 <tcp_parseopt+0xca>
 801060e:	2b01      	cmp	r3, #1
 8010610:	d039      	beq.n	8010686 <tcp_parseopt+0xba>
 8010612:	e026      	b.n	8010662 <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010614:	f7ff ffa4 	bl	8010560 <tcp_get_next_optbyte>
 8010618:	4603      	mov	r3, r0
 801061a:	2b04      	cmp	r3, #4
 801061c:	d13d      	bne.n	801069a <tcp_parseopt+0xce>
 801061e:	4b26      	ldr	r3, [pc, #152]	@ (80106b8 <tcp_parseopt+0xec>)
 8010620:	881b      	ldrh	r3, [r3, #0]
 8010622:	3301      	adds	r3, #1
 8010624:	4a23      	ldr	r2, [pc, #140]	@ (80106b4 <tcp_parseopt+0xe8>)
 8010626:	8812      	ldrh	r2, [r2, #0]
 8010628:	4293      	cmp	r3, r2
 801062a:	da36      	bge.n	801069a <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801062c:	f7ff ff98 	bl	8010560 <tcp_get_next_optbyte>
 8010630:	4603      	mov	r3, r0
 8010632:	021b      	lsls	r3, r3, #8
 8010634:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010636:	f7ff ff93 	bl	8010560 <tcp_get_next_optbyte>
 801063a:	4603      	mov	r3, r0
 801063c:	461a      	mov	r2, r3
 801063e:	89bb      	ldrh	r3, [r7, #12]
 8010640:	4313      	orrs	r3, r2
 8010642:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010644:	89bb      	ldrh	r3, [r7, #12]
 8010646:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 801064a:	4293      	cmp	r3, r2
 801064c:	d804      	bhi.n	8010658 <tcp_parseopt+0x8c>
 801064e:	89bb      	ldrh	r3, [r7, #12]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d001      	beq.n	8010658 <tcp_parseopt+0x8c>
 8010654:	89ba      	ldrh	r2, [r7, #12]
 8010656:	e001      	b.n	801065c <tcp_parseopt+0x90>
 8010658:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8010660:	e012      	b.n	8010688 <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010662:	f7ff ff7d 	bl	8010560 <tcp_get_next_optbyte>
 8010666:	4603      	mov	r3, r0
 8010668:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801066a:	7afb      	ldrb	r3, [r7, #11]
 801066c:	2b01      	cmp	r3, #1
 801066e:	d916      	bls.n	801069e <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010670:	7afb      	ldrb	r3, [r7, #11]
 8010672:	b29a      	uxth	r2, r3
 8010674:	4b10      	ldr	r3, [pc, #64]	@ (80106b8 <tcp_parseopt+0xec>)
 8010676:	881b      	ldrh	r3, [r3, #0]
 8010678:	4413      	add	r3, r2
 801067a:	b29b      	uxth	r3, r3
 801067c:	3b02      	subs	r3, #2
 801067e:	b29a      	uxth	r2, r3
 8010680:	4b0d      	ldr	r3, [pc, #52]	@ (80106b8 <tcp_parseopt+0xec>)
 8010682:	801a      	strh	r2, [r3, #0]
 8010684:	e000      	b.n	8010688 <tcp_parseopt+0xbc>
          break;
 8010686:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010688:	4b0b      	ldr	r3, [pc, #44]	@ (80106b8 <tcp_parseopt+0xec>)
 801068a:	881a      	ldrh	r2, [r3, #0]
 801068c:	4b09      	ldr	r3, [pc, #36]	@ (80106b4 <tcp_parseopt+0xe8>)
 801068e:	881b      	ldrh	r3, [r3, #0]
 8010690:	429a      	cmp	r2, r3
 8010692:	d3b1      	bcc.n	80105f8 <tcp_parseopt+0x2c>
 8010694:	e004      	b.n	80106a0 <tcp_parseopt+0xd4>
          return;
 8010696:	bf00      	nop
 8010698:	e002      	b.n	80106a0 <tcp_parseopt+0xd4>
            return;
 801069a:	bf00      	nop
 801069c:	e000      	b.n	80106a0 <tcp_parseopt+0xd4>
            return;
 801069e:	bf00      	nop
      }
    }
  }
}
 80106a0:	3710      	adds	r7, #16
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}
 80106a6:	bf00      	nop
 80106a8:	08016e64 	.word	0x08016e64
 80106ac:	080172c8 	.word	0x080172c8
 80106b0:	08016eb0 	.word	0x08016eb0
 80106b4:	20010338 	.word	0x20010338
 80106b8:	20010340 	.word	0x20010340

080106bc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80106bc:	b480      	push	{r7}
 80106be:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80106c0:	4b05      	ldr	r3, [pc, #20]	@ (80106d8 <tcp_trigger_input_pcb_close+0x1c>)
 80106c2:	781b      	ldrb	r3, [r3, #0]
 80106c4:	f043 0310 	orr.w	r3, r3, #16
 80106c8:	b2da      	uxtb	r2, r3
 80106ca:	4b03      	ldr	r3, [pc, #12]	@ (80106d8 <tcp_trigger_input_pcb_close+0x1c>)
 80106cc:	701a      	strb	r2, [r3, #0]
}
 80106ce:	bf00      	nop
 80106d0:	46bd      	mov	sp, r7
 80106d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d6:	4770      	bx	lr
 80106d8:	20010351 	.word	0x20010351

080106dc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b084      	sub	sp, #16
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	60f8      	str	r0, [r7, #12]
 80106e4:	60b9      	str	r1, [r7, #8]
 80106e6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d00a      	beq.n	8010704 <tcp_route+0x28>
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	7a1b      	ldrb	r3, [r3, #8]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d006      	beq.n	8010704 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	7a1b      	ldrb	r3, [r3, #8]
 80106fa:	4618      	mov	r0, r3
 80106fc:	f7fb fb18 	bl	800bd30 <netif_get_by_index>
 8010700:	4603      	mov	r3, r0
 8010702:	e003      	b.n	801070c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010704:	6878      	ldr	r0, [r7, #4]
 8010706:	f002 feab 	bl	8013460 <ip4_route>
 801070a:	4603      	mov	r3, r0
  }
}
 801070c:	4618      	mov	r0, r3
 801070e:	3710      	adds	r7, #16
 8010710:	46bd      	mov	sp, r7
 8010712:	bd80      	pop	{r7, pc}

08010714 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010714:	b590      	push	{r4, r7, lr}
 8010716:	b087      	sub	sp, #28
 8010718:	af00      	add	r7, sp, #0
 801071a:	60f8      	str	r0, [r7, #12]
 801071c:	60b9      	str	r1, [r7, #8]
 801071e:	603b      	str	r3, [r7, #0]
 8010720:	4613      	mov	r3, r2
 8010722:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d105      	bne.n	8010736 <tcp_create_segment+0x22>
 801072a:	4b43      	ldr	r3, [pc, #268]	@ (8010838 <tcp_create_segment+0x124>)
 801072c:	22a3      	movs	r2, #163	@ 0xa3
 801072e:	4943      	ldr	r1, [pc, #268]	@ (801083c <tcp_create_segment+0x128>)
 8010730:	4843      	ldr	r0, [pc, #268]	@ (8010840 <tcp_create_segment+0x12c>)
 8010732:	f004 fa97 	bl	8014c64 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010736:	68bb      	ldr	r3, [r7, #8]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d105      	bne.n	8010748 <tcp_create_segment+0x34>
 801073c:	4b3e      	ldr	r3, [pc, #248]	@ (8010838 <tcp_create_segment+0x124>)
 801073e:	22a4      	movs	r2, #164	@ 0xa4
 8010740:	4940      	ldr	r1, [pc, #256]	@ (8010844 <tcp_create_segment+0x130>)
 8010742:	483f      	ldr	r0, [pc, #252]	@ (8010840 <tcp_create_segment+0x12c>)
 8010744:	f004 fa8e 	bl	8014c64 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010748:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801074c:	009b      	lsls	r3, r3, #2
 801074e:	b2db      	uxtb	r3, r3
 8010750:	f003 0304 	and.w	r3, r3, #4
 8010754:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010756:	2003      	movs	r0, #3
 8010758:	f7fa ff5e 	bl	800b618 <memp_malloc>
 801075c:	6138      	str	r0, [r7, #16]
 801075e:	693b      	ldr	r3, [r7, #16]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d104      	bne.n	801076e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010764:	68b8      	ldr	r0, [r7, #8]
 8010766:	f7fb fe75 	bl	800c454 <pbuf_free>
    return NULL;
 801076a:	2300      	movs	r3, #0
 801076c:	e060      	b.n	8010830 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 801076e:	693b      	ldr	r3, [r7, #16]
 8010770:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8010774:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010776:	693b      	ldr	r3, [r7, #16]
 8010778:	2200      	movs	r2, #0
 801077a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801077c:	693b      	ldr	r3, [r7, #16]
 801077e:	68ba      	ldr	r2, [r7, #8]
 8010780:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010782:	68bb      	ldr	r3, [r7, #8]
 8010784:	891a      	ldrh	r2, [r3, #8]
 8010786:	7dfb      	ldrb	r3, [r7, #23]
 8010788:	b29b      	uxth	r3, r3
 801078a:	429a      	cmp	r2, r3
 801078c:	d205      	bcs.n	801079a <tcp_create_segment+0x86>
 801078e:	4b2a      	ldr	r3, [pc, #168]	@ (8010838 <tcp_create_segment+0x124>)
 8010790:	22b0      	movs	r2, #176	@ 0xb0
 8010792:	492d      	ldr	r1, [pc, #180]	@ (8010848 <tcp_create_segment+0x134>)
 8010794:	482a      	ldr	r0, [pc, #168]	@ (8010840 <tcp_create_segment+0x12c>)
 8010796:	f004 fa65 	bl	8014c64 <iprintf>
  seg->len = p->tot_len - optlen;
 801079a:	68bb      	ldr	r3, [r7, #8]
 801079c:	891a      	ldrh	r2, [r3, #8]
 801079e:	7dfb      	ldrb	r3, [r7, #23]
 80107a0:	b29b      	uxth	r3, r3
 80107a2:	1ad3      	subs	r3, r2, r3
 80107a4:	b29a      	uxth	r2, r3
 80107a6:	693b      	ldr	r3, [r7, #16]
 80107a8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80107aa:	2114      	movs	r1, #20
 80107ac:	68b8      	ldr	r0, [r7, #8]
 80107ae:	f7fb fdbb 	bl	800c328 <pbuf_add_header>
 80107b2:	4603      	mov	r3, r0
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d004      	beq.n	80107c2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80107b8:	6938      	ldr	r0, [r7, #16]
 80107ba:	f7fd f8d0 	bl	800d95e <tcp_seg_free>
    return NULL;
 80107be:	2300      	movs	r3, #0
 80107c0:	e036      	b.n	8010830 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80107c2:	693b      	ldr	r3, [r7, #16]
 80107c4:	685b      	ldr	r3, [r3, #4]
 80107c6:	685a      	ldr	r2, [r3, #4]
 80107c8:	693b      	ldr	r3, [r7, #16]
 80107ca:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	8ada      	ldrh	r2, [r3, #22]
 80107d0:	693b      	ldr	r3, [r7, #16]
 80107d2:	68dc      	ldr	r4, [r3, #12]
 80107d4:	4610      	mov	r0, r2
 80107d6:	f7fa fa3b 	bl	800ac50 <lwip_htons>
 80107da:	4603      	mov	r3, r0
 80107dc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	8b1a      	ldrh	r2, [r3, #24]
 80107e2:	693b      	ldr	r3, [r7, #16]
 80107e4:	68dc      	ldr	r4, [r3, #12]
 80107e6:	4610      	mov	r0, r2
 80107e8:	f7fa fa32 	bl	800ac50 <lwip_htons>
 80107ec:	4603      	mov	r3, r0
 80107ee:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80107f0:	693b      	ldr	r3, [r7, #16]
 80107f2:	68dc      	ldr	r4, [r3, #12]
 80107f4:	6838      	ldr	r0, [r7, #0]
 80107f6:	f7fa fa40 	bl	800ac7a <lwip_htonl>
 80107fa:	4603      	mov	r3, r0
 80107fc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80107fe:	7dfb      	ldrb	r3, [r7, #23]
 8010800:	089b      	lsrs	r3, r3, #2
 8010802:	b2db      	uxtb	r3, r3
 8010804:	3305      	adds	r3, #5
 8010806:	b29b      	uxth	r3, r3
 8010808:	031b      	lsls	r3, r3, #12
 801080a:	b29a      	uxth	r2, r3
 801080c:	79fb      	ldrb	r3, [r7, #7]
 801080e:	b29b      	uxth	r3, r3
 8010810:	4313      	orrs	r3, r2
 8010812:	b29a      	uxth	r2, r3
 8010814:	693b      	ldr	r3, [r7, #16]
 8010816:	68dc      	ldr	r4, [r3, #12]
 8010818:	4610      	mov	r0, r2
 801081a:	f7fa fa19 	bl	800ac50 <lwip_htons>
 801081e:	4603      	mov	r3, r0
 8010820:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010822:	693b      	ldr	r3, [r7, #16]
 8010824:	68db      	ldr	r3, [r3, #12]
 8010826:	2200      	movs	r2, #0
 8010828:	749a      	strb	r2, [r3, #18]
 801082a:	2200      	movs	r2, #0
 801082c:	74da      	strb	r2, [r3, #19]
  return seg;
 801082e:	693b      	ldr	r3, [r7, #16]
}
 8010830:	4618      	mov	r0, r3
 8010832:	371c      	adds	r7, #28
 8010834:	46bd      	mov	sp, r7
 8010836:	bd90      	pop	{r4, r7, pc}
 8010838:	080172e4 	.word	0x080172e4
 801083c:	08017318 	.word	0x08017318
 8010840:	08017338 	.word	0x08017338
 8010844:	08017360 	.word	0x08017360
 8010848:	08017384 	.word	0x08017384

0801084c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801084c:	b590      	push	{r4, r7, lr}
 801084e:	b08b      	sub	sp, #44	@ 0x2c
 8010850:	af02      	add	r7, sp, #8
 8010852:	6078      	str	r0, [r7, #4]
 8010854:	460b      	mov	r3, r1
 8010856:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010858:	2300      	movs	r3, #0
 801085a:	61fb      	str	r3, [r7, #28]
 801085c:	2300      	movs	r3, #0
 801085e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010860:	2300      	movs	r3, #0
 8010862:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d106      	bne.n	8010878 <tcp_split_unsent_seg+0x2c>
 801086a:	4b95      	ldr	r3, [pc, #596]	@ (8010ac0 <tcp_split_unsent_seg+0x274>)
 801086c:	f240 324b 	movw	r2, #843	@ 0x34b
 8010870:	4994      	ldr	r1, [pc, #592]	@ (8010ac4 <tcp_split_unsent_seg+0x278>)
 8010872:	4895      	ldr	r0, [pc, #596]	@ (8010ac8 <tcp_split_unsent_seg+0x27c>)
 8010874:	f004 f9f6 	bl	8014c64 <iprintf>

  useg = pcb->unsent;
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801087c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801087e:	697b      	ldr	r3, [r7, #20]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d102      	bne.n	801088a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010884:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010888:	e116      	b.n	8010ab8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801088a:	887b      	ldrh	r3, [r7, #2]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d109      	bne.n	80108a4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010890:	4b8b      	ldr	r3, [pc, #556]	@ (8010ac0 <tcp_split_unsent_seg+0x274>)
 8010892:	f240 3253 	movw	r2, #851	@ 0x353
 8010896:	498d      	ldr	r1, [pc, #564]	@ (8010acc <tcp_split_unsent_seg+0x280>)
 8010898:	488b      	ldr	r0, [pc, #556]	@ (8010ac8 <tcp_split_unsent_seg+0x27c>)
 801089a:	f004 f9e3 	bl	8014c64 <iprintf>
    return ERR_VAL;
 801089e:	f06f 0305 	mvn.w	r3, #5
 80108a2:	e109      	b.n	8010ab8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80108a4:	697b      	ldr	r3, [r7, #20]
 80108a6:	891b      	ldrh	r3, [r3, #8]
 80108a8:	887a      	ldrh	r2, [r7, #2]
 80108aa:	429a      	cmp	r2, r3
 80108ac:	d301      	bcc.n	80108b2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80108ae:	2300      	movs	r3, #0
 80108b0:	e102      	b.n	8010ab8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80108b6:	887a      	ldrh	r2, [r7, #2]
 80108b8:	429a      	cmp	r2, r3
 80108ba:	d906      	bls.n	80108ca <tcp_split_unsent_seg+0x7e>
 80108bc:	4b80      	ldr	r3, [pc, #512]	@ (8010ac0 <tcp_split_unsent_seg+0x274>)
 80108be:	f240 325b 	movw	r2, #859	@ 0x35b
 80108c2:	4983      	ldr	r1, [pc, #524]	@ (8010ad0 <tcp_split_unsent_seg+0x284>)
 80108c4:	4880      	ldr	r0, [pc, #512]	@ (8010ac8 <tcp_split_unsent_seg+0x27c>)
 80108c6:	f004 f9cd 	bl	8014c64 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80108ca:	697b      	ldr	r3, [r7, #20]
 80108cc:	891b      	ldrh	r3, [r3, #8]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d106      	bne.n	80108e0 <tcp_split_unsent_seg+0x94>
 80108d2:	4b7b      	ldr	r3, [pc, #492]	@ (8010ac0 <tcp_split_unsent_seg+0x274>)
 80108d4:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80108d8:	497e      	ldr	r1, [pc, #504]	@ (8010ad4 <tcp_split_unsent_seg+0x288>)
 80108da:	487b      	ldr	r0, [pc, #492]	@ (8010ac8 <tcp_split_unsent_seg+0x27c>)
 80108dc:	f004 f9c2 	bl	8014c64 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80108e0:	697b      	ldr	r3, [r7, #20]
 80108e2:	7a9b      	ldrb	r3, [r3, #10]
 80108e4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80108e6:	7bfb      	ldrb	r3, [r7, #15]
 80108e8:	009b      	lsls	r3, r3, #2
 80108ea:	b2db      	uxtb	r3, r3
 80108ec:	f003 0304 	and.w	r3, r3, #4
 80108f0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80108f2:	697b      	ldr	r3, [r7, #20]
 80108f4:	891a      	ldrh	r2, [r3, #8]
 80108f6:	887b      	ldrh	r3, [r7, #2]
 80108f8:	1ad3      	subs	r3, r2, r3
 80108fa:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80108fc:	7bbb      	ldrb	r3, [r7, #14]
 80108fe:	b29a      	uxth	r2, r3
 8010900:	89bb      	ldrh	r3, [r7, #12]
 8010902:	4413      	add	r3, r2
 8010904:	b29b      	uxth	r3, r3
 8010906:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801090a:	4619      	mov	r1, r3
 801090c:	2036      	movs	r0, #54	@ 0x36
 801090e:	f7fb fab9 	bl	800be84 <pbuf_alloc>
 8010912:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010914:	693b      	ldr	r3, [r7, #16]
 8010916:	2b00      	cmp	r3, #0
 8010918:	f000 80b7 	beq.w	8010a8a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801091c:	697b      	ldr	r3, [r7, #20]
 801091e:	685b      	ldr	r3, [r3, #4]
 8010920:	891a      	ldrh	r2, [r3, #8]
 8010922:	697b      	ldr	r3, [r7, #20]
 8010924:	891b      	ldrh	r3, [r3, #8]
 8010926:	1ad3      	subs	r3, r2, r3
 8010928:	b29a      	uxth	r2, r3
 801092a:	887b      	ldrh	r3, [r7, #2]
 801092c:	4413      	add	r3, r2
 801092e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010930:	697b      	ldr	r3, [r7, #20]
 8010932:	6858      	ldr	r0, [r3, #4]
 8010934:	693b      	ldr	r3, [r7, #16]
 8010936:	685a      	ldr	r2, [r3, #4]
 8010938:	7bbb      	ldrb	r3, [r7, #14]
 801093a:	18d1      	adds	r1, r2, r3
 801093c:	897b      	ldrh	r3, [r7, #10]
 801093e:	89ba      	ldrh	r2, [r7, #12]
 8010940:	f7fb ff7e 	bl	800c840 <pbuf_copy_partial>
 8010944:	4603      	mov	r3, r0
 8010946:	461a      	mov	r2, r3
 8010948:	89bb      	ldrh	r3, [r7, #12]
 801094a:	4293      	cmp	r3, r2
 801094c:	f040 809f 	bne.w	8010a8e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010950:	697b      	ldr	r3, [r7, #20]
 8010952:	68db      	ldr	r3, [r3, #12]
 8010954:	899b      	ldrh	r3, [r3, #12]
 8010956:	b29b      	uxth	r3, r3
 8010958:	4618      	mov	r0, r3
 801095a:	f7fa f979 	bl	800ac50 <lwip_htons>
 801095e:	4603      	mov	r3, r0
 8010960:	b2db      	uxtb	r3, r3
 8010962:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010966:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010968:	2300      	movs	r3, #0
 801096a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801096c:	7efb      	ldrb	r3, [r7, #27]
 801096e:	f003 0308 	and.w	r3, r3, #8
 8010972:	2b00      	cmp	r3, #0
 8010974:	d007      	beq.n	8010986 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010976:	7efb      	ldrb	r3, [r7, #27]
 8010978:	f023 0308 	bic.w	r3, r3, #8
 801097c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801097e:	7ebb      	ldrb	r3, [r7, #26]
 8010980:	f043 0308 	orr.w	r3, r3, #8
 8010984:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010986:	7efb      	ldrb	r3, [r7, #27]
 8010988:	f003 0301 	and.w	r3, r3, #1
 801098c:	2b00      	cmp	r3, #0
 801098e:	d007      	beq.n	80109a0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010990:	7efb      	ldrb	r3, [r7, #27]
 8010992:	f023 0301 	bic.w	r3, r3, #1
 8010996:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010998:	7ebb      	ldrb	r3, [r7, #26]
 801099a:	f043 0301 	orr.w	r3, r3, #1
 801099e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80109a0:	697b      	ldr	r3, [r7, #20]
 80109a2:	68db      	ldr	r3, [r3, #12]
 80109a4:	685b      	ldr	r3, [r3, #4]
 80109a6:	4618      	mov	r0, r3
 80109a8:	f7fa f967 	bl	800ac7a <lwip_htonl>
 80109ac:	4602      	mov	r2, r0
 80109ae:	887b      	ldrh	r3, [r7, #2]
 80109b0:	18d1      	adds	r1, r2, r3
 80109b2:	7eba      	ldrb	r2, [r7, #26]
 80109b4:	7bfb      	ldrb	r3, [r7, #15]
 80109b6:	9300      	str	r3, [sp, #0]
 80109b8:	460b      	mov	r3, r1
 80109ba:	6939      	ldr	r1, [r7, #16]
 80109bc:	6878      	ldr	r0, [r7, #4]
 80109be:	f7ff fea9 	bl	8010714 <tcp_create_segment>
 80109c2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80109c4:	69fb      	ldr	r3, [r7, #28]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d063      	beq.n	8010a92 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80109ca:	697b      	ldr	r3, [r7, #20]
 80109cc:	685b      	ldr	r3, [r3, #4]
 80109ce:	4618      	mov	r0, r3
 80109d0:	f7fb fdce 	bl	800c570 <pbuf_clen>
 80109d4:	4603      	mov	r3, r0
 80109d6:	461a      	mov	r2, r3
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80109de:	1a9b      	subs	r3, r3, r2
 80109e0:	b29a      	uxth	r2, r3
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80109e8:	697b      	ldr	r3, [r7, #20]
 80109ea:	6858      	ldr	r0, [r3, #4]
 80109ec:	697b      	ldr	r3, [r7, #20]
 80109ee:	685b      	ldr	r3, [r3, #4]
 80109f0:	891a      	ldrh	r2, [r3, #8]
 80109f2:	89bb      	ldrh	r3, [r7, #12]
 80109f4:	1ad3      	subs	r3, r2, r3
 80109f6:	b29b      	uxth	r3, r3
 80109f8:	4619      	mov	r1, r3
 80109fa:	f7fb fba5 	bl	800c148 <pbuf_realloc>
  useg->len -= remainder;
 80109fe:	697b      	ldr	r3, [r7, #20]
 8010a00:	891a      	ldrh	r2, [r3, #8]
 8010a02:	89bb      	ldrh	r3, [r7, #12]
 8010a04:	1ad3      	subs	r3, r2, r3
 8010a06:	b29a      	uxth	r2, r3
 8010a08:	697b      	ldr	r3, [r7, #20]
 8010a0a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010a0c:	697b      	ldr	r3, [r7, #20]
 8010a0e:	68db      	ldr	r3, [r3, #12]
 8010a10:	899b      	ldrh	r3, [r3, #12]
 8010a12:	b29c      	uxth	r4, r3
 8010a14:	7efb      	ldrb	r3, [r7, #27]
 8010a16:	b29b      	uxth	r3, r3
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f7fa f919 	bl	800ac50 <lwip_htons>
 8010a1e:	4603      	mov	r3, r0
 8010a20:	461a      	mov	r2, r3
 8010a22:	697b      	ldr	r3, [r7, #20]
 8010a24:	68db      	ldr	r3, [r3, #12]
 8010a26:	4322      	orrs	r2, r4
 8010a28:	b292      	uxth	r2, r2
 8010a2a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010a2c:	697b      	ldr	r3, [r7, #20]
 8010a2e:	685b      	ldr	r3, [r3, #4]
 8010a30:	4618      	mov	r0, r3
 8010a32:	f7fb fd9d 	bl	800c570 <pbuf_clen>
 8010a36:	4603      	mov	r3, r0
 8010a38:	461a      	mov	r2, r3
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010a40:	4413      	add	r3, r2
 8010a42:	b29a      	uxth	r2, r3
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010a4a:	69fb      	ldr	r3, [r7, #28]
 8010a4c:	685b      	ldr	r3, [r3, #4]
 8010a4e:	4618      	mov	r0, r3
 8010a50:	f7fb fd8e 	bl	800c570 <pbuf_clen>
 8010a54:	4603      	mov	r3, r0
 8010a56:	461a      	mov	r2, r3
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010a5e:	4413      	add	r3, r2
 8010a60:	b29a      	uxth	r2, r3
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010a68:	697b      	ldr	r3, [r7, #20]
 8010a6a:	681a      	ldr	r2, [r3, #0]
 8010a6c:	69fb      	ldr	r3, [r7, #28]
 8010a6e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010a70:	697b      	ldr	r3, [r7, #20]
 8010a72:	69fa      	ldr	r2, [r7, #28]
 8010a74:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010a76:	69fb      	ldr	r3, [r7, #28]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d103      	bne.n	8010a86 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	2200      	movs	r2, #0
 8010a82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010a86:	2300      	movs	r3, #0
 8010a88:	e016      	b.n	8010ab8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010a8a:	bf00      	nop
 8010a8c:	e002      	b.n	8010a94 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010a8e:	bf00      	nop
 8010a90:	e000      	b.n	8010a94 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010a92:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010a94:	69fb      	ldr	r3, [r7, #28]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d006      	beq.n	8010aa8 <tcp_split_unsent_seg+0x25c>
 8010a9a:	4b09      	ldr	r3, [pc, #36]	@ (8010ac0 <tcp_split_unsent_seg+0x274>)
 8010a9c:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8010aa0:	490d      	ldr	r1, [pc, #52]	@ (8010ad8 <tcp_split_unsent_seg+0x28c>)
 8010aa2:	4809      	ldr	r0, [pc, #36]	@ (8010ac8 <tcp_split_unsent_seg+0x27c>)
 8010aa4:	f004 f8de 	bl	8014c64 <iprintf>
  if (p != NULL) {
 8010aa8:	693b      	ldr	r3, [r7, #16]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d002      	beq.n	8010ab4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010aae:	6938      	ldr	r0, [r7, #16]
 8010ab0:	f7fb fcd0 	bl	800c454 <pbuf_free>
  }

  return ERR_MEM;
 8010ab4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8010ab8:	4618      	mov	r0, r3
 8010aba:	3724      	adds	r7, #36	@ 0x24
 8010abc:	46bd      	mov	sp, r7
 8010abe:	bd90      	pop	{r4, r7, pc}
 8010ac0:	080172e4 	.word	0x080172e4
 8010ac4:	08017678 	.word	0x08017678
 8010ac8:	08017338 	.word	0x08017338
 8010acc:	0801769c 	.word	0x0801769c
 8010ad0:	080176c0 	.word	0x080176c0
 8010ad4:	080176d0 	.word	0x080176d0
 8010ad8:	080176e0 	.word	0x080176e0

08010adc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010adc:	b590      	push	{r4, r7, lr}
 8010ade:	b085      	sub	sp, #20
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d106      	bne.n	8010af8 <tcp_send_fin+0x1c>
 8010aea:	4b21      	ldr	r3, [pc, #132]	@ (8010b70 <tcp_send_fin+0x94>)
 8010aec:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8010af0:	4920      	ldr	r1, [pc, #128]	@ (8010b74 <tcp_send_fin+0x98>)
 8010af2:	4821      	ldr	r0, [pc, #132]	@ (8010b78 <tcp_send_fin+0x9c>)
 8010af4:	f004 f8b6 	bl	8014c64 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d02e      	beq.n	8010b5e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010b04:	60fb      	str	r3, [r7, #12]
 8010b06:	e002      	b.n	8010b0e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d1f8      	bne.n	8010b08 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	68db      	ldr	r3, [r3, #12]
 8010b1a:	899b      	ldrh	r3, [r3, #12]
 8010b1c:	b29b      	uxth	r3, r3
 8010b1e:	4618      	mov	r0, r3
 8010b20:	f7fa f896 	bl	800ac50 <lwip_htons>
 8010b24:	4603      	mov	r3, r0
 8010b26:	b2db      	uxtb	r3, r3
 8010b28:	f003 0307 	and.w	r3, r3, #7
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d116      	bne.n	8010b5e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	68db      	ldr	r3, [r3, #12]
 8010b34:	899b      	ldrh	r3, [r3, #12]
 8010b36:	b29c      	uxth	r4, r3
 8010b38:	2001      	movs	r0, #1
 8010b3a:	f7fa f889 	bl	800ac50 <lwip_htons>
 8010b3e:	4603      	mov	r3, r0
 8010b40:	461a      	mov	r2, r3
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	68db      	ldr	r3, [r3, #12]
 8010b46:	4322      	orrs	r2, r4
 8010b48:	b292      	uxth	r2, r2
 8010b4a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	8b5b      	ldrh	r3, [r3, #26]
 8010b50:	f043 0320 	orr.w	r3, r3, #32
 8010b54:	b29a      	uxth	r2, r3
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	e004      	b.n	8010b68 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010b5e:	2101      	movs	r1, #1
 8010b60:	6878      	ldr	r0, [r7, #4]
 8010b62:	f000 f80b 	bl	8010b7c <tcp_enqueue_flags>
 8010b66:	4603      	mov	r3, r0
}
 8010b68:	4618      	mov	r0, r3
 8010b6a:	3714      	adds	r7, #20
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd90      	pop	{r4, r7, pc}
 8010b70:	080172e4 	.word	0x080172e4
 8010b74:	080176ec 	.word	0x080176ec
 8010b78:	08017338 	.word	0x08017338

08010b7c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b08a      	sub	sp, #40	@ 0x28
 8010b80:	af02      	add	r7, sp, #8
 8010b82:	6078      	str	r0, [r7, #4]
 8010b84:	460b      	mov	r3, r1
 8010b86:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010b88:	2300      	movs	r3, #0
 8010b8a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010b90:	78fb      	ldrb	r3, [r7, #3]
 8010b92:	f003 0303 	and.w	r3, r3, #3
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d106      	bne.n	8010ba8 <tcp_enqueue_flags+0x2c>
 8010b9a:	4b67      	ldr	r3, [pc, #412]	@ (8010d38 <tcp_enqueue_flags+0x1bc>)
 8010b9c:	f240 4211 	movw	r2, #1041	@ 0x411
 8010ba0:	4966      	ldr	r1, [pc, #408]	@ (8010d3c <tcp_enqueue_flags+0x1c0>)
 8010ba2:	4867      	ldr	r0, [pc, #412]	@ (8010d40 <tcp_enqueue_flags+0x1c4>)
 8010ba4:	f004 f85e 	bl	8014c64 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d106      	bne.n	8010bbc <tcp_enqueue_flags+0x40>
 8010bae:	4b62      	ldr	r3, [pc, #392]	@ (8010d38 <tcp_enqueue_flags+0x1bc>)
 8010bb0:	f240 4213 	movw	r2, #1043	@ 0x413
 8010bb4:	4963      	ldr	r1, [pc, #396]	@ (8010d44 <tcp_enqueue_flags+0x1c8>)
 8010bb6:	4862      	ldr	r0, [pc, #392]	@ (8010d40 <tcp_enqueue_flags+0x1c4>)
 8010bb8:	f004 f854 	bl	8014c64 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010bbc:	78fb      	ldrb	r3, [r7, #3]
 8010bbe:	f003 0302 	and.w	r3, r3, #2
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d001      	beq.n	8010bca <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010bc6:	2301      	movs	r3, #1
 8010bc8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010bca:	7ffb      	ldrb	r3, [r7, #31]
 8010bcc:	009b      	lsls	r3, r3, #2
 8010bce:	b2db      	uxtb	r3, r3
 8010bd0:	f003 0304 	and.w	r3, r3, #4
 8010bd4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010bd6:	7dfb      	ldrb	r3, [r7, #23]
 8010bd8:	b29b      	uxth	r3, r3
 8010bda:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010bde:	4619      	mov	r1, r3
 8010be0:	2036      	movs	r0, #54	@ 0x36
 8010be2:	f7fb f94f 	bl	800be84 <pbuf_alloc>
 8010be6:	6138      	str	r0, [r7, #16]
 8010be8:	693b      	ldr	r3, [r7, #16]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d109      	bne.n	8010c02 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	8b5b      	ldrh	r3, [r3, #26]
 8010bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010bf6:	b29a      	uxth	r2, r3
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010bfc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010c00:	e095      	b.n	8010d2e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010c02:	693b      	ldr	r3, [r7, #16]
 8010c04:	895a      	ldrh	r2, [r3, #10]
 8010c06:	7dfb      	ldrb	r3, [r7, #23]
 8010c08:	b29b      	uxth	r3, r3
 8010c0a:	429a      	cmp	r2, r3
 8010c0c:	d206      	bcs.n	8010c1c <tcp_enqueue_flags+0xa0>
 8010c0e:	4b4a      	ldr	r3, [pc, #296]	@ (8010d38 <tcp_enqueue_flags+0x1bc>)
 8010c10:	f240 4239 	movw	r2, #1081	@ 0x439
 8010c14:	494c      	ldr	r1, [pc, #304]	@ (8010d48 <tcp_enqueue_flags+0x1cc>)
 8010c16:	484a      	ldr	r0, [pc, #296]	@ (8010d40 <tcp_enqueue_flags+0x1c4>)
 8010c18:	f004 f824 	bl	8014c64 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8010c20:	78fa      	ldrb	r2, [r7, #3]
 8010c22:	7ffb      	ldrb	r3, [r7, #31]
 8010c24:	9300      	str	r3, [sp, #0]
 8010c26:	460b      	mov	r3, r1
 8010c28:	6939      	ldr	r1, [r7, #16]
 8010c2a:	6878      	ldr	r0, [r7, #4]
 8010c2c:	f7ff fd72 	bl	8010714 <tcp_create_segment>
 8010c30:	60f8      	str	r0, [r7, #12]
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d109      	bne.n	8010c4c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	8b5b      	ldrh	r3, [r3, #26]
 8010c3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010c40:	b29a      	uxth	r2, r3
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010c46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010c4a:	e070      	b.n	8010d2e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	68db      	ldr	r3, [r3, #12]
 8010c50:	f003 0303 	and.w	r3, r3, #3
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d006      	beq.n	8010c66 <tcp_enqueue_flags+0xea>
 8010c58:	4b37      	ldr	r3, [pc, #220]	@ (8010d38 <tcp_enqueue_flags+0x1bc>)
 8010c5a:	f240 4242 	movw	r2, #1090	@ 0x442
 8010c5e:	493b      	ldr	r1, [pc, #236]	@ (8010d4c <tcp_enqueue_flags+0x1d0>)
 8010c60:	4837      	ldr	r0, [pc, #220]	@ (8010d40 <tcp_enqueue_flags+0x1c4>)
 8010c62:	f003 ffff 	bl	8014c64 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	891b      	ldrh	r3, [r3, #8]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d006      	beq.n	8010c7c <tcp_enqueue_flags+0x100>
 8010c6e:	4b32      	ldr	r3, [pc, #200]	@ (8010d38 <tcp_enqueue_flags+0x1bc>)
 8010c70:	f240 4243 	movw	r2, #1091	@ 0x443
 8010c74:	4936      	ldr	r1, [pc, #216]	@ (8010d50 <tcp_enqueue_flags+0x1d4>)
 8010c76:	4832      	ldr	r0, [pc, #200]	@ (8010d40 <tcp_enqueue_flags+0x1c4>)
 8010c78:	f003 fff4 	bl	8014c64 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d103      	bne.n	8010c8c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	68fa      	ldr	r2, [r7, #12]
 8010c88:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010c8a:	e00d      	b.n	8010ca8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c90:	61bb      	str	r3, [r7, #24]
 8010c92:	e002      	b.n	8010c9a <tcp_enqueue_flags+0x11e>
 8010c94:	69bb      	ldr	r3, [r7, #24]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	61bb      	str	r3, [r7, #24]
 8010c9a:	69bb      	ldr	r3, [r7, #24]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d1f8      	bne.n	8010c94 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010ca2:	69bb      	ldr	r3, [r7, #24]
 8010ca4:	68fa      	ldr	r2, [r7, #12]
 8010ca6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	2200      	movs	r2, #0
 8010cac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010cb0:	78fb      	ldrb	r3, [r7, #3]
 8010cb2:	f003 0302 	and.w	r3, r3, #2
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d104      	bne.n	8010cc4 <tcp_enqueue_flags+0x148>
 8010cba:	78fb      	ldrb	r3, [r7, #3]
 8010cbc:	f003 0301 	and.w	r3, r3, #1
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d004      	beq.n	8010cce <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010cc8:	1c5a      	adds	r2, r3, #1
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010cce:	78fb      	ldrb	r3, [r7, #3]
 8010cd0:	f003 0301 	and.w	r3, r3, #1
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d006      	beq.n	8010ce6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	8b5b      	ldrh	r3, [r3, #26]
 8010cdc:	f043 0320 	orr.w	r3, r3, #32
 8010ce0:	b29a      	uxth	r2, r3
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	685b      	ldr	r3, [r3, #4]
 8010cea:	4618      	mov	r0, r3
 8010cec:	f7fb fc40 	bl	800c570 <pbuf_clen>
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	461a      	mov	r2, r3
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010cfa:	4413      	add	r3, r2
 8010cfc:	b29a      	uxth	r2, r3
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d00e      	beq.n	8010d2c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d10a      	bne.n	8010d2c <tcp_enqueue_flags+0x1b0>
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d106      	bne.n	8010d2c <tcp_enqueue_flags+0x1b0>
 8010d1e:	4b06      	ldr	r3, [pc, #24]	@ (8010d38 <tcp_enqueue_flags+0x1bc>)
 8010d20:	f240 4265 	movw	r2, #1125	@ 0x465
 8010d24:	490b      	ldr	r1, [pc, #44]	@ (8010d54 <tcp_enqueue_flags+0x1d8>)
 8010d26:	4806      	ldr	r0, [pc, #24]	@ (8010d40 <tcp_enqueue_flags+0x1c4>)
 8010d28:	f003 ff9c 	bl	8014c64 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010d2c:	2300      	movs	r3, #0
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3720      	adds	r7, #32
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}
 8010d36:	bf00      	nop
 8010d38:	080172e4 	.word	0x080172e4
 8010d3c:	08017708 	.word	0x08017708
 8010d40:	08017338 	.word	0x08017338
 8010d44:	08017760 	.word	0x08017760
 8010d48:	08017780 	.word	0x08017780
 8010d4c:	080177bc 	.word	0x080177bc
 8010d50:	080177d4 	.word	0x080177d4
 8010d54:	08017800 	.word	0x08017800

08010d58 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010d58:	b5b0      	push	{r4, r5, r7, lr}
 8010d5a:	b08a      	sub	sp, #40	@ 0x28
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d106      	bne.n	8010d74 <tcp_output+0x1c>
 8010d66:	4b8a      	ldr	r3, [pc, #552]	@ (8010f90 <tcp_output+0x238>)
 8010d68:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8010d6c:	4989      	ldr	r1, [pc, #548]	@ (8010f94 <tcp_output+0x23c>)
 8010d6e:	488a      	ldr	r0, [pc, #552]	@ (8010f98 <tcp_output+0x240>)
 8010d70:	f003 ff78 	bl	8014c64 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	7d1b      	ldrb	r3, [r3, #20]
 8010d78:	2b01      	cmp	r3, #1
 8010d7a:	d106      	bne.n	8010d8a <tcp_output+0x32>
 8010d7c:	4b84      	ldr	r3, [pc, #528]	@ (8010f90 <tcp_output+0x238>)
 8010d7e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8010d82:	4986      	ldr	r1, [pc, #536]	@ (8010f9c <tcp_output+0x244>)
 8010d84:	4884      	ldr	r0, [pc, #528]	@ (8010f98 <tcp_output+0x240>)
 8010d86:	f003 ff6d 	bl	8014c64 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010d8a:	4b85      	ldr	r3, [pc, #532]	@ (8010fa0 <tcp_output+0x248>)
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	687a      	ldr	r2, [r7, #4]
 8010d90:	429a      	cmp	r2, r3
 8010d92:	d101      	bne.n	8010d98 <tcp_output+0x40>
    return ERR_OK;
 8010d94:	2300      	movs	r3, #0
 8010d96:	e1ce      	b.n	8011136 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010da4:	4293      	cmp	r3, r2
 8010da6:	bf28      	it	cs
 8010da8:	4613      	movcs	r3, r2
 8010daa:	b29b      	uxth	r3, r3
 8010dac:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010db2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8010db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d10b      	bne.n	8010dd2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	8b5b      	ldrh	r3, [r3, #26]
 8010dbe:	f003 0302 	and.w	r3, r3, #2
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	f000 81aa 	beq.w	801111c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010dc8:	6878      	ldr	r0, [r7, #4]
 8010dca:	f000 fdcb 	bl	8011964 <tcp_send_empty_ack>
 8010dce:	4603      	mov	r3, r0
 8010dd0:	e1b1      	b.n	8011136 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010dd2:	6879      	ldr	r1, [r7, #4]
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	3304      	adds	r3, #4
 8010dd8:	461a      	mov	r2, r3
 8010dda:	6878      	ldr	r0, [r7, #4]
 8010ddc:	f7ff fc7e 	bl	80106dc <tcp_route>
 8010de0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010de2:	697b      	ldr	r3, [r7, #20]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d102      	bne.n	8010dee <tcp_output+0x96>
    return ERR_RTE;
 8010de8:	f06f 0303 	mvn.w	r3, #3
 8010dec:	e1a3      	b.n	8011136 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d003      	beq.n	8010dfc <tcp_output+0xa4>
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d111      	bne.n	8010e20 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010dfc:	697b      	ldr	r3, [r7, #20]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d002      	beq.n	8010e08 <tcp_output+0xb0>
 8010e02:	697b      	ldr	r3, [r7, #20]
 8010e04:	3304      	adds	r3, #4
 8010e06:	e000      	b.n	8010e0a <tcp_output+0xb2>
 8010e08:	2300      	movs	r3, #0
 8010e0a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010e0c:	693b      	ldr	r3, [r7, #16]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d102      	bne.n	8010e18 <tcp_output+0xc0>
      return ERR_RTE;
 8010e12:	f06f 0303 	mvn.w	r3, #3
 8010e16:	e18e      	b.n	8011136 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010e18:	693b      	ldr	r3, [r7, #16]
 8010e1a:	681a      	ldr	r2, [r3, #0]
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e22:	68db      	ldr	r3, [r3, #12]
 8010e24:	685b      	ldr	r3, [r3, #4]
 8010e26:	4618      	mov	r0, r3
 8010e28:	f7f9 ff27 	bl	800ac7a <lwip_htonl>
 8010e2c:	4602      	mov	r2, r0
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e32:	1ad3      	subs	r3, r2, r3
 8010e34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010e36:	8912      	ldrh	r2, [r2, #8]
 8010e38:	4413      	add	r3, r2
 8010e3a:	69ba      	ldr	r2, [r7, #24]
 8010e3c:	429a      	cmp	r2, r3
 8010e3e:	d227      	bcs.n	8010e90 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010e46:	461a      	mov	r2, r3
 8010e48:	69bb      	ldr	r3, [r7, #24]
 8010e4a:	4293      	cmp	r3, r2
 8010e4c:	d114      	bne.n	8010e78 <tcp_output+0x120>
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d110      	bne.n	8010e78 <tcp_output+0x120>
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d10b      	bne.n	8010e78 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	2200      	movs	r2, #0
 8010e64:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	2201      	movs	r2, #1
 8010e6c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	2200      	movs	r2, #0
 8010e74:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	8b5b      	ldrh	r3, [r3, #26]
 8010e7c:	f003 0302 	and.w	r3, r3, #2
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	f000 814d 	beq.w	8011120 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8010e86:	6878      	ldr	r0, [r7, #4]
 8010e88:	f000 fd6c 	bl	8011964 <tcp_send_empty_ack>
 8010e8c:	4603      	mov	r3, r0
 8010e8e:	e152      	b.n	8011136 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	2200      	movs	r2, #0
 8010e94:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010e9c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010e9e:	6a3b      	ldr	r3, [r7, #32]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	f000 811c 	beq.w	80110de <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8010ea6:	e002      	b.n	8010eae <tcp_output+0x156>
 8010ea8:	6a3b      	ldr	r3, [r7, #32]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	623b      	str	r3, [r7, #32]
 8010eae:	6a3b      	ldr	r3, [r7, #32]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d1f8      	bne.n	8010ea8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010eb6:	e112      	b.n	80110de <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010eba:	68db      	ldr	r3, [r3, #12]
 8010ebc:	899b      	ldrh	r3, [r3, #12]
 8010ebe:	b29b      	uxth	r3, r3
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	f7f9 fec5 	bl	800ac50 <lwip_htons>
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	b2db      	uxtb	r3, r3
 8010eca:	f003 0304 	and.w	r3, r3, #4
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d006      	beq.n	8010ee0 <tcp_output+0x188>
 8010ed2:	4b2f      	ldr	r3, [pc, #188]	@ (8010f90 <tcp_output+0x238>)
 8010ed4:	f240 5236 	movw	r2, #1334	@ 0x536
 8010ed8:	4932      	ldr	r1, [pc, #200]	@ (8010fa4 <tcp_output+0x24c>)
 8010eda:	482f      	ldr	r0, [pc, #188]	@ (8010f98 <tcp_output+0x240>)
 8010edc:	f003 fec2 	bl	8014c64 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d01f      	beq.n	8010f28 <tcp_output+0x1d0>
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	8b5b      	ldrh	r3, [r3, #26]
 8010eec:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d119      	bne.n	8010f28 <tcp_output+0x1d0>
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d00b      	beq.n	8010f14 <tcp_output+0x1bc>
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d110      	bne.n	8010f28 <tcp_output+0x1d0>
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f0a:	891a      	ldrh	r2, [r3, #8]
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010f10:	429a      	cmp	r2, r3
 8010f12:	d209      	bcs.n	8010f28 <tcp_output+0x1d0>
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d004      	beq.n	8010f28 <tcp_output+0x1d0>
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010f24:	2b0f      	cmp	r3, #15
 8010f26:	d901      	bls.n	8010f2c <tcp_output+0x1d4>
 8010f28:	2301      	movs	r3, #1
 8010f2a:	e000      	b.n	8010f2e <tcp_output+0x1d6>
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d106      	bne.n	8010f40 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	8b5b      	ldrh	r3, [r3, #26]
 8010f36:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	f000 80e4 	beq.w	8011108 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	7d1b      	ldrb	r3, [r3, #20]
 8010f44:	2b02      	cmp	r3, #2
 8010f46:	d00d      	beq.n	8010f64 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f4a:	68db      	ldr	r3, [r3, #12]
 8010f4c:	899b      	ldrh	r3, [r3, #12]
 8010f4e:	b29c      	uxth	r4, r3
 8010f50:	2010      	movs	r0, #16
 8010f52:	f7f9 fe7d 	bl	800ac50 <lwip_htons>
 8010f56:	4603      	mov	r3, r0
 8010f58:	461a      	mov	r2, r3
 8010f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f5c:	68db      	ldr	r3, [r3, #12]
 8010f5e:	4322      	orrs	r2, r4
 8010f60:	b292      	uxth	r2, r2
 8010f62:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010f64:	697a      	ldr	r2, [r7, #20]
 8010f66:	6879      	ldr	r1, [r7, #4]
 8010f68:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010f6a:	f000 f909 	bl	8011180 <tcp_output_segment>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d016      	beq.n	8010fa8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	8b5b      	ldrh	r3, [r3, #26]
 8010f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010f82:	b29a      	uxth	r2, r3
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	835a      	strh	r2, [r3, #26]
      return err;
 8010f88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f8c:	e0d3      	b.n	8011136 <tcp_output+0x3de>
 8010f8e:	bf00      	nop
 8010f90:	080172e4 	.word	0x080172e4
 8010f94:	08017828 	.word	0x08017828
 8010f98:	08017338 	.word	0x08017338
 8010f9c:	08017840 	.word	0x08017840
 8010fa0:	20010358 	.word	0x20010358
 8010fa4:	08017868 	.word	0x08017868
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010faa:	681a      	ldr	r2, [r3, #0]
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	7d1b      	ldrb	r3, [r3, #20]
 8010fb4:	2b02      	cmp	r3, #2
 8010fb6:	d006      	beq.n	8010fc6 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	8b5b      	ldrh	r3, [r3, #26]
 8010fbc:	f023 0303 	bic.w	r3, r3, #3
 8010fc0:	b29a      	uxth	r2, r3
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fc8:	68db      	ldr	r3, [r3, #12]
 8010fca:	685b      	ldr	r3, [r3, #4]
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f7f9 fe54 	bl	800ac7a <lwip_htonl>
 8010fd2:	4604      	mov	r4, r0
 8010fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fd6:	891b      	ldrh	r3, [r3, #8]
 8010fd8:	461d      	mov	r5, r3
 8010fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fdc:	68db      	ldr	r3, [r3, #12]
 8010fde:	899b      	ldrh	r3, [r3, #12]
 8010fe0:	b29b      	uxth	r3, r3
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	f7f9 fe34 	bl	800ac50 <lwip_htons>
 8010fe8:	4603      	mov	r3, r0
 8010fea:	b2db      	uxtb	r3, r3
 8010fec:	f003 0303 	and.w	r3, r3, #3
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d001      	beq.n	8010ff8 <tcp_output+0x2a0>
 8010ff4:	2301      	movs	r3, #1
 8010ff6:	e000      	b.n	8010ffa <tcp_output+0x2a2>
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	442b      	add	r3, r5
 8010ffc:	4423      	add	r3, r4
 8010ffe:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011004:	68bb      	ldr	r3, [r7, #8]
 8011006:	1ad3      	subs	r3, r2, r3
 8011008:	2b00      	cmp	r3, #0
 801100a:	da02      	bge.n	8011012 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	68ba      	ldr	r2, [r7, #8]
 8011010:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011014:	891b      	ldrh	r3, [r3, #8]
 8011016:	461c      	mov	r4, r3
 8011018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801101a:	68db      	ldr	r3, [r3, #12]
 801101c:	899b      	ldrh	r3, [r3, #12]
 801101e:	b29b      	uxth	r3, r3
 8011020:	4618      	mov	r0, r3
 8011022:	f7f9 fe15 	bl	800ac50 <lwip_htons>
 8011026:	4603      	mov	r3, r0
 8011028:	b2db      	uxtb	r3, r3
 801102a:	f003 0303 	and.w	r3, r3, #3
 801102e:	2b00      	cmp	r3, #0
 8011030:	d001      	beq.n	8011036 <tcp_output+0x2de>
 8011032:	2301      	movs	r3, #1
 8011034:	e000      	b.n	8011038 <tcp_output+0x2e0>
 8011036:	2300      	movs	r3, #0
 8011038:	4423      	add	r3, r4
 801103a:	2b00      	cmp	r3, #0
 801103c:	d049      	beq.n	80110d2 <tcp_output+0x37a>
      seg->next = NULL;
 801103e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011040:	2200      	movs	r2, #0
 8011042:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011048:	2b00      	cmp	r3, #0
 801104a:	d105      	bne.n	8011058 <tcp_output+0x300>
        pcb->unacked = seg;
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011050:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8011052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011054:	623b      	str	r3, [r7, #32]
 8011056:	e03f      	b.n	80110d8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801105a:	68db      	ldr	r3, [r3, #12]
 801105c:	685b      	ldr	r3, [r3, #4]
 801105e:	4618      	mov	r0, r3
 8011060:	f7f9 fe0b 	bl	800ac7a <lwip_htonl>
 8011064:	4604      	mov	r4, r0
 8011066:	6a3b      	ldr	r3, [r7, #32]
 8011068:	68db      	ldr	r3, [r3, #12]
 801106a:	685b      	ldr	r3, [r3, #4]
 801106c:	4618      	mov	r0, r3
 801106e:	f7f9 fe04 	bl	800ac7a <lwip_htonl>
 8011072:	4603      	mov	r3, r0
 8011074:	1ae3      	subs	r3, r4, r3
 8011076:	2b00      	cmp	r3, #0
 8011078:	da24      	bge.n	80110c4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	3370      	adds	r3, #112	@ 0x70
 801107e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011080:	e002      	b.n	8011088 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011082:	69fb      	ldr	r3, [r7, #28]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011088:	69fb      	ldr	r3, [r7, #28]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d011      	beq.n	80110b4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011090:	69fb      	ldr	r3, [r7, #28]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	68db      	ldr	r3, [r3, #12]
 8011096:	685b      	ldr	r3, [r3, #4]
 8011098:	4618      	mov	r0, r3
 801109a:	f7f9 fdee 	bl	800ac7a <lwip_htonl>
 801109e:	4604      	mov	r4, r0
 80110a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110a2:	68db      	ldr	r3, [r3, #12]
 80110a4:	685b      	ldr	r3, [r3, #4]
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7f9 fde7 	bl	800ac7a <lwip_htonl>
 80110ac:	4603      	mov	r3, r0
 80110ae:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	dbe6      	blt.n	8011082 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80110b4:	69fb      	ldr	r3, [r7, #28]
 80110b6:	681a      	ldr	r2, [r3, #0]
 80110b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110ba:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80110bc:	69fb      	ldr	r3, [r7, #28]
 80110be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80110c0:	601a      	str	r2, [r3, #0]
 80110c2:	e009      	b.n	80110d8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80110c4:	6a3b      	ldr	r3, [r7, #32]
 80110c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80110c8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80110ca:	6a3b      	ldr	r3, [r7, #32]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	623b      	str	r3, [r7, #32]
 80110d0:	e002      	b.n	80110d8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80110d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80110d4:	f7fc fc43 	bl	800d95e <tcp_seg_free>
    }
    seg = pcb->unsent;
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80110dc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 80110de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d012      	beq.n	801110a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80110e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110e6:	68db      	ldr	r3, [r3, #12]
 80110e8:	685b      	ldr	r3, [r3, #4]
 80110ea:	4618      	mov	r0, r3
 80110ec:	f7f9 fdc5 	bl	800ac7a <lwip_htonl>
 80110f0:	4602      	mov	r2, r0
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80110f6:	1ad3      	subs	r3, r2, r3
 80110f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80110fa:	8912      	ldrh	r2, [r2, #8]
 80110fc:	4413      	add	r3, r2
  while (seg != NULL &&
 80110fe:	69ba      	ldr	r2, [r7, #24]
 8011100:	429a      	cmp	r2, r3
 8011102:	f4bf aed9 	bcs.w	8010eb8 <tcp_output+0x160>
 8011106:	e000      	b.n	801110a <tcp_output+0x3b2>
      break;
 8011108:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801110e:	2b00      	cmp	r3, #0
 8011110:	d108      	bne.n	8011124 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	2200      	movs	r2, #0
 8011116:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801111a:	e004      	b.n	8011126 <tcp_output+0x3ce>
    goto output_done;
 801111c:	bf00      	nop
 801111e:	e002      	b.n	8011126 <tcp_output+0x3ce>
    goto output_done;
 8011120:	bf00      	nop
 8011122:	e000      	b.n	8011126 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011124:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	8b5b      	ldrh	r3, [r3, #26]
 801112a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801112e:	b29a      	uxth	r2, r3
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011134:	2300      	movs	r3, #0
}
 8011136:	4618      	mov	r0, r3
 8011138:	3728      	adds	r7, #40	@ 0x28
 801113a:	46bd      	mov	sp, r7
 801113c:	bdb0      	pop	{r4, r5, r7, pc}
 801113e:	bf00      	nop

08011140 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011140:	b580      	push	{r7, lr}
 8011142:	b082      	sub	sp, #8
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d106      	bne.n	801115c <tcp_output_segment_busy+0x1c>
 801114e:	4b09      	ldr	r3, [pc, #36]	@ (8011174 <tcp_output_segment_busy+0x34>)
 8011150:	f240 529a 	movw	r2, #1434	@ 0x59a
 8011154:	4908      	ldr	r1, [pc, #32]	@ (8011178 <tcp_output_segment_busy+0x38>)
 8011156:	4809      	ldr	r0, [pc, #36]	@ (801117c <tcp_output_segment_busy+0x3c>)
 8011158:	f003 fd84 	bl	8014c64 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	685b      	ldr	r3, [r3, #4]
 8011160:	7b9b      	ldrb	r3, [r3, #14]
 8011162:	2b01      	cmp	r3, #1
 8011164:	d001      	beq.n	801116a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011166:	2301      	movs	r3, #1
 8011168:	e000      	b.n	801116c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801116a:	2300      	movs	r3, #0
}
 801116c:	4618      	mov	r0, r3
 801116e:	3708      	adds	r7, #8
 8011170:	46bd      	mov	sp, r7
 8011172:	bd80      	pop	{r7, pc}
 8011174:	080172e4 	.word	0x080172e4
 8011178:	08017880 	.word	0x08017880
 801117c:	08017338 	.word	0x08017338

08011180 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011180:	b5b0      	push	{r4, r5, r7, lr}
 8011182:	b08c      	sub	sp, #48	@ 0x30
 8011184:	af04      	add	r7, sp, #16
 8011186:	60f8      	str	r0, [r7, #12]
 8011188:	60b9      	str	r1, [r7, #8]
 801118a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d106      	bne.n	80111a0 <tcp_output_segment+0x20>
 8011192:	4b64      	ldr	r3, [pc, #400]	@ (8011324 <tcp_output_segment+0x1a4>)
 8011194:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8011198:	4963      	ldr	r1, [pc, #396]	@ (8011328 <tcp_output_segment+0x1a8>)
 801119a:	4864      	ldr	r0, [pc, #400]	@ (801132c <tcp_output_segment+0x1ac>)
 801119c:	f003 fd62 	bl	8014c64 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80111a0:	68bb      	ldr	r3, [r7, #8]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d106      	bne.n	80111b4 <tcp_output_segment+0x34>
 80111a6:	4b5f      	ldr	r3, [pc, #380]	@ (8011324 <tcp_output_segment+0x1a4>)
 80111a8:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80111ac:	4960      	ldr	r1, [pc, #384]	@ (8011330 <tcp_output_segment+0x1b0>)
 80111ae:	485f      	ldr	r0, [pc, #380]	@ (801132c <tcp_output_segment+0x1ac>)
 80111b0:	f003 fd58 	bl	8014c64 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d106      	bne.n	80111c8 <tcp_output_segment+0x48>
 80111ba:	4b5a      	ldr	r3, [pc, #360]	@ (8011324 <tcp_output_segment+0x1a4>)
 80111bc:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 80111c0:	495c      	ldr	r1, [pc, #368]	@ (8011334 <tcp_output_segment+0x1b4>)
 80111c2:	485a      	ldr	r0, [pc, #360]	@ (801132c <tcp_output_segment+0x1ac>)
 80111c4:	f003 fd4e 	bl	8014c64 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80111c8:	68f8      	ldr	r0, [r7, #12]
 80111ca:	f7ff ffb9 	bl	8011140 <tcp_output_segment_busy>
 80111ce:	4603      	mov	r3, r0
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d001      	beq.n	80111d8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80111d4:	2300      	movs	r3, #0
 80111d6:	e0a1      	b.n	801131c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80111d8:	68bb      	ldr	r3, [r7, #8]
 80111da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	68dc      	ldr	r4, [r3, #12]
 80111e0:	4610      	mov	r0, r2
 80111e2:	f7f9 fd4a 	bl	800ac7a <lwip_htonl>
 80111e6:	4603      	mov	r3, r0
 80111e8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80111ea:	68bb      	ldr	r3, [r7, #8]
 80111ec:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	68dc      	ldr	r4, [r3, #12]
 80111f2:	4610      	mov	r0, r2
 80111f4:	f7f9 fd2c 	bl	800ac50 <lwip_htons>
 80111f8:	4603      	mov	r3, r0
 80111fa:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80111fc:	68bb      	ldr	r3, [r7, #8]
 80111fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011200:	68ba      	ldr	r2, [r7, #8]
 8011202:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8011204:	441a      	add	r2, r3
 8011206:	68bb      	ldr	r3, [r7, #8]
 8011208:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	68db      	ldr	r3, [r3, #12]
 801120e:	3314      	adds	r3, #20
 8011210:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	7a9b      	ldrb	r3, [r3, #10]
 8011216:	f003 0301 	and.w	r3, r3, #1
 801121a:	2b00      	cmp	r3, #0
 801121c:	d015      	beq.n	801124a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801121e:	68bb      	ldr	r3, [r7, #8]
 8011220:	3304      	adds	r3, #4
 8011222:	461a      	mov	r2, r3
 8011224:	6879      	ldr	r1, [r7, #4]
 8011226:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 801122a:	f7fc fe8f 	bl	800df4c <tcp_eff_send_mss_netif>
 801122e:	4603      	mov	r3, r0
 8011230:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011232:	8b7b      	ldrh	r3, [r7, #26]
 8011234:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8011238:	4618      	mov	r0, r3
 801123a:	f7f9 fd1e 	bl	800ac7a <lwip_htonl>
 801123e:	4602      	mov	r2, r0
 8011240:	69fb      	ldr	r3, [r7, #28]
 8011242:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011244:	69fb      	ldr	r3, [r7, #28]
 8011246:	3304      	adds	r3, #4
 8011248:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801124a:	68bb      	ldr	r3, [r7, #8]
 801124c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011250:	2b00      	cmp	r3, #0
 8011252:	da02      	bge.n	801125a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011254:	68bb      	ldr	r3, [r7, #8]
 8011256:	2200      	movs	r2, #0
 8011258:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801125a:	68bb      	ldr	r3, [r7, #8]
 801125c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801125e:	2b00      	cmp	r3, #0
 8011260:	d10c      	bne.n	801127c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011262:	4b35      	ldr	r3, [pc, #212]	@ (8011338 <tcp_output_segment+0x1b8>)
 8011264:	681a      	ldr	r2, [r3, #0]
 8011266:	68bb      	ldr	r3, [r7, #8]
 8011268:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	68db      	ldr	r3, [r3, #12]
 801126e:	685b      	ldr	r3, [r3, #4]
 8011270:	4618      	mov	r0, r3
 8011272:	f7f9 fd02 	bl	800ac7a <lwip_htonl>
 8011276:	4602      	mov	r2, r0
 8011278:	68bb      	ldr	r3, [r7, #8]
 801127a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	68da      	ldr	r2, [r3, #12]
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	685b      	ldr	r3, [r3, #4]
 8011284:	685b      	ldr	r3, [r3, #4]
 8011286:	1ad3      	subs	r3, r2, r3
 8011288:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	685b      	ldr	r3, [r3, #4]
 801128e:	8959      	ldrh	r1, [r3, #10]
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	685b      	ldr	r3, [r3, #4]
 8011294:	8b3a      	ldrh	r2, [r7, #24]
 8011296:	1a8a      	subs	r2, r1, r2
 8011298:	b292      	uxth	r2, r2
 801129a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	685b      	ldr	r3, [r3, #4]
 80112a0:	8919      	ldrh	r1, [r3, #8]
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	685b      	ldr	r3, [r3, #4]
 80112a6:	8b3a      	ldrh	r2, [r7, #24]
 80112a8:	1a8a      	subs	r2, r1, r2
 80112aa:	b292      	uxth	r2, r2
 80112ac:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	685b      	ldr	r3, [r3, #4]
 80112b2:	68fa      	ldr	r2, [r7, #12]
 80112b4:	68d2      	ldr	r2, [r2, #12]
 80112b6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	68db      	ldr	r3, [r3, #12]
 80112bc:	2200      	movs	r2, #0
 80112be:	741a      	strb	r2, [r3, #16]
 80112c0:	2200      	movs	r2, #0
 80112c2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	68da      	ldr	r2, [r3, #12]
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	7a9b      	ldrb	r3, [r3, #10]
 80112cc:	f003 0301 	and.w	r3, r3, #1
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d001      	beq.n	80112d8 <tcp_output_segment+0x158>
 80112d4:	2318      	movs	r3, #24
 80112d6:	e000      	b.n	80112da <tcp_output_segment+0x15a>
 80112d8:	2314      	movs	r3, #20
 80112da:	4413      	add	r3, r2
 80112dc:	69fa      	ldr	r2, [r7, #28]
 80112de:	429a      	cmp	r2, r3
 80112e0:	d006      	beq.n	80112f0 <tcp_output_segment+0x170>
 80112e2:	4b10      	ldr	r3, [pc, #64]	@ (8011324 <tcp_output_segment+0x1a4>)
 80112e4:	f240 621c 	movw	r2, #1564	@ 0x61c
 80112e8:	4914      	ldr	r1, [pc, #80]	@ (801133c <tcp_output_segment+0x1bc>)
 80112ea:	4810      	ldr	r0, [pc, #64]	@ (801132c <tcp_output_segment+0x1ac>)
 80112ec:	f003 fcba 	bl	8014c64 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	6858      	ldr	r0, [r3, #4]
 80112f4:	68b9      	ldr	r1, [r7, #8]
 80112f6:	68bb      	ldr	r3, [r7, #8]
 80112f8:	1d1c      	adds	r4, r3, #4
 80112fa:	68bb      	ldr	r3, [r7, #8]
 80112fc:	7add      	ldrb	r5, [r3, #11]
 80112fe:	68bb      	ldr	r3, [r7, #8]
 8011300:	7a9b      	ldrb	r3, [r3, #10]
 8011302:	687a      	ldr	r2, [r7, #4]
 8011304:	9202      	str	r2, [sp, #8]
 8011306:	2206      	movs	r2, #6
 8011308:	9201      	str	r2, [sp, #4]
 801130a:	9300      	str	r3, [sp, #0]
 801130c:	462b      	mov	r3, r5
 801130e:	4622      	mov	r2, r4
 8011310:	f002 fa64 	bl	80137dc <ip4_output_if>
 8011314:	4603      	mov	r3, r0
 8011316:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011318:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801131c:	4618      	mov	r0, r3
 801131e:	3720      	adds	r7, #32
 8011320:	46bd      	mov	sp, r7
 8011322:	bdb0      	pop	{r4, r5, r7, pc}
 8011324:	080172e4 	.word	0x080172e4
 8011328:	080178a8 	.word	0x080178a8
 801132c:	08017338 	.word	0x08017338
 8011330:	080178c8 	.word	0x080178c8
 8011334:	080178e8 	.word	0x080178e8
 8011338:	2001030c 	.word	0x2001030c
 801133c:	0801790c 	.word	0x0801790c

08011340 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011340:	b5b0      	push	{r4, r5, r7, lr}
 8011342:	b084      	sub	sp, #16
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d106      	bne.n	801135c <tcp_rexmit_rto_prepare+0x1c>
 801134e:	4b31      	ldr	r3, [pc, #196]	@ (8011414 <tcp_rexmit_rto_prepare+0xd4>)
 8011350:	f240 6263 	movw	r2, #1635	@ 0x663
 8011354:	4930      	ldr	r1, [pc, #192]	@ (8011418 <tcp_rexmit_rto_prepare+0xd8>)
 8011356:	4831      	ldr	r0, [pc, #196]	@ (801141c <tcp_rexmit_rto_prepare+0xdc>)
 8011358:	f003 fc84 	bl	8014c64 <iprintf>

  if (pcb->unacked == NULL) {
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011360:	2b00      	cmp	r3, #0
 8011362:	d102      	bne.n	801136a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011364:	f06f 0305 	mvn.w	r3, #5
 8011368:	e050      	b.n	801140c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801136e:	60fb      	str	r3, [r7, #12]
 8011370:	e00b      	b.n	801138a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8011372:	68f8      	ldr	r0, [r7, #12]
 8011374:	f7ff fee4 	bl	8011140 <tcp_output_segment_busy>
 8011378:	4603      	mov	r3, r0
 801137a:	2b00      	cmp	r3, #0
 801137c:	d002      	beq.n	8011384 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801137e:	f06f 0305 	mvn.w	r3, #5
 8011382:	e043      	b.n	801140c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	60fb      	str	r3, [r7, #12]
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d1ef      	bne.n	8011372 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8011392:	68f8      	ldr	r0, [r7, #12]
 8011394:	f7ff fed4 	bl	8011140 <tcp_output_segment_busy>
 8011398:	4603      	mov	r3, r0
 801139a:	2b00      	cmp	r3, #0
 801139c:	d002      	beq.n	80113a4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801139e:	f06f 0305 	mvn.w	r3, #5
 80113a2:	e033      	b.n	801140c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	2200      	movs	r2, #0
 80113b8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	8b5b      	ldrh	r3, [r3, #26]
 80113be:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80113c2:	b29a      	uxth	r2, r3
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	68db      	ldr	r3, [r3, #12]
 80113cc:	685b      	ldr	r3, [r3, #4]
 80113ce:	4618      	mov	r0, r3
 80113d0:	f7f9 fc53 	bl	800ac7a <lwip_htonl>
 80113d4:	4604      	mov	r4, r0
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	891b      	ldrh	r3, [r3, #8]
 80113da:	461d      	mov	r5, r3
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	68db      	ldr	r3, [r3, #12]
 80113e0:	899b      	ldrh	r3, [r3, #12]
 80113e2:	b29b      	uxth	r3, r3
 80113e4:	4618      	mov	r0, r3
 80113e6:	f7f9 fc33 	bl	800ac50 <lwip_htons>
 80113ea:	4603      	mov	r3, r0
 80113ec:	b2db      	uxtb	r3, r3
 80113ee:	f003 0303 	and.w	r3, r3, #3
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d001      	beq.n	80113fa <tcp_rexmit_rto_prepare+0xba>
 80113f6:	2301      	movs	r3, #1
 80113f8:	e000      	b.n	80113fc <tcp_rexmit_rto_prepare+0xbc>
 80113fa:	2300      	movs	r3, #0
 80113fc:	442b      	add	r3, r5
 80113fe:	18e2      	adds	r2, r4, r3
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	2200      	movs	r2, #0
 8011408:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801140a:	2300      	movs	r3, #0
}
 801140c:	4618      	mov	r0, r3
 801140e:	3710      	adds	r7, #16
 8011410:	46bd      	mov	sp, r7
 8011412:	bdb0      	pop	{r4, r5, r7, pc}
 8011414:	080172e4 	.word	0x080172e4
 8011418:	08017920 	.word	0x08017920
 801141c:	08017338 	.word	0x08017338

08011420 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011420:	b580      	push	{r7, lr}
 8011422:	b082      	sub	sp, #8
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d106      	bne.n	801143c <tcp_rexmit_rto_commit+0x1c>
 801142e:	4b0d      	ldr	r3, [pc, #52]	@ (8011464 <tcp_rexmit_rto_commit+0x44>)
 8011430:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8011434:	490c      	ldr	r1, [pc, #48]	@ (8011468 <tcp_rexmit_rto_commit+0x48>)
 8011436:	480d      	ldr	r0, [pc, #52]	@ (801146c <tcp_rexmit_rto_commit+0x4c>)
 8011438:	f003 fc14 	bl	8014c64 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011442:	2bff      	cmp	r3, #255	@ 0xff
 8011444:	d007      	beq.n	8011456 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801144c:	3301      	adds	r3, #1
 801144e:	b2da      	uxtb	r2, r3
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8011456:	6878      	ldr	r0, [r7, #4]
 8011458:	f7ff fc7e 	bl	8010d58 <tcp_output>
}
 801145c:	bf00      	nop
 801145e:	3708      	adds	r7, #8
 8011460:	46bd      	mov	sp, r7
 8011462:	bd80      	pop	{r7, pc}
 8011464:	080172e4 	.word	0x080172e4
 8011468:	08017944 	.word	0x08017944
 801146c:	08017338 	.word	0x08017338

08011470 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b082      	sub	sp, #8
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d106      	bne.n	801148c <tcp_rexmit_rto+0x1c>
 801147e:	4b0a      	ldr	r3, [pc, #40]	@ (80114a8 <tcp_rexmit_rto+0x38>)
 8011480:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8011484:	4909      	ldr	r1, [pc, #36]	@ (80114ac <tcp_rexmit_rto+0x3c>)
 8011486:	480a      	ldr	r0, [pc, #40]	@ (80114b0 <tcp_rexmit_rto+0x40>)
 8011488:	f003 fbec 	bl	8014c64 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801148c:	6878      	ldr	r0, [r7, #4]
 801148e:	f7ff ff57 	bl	8011340 <tcp_rexmit_rto_prepare>
 8011492:	4603      	mov	r3, r0
 8011494:	2b00      	cmp	r3, #0
 8011496:	d102      	bne.n	801149e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011498:	6878      	ldr	r0, [r7, #4]
 801149a:	f7ff ffc1 	bl	8011420 <tcp_rexmit_rto_commit>
  }
}
 801149e:	bf00      	nop
 80114a0:	3708      	adds	r7, #8
 80114a2:	46bd      	mov	sp, r7
 80114a4:	bd80      	pop	{r7, pc}
 80114a6:	bf00      	nop
 80114a8:	080172e4 	.word	0x080172e4
 80114ac:	08017968 	.word	0x08017968
 80114b0:	08017338 	.word	0x08017338

080114b4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80114b4:	b590      	push	{r4, r7, lr}
 80114b6:	b085      	sub	sp, #20
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d106      	bne.n	80114d0 <tcp_rexmit+0x1c>
 80114c2:	4b2f      	ldr	r3, [pc, #188]	@ (8011580 <tcp_rexmit+0xcc>)
 80114c4:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80114c8:	492e      	ldr	r1, [pc, #184]	@ (8011584 <tcp_rexmit+0xd0>)
 80114ca:	482f      	ldr	r0, [pc, #188]	@ (8011588 <tcp_rexmit+0xd4>)
 80114cc:	f003 fbca 	bl	8014c64 <iprintf>

  if (pcb->unacked == NULL) {
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d102      	bne.n	80114de <tcp_rexmit+0x2a>
    return ERR_VAL;
 80114d8:	f06f 0305 	mvn.w	r3, #5
 80114dc:	e04c      	b.n	8011578 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80114e2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80114e4:	68b8      	ldr	r0, [r7, #8]
 80114e6:	f7ff fe2b 	bl	8011140 <tcp_output_segment_busy>
 80114ea:	4603      	mov	r3, r0
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d002      	beq.n	80114f6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80114f0:	f06f 0305 	mvn.w	r3, #5
 80114f4:	e040      	b.n	8011578 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80114f6:	68bb      	ldr	r3, [r7, #8]
 80114f8:	681a      	ldr	r2, [r3, #0]
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	336c      	adds	r3, #108	@ 0x6c
 8011502:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011504:	e002      	b.n	801150c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d011      	beq.n	8011538 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	68db      	ldr	r3, [r3, #12]
 801151a:	685b      	ldr	r3, [r3, #4]
 801151c:	4618      	mov	r0, r3
 801151e:	f7f9 fbac 	bl	800ac7a <lwip_htonl>
 8011522:	4604      	mov	r4, r0
 8011524:	68bb      	ldr	r3, [r7, #8]
 8011526:	68db      	ldr	r3, [r3, #12]
 8011528:	685b      	ldr	r3, [r3, #4]
 801152a:	4618      	mov	r0, r3
 801152c:	f7f9 fba5 	bl	800ac7a <lwip_htonl>
 8011530:	4603      	mov	r3, r0
 8011532:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011534:	2b00      	cmp	r3, #0
 8011536:	dbe6      	blt.n	8011506 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	681a      	ldr	r2, [r3, #0]
 801153c:	68bb      	ldr	r3, [r7, #8]
 801153e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	68ba      	ldr	r2, [r7, #8]
 8011544:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011546:	68bb      	ldr	r3, [r7, #8]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d103      	bne.n	8011556 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	2200      	movs	r2, #0
 8011552:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801155c:	2bff      	cmp	r3, #255	@ 0xff
 801155e:	d007      	beq.n	8011570 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011566:	3301      	adds	r3, #1
 8011568:	b2da      	uxtb	r2, r3
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	2200      	movs	r2, #0
 8011574:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8011576:	2300      	movs	r3, #0
}
 8011578:	4618      	mov	r0, r3
 801157a:	3714      	adds	r7, #20
 801157c:	46bd      	mov	sp, r7
 801157e:	bd90      	pop	{r4, r7, pc}
 8011580:	080172e4 	.word	0x080172e4
 8011584:	08017984 	.word	0x08017984
 8011588:	08017338 	.word	0x08017338

0801158c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801158c:	b580      	push	{r7, lr}
 801158e:	b082      	sub	sp, #8
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d106      	bne.n	80115a8 <tcp_rexmit_fast+0x1c>
 801159a:	4b2a      	ldr	r3, [pc, #168]	@ (8011644 <tcp_rexmit_fast+0xb8>)
 801159c:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80115a0:	4929      	ldr	r1, [pc, #164]	@ (8011648 <tcp_rexmit_fast+0xbc>)
 80115a2:	482a      	ldr	r0, [pc, #168]	@ (801164c <tcp_rexmit_fast+0xc0>)
 80115a4:	f003 fb5e 	bl	8014c64 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d045      	beq.n	801163c <tcp_rexmit_fast+0xb0>
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	8b5b      	ldrh	r3, [r3, #26]
 80115b4:	f003 0304 	and.w	r3, r3, #4
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d13f      	bne.n	801163c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80115bc:	6878      	ldr	r0, [r7, #4]
 80115be:	f7ff ff79 	bl	80114b4 <tcp_rexmit>
 80115c2:	4603      	mov	r3, r0
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d139      	bne.n	801163c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80115d4:	4293      	cmp	r3, r2
 80115d6:	bf28      	it	cs
 80115d8:	4613      	movcs	r3, r2
 80115da:	b29b      	uxth	r3, r3
 80115dc:	2b00      	cmp	r3, #0
 80115de:	da00      	bge.n	80115e2 <tcp_rexmit_fast+0x56>
 80115e0:	3301      	adds	r3, #1
 80115e2:	105b      	asrs	r3, r3, #1
 80115e4:	b29a      	uxth	r2, r3
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80115f2:	461a      	mov	r2, r3
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80115f8:	005b      	lsls	r3, r3, #1
 80115fa:	429a      	cmp	r2, r3
 80115fc:	d206      	bcs.n	801160c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011602:	005b      	lsls	r3, r3, #1
 8011604:	b29a      	uxth	r2, r3
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011616:	4619      	mov	r1, r3
 8011618:	0049      	lsls	r1, r1, #1
 801161a:	440b      	add	r3, r1
 801161c:	b29b      	uxth	r3, r3
 801161e:	4413      	add	r3, r2
 8011620:	b29a      	uxth	r2, r3
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	8b5b      	ldrh	r3, [r3, #26]
 801162c:	f043 0304 	orr.w	r3, r3, #4
 8011630:	b29a      	uxth	r2, r3
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	2200      	movs	r2, #0
 801163a:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 801163c:	bf00      	nop
 801163e:	3708      	adds	r7, #8
 8011640:	46bd      	mov	sp, r7
 8011642:	bd80      	pop	{r7, pc}
 8011644:	080172e4 	.word	0x080172e4
 8011648:	0801799c 	.word	0x0801799c
 801164c:	08017338 	.word	0x08017338

08011650 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b086      	sub	sp, #24
 8011654:	af00      	add	r7, sp, #0
 8011656:	60f8      	str	r0, [r7, #12]
 8011658:	607b      	str	r3, [r7, #4]
 801165a:	460b      	mov	r3, r1
 801165c:	817b      	strh	r3, [r7, #10]
 801165e:	4613      	mov	r3, r2
 8011660:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011662:	897a      	ldrh	r2, [r7, #10]
 8011664:	893b      	ldrh	r3, [r7, #8]
 8011666:	4413      	add	r3, r2
 8011668:	b29b      	uxth	r3, r3
 801166a:	3314      	adds	r3, #20
 801166c:	b29b      	uxth	r3, r3
 801166e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011672:	4619      	mov	r1, r3
 8011674:	2022      	movs	r0, #34	@ 0x22
 8011676:	f7fa fc05 	bl	800be84 <pbuf_alloc>
 801167a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801167c:	697b      	ldr	r3, [r7, #20]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d04d      	beq.n	801171e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011682:	897b      	ldrh	r3, [r7, #10]
 8011684:	3313      	adds	r3, #19
 8011686:	697a      	ldr	r2, [r7, #20]
 8011688:	8952      	ldrh	r2, [r2, #10]
 801168a:	4293      	cmp	r3, r2
 801168c:	db06      	blt.n	801169c <tcp_output_alloc_header_common+0x4c>
 801168e:	4b26      	ldr	r3, [pc, #152]	@ (8011728 <tcp_output_alloc_header_common+0xd8>)
 8011690:	f240 7223 	movw	r2, #1827	@ 0x723
 8011694:	4925      	ldr	r1, [pc, #148]	@ (801172c <tcp_output_alloc_header_common+0xdc>)
 8011696:	4826      	ldr	r0, [pc, #152]	@ (8011730 <tcp_output_alloc_header_common+0xe0>)
 8011698:	f003 fae4 	bl	8014c64 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801169c:	697b      	ldr	r3, [r7, #20]
 801169e:	685b      	ldr	r3, [r3, #4]
 80116a0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80116a2:	8c3b      	ldrh	r3, [r7, #32]
 80116a4:	4618      	mov	r0, r3
 80116a6:	f7f9 fad3 	bl	800ac50 <lwip_htons>
 80116aa:	4603      	mov	r3, r0
 80116ac:	461a      	mov	r2, r3
 80116ae:	693b      	ldr	r3, [r7, #16]
 80116b0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80116b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80116b4:	4618      	mov	r0, r3
 80116b6:	f7f9 facb 	bl	800ac50 <lwip_htons>
 80116ba:	4603      	mov	r3, r0
 80116bc:	461a      	mov	r2, r3
 80116be:	693b      	ldr	r3, [r7, #16]
 80116c0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80116c2:	693b      	ldr	r3, [r7, #16]
 80116c4:	687a      	ldr	r2, [r7, #4]
 80116c6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80116c8:	68f8      	ldr	r0, [r7, #12]
 80116ca:	f7f9 fad6 	bl	800ac7a <lwip_htonl>
 80116ce:	4602      	mov	r2, r0
 80116d0:	693b      	ldr	r3, [r7, #16]
 80116d2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80116d4:	897b      	ldrh	r3, [r7, #10]
 80116d6:	089b      	lsrs	r3, r3, #2
 80116d8:	b29b      	uxth	r3, r3
 80116da:	3305      	adds	r3, #5
 80116dc:	b29b      	uxth	r3, r3
 80116de:	031b      	lsls	r3, r3, #12
 80116e0:	b29a      	uxth	r2, r3
 80116e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80116e6:	b29b      	uxth	r3, r3
 80116e8:	4313      	orrs	r3, r2
 80116ea:	b29b      	uxth	r3, r3
 80116ec:	4618      	mov	r0, r3
 80116ee:	f7f9 faaf 	bl	800ac50 <lwip_htons>
 80116f2:	4603      	mov	r3, r0
 80116f4:	461a      	mov	r2, r3
 80116f6:	693b      	ldr	r3, [r7, #16]
 80116f8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80116fa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80116fc:	4618      	mov	r0, r3
 80116fe:	f7f9 faa7 	bl	800ac50 <lwip_htons>
 8011702:	4603      	mov	r3, r0
 8011704:	461a      	mov	r2, r3
 8011706:	693b      	ldr	r3, [r7, #16]
 8011708:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801170a:	693b      	ldr	r3, [r7, #16]
 801170c:	2200      	movs	r2, #0
 801170e:	741a      	strb	r2, [r3, #16]
 8011710:	2200      	movs	r2, #0
 8011712:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011714:	693b      	ldr	r3, [r7, #16]
 8011716:	2200      	movs	r2, #0
 8011718:	749a      	strb	r2, [r3, #18]
 801171a:	2200      	movs	r2, #0
 801171c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801171e:	697b      	ldr	r3, [r7, #20]
}
 8011720:	4618      	mov	r0, r3
 8011722:	3718      	adds	r7, #24
 8011724:	46bd      	mov	sp, r7
 8011726:	bd80      	pop	{r7, pc}
 8011728:	080172e4 	.word	0x080172e4
 801172c:	080179bc 	.word	0x080179bc
 8011730:	08017338 	.word	0x08017338

08011734 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011734:	b5b0      	push	{r4, r5, r7, lr}
 8011736:	b08a      	sub	sp, #40	@ 0x28
 8011738:	af04      	add	r7, sp, #16
 801173a:	60f8      	str	r0, [r7, #12]
 801173c:	607b      	str	r3, [r7, #4]
 801173e:	460b      	mov	r3, r1
 8011740:	817b      	strh	r3, [r7, #10]
 8011742:	4613      	mov	r3, r2
 8011744:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d106      	bne.n	801175a <tcp_output_alloc_header+0x26>
 801174c:	4b15      	ldr	r3, [pc, #84]	@ (80117a4 <tcp_output_alloc_header+0x70>)
 801174e:	f240 7242 	movw	r2, #1858	@ 0x742
 8011752:	4915      	ldr	r1, [pc, #84]	@ (80117a8 <tcp_output_alloc_header+0x74>)
 8011754:	4815      	ldr	r0, [pc, #84]	@ (80117ac <tcp_output_alloc_header+0x78>)
 8011756:	f003 fa85 	bl	8014c64 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	8adb      	ldrh	r3, [r3, #22]
 8011762:	68fa      	ldr	r2, [r7, #12]
 8011764:	8b12      	ldrh	r2, [r2, #24]
 8011766:	68f9      	ldr	r1, [r7, #12]
 8011768:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801176a:	893d      	ldrh	r5, [r7, #8]
 801176c:	897c      	ldrh	r4, [r7, #10]
 801176e:	9103      	str	r1, [sp, #12]
 8011770:	2110      	movs	r1, #16
 8011772:	9102      	str	r1, [sp, #8]
 8011774:	9201      	str	r2, [sp, #4]
 8011776:	9300      	str	r3, [sp, #0]
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	462a      	mov	r2, r5
 801177c:	4621      	mov	r1, r4
 801177e:	f7ff ff67 	bl	8011650 <tcp_output_alloc_header_common>
 8011782:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011784:	697b      	ldr	r3, [r7, #20]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d006      	beq.n	8011798 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801178e:	68fa      	ldr	r2, [r7, #12]
 8011790:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8011792:	441a      	add	r2, r3
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8011798:	697b      	ldr	r3, [r7, #20]
}
 801179a:	4618      	mov	r0, r3
 801179c:	3718      	adds	r7, #24
 801179e:	46bd      	mov	sp, r7
 80117a0:	bdb0      	pop	{r4, r5, r7, pc}
 80117a2:	bf00      	nop
 80117a4:	080172e4 	.word	0x080172e4
 80117a8:	080179ec 	.word	0x080179ec
 80117ac:	08017338 	.word	0x08017338

080117b0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b088      	sub	sp, #32
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	60f8      	str	r0, [r7, #12]
 80117b8:	60b9      	str	r1, [r7, #8]
 80117ba:	4611      	mov	r1, r2
 80117bc:	461a      	mov	r2, r3
 80117be:	460b      	mov	r3, r1
 80117c0:	71fb      	strb	r3, [r7, #7]
 80117c2:	4613      	mov	r3, r2
 80117c4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80117c6:	2300      	movs	r3, #0
 80117c8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80117ca:	68bb      	ldr	r3, [r7, #8]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d106      	bne.n	80117de <tcp_output_fill_options+0x2e>
 80117d0:	4b12      	ldr	r3, [pc, #72]	@ (801181c <tcp_output_fill_options+0x6c>)
 80117d2:	f240 7256 	movw	r2, #1878	@ 0x756
 80117d6:	4912      	ldr	r1, [pc, #72]	@ (8011820 <tcp_output_fill_options+0x70>)
 80117d8:	4812      	ldr	r0, [pc, #72]	@ (8011824 <tcp_output_fill_options+0x74>)
 80117da:	f003 fa43 	bl	8014c64 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80117de:	68bb      	ldr	r3, [r7, #8]
 80117e0:	685b      	ldr	r3, [r3, #4]
 80117e2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80117e4:	69bb      	ldr	r3, [r7, #24]
 80117e6:	3314      	adds	r3, #20
 80117e8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80117ea:	8bfb      	ldrh	r3, [r7, #30]
 80117ec:	009b      	lsls	r3, r3, #2
 80117ee:	461a      	mov	r2, r3
 80117f0:	79fb      	ldrb	r3, [r7, #7]
 80117f2:	009b      	lsls	r3, r3, #2
 80117f4:	f003 0304 	and.w	r3, r3, #4
 80117f8:	4413      	add	r3, r2
 80117fa:	3314      	adds	r3, #20
 80117fc:	69ba      	ldr	r2, [r7, #24]
 80117fe:	4413      	add	r3, r2
 8011800:	697a      	ldr	r2, [r7, #20]
 8011802:	429a      	cmp	r2, r3
 8011804:	d006      	beq.n	8011814 <tcp_output_fill_options+0x64>
 8011806:	4b05      	ldr	r3, [pc, #20]	@ (801181c <tcp_output_fill_options+0x6c>)
 8011808:	f240 7275 	movw	r2, #1909	@ 0x775
 801180c:	4906      	ldr	r1, [pc, #24]	@ (8011828 <tcp_output_fill_options+0x78>)
 801180e:	4805      	ldr	r0, [pc, #20]	@ (8011824 <tcp_output_fill_options+0x74>)
 8011810:	f003 fa28 	bl	8014c64 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011814:	bf00      	nop
 8011816:	3720      	adds	r7, #32
 8011818:	46bd      	mov	sp, r7
 801181a:	bd80      	pop	{r7, pc}
 801181c:	080172e4 	.word	0x080172e4
 8011820:	08017a14 	.word	0x08017a14
 8011824:	08017338 	.word	0x08017338
 8011828:	0801790c 	.word	0x0801790c

0801182c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801182c:	b580      	push	{r7, lr}
 801182e:	b08a      	sub	sp, #40	@ 0x28
 8011830:	af04      	add	r7, sp, #16
 8011832:	60f8      	str	r0, [r7, #12]
 8011834:	60b9      	str	r1, [r7, #8]
 8011836:	607a      	str	r2, [r7, #4]
 8011838:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801183a:	68bb      	ldr	r3, [r7, #8]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d106      	bne.n	801184e <tcp_output_control_segment+0x22>
 8011840:	4b1c      	ldr	r3, [pc, #112]	@ (80118b4 <tcp_output_control_segment+0x88>)
 8011842:	f240 7287 	movw	r2, #1927	@ 0x787
 8011846:	491c      	ldr	r1, [pc, #112]	@ (80118b8 <tcp_output_control_segment+0x8c>)
 8011848:	481c      	ldr	r0, [pc, #112]	@ (80118bc <tcp_output_control_segment+0x90>)
 801184a:	f003 fa0b 	bl	8014c64 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801184e:	683a      	ldr	r2, [r7, #0]
 8011850:	6879      	ldr	r1, [r7, #4]
 8011852:	68f8      	ldr	r0, [r7, #12]
 8011854:	f7fe ff42 	bl	80106dc <tcp_route>
 8011858:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801185a:	693b      	ldr	r3, [r7, #16]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d102      	bne.n	8011866 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011860:	23fc      	movs	r3, #252	@ 0xfc
 8011862:	75fb      	strb	r3, [r7, #23]
 8011864:	e01c      	b.n	80118a0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d006      	beq.n	801187a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	7adb      	ldrb	r3, [r3, #11]
 8011870:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	7a9b      	ldrb	r3, [r3, #10]
 8011876:	757b      	strb	r3, [r7, #21]
 8011878:	e003      	b.n	8011882 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801187a:	23ff      	movs	r3, #255	@ 0xff
 801187c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801187e:	2300      	movs	r3, #0
 8011880:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011882:	7dba      	ldrb	r2, [r7, #22]
 8011884:	693b      	ldr	r3, [r7, #16]
 8011886:	9302      	str	r3, [sp, #8]
 8011888:	2306      	movs	r3, #6
 801188a:	9301      	str	r3, [sp, #4]
 801188c:	7d7b      	ldrb	r3, [r7, #21]
 801188e:	9300      	str	r3, [sp, #0]
 8011890:	4613      	mov	r3, r2
 8011892:	683a      	ldr	r2, [r7, #0]
 8011894:	6879      	ldr	r1, [r7, #4]
 8011896:	68b8      	ldr	r0, [r7, #8]
 8011898:	f001 ffa0 	bl	80137dc <ip4_output_if>
 801189c:	4603      	mov	r3, r0
 801189e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80118a0:	68b8      	ldr	r0, [r7, #8]
 80118a2:	f7fa fdd7 	bl	800c454 <pbuf_free>
  return err;
 80118a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80118aa:	4618      	mov	r0, r3
 80118ac:	3718      	adds	r7, #24
 80118ae:	46bd      	mov	sp, r7
 80118b0:	bd80      	pop	{r7, pc}
 80118b2:	bf00      	nop
 80118b4:	080172e4 	.word	0x080172e4
 80118b8:	08017a3c 	.word	0x08017a3c
 80118bc:	08017338 	.word	0x08017338

080118c0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80118c0:	b590      	push	{r4, r7, lr}
 80118c2:	b08b      	sub	sp, #44	@ 0x2c
 80118c4:	af04      	add	r7, sp, #16
 80118c6:	60f8      	str	r0, [r7, #12]
 80118c8:	60b9      	str	r1, [r7, #8]
 80118ca:	607a      	str	r2, [r7, #4]
 80118cc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80118ce:	683b      	ldr	r3, [r7, #0]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d106      	bne.n	80118e2 <tcp_rst+0x22>
 80118d4:	4b1f      	ldr	r3, [pc, #124]	@ (8011954 <tcp_rst+0x94>)
 80118d6:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80118da:	491f      	ldr	r1, [pc, #124]	@ (8011958 <tcp_rst+0x98>)
 80118dc:	481f      	ldr	r0, [pc, #124]	@ (801195c <tcp_rst+0x9c>)
 80118de:	f003 f9c1 	bl	8014c64 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80118e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d106      	bne.n	80118f6 <tcp_rst+0x36>
 80118e8:	4b1a      	ldr	r3, [pc, #104]	@ (8011954 <tcp_rst+0x94>)
 80118ea:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 80118ee:	491c      	ldr	r1, [pc, #112]	@ (8011960 <tcp_rst+0xa0>)
 80118f0:	481a      	ldr	r0, [pc, #104]	@ (801195c <tcp_rst+0x9c>)
 80118f2:	f003 f9b7 	bl	8014c64 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80118f6:	2300      	movs	r3, #0
 80118f8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80118fa:	f24d 0316 	movw	r3, #53270	@ 0xd016
 80118fe:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011900:	7dfb      	ldrb	r3, [r7, #23]
 8011902:	b29c      	uxth	r4, r3
 8011904:	68b8      	ldr	r0, [r7, #8]
 8011906:	f7f9 f9b8 	bl	800ac7a <lwip_htonl>
 801190a:	4602      	mov	r2, r0
 801190c:	8abb      	ldrh	r3, [r7, #20]
 801190e:	9303      	str	r3, [sp, #12]
 8011910:	2314      	movs	r3, #20
 8011912:	9302      	str	r3, [sp, #8]
 8011914:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8011916:	9301      	str	r3, [sp, #4]
 8011918:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801191a:	9300      	str	r3, [sp, #0]
 801191c:	4613      	mov	r3, r2
 801191e:	2200      	movs	r2, #0
 8011920:	4621      	mov	r1, r4
 8011922:	6878      	ldr	r0, [r7, #4]
 8011924:	f7ff fe94 	bl	8011650 <tcp_output_alloc_header_common>
 8011928:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801192a:	693b      	ldr	r3, [r7, #16]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d00c      	beq.n	801194a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011930:	7dfb      	ldrb	r3, [r7, #23]
 8011932:	2200      	movs	r2, #0
 8011934:	6939      	ldr	r1, [r7, #16]
 8011936:	68f8      	ldr	r0, [r7, #12]
 8011938:	f7ff ff3a 	bl	80117b0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801193c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801193e:	683a      	ldr	r2, [r7, #0]
 8011940:	6939      	ldr	r1, [r7, #16]
 8011942:	68f8      	ldr	r0, [r7, #12]
 8011944:	f7ff ff72 	bl	801182c <tcp_output_control_segment>
 8011948:	e000      	b.n	801194c <tcp_rst+0x8c>
    return;
 801194a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801194c:	371c      	adds	r7, #28
 801194e:	46bd      	mov	sp, r7
 8011950:	bd90      	pop	{r4, r7, pc}
 8011952:	bf00      	nop
 8011954:	080172e4 	.word	0x080172e4
 8011958:	08017a68 	.word	0x08017a68
 801195c:	08017338 	.word	0x08017338
 8011960:	08017a84 	.word	0x08017a84

08011964 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011964:	b590      	push	{r4, r7, lr}
 8011966:	b087      	sub	sp, #28
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801196c:	2300      	movs	r3, #0
 801196e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011970:	2300      	movs	r3, #0
 8011972:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d106      	bne.n	8011988 <tcp_send_empty_ack+0x24>
 801197a:	4b28      	ldr	r3, [pc, #160]	@ (8011a1c <tcp_send_empty_ack+0xb8>)
 801197c:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8011980:	4927      	ldr	r1, [pc, #156]	@ (8011a20 <tcp_send_empty_ack+0xbc>)
 8011982:	4828      	ldr	r0, [pc, #160]	@ (8011a24 <tcp_send_empty_ack+0xc0>)
 8011984:	f003 f96e 	bl	8014c64 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011988:	7dfb      	ldrb	r3, [r7, #23]
 801198a:	009b      	lsls	r3, r3, #2
 801198c:	b2db      	uxtb	r3, r3
 801198e:	f003 0304 	and.w	r3, r3, #4
 8011992:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011994:	7d7b      	ldrb	r3, [r7, #21]
 8011996:	b29c      	uxth	r4, r3
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801199c:	4618      	mov	r0, r3
 801199e:	f7f9 f96c 	bl	800ac7a <lwip_htonl>
 80119a2:	4603      	mov	r3, r0
 80119a4:	2200      	movs	r2, #0
 80119a6:	4621      	mov	r1, r4
 80119a8:	6878      	ldr	r0, [r7, #4]
 80119aa:	f7ff fec3 	bl	8011734 <tcp_output_alloc_header>
 80119ae:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80119b0:	693b      	ldr	r3, [r7, #16]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d109      	bne.n	80119ca <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	8b5b      	ldrh	r3, [r3, #26]
 80119ba:	f043 0303 	orr.w	r3, r3, #3
 80119be:	b29a      	uxth	r2, r3
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80119c4:	f06f 0301 	mvn.w	r3, #1
 80119c8:	e023      	b.n	8011a12 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80119ca:	7dbb      	ldrb	r3, [r7, #22]
 80119cc:	7dfa      	ldrb	r2, [r7, #23]
 80119ce:	6939      	ldr	r1, [r7, #16]
 80119d0:	6878      	ldr	r0, [r7, #4]
 80119d2:	f7ff feed 	bl	80117b0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80119d6:	687a      	ldr	r2, [r7, #4]
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	3304      	adds	r3, #4
 80119dc:	6939      	ldr	r1, [r7, #16]
 80119de:	6878      	ldr	r0, [r7, #4]
 80119e0:	f7ff ff24 	bl	801182c <tcp_output_control_segment>
 80119e4:	4603      	mov	r3, r0
 80119e6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80119e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d007      	beq.n	8011a00 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	8b5b      	ldrh	r3, [r3, #26]
 80119f4:	f043 0303 	orr.w	r3, r3, #3
 80119f8:	b29a      	uxth	r2, r3
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	835a      	strh	r2, [r3, #26]
 80119fe:	e006      	b.n	8011a0e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	8b5b      	ldrh	r3, [r3, #26]
 8011a04:	f023 0303 	bic.w	r3, r3, #3
 8011a08:	b29a      	uxth	r2, r3
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011a12:	4618      	mov	r0, r3
 8011a14:	371c      	adds	r7, #28
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bd90      	pop	{r4, r7, pc}
 8011a1a:	bf00      	nop
 8011a1c:	080172e4 	.word	0x080172e4
 8011a20:	08017aa0 	.word	0x08017aa0
 8011a24:	08017338 	.word	0x08017338

08011a28 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011a28:	b590      	push	{r4, r7, lr}
 8011a2a:	b087      	sub	sp, #28
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011a30:	2300      	movs	r3, #0
 8011a32:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d106      	bne.n	8011a48 <tcp_keepalive+0x20>
 8011a3a:	4b18      	ldr	r3, [pc, #96]	@ (8011a9c <tcp_keepalive+0x74>)
 8011a3c:	f640 0224 	movw	r2, #2084	@ 0x824
 8011a40:	4917      	ldr	r1, [pc, #92]	@ (8011aa0 <tcp_keepalive+0x78>)
 8011a42:	4818      	ldr	r0, [pc, #96]	@ (8011aa4 <tcp_keepalive+0x7c>)
 8011a44:	f003 f90e 	bl	8014c64 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011a48:	7dfb      	ldrb	r3, [r7, #23]
 8011a4a:	b29c      	uxth	r4, r3
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011a50:	3b01      	subs	r3, #1
 8011a52:	4618      	mov	r0, r3
 8011a54:	f7f9 f911 	bl	800ac7a <lwip_htonl>
 8011a58:	4603      	mov	r3, r0
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	4621      	mov	r1, r4
 8011a5e:	6878      	ldr	r0, [r7, #4]
 8011a60:	f7ff fe68 	bl	8011734 <tcp_output_alloc_header>
 8011a64:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011a66:	693b      	ldr	r3, [r7, #16]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d102      	bne.n	8011a72 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011a6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011a70:	e010      	b.n	8011a94 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011a72:	7dfb      	ldrb	r3, [r7, #23]
 8011a74:	2200      	movs	r2, #0
 8011a76:	6939      	ldr	r1, [r7, #16]
 8011a78:	6878      	ldr	r0, [r7, #4]
 8011a7a:	f7ff fe99 	bl	80117b0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011a7e:	687a      	ldr	r2, [r7, #4]
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	3304      	adds	r3, #4
 8011a84:	6939      	ldr	r1, [r7, #16]
 8011a86:	6878      	ldr	r0, [r7, #4]
 8011a88:	f7ff fed0 	bl	801182c <tcp_output_control_segment>
 8011a8c:	4603      	mov	r3, r0
 8011a8e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011a90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011a94:	4618      	mov	r0, r3
 8011a96:	371c      	adds	r7, #28
 8011a98:	46bd      	mov	sp, r7
 8011a9a:	bd90      	pop	{r4, r7, pc}
 8011a9c:	080172e4 	.word	0x080172e4
 8011aa0:	08017ac0 	.word	0x08017ac0
 8011aa4:	08017338 	.word	0x08017338

08011aa8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011aa8:	b590      	push	{r4, r7, lr}
 8011aaa:	b08b      	sub	sp, #44	@ 0x2c
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d106      	bne.n	8011aca <tcp_zero_window_probe+0x22>
 8011abc:	4b4c      	ldr	r3, [pc, #304]	@ (8011bf0 <tcp_zero_window_probe+0x148>)
 8011abe:	f640 024f 	movw	r2, #2127	@ 0x84f
 8011ac2:	494c      	ldr	r1, [pc, #304]	@ (8011bf4 <tcp_zero_window_probe+0x14c>)
 8011ac4:	484c      	ldr	r0, [pc, #304]	@ (8011bf8 <tcp_zero_window_probe+0x150>)
 8011ac6:	f003 f8cd 	bl	8014c64 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011ace:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011ad0:	6a3b      	ldr	r3, [r7, #32]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d101      	bne.n	8011ada <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	e086      	b.n	8011be8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8011ae0:	2bff      	cmp	r3, #255	@ 0xff
 8011ae2:	d007      	beq.n	8011af4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8011aea:	3301      	adds	r3, #1
 8011aec:	b2da      	uxtb	r2, r3
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011af4:	6a3b      	ldr	r3, [r7, #32]
 8011af6:	68db      	ldr	r3, [r3, #12]
 8011af8:	899b      	ldrh	r3, [r3, #12]
 8011afa:	b29b      	uxth	r3, r3
 8011afc:	4618      	mov	r0, r3
 8011afe:	f7f9 f8a7 	bl	800ac50 <lwip_htons>
 8011b02:	4603      	mov	r3, r0
 8011b04:	b2db      	uxtb	r3, r3
 8011b06:	f003 0301 	and.w	r3, r3, #1
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d005      	beq.n	8011b1a <tcp_zero_window_probe+0x72>
 8011b0e:	6a3b      	ldr	r3, [r7, #32]
 8011b10:	891b      	ldrh	r3, [r3, #8]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d101      	bne.n	8011b1a <tcp_zero_window_probe+0x72>
 8011b16:	2301      	movs	r3, #1
 8011b18:	e000      	b.n	8011b1c <tcp_zero_window_probe+0x74>
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011b1e:	7ffb      	ldrb	r3, [r7, #31]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	bf0c      	ite	eq
 8011b24:	2301      	moveq	r3, #1
 8011b26:	2300      	movne	r3, #0
 8011b28:	b2db      	uxtb	r3, r3
 8011b2a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011b30:	b299      	uxth	r1, r3
 8011b32:	6a3b      	ldr	r3, [r7, #32]
 8011b34:	68db      	ldr	r3, [r3, #12]
 8011b36:	685b      	ldr	r3, [r3, #4]
 8011b38:	8bba      	ldrh	r2, [r7, #28]
 8011b3a:	6878      	ldr	r0, [r7, #4]
 8011b3c:	f7ff fdfa 	bl	8011734 <tcp_output_alloc_header>
 8011b40:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011b42:	69bb      	ldr	r3, [r7, #24]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d102      	bne.n	8011b4e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011b48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011b4c:	e04c      	b.n	8011be8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011b4e:	69bb      	ldr	r3, [r7, #24]
 8011b50:	685b      	ldr	r3, [r3, #4]
 8011b52:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011b54:	7ffb      	ldrb	r3, [r7, #31]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d011      	beq.n	8011b7e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011b5a:	697b      	ldr	r3, [r7, #20]
 8011b5c:	899b      	ldrh	r3, [r3, #12]
 8011b5e:	b29b      	uxth	r3, r3
 8011b60:	b21b      	sxth	r3, r3
 8011b62:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011b66:	b21c      	sxth	r4, r3
 8011b68:	2011      	movs	r0, #17
 8011b6a:	f7f9 f871 	bl	800ac50 <lwip_htons>
 8011b6e:	4603      	mov	r3, r0
 8011b70:	b21b      	sxth	r3, r3
 8011b72:	4323      	orrs	r3, r4
 8011b74:	b21b      	sxth	r3, r3
 8011b76:	b29a      	uxth	r2, r3
 8011b78:	697b      	ldr	r3, [r7, #20]
 8011b7a:	819a      	strh	r2, [r3, #12]
 8011b7c:	e010      	b.n	8011ba0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011b7e:	69bb      	ldr	r3, [r7, #24]
 8011b80:	685b      	ldr	r3, [r3, #4]
 8011b82:	3314      	adds	r3, #20
 8011b84:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011b86:	6a3b      	ldr	r3, [r7, #32]
 8011b88:	6858      	ldr	r0, [r3, #4]
 8011b8a:	6a3b      	ldr	r3, [r7, #32]
 8011b8c:	685b      	ldr	r3, [r3, #4]
 8011b8e:	891a      	ldrh	r2, [r3, #8]
 8011b90:	6a3b      	ldr	r3, [r7, #32]
 8011b92:	891b      	ldrh	r3, [r3, #8]
 8011b94:	1ad3      	subs	r3, r2, r3
 8011b96:	b29b      	uxth	r3, r3
 8011b98:	2201      	movs	r2, #1
 8011b9a:	6939      	ldr	r1, [r7, #16]
 8011b9c:	f7fa fe50 	bl	800c840 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011ba0:	6a3b      	ldr	r3, [r7, #32]
 8011ba2:	68db      	ldr	r3, [r3, #12]
 8011ba4:	685b      	ldr	r3, [r3, #4]
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	f7f9 f867 	bl	800ac7a <lwip_htonl>
 8011bac:	4603      	mov	r3, r0
 8011bae:	3301      	adds	r3, #1
 8011bb0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	1ad3      	subs	r3, r2, r3
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	da02      	bge.n	8011bc4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	68fa      	ldr	r2, [r7, #12]
 8011bc2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011bc8:	2200      	movs	r2, #0
 8011bca:	69b9      	ldr	r1, [r7, #24]
 8011bcc:	6878      	ldr	r0, [r7, #4]
 8011bce:	f7ff fdef 	bl	80117b0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011bd2:	687a      	ldr	r2, [r7, #4]
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	3304      	adds	r3, #4
 8011bd8:	69b9      	ldr	r1, [r7, #24]
 8011bda:	6878      	ldr	r0, [r7, #4]
 8011bdc:	f7ff fe26 	bl	801182c <tcp_output_control_segment>
 8011be0:	4603      	mov	r3, r0
 8011be2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011be4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011be8:	4618      	mov	r0, r3
 8011bea:	372c      	adds	r7, #44	@ 0x2c
 8011bec:	46bd      	mov	sp, r7
 8011bee:	bd90      	pop	{r4, r7, pc}
 8011bf0:	080172e4 	.word	0x080172e4
 8011bf4:	08017adc 	.word	0x08017adc
 8011bf8:	08017338 	.word	0x08017338

08011bfc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b082      	sub	sp, #8
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011c04:	f7fa ff0a 	bl	800ca1c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011c08:	4b0a      	ldr	r3, [pc, #40]	@ (8011c34 <tcpip_tcp_timer+0x38>)
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d103      	bne.n	8011c18 <tcpip_tcp_timer+0x1c>
 8011c10:	4b09      	ldr	r3, [pc, #36]	@ (8011c38 <tcpip_tcp_timer+0x3c>)
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d005      	beq.n	8011c24 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011c18:	2200      	movs	r2, #0
 8011c1a:	4908      	ldr	r1, [pc, #32]	@ (8011c3c <tcpip_tcp_timer+0x40>)
 8011c1c:	20fa      	movs	r0, #250	@ 0xfa
 8011c1e:	f000 f8f3 	bl	8011e08 <sys_timeout>
 8011c22:	e003      	b.n	8011c2c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011c24:	4b06      	ldr	r3, [pc, #24]	@ (8011c40 <tcpip_tcp_timer+0x44>)
 8011c26:	2200      	movs	r2, #0
 8011c28:	601a      	str	r2, [r3, #0]
  }
}
 8011c2a:	bf00      	nop
 8011c2c:	bf00      	nop
 8011c2e:	3708      	adds	r7, #8
 8011c30:	46bd      	mov	sp, r7
 8011c32:	bd80      	pop	{r7, pc}
 8011c34:	20010318 	.word	0x20010318
 8011c38:	2001031c 	.word	0x2001031c
 8011c3c:	08011bfd 	.word	0x08011bfd
 8011c40:	20010364 	.word	0x20010364

08011c44 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011c48:	4b0a      	ldr	r3, [pc, #40]	@ (8011c74 <tcp_timer_needed+0x30>)
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d10f      	bne.n	8011c70 <tcp_timer_needed+0x2c>
 8011c50:	4b09      	ldr	r3, [pc, #36]	@ (8011c78 <tcp_timer_needed+0x34>)
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d103      	bne.n	8011c60 <tcp_timer_needed+0x1c>
 8011c58:	4b08      	ldr	r3, [pc, #32]	@ (8011c7c <tcp_timer_needed+0x38>)
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d007      	beq.n	8011c70 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011c60:	4b04      	ldr	r3, [pc, #16]	@ (8011c74 <tcp_timer_needed+0x30>)
 8011c62:	2201      	movs	r2, #1
 8011c64:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011c66:	2200      	movs	r2, #0
 8011c68:	4905      	ldr	r1, [pc, #20]	@ (8011c80 <tcp_timer_needed+0x3c>)
 8011c6a:	20fa      	movs	r0, #250	@ 0xfa
 8011c6c:	f000 f8cc 	bl	8011e08 <sys_timeout>
  }
}
 8011c70:	bf00      	nop
 8011c72:	bd80      	pop	{r7, pc}
 8011c74:	20010364 	.word	0x20010364
 8011c78:	20010318 	.word	0x20010318
 8011c7c:	2001031c 	.word	0x2001031c
 8011c80:	08011bfd 	.word	0x08011bfd

08011c84 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b086      	sub	sp, #24
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	60f8      	str	r0, [r7, #12]
 8011c8c:	60b9      	str	r1, [r7, #8]
 8011c8e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011c90:	200a      	movs	r0, #10
 8011c92:	f7f9 fcc1 	bl	800b618 <memp_malloc>
 8011c96:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011c98:	693b      	ldr	r3, [r7, #16]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d109      	bne.n	8011cb2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011c9e:	693b      	ldr	r3, [r7, #16]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d151      	bne.n	8011d48 <sys_timeout_abs+0xc4>
 8011ca4:	4b2a      	ldr	r3, [pc, #168]	@ (8011d50 <sys_timeout_abs+0xcc>)
 8011ca6:	22be      	movs	r2, #190	@ 0xbe
 8011ca8:	492a      	ldr	r1, [pc, #168]	@ (8011d54 <sys_timeout_abs+0xd0>)
 8011caa:	482b      	ldr	r0, [pc, #172]	@ (8011d58 <sys_timeout_abs+0xd4>)
 8011cac:	f002 ffda 	bl	8014c64 <iprintf>
    return;
 8011cb0:	e04a      	b.n	8011d48 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011cb2:	693b      	ldr	r3, [r7, #16]
 8011cb4:	2200      	movs	r2, #0
 8011cb6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011cb8:	693b      	ldr	r3, [r7, #16]
 8011cba:	68ba      	ldr	r2, [r7, #8]
 8011cbc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011cbe:	693b      	ldr	r3, [r7, #16]
 8011cc0:	687a      	ldr	r2, [r7, #4]
 8011cc2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011cc4:	693b      	ldr	r3, [r7, #16]
 8011cc6:	68fa      	ldr	r2, [r7, #12]
 8011cc8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011cca:	4b24      	ldr	r3, [pc, #144]	@ (8011d5c <sys_timeout_abs+0xd8>)
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d103      	bne.n	8011cda <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011cd2:	4a22      	ldr	r2, [pc, #136]	@ (8011d5c <sys_timeout_abs+0xd8>)
 8011cd4:	693b      	ldr	r3, [r7, #16]
 8011cd6:	6013      	str	r3, [r2, #0]
    return;
 8011cd8:	e037      	b.n	8011d4a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011cda:	693b      	ldr	r3, [r7, #16]
 8011cdc:	685a      	ldr	r2, [r3, #4]
 8011cde:	4b1f      	ldr	r3, [pc, #124]	@ (8011d5c <sys_timeout_abs+0xd8>)
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	685b      	ldr	r3, [r3, #4]
 8011ce4:	1ad3      	subs	r3, r2, r3
 8011ce6:	0fdb      	lsrs	r3, r3, #31
 8011ce8:	f003 0301 	and.w	r3, r3, #1
 8011cec:	b2db      	uxtb	r3, r3
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d007      	beq.n	8011d02 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8011d5c <sys_timeout_abs+0xd8>)
 8011cf4:	681a      	ldr	r2, [r3, #0]
 8011cf6:	693b      	ldr	r3, [r7, #16]
 8011cf8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011cfa:	4a18      	ldr	r2, [pc, #96]	@ (8011d5c <sys_timeout_abs+0xd8>)
 8011cfc:	693b      	ldr	r3, [r7, #16]
 8011cfe:	6013      	str	r3, [r2, #0]
 8011d00:	e023      	b.n	8011d4a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011d02:	4b16      	ldr	r3, [pc, #88]	@ (8011d5c <sys_timeout_abs+0xd8>)
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	617b      	str	r3, [r7, #20]
 8011d08:	e01a      	b.n	8011d40 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011d0a:	697b      	ldr	r3, [r7, #20]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d00b      	beq.n	8011d2a <sys_timeout_abs+0xa6>
 8011d12:	693b      	ldr	r3, [r7, #16]
 8011d14:	685a      	ldr	r2, [r3, #4]
 8011d16:	697b      	ldr	r3, [r7, #20]
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	685b      	ldr	r3, [r3, #4]
 8011d1c:	1ad3      	subs	r3, r2, r3
 8011d1e:	0fdb      	lsrs	r3, r3, #31
 8011d20:	f003 0301 	and.w	r3, r3, #1
 8011d24:	b2db      	uxtb	r3, r3
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d007      	beq.n	8011d3a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011d2a:	697b      	ldr	r3, [r7, #20]
 8011d2c:	681a      	ldr	r2, [r3, #0]
 8011d2e:	693b      	ldr	r3, [r7, #16]
 8011d30:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011d32:	697b      	ldr	r3, [r7, #20]
 8011d34:	693a      	ldr	r2, [r7, #16]
 8011d36:	601a      	str	r2, [r3, #0]
        break;
 8011d38:	e007      	b.n	8011d4a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011d3a:	697b      	ldr	r3, [r7, #20]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	617b      	str	r3, [r7, #20]
 8011d40:	697b      	ldr	r3, [r7, #20]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d1e1      	bne.n	8011d0a <sys_timeout_abs+0x86>
 8011d46:	e000      	b.n	8011d4a <sys_timeout_abs+0xc6>
    return;
 8011d48:	bf00      	nop
      }
    }
  }
}
 8011d4a:	3718      	adds	r7, #24
 8011d4c:	46bd      	mov	sp, r7
 8011d4e:	bd80      	pop	{r7, pc}
 8011d50:	08017b00 	.word	0x08017b00
 8011d54:	08017b34 	.word	0x08017b34
 8011d58:	08017b74 	.word	0x08017b74
 8011d5c:	2001035c 	.word	0x2001035c

08011d60 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	b086      	sub	sp, #24
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011d6c:	697b      	ldr	r3, [r7, #20]
 8011d6e:	685b      	ldr	r3, [r3, #4]
 8011d70:	4798      	blx	r3

  now = sys_now();
 8011d72:	f7f5 fb37 	bl	80073e4 <sys_now>
 8011d76:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011d78:	697b      	ldr	r3, [r7, #20]
 8011d7a:	681a      	ldr	r2, [r3, #0]
 8011d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8011dbc <lwip_cyclic_timer+0x5c>)
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	4413      	add	r3, r2
 8011d82:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011d84:	68fa      	ldr	r2, [r7, #12]
 8011d86:	693b      	ldr	r3, [r7, #16]
 8011d88:	1ad3      	subs	r3, r2, r3
 8011d8a:	0fdb      	lsrs	r3, r3, #31
 8011d8c:	f003 0301 	and.w	r3, r3, #1
 8011d90:	b2db      	uxtb	r3, r3
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d009      	beq.n	8011daa <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011d96:	697b      	ldr	r3, [r7, #20]
 8011d98:	681a      	ldr	r2, [r3, #0]
 8011d9a:	693b      	ldr	r3, [r7, #16]
 8011d9c:	4413      	add	r3, r2
 8011d9e:	687a      	ldr	r2, [r7, #4]
 8011da0:	4907      	ldr	r1, [pc, #28]	@ (8011dc0 <lwip_cyclic_timer+0x60>)
 8011da2:	4618      	mov	r0, r3
 8011da4:	f7ff ff6e 	bl	8011c84 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011da8:	e004      	b.n	8011db4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011daa:	687a      	ldr	r2, [r7, #4]
 8011dac:	4904      	ldr	r1, [pc, #16]	@ (8011dc0 <lwip_cyclic_timer+0x60>)
 8011dae:	68f8      	ldr	r0, [r7, #12]
 8011db0:	f7ff ff68 	bl	8011c84 <sys_timeout_abs>
}
 8011db4:	bf00      	nop
 8011db6:	3718      	adds	r7, #24
 8011db8:	46bd      	mov	sp, r7
 8011dba:	bd80      	pop	{r7, pc}
 8011dbc:	20010360 	.word	0x20010360
 8011dc0:	08011d61 	.word	0x08011d61

08011dc4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b082      	sub	sp, #8
 8011dc8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011dca:	2301      	movs	r3, #1
 8011dcc:	607b      	str	r3, [r7, #4]
 8011dce:	e00e      	b.n	8011dee <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011dd0:	4a0b      	ldr	r2, [pc, #44]	@ (8011e00 <sys_timeouts_init+0x3c>)
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	00db      	lsls	r3, r3, #3
 8011ddc:	4a08      	ldr	r2, [pc, #32]	@ (8011e00 <sys_timeouts_init+0x3c>)
 8011dde:	4413      	add	r3, r2
 8011de0:	461a      	mov	r2, r3
 8011de2:	4908      	ldr	r1, [pc, #32]	@ (8011e04 <sys_timeouts_init+0x40>)
 8011de4:	f000 f810 	bl	8011e08 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	3301      	adds	r3, #1
 8011dec:	607b      	str	r3, [r7, #4]
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	2b02      	cmp	r3, #2
 8011df2:	d9ed      	bls.n	8011dd0 <sys_timeouts_init+0xc>
  }
}
 8011df4:	bf00      	nop
 8011df6:	bf00      	nop
 8011df8:	3708      	adds	r7, #8
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	bd80      	pop	{r7, pc}
 8011dfe:	bf00      	nop
 8011e00:	0801872c 	.word	0x0801872c
 8011e04:	08011d61 	.word	0x08011d61

08011e08 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011e08:	b580      	push	{r7, lr}
 8011e0a:	b086      	sub	sp, #24
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	60f8      	str	r0, [r7, #12]
 8011e10:	60b9      	str	r1, [r7, #8]
 8011e12:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011e1a:	d306      	bcc.n	8011e2a <sys_timeout+0x22>
 8011e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8011e48 <sys_timeout+0x40>)
 8011e1e:	f240 1229 	movw	r2, #297	@ 0x129
 8011e22:	490a      	ldr	r1, [pc, #40]	@ (8011e4c <sys_timeout+0x44>)
 8011e24:	480a      	ldr	r0, [pc, #40]	@ (8011e50 <sys_timeout+0x48>)
 8011e26:	f002 ff1d 	bl	8014c64 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011e2a:	f7f5 fadb 	bl	80073e4 <sys_now>
 8011e2e:	4602      	mov	r2, r0
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	4413      	add	r3, r2
 8011e34:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011e36:	687a      	ldr	r2, [r7, #4]
 8011e38:	68b9      	ldr	r1, [r7, #8]
 8011e3a:	6978      	ldr	r0, [r7, #20]
 8011e3c:	f7ff ff22 	bl	8011c84 <sys_timeout_abs>
#endif
}
 8011e40:	bf00      	nop
 8011e42:	3718      	adds	r7, #24
 8011e44:	46bd      	mov	sp, r7
 8011e46:	bd80      	pop	{r7, pc}
 8011e48:	08017b00 	.word	0x08017b00
 8011e4c:	08017b9c 	.word	0x08017b9c
 8011e50:	08017b74 	.word	0x08017b74

08011e54 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b084      	sub	sp, #16
 8011e58:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8011e5a:	f7f5 fac3 	bl	80073e4 <sys_now>
 8011e5e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8011e60:	4b17      	ldr	r3, [pc, #92]	@ (8011ec0 <sys_check_timeouts+0x6c>)
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8011e66:	68bb      	ldr	r3, [r7, #8]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d022      	beq.n	8011eb2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011e6c:	68bb      	ldr	r3, [r7, #8]
 8011e6e:	685b      	ldr	r3, [r3, #4]
 8011e70:	68fa      	ldr	r2, [r7, #12]
 8011e72:	1ad3      	subs	r3, r2, r3
 8011e74:	0fdb      	lsrs	r3, r3, #31
 8011e76:	f003 0301 	and.w	r3, r3, #1
 8011e7a:	b2db      	uxtb	r3, r3
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d11a      	bne.n	8011eb6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011e80:	68bb      	ldr	r3, [r7, #8]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	4a0e      	ldr	r2, [pc, #56]	@ (8011ec0 <sys_check_timeouts+0x6c>)
 8011e86:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8011e88:	68bb      	ldr	r3, [r7, #8]
 8011e8a:	689b      	ldr	r3, [r3, #8]
 8011e8c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011e8e:	68bb      	ldr	r3, [r7, #8]
 8011e90:	68db      	ldr	r3, [r3, #12]
 8011e92:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011e94:	68bb      	ldr	r3, [r7, #8]
 8011e96:	685b      	ldr	r3, [r3, #4]
 8011e98:	4a0a      	ldr	r2, [pc, #40]	@ (8011ec4 <sys_check_timeouts+0x70>)
 8011e9a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011e9c:	68b9      	ldr	r1, [r7, #8]
 8011e9e:	200a      	movs	r0, #10
 8011ea0:	f7f9 fc30 	bl	800b704 <memp_free>
    if (handler != NULL) {
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d0da      	beq.n	8011e60 <sys_check_timeouts+0xc>
      handler(arg);
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	6838      	ldr	r0, [r7, #0]
 8011eae:	4798      	blx	r3
  do {
 8011eb0:	e7d6      	b.n	8011e60 <sys_check_timeouts+0xc>
      return;
 8011eb2:	bf00      	nop
 8011eb4:	e000      	b.n	8011eb8 <sys_check_timeouts+0x64>
      return;
 8011eb6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011eb8:	3710      	adds	r7, #16
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	bd80      	pop	{r7, pc}
 8011ebe:	bf00      	nop
 8011ec0:	2001035c 	.word	0x2001035c
 8011ec4:	20010360 	.word	0x20010360

08011ec8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8011ec8:	b580      	push	{r7, lr}
 8011eca:	b082      	sub	sp, #8
 8011ecc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8011ece:	4b16      	ldr	r3, [pc, #88]	@ (8011f28 <sys_timeouts_sleeptime+0x60>)
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d102      	bne.n	8011edc <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8011ed6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011eda:	e020      	b.n	8011f1e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8011edc:	f7f5 fa82 	bl	80073e4 <sys_now>
 8011ee0:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8011ee2:	4b11      	ldr	r3, [pc, #68]	@ (8011f28 <sys_timeouts_sleeptime+0x60>)
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	685a      	ldr	r2, [r3, #4]
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	1ad3      	subs	r3, r2, r3
 8011eec:	0fdb      	lsrs	r3, r3, #31
 8011eee:	f003 0301 	and.w	r3, r3, #1
 8011ef2:	b2db      	uxtb	r3, r3
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d001      	beq.n	8011efc <sys_timeouts_sleeptime+0x34>
    return 0;
 8011ef8:	2300      	movs	r3, #0
 8011efa:	e010      	b.n	8011f1e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8011efc:	4b0a      	ldr	r3, [pc, #40]	@ (8011f28 <sys_timeouts_sleeptime+0x60>)
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	685a      	ldr	r2, [r3, #4]
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	1ad3      	subs	r3, r2, r3
 8011f06:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	da06      	bge.n	8011f1c <sys_timeouts_sleeptime+0x54>
 8011f0e:	4b07      	ldr	r3, [pc, #28]	@ (8011f2c <sys_timeouts_sleeptime+0x64>)
 8011f10:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8011f14:	4906      	ldr	r1, [pc, #24]	@ (8011f30 <sys_timeouts_sleeptime+0x68>)
 8011f16:	4807      	ldr	r0, [pc, #28]	@ (8011f34 <sys_timeouts_sleeptime+0x6c>)
 8011f18:	f002 fea4 	bl	8014c64 <iprintf>
    return ret;
 8011f1c:	683b      	ldr	r3, [r7, #0]
  }
}
 8011f1e:	4618      	mov	r0, r3
 8011f20:	3708      	adds	r7, #8
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bd80      	pop	{r7, pc}
 8011f26:	bf00      	nop
 8011f28:	2001035c 	.word	0x2001035c
 8011f2c:	08017b00 	.word	0x08017b00
 8011f30:	08017bd4 	.word	0x08017bd4
 8011f34:	08017b74 	.word	0x08017b74

08011f38 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011f3c:	f002 fd92 	bl	8014a64 <rand>
 8011f40:	4603      	mov	r3, r0
 8011f42:	b29b      	uxth	r3, r3
 8011f44:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011f48:	b29b      	uxth	r3, r3
 8011f4a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8011f4e:	b29a      	uxth	r2, r3
 8011f50:	4b01      	ldr	r3, [pc, #4]	@ (8011f58 <udp_init+0x20>)
 8011f52:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011f54:	bf00      	nop
 8011f56:	bd80      	pop	{r7, pc}
 8011f58:	2000002c 	.word	0x2000002c

08011f5c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b084      	sub	sp, #16
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	60f8      	str	r0, [r7, #12]
 8011f64:	60b9      	str	r1, [r7, #8]
 8011f66:	4613      	mov	r3, r2
 8011f68:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d105      	bne.n	8011f7c <udp_input_local_match+0x20>
 8011f70:	4b27      	ldr	r3, [pc, #156]	@ (8012010 <udp_input_local_match+0xb4>)
 8011f72:	2287      	movs	r2, #135	@ 0x87
 8011f74:	4927      	ldr	r1, [pc, #156]	@ (8012014 <udp_input_local_match+0xb8>)
 8011f76:	4828      	ldr	r0, [pc, #160]	@ (8012018 <udp_input_local_match+0xbc>)
 8011f78:	f002 fe74 	bl	8014c64 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011f7c:	68bb      	ldr	r3, [r7, #8]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d105      	bne.n	8011f8e <udp_input_local_match+0x32>
 8011f82:	4b23      	ldr	r3, [pc, #140]	@ (8012010 <udp_input_local_match+0xb4>)
 8011f84:	2288      	movs	r2, #136	@ 0x88
 8011f86:	4925      	ldr	r1, [pc, #148]	@ (801201c <udp_input_local_match+0xc0>)
 8011f88:	4823      	ldr	r0, [pc, #140]	@ (8012018 <udp_input_local_match+0xbc>)
 8011f8a:	f002 fe6b 	bl	8014c64 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	7a1b      	ldrb	r3, [r3, #8]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d00b      	beq.n	8011fae <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	7a1a      	ldrb	r2, [r3, #8]
 8011f9a:	4b21      	ldr	r3, [pc, #132]	@ (8012020 <udp_input_local_match+0xc4>)
 8011f9c:	685b      	ldr	r3, [r3, #4]
 8011f9e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011fa2:	3301      	adds	r3, #1
 8011fa4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011fa6:	429a      	cmp	r2, r3
 8011fa8:	d001      	beq.n	8011fae <udp_input_local_match+0x52>
    return 0;
 8011faa:	2300      	movs	r3, #0
 8011fac:	e02b      	b.n	8012006 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011fae:	79fb      	ldrb	r3, [r7, #7]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d018      	beq.n	8011fe6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d013      	beq.n	8011fe2 <udp_input_local_match+0x86>
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d00f      	beq.n	8011fe2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011fc2:	4b17      	ldr	r3, [pc, #92]	@ (8012020 <udp_input_local_match+0xc4>)
 8011fc4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011fc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011fca:	d00a      	beq.n	8011fe2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	681a      	ldr	r2, [r3, #0]
 8011fd0:	4b13      	ldr	r3, [pc, #76]	@ (8012020 <udp_input_local_match+0xc4>)
 8011fd2:	695b      	ldr	r3, [r3, #20]
 8011fd4:	405a      	eors	r2, r3
 8011fd6:	68bb      	ldr	r3, [r7, #8]
 8011fd8:	3308      	adds	r3, #8
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d110      	bne.n	8012004 <udp_input_local_match+0xa8>
          return 1;
 8011fe2:	2301      	movs	r3, #1
 8011fe4:	e00f      	b.n	8012006 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d009      	beq.n	8012000 <udp_input_local_match+0xa4>
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d005      	beq.n	8012000 <udp_input_local_match+0xa4>
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	681a      	ldr	r2, [r3, #0]
 8011ff8:	4b09      	ldr	r3, [pc, #36]	@ (8012020 <udp_input_local_match+0xc4>)
 8011ffa:	695b      	ldr	r3, [r3, #20]
 8011ffc:	429a      	cmp	r2, r3
 8011ffe:	d101      	bne.n	8012004 <udp_input_local_match+0xa8>
        return 1;
 8012000:	2301      	movs	r3, #1
 8012002:	e000      	b.n	8012006 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012004:	2300      	movs	r3, #0
}
 8012006:	4618      	mov	r0, r3
 8012008:	3710      	adds	r7, #16
 801200a:	46bd      	mov	sp, r7
 801200c:	bd80      	pop	{r7, pc}
 801200e:	bf00      	nop
 8012010:	08017be8 	.word	0x08017be8
 8012014:	08017c18 	.word	0x08017c18
 8012018:	08017c3c 	.word	0x08017c3c
 801201c:	08017c64 	.word	0x08017c64
 8012020:	2000984c 	.word	0x2000984c

08012024 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012024:	b590      	push	{r4, r7, lr}
 8012026:	b08d      	sub	sp, #52	@ 0x34
 8012028:	af02      	add	r7, sp, #8
 801202a:	6078      	str	r0, [r7, #4]
 801202c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801202e:	2300      	movs	r3, #0
 8012030:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d105      	bne.n	8012044 <udp_input+0x20>
 8012038:	4b7c      	ldr	r3, [pc, #496]	@ (801222c <udp_input+0x208>)
 801203a:	22cf      	movs	r2, #207	@ 0xcf
 801203c:	497c      	ldr	r1, [pc, #496]	@ (8012230 <udp_input+0x20c>)
 801203e:	487d      	ldr	r0, [pc, #500]	@ (8012234 <udp_input+0x210>)
 8012040:	f002 fe10 	bl	8014c64 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012044:	683b      	ldr	r3, [r7, #0]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d105      	bne.n	8012056 <udp_input+0x32>
 801204a:	4b78      	ldr	r3, [pc, #480]	@ (801222c <udp_input+0x208>)
 801204c:	22d0      	movs	r2, #208	@ 0xd0
 801204e:	497a      	ldr	r1, [pc, #488]	@ (8012238 <udp_input+0x214>)
 8012050:	4878      	ldr	r0, [pc, #480]	@ (8012234 <udp_input+0x210>)
 8012052:	f002 fe07 	bl	8014c64 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	895b      	ldrh	r3, [r3, #10]
 801205a:	2b07      	cmp	r3, #7
 801205c:	d803      	bhi.n	8012066 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801205e:	6878      	ldr	r0, [r7, #4]
 8012060:	f7fa f9f8 	bl	800c454 <pbuf_free>
    goto end;
 8012064:	e0de      	b.n	8012224 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	685b      	ldr	r3, [r3, #4]
 801206a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801206c:	4b73      	ldr	r3, [pc, #460]	@ (801223c <udp_input+0x218>)
 801206e:	695b      	ldr	r3, [r3, #20]
 8012070:	4a72      	ldr	r2, [pc, #456]	@ (801223c <udp_input+0x218>)
 8012072:	6812      	ldr	r2, [r2, #0]
 8012074:	4611      	mov	r1, r2
 8012076:	4618      	mov	r0, r3
 8012078:	f001 fc88 	bl	801398c <ip4_addr_isbroadcast_u32>
 801207c:	4603      	mov	r3, r0
 801207e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012080:	697b      	ldr	r3, [r7, #20]
 8012082:	881b      	ldrh	r3, [r3, #0]
 8012084:	b29b      	uxth	r3, r3
 8012086:	4618      	mov	r0, r3
 8012088:	f7f8 fde2 	bl	800ac50 <lwip_htons>
 801208c:	4603      	mov	r3, r0
 801208e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012090:	697b      	ldr	r3, [r7, #20]
 8012092:	885b      	ldrh	r3, [r3, #2]
 8012094:	b29b      	uxth	r3, r3
 8012096:	4618      	mov	r0, r3
 8012098:	f7f8 fdda 	bl	800ac50 <lwip_htons>
 801209c:	4603      	mov	r3, r0
 801209e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80120a0:	2300      	movs	r3, #0
 80120a2:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 80120a4:	2300      	movs	r3, #0
 80120a6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80120a8:	2300      	movs	r3, #0
 80120aa:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80120ac:	4b64      	ldr	r3, [pc, #400]	@ (8012240 <udp_input+0x21c>)
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80120b2:	e054      	b.n	801215e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80120b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120b6:	8a5b      	ldrh	r3, [r3, #18]
 80120b8:	89fa      	ldrh	r2, [r7, #14]
 80120ba:	429a      	cmp	r2, r3
 80120bc:	d14a      	bne.n	8012154 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80120be:	7cfb      	ldrb	r3, [r7, #19]
 80120c0:	461a      	mov	r2, r3
 80120c2:	6839      	ldr	r1, [r7, #0]
 80120c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80120c6:	f7ff ff49 	bl	8011f5c <udp_input_local_match>
 80120ca:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d041      	beq.n	8012154 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80120d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120d2:	7c1b      	ldrb	r3, [r3, #16]
 80120d4:	f003 0304 	and.w	r3, r3, #4
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d11d      	bne.n	8012118 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80120dc:	69fb      	ldr	r3, [r7, #28]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d102      	bne.n	80120e8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80120e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120e4:	61fb      	str	r3, [r7, #28]
 80120e6:	e017      	b.n	8012118 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80120e8:	7cfb      	ldrb	r3, [r7, #19]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d014      	beq.n	8012118 <udp_input+0xf4>
 80120ee:	4b53      	ldr	r3, [pc, #332]	@ (801223c <udp_input+0x218>)
 80120f0:	695b      	ldr	r3, [r3, #20]
 80120f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80120f6:	d10f      	bne.n	8012118 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80120f8:	69fb      	ldr	r3, [r7, #28]
 80120fa:	681a      	ldr	r2, [r3, #0]
 80120fc:	683b      	ldr	r3, [r7, #0]
 80120fe:	3304      	adds	r3, #4
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	429a      	cmp	r2, r3
 8012104:	d008      	beq.n	8012118 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012108:	681a      	ldr	r2, [r3, #0]
 801210a:	683b      	ldr	r3, [r7, #0]
 801210c:	3304      	adds	r3, #4
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	429a      	cmp	r2, r3
 8012112:	d101      	bne.n	8012118 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012116:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801211a:	8a9b      	ldrh	r3, [r3, #20]
 801211c:	8a3a      	ldrh	r2, [r7, #16]
 801211e:	429a      	cmp	r2, r3
 8012120:	d118      	bne.n	8012154 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012124:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012126:	2b00      	cmp	r3, #0
 8012128:	d005      	beq.n	8012136 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801212a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801212c:	685a      	ldr	r2, [r3, #4]
 801212e:	4b43      	ldr	r3, [pc, #268]	@ (801223c <udp_input+0x218>)
 8012130:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012132:	429a      	cmp	r2, r3
 8012134:	d10e      	bne.n	8012154 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012136:	6a3b      	ldr	r3, [r7, #32]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d014      	beq.n	8012166 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801213c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801213e:	68da      	ldr	r2, [r3, #12]
 8012140:	6a3b      	ldr	r3, [r7, #32]
 8012142:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012144:	4b3e      	ldr	r3, [pc, #248]	@ (8012240 <udp_input+0x21c>)
 8012146:	681a      	ldr	r2, [r3, #0]
 8012148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801214a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801214c:	4a3c      	ldr	r2, [pc, #240]	@ (8012240 <udp_input+0x21c>)
 801214e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012150:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012152:	e008      	b.n	8012166 <udp_input+0x142>
      }
    }

    prev = pcb;
 8012154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012156:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801215a:	68db      	ldr	r3, [r3, #12]
 801215c:	627b      	str	r3, [r7, #36]	@ 0x24
 801215e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012160:	2b00      	cmp	r3, #0
 8012162:	d1a7      	bne.n	80120b4 <udp_input+0x90>
 8012164:	e000      	b.n	8012168 <udp_input+0x144>
        break;
 8012166:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801216a:	2b00      	cmp	r3, #0
 801216c:	d101      	bne.n	8012172 <udp_input+0x14e>
    pcb = uncon_pcb;
 801216e:	69fb      	ldr	r3, [r7, #28]
 8012170:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012174:	2b00      	cmp	r3, #0
 8012176:	d002      	beq.n	801217e <udp_input+0x15a>
    for_us = 1;
 8012178:	2301      	movs	r3, #1
 801217a:	76fb      	strb	r3, [r7, #27]
 801217c:	e00a      	b.n	8012194 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801217e:	683b      	ldr	r3, [r7, #0]
 8012180:	3304      	adds	r3, #4
 8012182:	681a      	ldr	r2, [r3, #0]
 8012184:	4b2d      	ldr	r3, [pc, #180]	@ (801223c <udp_input+0x218>)
 8012186:	695b      	ldr	r3, [r3, #20]
 8012188:	429a      	cmp	r2, r3
 801218a:	bf0c      	ite	eq
 801218c:	2301      	moveq	r3, #1
 801218e:	2300      	movne	r3, #0
 8012190:	b2db      	uxtb	r3, r3
 8012192:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012194:	7efb      	ldrb	r3, [r7, #27]
 8012196:	2b00      	cmp	r3, #0
 8012198:	d041      	beq.n	801221e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801219a:	2108      	movs	r1, #8
 801219c:	6878      	ldr	r0, [r7, #4]
 801219e:	f7fa f8d3 	bl	800c348 <pbuf_remove_header>
 80121a2:	4603      	mov	r3, r0
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d00a      	beq.n	80121be <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80121a8:	4b20      	ldr	r3, [pc, #128]	@ (801222c <udp_input+0x208>)
 80121aa:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80121ae:	4925      	ldr	r1, [pc, #148]	@ (8012244 <udp_input+0x220>)
 80121b0:	4820      	ldr	r0, [pc, #128]	@ (8012234 <udp_input+0x210>)
 80121b2:	f002 fd57 	bl	8014c64 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80121b6:	6878      	ldr	r0, [r7, #4]
 80121b8:	f7fa f94c 	bl	800c454 <pbuf_free>
      goto end;
 80121bc:	e032      	b.n	8012224 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80121be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d012      	beq.n	80121ea <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80121c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121c6:	699b      	ldr	r3, [r3, #24]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d00a      	beq.n	80121e2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80121cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121ce:	699c      	ldr	r4, [r3, #24]
 80121d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121d2:	69d8      	ldr	r0, [r3, #28]
 80121d4:	8a3b      	ldrh	r3, [r7, #16]
 80121d6:	9300      	str	r3, [sp, #0]
 80121d8:	4b1b      	ldr	r3, [pc, #108]	@ (8012248 <udp_input+0x224>)
 80121da:	687a      	ldr	r2, [r7, #4]
 80121dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80121de:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80121e0:	e021      	b.n	8012226 <udp_input+0x202>
        pbuf_free(p);
 80121e2:	6878      	ldr	r0, [r7, #4]
 80121e4:	f7fa f936 	bl	800c454 <pbuf_free>
        goto end;
 80121e8:	e01c      	b.n	8012224 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80121ea:	7cfb      	ldrb	r3, [r7, #19]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d112      	bne.n	8012216 <udp_input+0x1f2>
 80121f0:	4b12      	ldr	r3, [pc, #72]	@ (801223c <udp_input+0x218>)
 80121f2:	695b      	ldr	r3, [r3, #20]
 80121f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80121f8:	2be0      	cmp	r3, #224	@ 0xe0
 80121fa:	d00c      	beq.n	8012216 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80121fc:	4b0f      	ldr	r3, [pc, #60]	@ (801223c <udp_input+0x218>)
 80121fe:	899b      	ldrh	r3, [r3, #12]
 8012200:	3308      	adds	r3, #8
 8012202:	b29b      	uxth	r3, r3
 8012204:	b21b      	sxth	r3, r3
 8012206:	4619      	mov	r1, r3
 8012208:	6878      	ldr	r0, [r7, #4]
 801220a:	f7fa f910 	bl	800c42e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801220e:	2103      	movs	r1, #3
 8012210:	6878      	ldr	r0, [r7, #4]
 8012212:	f001 f89b 	bl	801334c <icmp_dest_unreach>
      pbuf_free(p);
 8012216:	6878      	ldr	r0, [r7, #4]
 8012218:	f7fa f91c 	bl	800c454 <pbuf_free>
  return;
 801221c:	e003      	b.n	8012226 <udp_input+0x202>
    pbuf_free(p);
 801221e:	6878      	ldr	r0, [r7, #4]
 8012220:	f7fa f918 	bl	800c454 <pbuf_free>
  return;
 8012224:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012226:	372c      	adds	r7, #44	@ 0x2c
 8012228:	46bd      	mov	sp, r7
 801222a:	bd90      	pop	{r4, r7, pc}
 801222c:	08017be8 	.word	0x08017be8
 8012230:	08017c8c 	.word	0x08017c8c
 8012234:	08017c3c 	.word	0x08017c3c
 8012238:	08017ca4 	.word	0x08017ca4
 801223c:	2000984c 	.word	0x2000984c
 8012240:	20010368 	.word	0x20010368
 8012244:	08017cc0 	.word	0x08017cc0
 8012248:	2000985c 	.word	0x2000985c

0801224c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801224c:	b480      	push	{r7}
 801224e:	b085      	sub	sp, #20
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
 8012254:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d01e      	beq.n	801229a <udp_netif_ip_addr_changed+0x4e>
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d01a      	beq.n	801229a <udp_netif_ip_addr_changed+0x4e>
 8012264:	683b      	ldr	r3, [r7, #0]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d017      	beq.n	801229a <udp_netif_ip_addr_changed+0x4e>
 801226a:	683b      	ldr	r3, [r7, #0]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d013      	beq.n	801229a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012272:	4b0d      	ldr	r3, [pc, #52]	@ (80122a8 <udp_netif_ip_addr_changed+0x5c>)
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	60fb      	str	r3, [r7, #12]
 8012278:	e00c      	b.n	8012294 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	681a      	ldr	r2, [r3, #0]
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	429a      	cmp	r2, r3
 8012284:	d103      	bne.n	801228e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012286:	683b      	ldr	r3, [r7, #0]
 8012288:	681a      	ldr	r2, [r3, #0]
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	68db      	ldr	r3, [r3, #12]
 8012292:	60fb      	str	r3, [r7, #12]
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d1ef      	bne.n	801227a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801229a:	bf00      	nop
 801229c:	3714      	adds	r7, #20
 801229e:	46bd      	mov	sp, r7
 80122a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a4:	4770      	bx	lr
 80122a6:	bf00      	nop
 80122a8:	20010368 	.word	0x20010368

080122ac <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80122ac:	b580      	push	{r7, lr}
 80122ae:	b082      	sub	sp, #8
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80122b4:	4915      	ldr	r1, [pc, #84]	@ (801230c <etharp_free_entry+0x60>)
 80122b6:	687a      	ldr	r2, [r7, #4]
 80122b8:	4613      	mov	r3, r2
 80122ba:	005b      	lsls	r3, r3, #1
 80122bc:	4413      	add	r3, r2
 80122be:	00db      	lsls	r3, r3, #3
 80122c0:	440b      	add	r3, r1
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d013      	beq.n	80122f0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80122c8:	4910      	ldr	r1, [pc, #64]	@ (801230c <etharp_free_entry+0x60>)
 80122ca:	687a      	ldr	r2, [r7, #4]
 80122cc:	4613      	mov	r3, r2
 80122ce:	005b      	lsls	r3, r3, #1
 80122d0:	4413      	add	r3, r2
 80122d2:	00db      	lsls	r3, r3, #3
 80122d4:	440b      	add	r3, r1
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	4618      	mov	r0, r3
 80122da:	f7fa f8bb 	bl	800c454 <pbuf_free>
    arp_table[i].q = NULL;
 80122de:	490b      	ldr	r1, [pc, #44]	@ (801230c <etharp_free_entry+0x60>)
 80122e0:	687a      	ldr	r2, [r7, #4]
 80122e2:	4613      	mov	r3, r2
 80122e4:	005b      	lsls	r3, r3, #1
 80122e6:	4413      	add	r3, r2
 80122e8:	00db      	lsls	r3, r3, #3
 80122ea:	440b      	add	r3, r1
 80122ec:	2200      	movs	r2, #0
 80122ee:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80122f0:	4906      	ldr	r1, [pc, #24]	@ (801230c <etharp_free_entry+0x60>)
 80122f2:	687a      	ldr	r2, [r7, #4]
 80122f4:	4613      	mov	r3, r2
 80122f6:	005b      	lsls	r3, r3, #1
 80122f8:	4413      	add	r3, r2
 80122fa:	00db      	lsls	r3, r3, #3
 80122fc:	440b      	add	r3, r1
 80122fe:	3314      	adds	r3, #20
 8012300:	2200      	movs	r2, #0
 8012302:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8012304:	bf00      	nop
 8012306:	3708      	adds	r7, #8
 8012308:	46bd      	mov	sp, r7
 801230a:	bd80      	pop	{r7, pc}
 801230c:	2001036c 	.word	0x2001036c

08012310 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012310:	b580      	push	{r7, lr}
 8012312:	b082      	sub	sp, #8
 8012314:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012316:	2300      	movs	r3, #0
 8012318:	607b      	str	r3, [r7, #4]
 801231a:	e096      	b.n	801244a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801231c:	494f      	ldr	r1, [pc, #316]	@ (801245c <etharp_tmr+0x14c>)
 801231e:	687a      	ldr	r2, [r7, #4]
 8012320:	4613      	mov	r3, r2
 8012322:	005b      	lsls	r3, r3, #1
 8012324:	4413      	add	r3, r2
 8012326:	00db      	lsls	r3, r3, #3
 8012328:	440b      	add	r3, r1
 801232a:	3314      	adds	r3, #20
 801232c:	781b      	ldrb	r3, [r3, #0]
 801232e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8012330:	78fb      	ldrb	r3, [r7, #3]
 8012332:	2b00      	cmp	r3, #0
 8012334:	f000 8086 	beq.w	8012444 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012338:	4948      	ldr	r1, [pc, #288]	@ (801245c <etharp_tmr+0x14c>)
 801233a:	687a      	ldr	r2, [r7, #4]
 801233c:	4613      	mov	r3, r2
 801233e:	005b      	lsls	r3, r3, #1
 8012340:	4413      	add	r3, r2
 8012342:	00db      	lsls	r3, r3, #3
 8012344:	440b      	add	r3, r1
 8012346:	3312      	adds	r3, #18
 8012348:	881b      	ldrh	r3, [r3, #0]
 801234a:	3301      	adds	r3, #1
 801234c:	b298      	uxth	r0, r3
 801234e:	4943      	ldr	r1, [pc, #268]	@ (801245c <etharp_tmr+0x14c>)
 8012350:	687a      	ldr	r2, [r7, #4]
 8012352:	4613      	mov	r3, r2
 8012354:	005b      	lsls	r3, r3, #1
 8012356:	4413      	add	r3, r2
 8012358:	00db      	lsls	r3, r3, #3
 801235a:	440b      	add	r3, r1
 801235c:	3312      	adds	r3, #18
 801235e:	4602      	mov	r2, r0
 8012360:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012362:	493e      	ldr	r1, [pc, #248]	@ (801245c <etharp_tmr+0x14c>)
 8012364:	687a      	ldr	r2, [r7, #4]
 8012366:	4613      	mov	r3, r2
 8012368:	005b      	lsls	r3, r3, #1
 801236a:	4413      	add	r3, r2
 801236c:	00db      	lsls	r3, r3, #3
 801236e:	440b      	add	r3, r1
 8012370:	3312      	adds	r3, #18
 8012372:	881b      	ldrh	r3, [r3, #0]
 8012374:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8012378:	d215      	bcs.n	80123a6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801237a:	4938      	ldr	r1, [pc, #224]	@ (801245c <etharp_tmr+0x14c>)
 801237c:	687a      	ldr	r2, [r7, #4]
 801237e:	4613      	mov	r3, r2
 8012380:	005b      	lsls	r3, r3, #1
 8012382:	4413      	add	r3, r2
 8012384:	00db      	lsls	r3, r3, #3
 8012386:	440b      	add	r3, r1
 8012388:	3314      	adds	r3, #20
 801238a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801238c:	2b01      	cmp	r3, #1
 801238e:	d10e      	bne.n	80123ae <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012390:	4932      	ldr	r1, [pc, #200]	@ (801245c <etharp_tmr+0x14c>)
 8012392:	687a      	ldr	r2, [r7, #4]
 8012394:	4613      	mov	r3, r2
 8012396:	005b      	lsls	r3, r3, #1
 8012398:	4413      	add	r3, r2
 801239a:	00db      	lsls	r3, r3, #3
 801239c:	440b      	add	r3, r1
 801239e:	3312      	adds	r3, #18
 80123a0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80123a2:	2b04      	cmp	r3, #4
 80123a4:	d903      	bls.n	80123ae <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80123a6:	6878      	ldr	r0, [r7, #4]
 80123a8:	f7ff ff80 	bl	80122ac <etharp_free_entry>
 80123ac:	e04a      	b.n	8012444 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80123ae:	492b      	ldr	r1, [pc, #172]	@ (801245c <etharp_tmr+0x14c>)
 80123b0:	687a      	ldr	r2, [r7, #4]
 80123b2:	4613      	mov	r3, r2
 80123b4:	005b      	lsls	r3, r3, #1
 80123b6:	4413      	add	r3, r2
 80123b8:	00db      	lsls	r3, r3, #3
 80123ba:	440b      	add	r3, r1
 80123bc:	3314      	adds	r3, #20
 80123be:	781b      	ldrb	r3, [r3, #0]
 80123c0:	2b03      	cmp	r3, #3
 80123c2:	d10a      	bne.n	80123da <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80123c4:	4925      	ldr	r1, [pc, #148]	@ (801245c <etharp_tmr+0x14c>)
 80123c6:	687a      	ldr	r2, [r7, #4]
 80123c8:	4613      	mov	r3, r2
 80123ca:	005b      	lsls	r3, r3, #1
 80123cc:	4413      	add	r3, r2
 80123ce:	00db      	lsls	r3, r3, #3
 80123d0:	440b      	add	r3, r1
 80123d2:	3314      	adds	r3, #20
 80123d4:	2204      	movs	r2, #4
 80123d6:	701a      	strb	r2, [r3, #0]
 80123d8:	e034      	b.n	8012444 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80123da:	4920      	ldr	r1, [pc, #128]	@ (801245c <etharp_tmr+0x14c>)
 80123dc:	687a      	ldr	r2, [r7, #4]
 80123de:	4613      	mov	r3, r2
 80123e0:	005b      	lsls	r3, r3, #1
 80123e2:	4413      	add	r3, r2
 80123e4:	00db      	lsls	r3, r3, #3
 80123e6:	440b      	add	r3, r1
 80123e8:	3314      	adds	r3, #20
 80123ea:	781b      	ldrb	r3, [r3, #0]
 80123ec:	2b04      	cmp	r3, #4
 80123ee:	d10a      	bne.n	8012406 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80123f0:	491a      	ldr	r1, [pc, #104]	@ (801245c <etharp_tmr+0x14c>)
 80123f2:	687a      	ldr	r2, [r7, #4]
 80123f4:	4613      	mov	r3, r2
 80123f6:	005b      	lsls	r3, r3, #1
 80123f8:	4413      	add	r3, r2
 80123fa:	00db      	lsls	r3, r3, #3
 80123fc:	440b      	add	r3, r1
 80123fe:	3314      	adds	r3, #20
 8012400:	2202      	movs	r2, #2
 8012402:	701a      	strb	r2, [r3, #0]
 8012404:	e01e      	b.n	8012444 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012406:	4915      	ldr	r1, [pc, #84]	@ (801245c <etharp_tmr+0x14c>)
 8012408:	687a      	ldr	r2, [r7, #4]
 801240a:	4613      	mov	r3, r2
 801240c:	005b      	lsls	r3, r3, #1
 801240e:	4413      	add	r3, r2
 8012410:	00db      	lsls	r3, r3, #3
 8012412:	440b      	add	r3, r1
 8012414:	3314      	adds	r3, #20
 8012416:	781b      	ldrb	r3, [r3, #0]
 8012418:	2b01      	cmp	r3, #1
 801241a:	d113      	bne.n	8012444 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801241c:	490f      	ldr	r1, [pc, #60]	@ (801245c <etharp_tmr+0x14c>)
 801241e:	687a      	ldr	r2, [r7, #4]
 8012420:	4613      	mov	r3, r2
 8012422:	005b      	lsls	r3, r3, #1
 8012424:	4413      	add	r3, r2
 8012426:	00db      	lsls	r3, r3, #3
 8012428:	440b      	add	r3, r1
 801242a:	3308      	adds	r3, #8
 801242c:	6818      	ldr	r0, [r3, #0]
 801242e:	687a      	ldr	r2, [r7, #4]
 8012430:	4613      	mov	r3, r2
 8012432:	005b      	lsls	r3, r3, #1
 8012434:	4413      	add	r3, r2
 8012436:	00db      	lsls	r3, r3, #3
 8012438:	4a08      	ldr	r2, [pc, #32]	@ (801245c <etharp_tmr+0x14c>)
 801243a:	4413      	add	r3, r2
 801243c:	3304      	adds	r3, #4
 801243e:	4619      	mov	r1, r3
 8012440:	f000 fe6e 	bl	8013120 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	3301      	adds	r3, #1
 8012448:	607b      	str	r3, [r7, #4]
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	2b09      	cmp	r3, #9
 801244e:	f77f af65 	ble.w	801231c <etharp_tmr+0xc>
      }
    }
  }
}
 8012452:	bf00      	nop
 8012454:	bf00      	nop
 8012456:	3708      	adds	r7, #8
 8012458:	46bd      	mov	sp, r7
 801245a:	bd80      	pop	{r7, pc}
 801245c:	2001036c 	.word	0x2001036c

08012460 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012460:	b580      	push	{r7, lr}
 8012462:	b08a      	sub	sp, #40	@ 0x28
 8012464:	af00      	add	r7, sp, #0
 8012466:	60f8      	str	r0, [r7, #12]
 8012468:	460b      	mov	r3, r1
 801246a:	607a      	str	r2, [r7, #4]
 801246c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801246e:	230a      	movs	r3, #10
 8012470:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8012472:	230a      	movs	r3, #10
 8012474:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8012476:	230a      	movs	r3, #10
 8012478:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801247a:	2300      	movs	r3, #0
 801247c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801247e:	230a      	movs	r3, #10
 8012480:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8012482:	2300      	movs	r3, #0
 8012484:	83bb      	strh	r3, [r7, #28]
 8012486:	2300      	movs	r3, #0
 8012488:	837b      	strh	r3, [r7, #26]
 801248a:	2300      	movs	r3, #0
 801248c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801248e:	2300      	movs	r3, #0
 8012490:	843b      	strh	r3, [r7, #32]
 8012492:	e0ae      	b.n	80125f2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012494:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012498:	49a6      	ldr	r1, [pc, #664]	@ (8012734 <etharp_find_entry+0x2d4>)
 801249a:	4613      	mov	r3, r2
 801249c:	005b      	lsls	r3, r3, #1
 801249e:	4413      	add	r3, r2
 80124a0:	00db      	lsls	r3, r3, #3
 80124a2:	440b      	add	r3, r1
 80124a4:	3314      	adds	r3, #20
 80124a6:	781b      	ldrb	r3, [r3, #0]
 80124a8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80124aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80124ae:	2b0a      	cmp	r3, #10
 80124b0:	d105      	bne.n	80124be <etharp_find_entry+0x5e>
 80124b2:	7dfb      	ldrb	r3, [r7, #23]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d102      	bne.n	80124be <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80124b8:	8c3b      	ldrh	r3, [r7, #32]
 80124ba:	847b      	strh	r3, [r7, #34]	@ 0x22
 80124bc:	e095      	b.n	80125ea <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80124be:	7dfb      	ldrb	r3, [r7, #23]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	f000 8092 	beq.w	80125ea <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80124c6:	7dfb      	ldrb	r3, [r7, #23]
 80124c8:	2b01      	cmp	r3, #1
 80124ca:	d009      	beq.n	80124e0 <etharp_find_entry+0x80>
 80124cc:	7dfb      	ldrb	r3, [r7, #23]
 80124ce:	2b01      	cmp	r3, #1
 80124d0:	d806      	bhi.n	80124e0 <etharp_find_entry+0x80>
 80124d2:	4b99      	ldr	r3, [pc, #612]	@ (8012738 <etharp_find_entry+0x2d8>)
 80124d4:	f240 1223 	movw	r2, #291	@ 0x123
 80124d8:	4998      	ldr	r1, [pc, #608]	@ (801273c <etharp_find_entry+0x2dc>)
 80124da:	4899      	ldr	r0, [pc, #612]	@ (8012740 <etharp_find_entry+0x2e0>)
 80124dc:	f002 fbc2 	bl	8014c64 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d020      	beq.n	8012528 <etharp_find_entry+0xc8>
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	6819      	ldr	r1, [r3, #0]
 80124ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80124ee:	4891      	ldr	r0, [pc, #580]	@ (8012734 <etharp_find_entry+0x2d4>)
 80124f0:	4613      	mov	r3, r2
 80124f2:	005b      	lsls	r3, r3, #1
 80124f4:	4413      	add	r3, r2
 80124f6:	00db      	lsls	r3, r3, #3
 80124f8:	4403      	add	r3, r0
 80124fa:	3304      	adds	r3, #4
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	4299      	cmp	r1, r3
 8012500:	d112      	bne.n	8012528 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	2b00      	cmp	r3, #0
 8012506:	d00c      	beq.n	8012522 <etharp_find_entry+0xc2>
 8012508:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801250c:	4989      	ldr	r1, [pc, #548]	@ (8012734 <etharp_find_entry+0x2d4>)
 801250e:	4613      	mov	r3, r2
 8012510:	005b      	lsls	r3, r3, #1
 8012512:	4413      	add	r3, r2
 8012514:	00db      	lsls	r3, r3, #3
 8012516:	440b      	add	r3, r1
 8012518:	3308      	adds	r3, #8
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	687a      	ldr	r2, [r7, #4]
 801251e:	429a      	cmp	r2, r3
 8012520:	d102      	bne.n	8012528 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8012522:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012526:	e100      	b.n	801272a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012528:	7dfb      	ldrb	r3, [r7, #23]
 801252a:	2b01      	cmp	r3, #1
 801252c:	d140      	bne.n	80125b0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801252e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012532:	4980      	ldr	r1, [pc, #512]	@ (8012734 <etharp_find_entry+0x2d4>)
 8012534:	4613      	mov	r3, r2
 8012536:	005b      	lsls	r3, r3, #1
 8012538:	4413      	add	r3, r2
 801253a:	00db      	lsls	r3, r3, #3
 801253c:	440b      	add	r3, r1
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	2b00      	cmp	r3, #0
 8012542:	d01a      	beq.n	801257a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012544:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012548:	497a      	ldr	r1, [pc, #488]	@ (8012734 <etharp_find_entry+0x2d4>)
 801254a:	4613      	mov	r3, r2
 801254c:	005b      	lsls	r3, r3, #1
 801254e:	4413      	add	r3, r2
 8012550:	00db      	lsls	r3, r3, #3
 8012552:	440b      	add	r3, r1
 8012554:	3312      	adds	r3, #18
 8012556:	881b      	ldrh	r3, [r3, #0]
 8012558:	8bba      	ldrh	r2, [r7, #28]
 801255a:	429a      	cmp	r2, r3
 801255c:	d845      	bhi.n	80125ea <etharp_find_entry+0x18a>
            old_queue = i;
 801255e:	8c3b      	ldrh	r3, [r7, #32]
 8012560:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8012562:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012566:	4973      	ldr	r1, [pc, #460]	@ (8012734 <etharp_find_entry+0x2d4>)
 8012568:	4613      	mov	r3, r2
 801256a:	005b      	lsls	r3, r3, #1
 801256c:	4413      	add	r3, r2
 801256e:	00db      	lsls	r3, r3, #3
 8012570:	440b      	add	r3, r1
 8012572:	3312      	adds	r3, #18
 8012574:	881b      	ldrh	r3, [r3, #0]
 8012576:	83bb      	strh	r3, [r7, #28]
 8012578:	e037      	b.n	80125ea <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801257a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801257e:	496d      	ldr	r1, [pc, #436]	@ (8012734 <etharp_find_entry+0x2d4>)
 8012580:	4613      	mov	r3, r2
 8012582:	005b      	lsls	r3, r3, #1
 8012584:	4413      	add	r3, r2
 8012586:	00db      	lsls	r3, r3, #3
 8012588:	440b      	add	r3, r1
 801258a:	3312      	adds	r3, #18
 801258c:	881b      	ldrh	r3, [r3, #0]
 801258e:	8b7a      	ldrh	r2, [r7, #26]
 8012590:	429a      	cmp	r2, r3
 8012592:	d82a      	bhi.n	80125ea <etharp_find_entry+0x18a>
            old_pending = i;
 8012594:	8c3b      	ldrh	r3, [r7, #32]
 8012596:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8012598:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801259c:	4965      	ldr	r1, [pc, #404]	@ (8012734 <etharp_find_entry+0x2d4>)
 801259e:	4613      	mov	r3, r2
 80125a0:	005b      	lsls	r3, r3, #1
 80125a2:	4413      	add	r3, r2
 80125a4:	00db      	lsls	r3, r3, #3
 80125a6:	440b      	add	r3, r1
 80125a8:	3312      	adds	r3, #18
 80125aa:	881b      	ldrh	r3, [r3, #0]
 80125ac:	837b      	strh	r3, [r7, #26]
 80125ae:	e01c      	b.n	80125ea <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80125b0:	7dfb      	ldrb	r3, [r7, #23]
 80125b2:	2b01      	cmp	r3, #1
 80125b4:	d919      	bls.n	80125ea <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80125b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80125ba:	495e      	ldr	r1, [pc, #376]	@ (8012734 <etharp_find_entry+0x2d4>)
 80125bc:	4613      	mov	r3, r2
 80125be:	005b      	lsls	r3, r3, #1
 80125c0:	4413      	add	r3, r2
 80125c2:	00db      	lsls	r3, r3, #3
 80125c4:	440b      	add	r3, r1
 80125c6:	3312      	adds	r3, #18
 80125c8:	881b      	ldrh	r3, [r3, #0]
 80125ca:	8b3a      	ldrh	r2, [r7, #24]
 80125cc:	429a      	cmp	r2, r3
 80125ce:	d80c      	bhi.n	80125ea <etharp_find_entry+0x18a>
            old_stable = i;
 80125d0:	8c3b      	ldrh	r3, [r7, #32]
 80125d2:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 80125d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80125d8:	4956      	ldr	r1, [pc, #344]	@ (8012734 <etharp_find_entry+0x2d4>)
 80125da:	4613      	mov	r3, r2
 80125dc:	005b      	lsls	r3, r3, #1
 80125de:	4413      	add	r3, r2
 80125e0:	00db      	lsls	r3, r3, #3
 80125e2:	440b      	add	r3, r1
 80125e4:	3312      	adds	r3, #18
 80125e6:	881b      	ldrh	r3, [r3, #0]
 80125e8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80125ea:	8c3b      	ldrh	r3, [r7, #32]
 80125ec:	3301      	adds	r3, #1
 80125ee:	b29b      	uxth	r3, r3
 80125f0:	843b      	strh	r3, [r7, #32]
 80125f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80125f6:	2b09      	cmp	r3, #9
 80125f8:	f77f af4c 	ble.w	8012494 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80125fc:	7afb      	ldrb	r3, [r7, #11]
 80125fe:	f003 0302 	and.w	r3, r3, #2
 8012602:	2b00      	cmp	r3, #0
 8012604:	d108      	bne.n	8012618 <etharp_find_entry+0x1b8>
 8012606:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801260a:	2b0a      	cmp	r3, #10
 801260c:	d107      	bne.n	801261e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801260e:	7afb      	ldrb	r3, [r7, #11]
 8012610:	f003 0301 	and.w	r3, r3, #1
 8012614:	2b00      	cmp	r3, #0
 8012616:	d102      	bne.n	801261e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012618:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801261c:	e085      	b.n	801272a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801261e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012622:	2b09      	cmp	r3, #9
 8012624:	dc02      	bgt.n	801262c <etharp_find_entry+0x1cc>
    i = empty;
 8012626:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012628:	843b      	strh	r3, [r7, #32]
 801262a:	e039      	b.n	80126a0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801262c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8012630:	2b09      	cmp	r3, #9
 8012632:	dc14      	bgt.n	801265e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012634:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012636:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012638:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801263c:	493d      	ldr	r1, [pc, #244]	@ (8012734 <etharp_find_entry+0x2d4>)
 801263e:	4613      	mov	r3, r2
 8012640:	005b      	lsls	r3, r3, #1
 8012642:	4413      	add	r3, r2
 8012644:	00db      	lsls	r3, r3, #3
 8012646:	440b      	add	r3, r1
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d018      	beq.n	8012680 <etharp_find_entry+0x220>
 801264e:	4b3a      	ldr	r3, [pc, #232]	@ (8012738 <etharp_find_entry+0x2d8>)
 8012650:	f240 126d 	movw	r2, #365	@ 0x16d
 8012654:	493b      	ldr	r1, [pc, #236]	@ (8012744 <etharp_find_entry+0x2e4>)
 8012656:	483a      	ldr	r0, [pc, #232]	@ (8012740 <etharp_find_entry+0x2e0>)
 8012658:	f002 fb04 	bl	8014c64 <iprintf>
 801265c:	e010      	b.n	8012680 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801265e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8012662:	2b09      	cmp	r3, #9
 8012664:	dc02      	bgt.n	801266c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8012666:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012668:	843b      	strh	r3, [r7, #32]
 801266a:	e009      	b.n	8012680 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801266c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012670:	2b09      	cmp	r3, #9
 8012672:	dc02      	bgt.n	801267a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012674:	8bfb      	ldrh	r3, [r7, #30]
 8012676:	843b      	strh	r3, [r7, #32]
 8012678:	e002      	b.n	8012680 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801267a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801267e:	e054      	b.n	801272a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012680:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012684:	2b09      	cmp	r3, #9
 8012686:	dd06      	ble.n	8012696 <etharp_find_entry+0x236>
 8012688:	4b2b      	ldr	r3, [pc, #172]	@ (8012738 <etharp_find_entry+0x2d8>)
 801268a:	f240 127f 	movw	r2, #383	@ 0x17f
 801268e:	492e      	ldr	r1, [pc, #184]	@ (8012748 <etharp_find_entry+0x2e8>)
 8012690:	482b      	ldr	r0, [pc, #172]	@ (8012740 <etharp_find_entry+0x2e0>)
 8012692:	f002 fae7 	bl	8014c64 <iprintf>
    etharp_free_entry(i);
 8012696:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801269a:	4618      	mov	r0, r3
 801269c:	f7ff fe06 	bl	80122ac <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80126a0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80126a4:	2b09      	cmp	r3, #9
 80126a6:	dd06      	ble.n	80126b6 <etharp_find_entry+0x256>
 80126a8:	4b23      	ldr	r3, [pc, #140]	@ (8012738 <etharp_find_entry+0x2d8>)
 80126aa:	f240 1283 	movw	r2, #387	@ 0x183
 80126ae:	4926      	ldr	r1, [pc, #152]	@ (8012748 <etharp_find_entry+0x2e8>)
 80126b0:	4823      	ldr	r0, [pc, #140]	@ (8012740 <etharp_find_entry+0x2e0>)
 80126b2:	f002 fad7 	bl	8014c64 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80126b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80126ba:	491e      	ldr	r1, [pc, #120]	@ (8012734 <etharp_find_entry+0x2d4>)
 80126bc:	4613      	mov	r3, r2
 80126be:	005b      	lsls	r3, r3, #1
 80126c0:	4413      	add	r3, r2
 80126c2:	00db      	lsls	r3, r3, #3
 80126c4:	440b      	add	r3, r1
 80126c6:	3314      	adds	r3, #20
 80126c8:	781b      	ldrb	r3, [r3, #0]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d006      	beq.n	80126dc <etharp_find_entry+0x27c>
 80126ce:	4b1a      	ldr	r3, [pc, #104]	@ (8012738 <etharp_find_entry+0x2d8>)
 80126d0:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80126d4:	491d      	ldr	r1, [pc, #116]	@ (801274c <etharp_find_entry+0x2ec>)
 80126d6:	481a      	ldr	r0, [pc, #104]	@ (8012740 <etharp_find_entry+0x2e0>)
 80126d8:	f002 fac4 	bl	8014c64 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d00b      	beq.n	80126fa <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80126e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	6819      	ldr	r1, [r3, #0]
 80126ea:	4812      	ldr	r0, [pc, #72]	@ (8012734 <etharp_find_entry+0x2d4>)
 80126ec:	4613      	mov	r3, r2
 80126ee:	005b      	lsls	r3, r3, #1
 80126f0:	4413      	add	r3, r2
 80126f2:	00db      	lsls	r3, r3, #3
 80126f4:	4403      	add	r3, r0
 80126f6:	3304      	adds	r3, #4
 80126f8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80126fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80126fe:	490d      	ldr	r1, [pc, #52]	@ (8012734 <etharp_find_entry+0x2d4>)
 8012700:	4613      	mov	r3, r2
 8012702:	005b      	lsls	r3, r3, #1
 8012704:	4413      	add	r3, r2
 8012706:	00db      	lsls	r3, r3, #3
 8012708:	440b      	add	r3, r1
 801270a:	3312      	adds	r3, #18
 801270c:	2200      	movs	r2, #0
 801270e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012710:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012714:	4907      	ldr	r1, [pc, #28]	@ (8012734 <etharp_find_entry+0x2d4>)
 8012716:	4613      	mov	r3, r2
 8012718:	005b      	lsls	r3, r3, #1
 801271a:	4413      	add	r3, r2
 801271c:	00db      	lsls	r3, r3, #3
 801271e:	440b      	add	r3, r1
 8012720:	3308      	adds	r3, #8
 8012722:	687a      	ldr	r2, [r7, #4]
 8012724:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012726:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801272a:	4618      	mov	r0, r3
 801272c:	3728      	adds	r7, #40	@ 0x28
 801272e:	46bd      	mov	sp, r7
 8012730:	bd80      	pop	{r7, pc}
 8012732:	bf00      	nop
 8012734:	2001036c 	.word	0x2001036c
 8012738:	08017f4c 	.word	0x08017f4c
 801273c:	08017f84 	.word	0x08017f84
 8012740:	08017fc4 	.word	0x08017fc4
 8012744:	08017fec 	.word	0x08017fec
 8012748:	08018004 	.word	0x08018004
 801274c:	08018018 	.word	0x08018018

08012750 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b088      	sub	sp, #32
 8012754:	af02      	add	r7, sp, #8
 8012756:	60f8      	str	r0, [r7, #12]
 8012758:	60b9      	str	r1, [r7, #8]
 801275a:	607a      	str	r2, [r7, #4]
 801275c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8012764:	2b06      	cmp	r3, #6
 8012766:	d006      	beq.n	8012776 <etharp_update_arp_entry+0x26>
 8012768:	4b48      	ldr	r3, [pc, #288]	@ (801288c <etharp_update_arp_entry+0x13c>)
 801276a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801276e:	4948      	ldr	r1, [pc, #288]	@ (8012890 <etharp_update_arp_entry+0x140>)
 8012770:	4848      	ldr	r0, [pc, #288]	@ (8012894 <etharp_update_arp_entry+0x144>)
 8012772:	f002 fa77 	bl	8014c64 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012776:	68bb      	ldr	r3, [r7, #8]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d012      	beq.n	80127a2 <etharp_update_arp_entry+0x52>
 801277c:	68bb      	ldr	r3, [r7, #8]
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d00e      	beq.n	80127a2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012784:	68bb      	ldr	r3, [r7, #8]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	68f9      	ldr	r1, [r7, #12]
 801278a:	4618      	mov	r0, r3
 801278c:	f001 f8fe 	bl	801398c <ip4_addr_isbroadcast_u32>
 8012790:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012792:	2b00      	cmp	r3, #0
 8012794:	d105      	bne.n	80127a2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012796:	68bb      	ldr	r3, [r7, #8]
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801279e:	2be0      	cmp	r3, #224	@ 0xe0
 80127a0:	d102      	bne.n	80127a8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80127a2:	f06f 030f 	mvn.w	r3, #15
 80127a6:	e06c      	b.n	8012882 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80127a8:	78fb      	ldrb	r3, [r7, #3]
 80127aa:	68fa      	ldr	r2, [r7, #12]
 80127ac:	4619      	mov	r1, r3
 80127ae:	68b8      	ldr	r0, [r7, #8]
 80127b0:	f7ff fe56 	bl	8012460 <etharp_find_entry>
 80127b4:	4603      	mov	r3, r0
 80127b6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80127b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	da02      	bge.n	80127c6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80127c0:	8afb      	ldrh	r3, [r7, #22]
 80127c2:	b25b      	sxtb	r3, r3
 80127c4:	e05d      	b.n	8012882 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80127c6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80127ca:	4933      	ldr	r1, [pc, #204]	@ (8012898 <etharp_update_arp_entry+0x148>)
 80127cc:	4613      	mov	r3, r2
 80127ce:	005b      	lsls	r3, r3, #1
 80127d0:	4413      	add	r3, r2
 80127d2:	00db      	lsls	r3, r3, #3
 80127d4:	440b      	add	r3, r1
 80127d6:	3314      	adds	r3, #20
 80127d8:	2202      	movs	r2, #2
 80127da:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80127dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80127e0:	492d      	ldr	r1, [pc, #180]	@ (8012898 <etharp_update_arp_entry+0x148>)
 80127e2:	4613      	mov	r3, r2
 80127e4:	005b      	lsls	r3, r3, #1
 80127e6:	4413      	add	r3, r2
 80127e8:	00db      	lsls	r3, r3, #3
 80127ea:	440b      	add	r3, r1
 80127ec:	3308      	adds	r3, #8
 80127ee:	68fa      	ldr	r2, [r7, #12]
 80127f0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80127f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80127f6:	4613      	mov	r3, r2
 80127f8:	005b      	lsls	r3, r3, #1
 80127fa:	4413      	add	r3, r2
 80127fc:	00db      	lsls	r3, r3, #3
 80127fe:	3308      	adds	r3, #8
 8012800:	4a25      	ldr	r2, [pc, #148]	@ (8012898 <etharp_update_arp_entry+0x148>)
 8012802:	4413      	add	r3, r2
 8012804:	3304      	adds	r3, #4
 8012806:	2206      	movs	r2, #6
 8012808:	6879      	ldr	r1, [r7, #4]
 801280a:	4618      	mov	r0, r3
 801280c:	f002 fb05 	bl	8014e1a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012810:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012814:	4920      	ldr	r1, [pc, #128]	@ (8012898 <etharp_update_arp_entry+0x148>)
 8012816:	4613      	mov	r3, r2
 8012818:	005b      	lsls	r3, r3, #1
 801281a:	4413      	add	r3, r2
 801281c:	00db      	lsls	r3, r3, #3
 801281e:	440b      	add	r3, r1
 8012820:	3312      	adds	r3, #18
 8012822:	2200      	movs	r2, #0
 8012824:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012826:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801282a:	491b      	ldr	r1, [pc, #108]	@ (8012898 <etharp_update_arp_entry+0x148>)
 801282c:	4613      	mov	r3, r2
 801282e:	005b      	lsls	r3, r3, #1
 8012830:	4413      	add	r3, r2
 8012832:	00db      	lsls	r3, r3, #3
 8012834:	440b      	add	r3, r1
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d021      	beq.n	8012880 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801283c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012840:	4915      	ldr	r1, [pc, #84]	@ (8012898 <etharp_update_arp_entry+0x148>)
 8012842:	4613      	mov	r3, r2
 8012844:	005b      	lsls	r3, r3, #1
 8012846:	4413      	add	r3, r2
 8012848:	00db      	lsls	r3, r3, #3
 801284a:	440b      	add	r3, r1
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012850:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012854:	4910      	ldr	r1, [pc, #64]	@ (8012898 <etharp_update_arp_entry+0x148>)
 8012856:	4613      	mov	r3, r2
 8012858:	005b      	lsls	r3, r3, #1
 801285a:	4413      	add	r3, r2
 801285c:	00db      	lsls	r3, r3, #3
 801285e:	440b      	add	r3, r1
 8012860:	2200      	movs	r2, #0
 8012862:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801286a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801286e:	9300      	str	r3, [sp, #0]
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	6939      	ldr	r1, [r7, #16]
 8012874:	68f8      	ldr	r0, [r7, #12]
 8012876:	f001 ff97 	bl	80147a8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801287a:	6938      	ldr	r0, [r7, #16]
 801287c:	f7f9 fdea 	bl	800c454 <pbuf_free>
  }
  return ERR_OK;
 8012880:	2300      	movs	r3, #0
}
 8012882:	4618      	mov	r0, r3
 8012884:	3718      	adds	r7, #24
 8012886:	46bd      	mov	sp, r7
 8012888:	bd80      	pop	{r7, pc}
 801288a:	bf00      	nop
 801288c:	08017f4c 	.word	0x08017f4c
 8012890:	08018044 	.word	0x08018044
 8012894:	08017fc4 	.word	0x08017fc4
 8012898:	2001036c 	.word	0x2001036c

0801289c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801289c:	b580      	push	{r7, lr}
 801289e:	b084      	sub	sp, #16
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80128a4:	2300      	movs	r3, #0
 80128a6:	60fb      	str	r3, [r7, #12]
 80128a8:	e01e      	b.n	80128e8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80128aa:	4913      	ldr	r1, [pc, #76]	@ (80128f8 <etharp_cleanup_netif+0x5c>)
 80128ac:	68fa      	ldr	r2, [r7, #12]
 80128ae:	4613      	mov	r3, r2
 80128b0:	005b      	lsls	r3, r3, #1
 80128b2:	4413      	add	r3, r2
 80128b4:	00db      	lsls	r3, r3, #3
 80128b6:	440b      	add	r3, r1
 80128b8:	3314      	adds	r3, #20
 80128ba:	781b      	ldrb	r3, [r3, #0]
 80128bc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80128be:	7afb      	ldrb	r3, [r7, #11]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d00e      	beq.n	80128e2 <etharp_cleanup_netif+0x46>
 80128c4:	490c      	ldr	r1, [pc, #48]	@ (80128f8 <etharp_cleanup_netif+0x5c>)
 80128c6:	68fa      	ldr	r2, [r7, #12]
 80128c8:	4613      	mov	r3, r2
 80128ca:	005b      	lsls	r3, r3, #1
 80128cc:	4413      	add	r3, r2
 80128ce:	00db      	lsls	r3, r3, #3
 80128d0:	440b      	add	r3, r1
 80128d2:	3308      	adds	r3, #8
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	687a      	ldr	r2, [r7, #4]
 80128d8:	429a      	cmp	r2, r3
 80128da:	d102      	bne.n	80128e2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80128dc:	68f8      	ldr	r0, [r7, #12]
 80128de:	f7ff fce5 	bl	80122ac <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	3301      	adds	r3, #1
 80128e6:	60fb      	str	r3, [r7, #12]
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	2b09      	cmp	r3, #9
 80128ec:	dddd      	ble.n	80128aa <etharp_cleanup_netif+0xe>
    }
  }
}
 80128ee:	bf00      	nop
 80128f0:	bf00      	nop
 80128f2:	3710      	adds	r7, #16
 80128f4:	46bd      	mov	sp, r7
 80128f6:	bd80      	pop	{r7, pc}
 80128f8:	2001036c 	.word	0x2001036c

080128fc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80128fc:	b5b0      	push	{r4, r5, r7, lr}
 80128fe:	b08a      	sub	sp, #40	@ 0x28
 8012900:	af04      	add	r7, sp, #16
 8012902:	6078      	str	r0, [r7, #4]
 8012904:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012906:	683b      	ldr	r3, [r7, #0]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d107      	bne.n	801291c <etharp_input+0x20>
 801290c:	4b3d      	ldr	r3, [pc, #244]	@ (8012a04 <etharp_input+0x108>)
 801290e:	f240 228a 	movw	r2, #650	@ 0x28a
 8012912:	493d      	ldr	r1, [pc, #244]	@ (8012a08 <etharp_input+0x10c>)
 8012914:	483d      	ldr	r0, [pc, #244]	@ (8012a0c <etharp_input+0x110>)
 8012916:	f002 f9a5 	bl	8014c64 <iprintf>
 801291a:	e06f      	b.n	80129fc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	685b      	ldr	r3, [r3, #4]
 8012920:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012922:	693b      	ldr	r3, [r7, #16]
 8012924:	881b      	ldrh	r3, [r3, #0]
 8012926:	b29b      	uxth	r3, r3
 8012928:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801292c:	d10c      	bne.n	8012948 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801292e:	693b      	ldr	r3, [r7, #16]
 8012930:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012932:	2b06      	cmp	r3, #6
 8012934:	d108      	bne.n	8012948 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012936:	693b      	ldr	r3, [r7, #16]
 8012938:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801293a:	2b04      	cmp	r3, #4
 801293c:	d104      	bne.n	8012948 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801293e:	693b      	ldr	r3, [r7, #16]
 8012940:	885b      	ldrh	r3, [r3, #2]
 8012942:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012944:	2b08      	cmp	r3, #8
 8012946:	d003      	beq.n	8012950 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012948:	6878      	ldr	r0, [r7, #4]
 801294a:	f7f9 fd83 	bl	800c454 <pbuf_free>
    return;
 801294e:	e055      	b.n	80129fc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012950:	693b      	ldr	r3, [r7, #16]
 8012952:	330e      	adds	r3, #14
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012958:	693b      	ldr	r3, [r7, #16]
 801295a:	3318      	adds	r3, #24
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012960:	683b      	ldr	r3, [r7, #0]
 8012962:	3304      	adds	r3, #4
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d102      	bne.n	8012970 <etharp_input+0x74>
    for_us = 0;
 801296a:	2300      	movs	r3, #0
 801296c:	75fb      	strb	r3, [r7, #23]
 801296e:	e009      	b.n	8012984 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012970:	68ba      	ldr	r2, [r7, #8]
 8012972:	683b      	ldr	r3, [r7, #0]
 8012974:	3304      	adds	r3, #4
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	429a      	cmp	r2, r3
 801297a:	bf0c      	ite	eq
 801297c:	2301      	moveq	r3, #1
 801297e:	2300      	movne	r3, #0
 8012980:	b2db      	uxtb	r3, r3
 8012982:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012984:	693b      	ldr	r3, [r7, #16]
 8012986:	f103 0208 	add.w	r2, r3, #8
 801298a:	7dfb      	ldrb	r3, [r7, #23]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d001      	beq.n	8012994 <etharp_input+0x98>
 8012990:	2301      	movs	r3, #1
 8012992:	e000      	b.n	8012996 <etharp_input+0x9a>
 8012994:	2302      	movs	r3, #2
 8012996:	f107 010c 	add.w	r1, r7, #12
 801299a:	6838      	ldr	r0, [r7, #0]
 801299c:	f7ff fed8 	bl	8012750 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80129a0:	693b      	ldr	r3, [r7, #16]
 80129a2:	88db      	ldrh	r3, [r3, #6]
 80129a4:	b29b      	uxth	r3, r3
 80129a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80129aa:	d003      	beq.n	80129b4 <etharp_input+0xb8>
 80129ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80129b0:	d01e      	beq.n	80129f0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80129b2:	e020      	b.n	80129f6 <etharp_input+0xfa>
      if (for_us) {
 80129b4:	7dfb      	ldrb	r3, [r7, #23]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d01c      	beq.n	80129f4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80129ba:	683b      	ldr	r3, [r7, #0]
 80129bc:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80129c0:	693b      	ldr	r3, [r7, #16]
 80129c2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80129c6:	683b      	ldr	r3, [r7, #0]
 80129c8:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 80129cc:	683b      	ldr	r3, [r7, #0]
 80129ce:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80129d0:	693a      	ldr	r2, [r7, #16]
 80129d2:	3208      	adds	r2, #8
        etharp_raw(netif,
 80129d4:	2102      	movs	r1, #2
 80129d6:	9103      	str	r1, [sp, #12]
 80129d8:	f107 010c 	add.w	r1, r7, #12
 80129dc:	9102      	str	r1, [sp, #8]
 80129de:	9201      	str	r2, [sp, #4]
 80129e0:	9300      	str	r3, [sp, #0]
 80129e2:	462b      	mov	r3, r5
 80129e4:	4622      	mov	r2, r4
 80129e6:	4601      	mov	r1, r0
 80129e8:	6838      	ldr	r0, [r7, #0]
 80129ea:	f000 faeb 	bl	8012fc4 <etharp_raw>
      break;
 80129ee:	e001      	b.n	80129f4 <etharp_input+0xf8>
      break;
 80129f0:	bf00      	nop
 80129f2:	e000      	b.n	80129f6 <etharp_input+0xfa>
      break;
 80129f4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80129f6:	6878      	ldr	r0, [r7, #4]
 80129f8:	f7f9 fd2c 	bl	800c454 <pbuf_free>
}
 80129fc:	3718      	adds	r7, #24
 80129fe:	46bd      	mov	sp, r7
 8012a00:	bdb0      	pop	{r4, r5, r7, pc}
 8012a02:	bf00      	nop
 8012a04:	08017f4c 	.word	0x08017f4c
 8012a08:	0801809c 	.word	0x0801809c
 8012a0c:	08017fc4 	.word	0x08017fc4

08012a10 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012a10:	b580      	push	{r7, lr}
 8012a12:	b086      	sub	sp, #24
 8012a14:	af02      	add	r7, sp, #8
 8012a16:	60f8      	str	r0, [r7, #12]
 8012a18:	60b9      	str	r1, [r7, #8]
 8012a1a:	4613      	mov	r3, r2
 8012a1c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012a1e:	79fa      	ldrb	r2, [r7, #7]
 8012a20:	4944      	ldr	r1, [pc, #272]	@ (8012b34 <etharp_output_to_arp_index+0x124>)
 8012a22:	4613      	mov	r3, r2
 8012a24:	005b      	lsls	r3, r3, #1
 8012a26:	4413      	add	r3, r2
 8012a28:	00db      	lsls	r3, r3, #3
 8012a2a:	440b      	add	r3, r1
 8012a2c:	3314      	adds	r3, #20
 8012a2e:	781b      	ldrb	r3, [r3, #0]
 8012a30:	2b01      	cmp	r3, #1
 8012a32:	d806      	bhi.n	8012a42 <etharp_output_to_arp_index+0x32>
 8012a34:	4b40      	ldr	r3, [pc, #256]	@ (8012b38 <etharp_output_to_arp_index+0x128>)
 8012a36:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8012a3a:	4940      	ldr	r1, [pc, #256]	@ (8012b3c <etharp_output_to_arp_index+0x12c>)
 8012a3c:	4840      	ldr	r0, [pc, #256]	@ (8012b40 <etharp_output_to_arp_index+0x130>)
 8012a3e:	f002 f911 	bl	8014c64 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012a42:	79fa      	ldrb	r2, [r7, #7]
 8012a44:	493b      	ldr	r1, [pc, #236]	@ (8012b34 <etharp_output_to_arp_index+0x124>)
 8012a46:	4613      	mov	r3, r2
 8012a48:	005b      	lsls	r3, r3, #1
 8012a4a:	4413      	add	r3, r2
 8012a4c:	00db      	lsls	r3, r3, #3
 8012a4e:	440b      	add	r3, r1
 8012a50:	3314      	adds	r3, #20
 8012a52:	781b      	ldrb	r3, [r3, #0]
 8012a54:	2b02      	cmp	r3, #2
 8012a56:	d153      	bne.n	8012b00 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012a58:	79fa      	ldrb	r2, [r7, #7]
 8012a5a:	4936      	ldr	r1, [pc, #216]	@ (8012b34 <etharp_output_to_arp_index+0x124>)
 8012a5c:	4613      	mov	r3, r2
 8012a5e:	005b      	lsls	r3, r3, #1
 8012a60:	4413      	add	r3, r2
 8012a62:	00db      	lsls	r3, r3, #3
 8012a64:	440b      	add	r3, r1
 8012a66:	3312      	adds	r3, #18
 8012a68:	881b      	ldrh	r3, [r3, #0]
 8012a6a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8012a6e:	d919      	bls.n	8012aa4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012a70:	79fa      	ldrb	r2, [r7, #7]
 8012a72:	4613      	mov	r3, r2
 8012a74:	005b      	lsls	r3, r3, #1
 8012a76:	4413      	add	r3, r2
 8012a78:	00db      	lsls	r3, r3, #3
 8012a7a:	4a2e      	ldr	r2, [pc, #184]	@ (8012b34 <etharp_output_to_arp_index+0x124>)
 8012a7c:	4413      	add	r3, r2
 8012a7e:	3304      	adds	r3, #4
 8012a80:	4619      	mov	r1, r3
 8012a82:	68f8      	ldr	r0, [r7, #12]
 8012a84:	f000 fb4c 	bl	8013120 <etharp_request>
 8012a88:	4603      	mov	r3, r0
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d138      	bne.n	8012b00 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012a8e:	79fa      	ldrb	r2, [r7, #7]
 8012a90:	4928      	ldr	r1, [pc, #160]	@ (8012b34 <etharp_output_to_arp_index+0x124>)
 8012a92:	4613      	mov	r3, r2
 8012a94:	005b      	lsls	r3, r3, #1
 8012a96:	4413      	add	r3, r2
 8012a98:	00db      	lsls	r3, r3, #3
 8012a9a:	440b      	add	r3, r1
 8012a9c:	3314      	adds	r3, #20
 8012a9e:	2203      	movs	r2, #3
 8012aa0:	701a      	strb	r2, [r3, #0]
 8012aa2:	e02d      	b.n	8012b00 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012aa4:	79fa      	ldrb	r2, [r7, #7]
 8012aa6:	4923      	ldr	r1, [pc, #140]	@ (8012b34 <etharp_output_to_arp_index+0x124>)
 8012aa8:	4613      	mov	r3, r2
 8012aaa:	005b      	lsls	r3, r3, #1
 8012aac:	4413      	add	r3, r2
 8012aae:	00db      	lsls	r3, r3, #3
 8012ab0:	440b      	add	r3, r1
 8012ab2:	3312      	adds	r3, #18
 8012ab4:	881b      	ldrh	r3, [r3, #0]
 8012ab6:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8012aba:	d321      	bcc.n	8012b00 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012abc:	79fa      	ldrb	r2, [r7, #7]
 8012abe:	4613      	mov	r3, r2
 8012ac0:	005b      	lsls	r3, r3, #1
 8012ac2:	4413      	add	r3, r2
 8012ac4:	00db      	lsls	r3, r3, #3
 8012ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8012b34 <etharp_output_to_arp_index+0x124>)
 8012ac8:	4413      	add	r3, r2
 8012aca:	1d19      	adds	r1, r3, #4
 8012acc:	79fa      	ldrb	r2, [r7, #7]
 8012ace:	4613      	mov	r3, r2
 8012ad0:	005b      	lsls	r3, r3, #1
 8012ad2:	4413      	add	r3, r2
 8012ad4:	00db      	lsls	r3, r3, #3
 8012ad6:	3308      	adds	r3, #8
 8012ad8:	4a16      	ldr	r2, [pc, #88]	@ (8012b34 <etharp_output_to_arp_index+0x124>)
 8012ada:	4413      	add	r3, r2
 8012adc:	3304      	adds	r3, #4
 8012ade:	461a      	mov	r2, r3
 8012ae0:	68f8      	ldr	r0, [r7, #12]
 8012ae2:	f000 fafb 	bl	80130dc <etharp_request_dst>
 8012ae6:	4603      	mov	r3, r0
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d109      	bne.n	8012b00 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012aec:	79fa      	ldrb	r2, [r7, #7]
 8012aee:	4911      	ldr	r1, [pc, #68]	@ (8012b34 <etharp_output_to_arp_index+0x124>)
 8012af0:	4613      	mov	r3, r2
 8012af2:	005b      	lsls	r3, r3, #1
 8012af4:	4413      	add	r3, r2
 8012af6:	00db      	lsls	r3, r3, #3
 8012af8:	440b      	add	r3, r1
 8012afa:	3314      	adds	r3, #20
 8012afc:	2203      	movs	r2, #3
 8012afe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8012b06:	79fa      	ldrb	r2, [r7, #7]
 8012b08:	4613      	mov	r3, r2
 8012b0a:	005b      	lsls	r3, r3, #1
 8012b0c:	4413      	add	r3, r2
 8012b0e:	00db      	lsls	r3, r3, #3
 8012b10:	3308      	adds	r3, #8
 8012b12:	4a08      	ldr	r2, [pc, #32]	@ (8012b34 <etharp_output_to_arp_index+0x124>)
 8012b14:	4413      	add	r3, r2
 8012b16:	3304      	adds	r3, #4
 8012b18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012b1c:	9200      	str	r2, [sp, #0]
 8012b1e:	460a      	mov	r2, r1
 8012b20:	68b9      	ldr	r1, [r7, #8]
 8012b22:	68f8      	ldr	r0, [r7, #12]
 8012b24:	f001 fe40 	bl	80147a8 <ethernet_output>
 8012b28:	4603      	mov	r3, r0
}
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	3710      	adds	r7, #16
 8012b2e:	46bd      	mov	sp, r7
 8012b30:	bd80      	pop	{r7, pc}
 8012b32:	bf00      	nop
 8012b34:	2001036c 	.word	0x2001036c
 8012b38:	08017f4c 	.word	0x08017f4c
 8012b3c:	080180bc 	.word	0x080180bc
 8012b40:	08017fc4 	.word	0x08017fc4

08012b44 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012b44:	b580      	push	{r7, lr}
 8012b46:	b08a      	sub	sp, #40	@ 0x28
 8012b48:	af02      	add	r7, sp, #8
 8012b4a:	60f8      	str	r0, [r7, #12]
 8012b4c:	60b9      	str	r1, [r7, #8]
 8012b4e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d106      	bne.n	8012b68 <etharp_output+0x24>
 8012b5a:	4b73      	ldr	r3, [pc, #460]	@ (8012d28 <etharp_output+0x1e4>)
 8012b5c:	f240 321e 	movw	r2, #798	@ 0x31e
 8012b60:	4972      	ldr	r1, [pc, #456]	@ (8012d2c <etharp_output+0x1e8>)
 8012b62:	4873      	ldr	r0, [pc, #460]	@ (8012d30 <etharp_output+0x1ec>)
 8012b64:	f002 f87e 	bl	8014c64 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012b68:	68bb      	ldr	r3, [r7, #8]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d106      	bne.n	8012b7c <etharp_output+0x38>
 8012b6e:	4b6e      	ldr	r3, [pc, #440]	@ (8012d28 <etharp_output+0x1e4>)
 8012b70:	f240 321f 	movw	r2, #799	@ 0x31f
 8012b74:	496f      	ldr	r1, [pc, #444]	@ (8012d34 <etharp_output+0x1f0>)
 8012b76:	486e      	ldr	r0, [pc, #440]	@ (8012d30 <etharp_output+0x1ec>)
 8012b78:	f002 f874 	bl	8014c64 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d106      	bne.n	8012b90 <etharp_output+0x4c>
 8012b82:	4b69      	ldr	r3, [pc, #420]	@ (8012d28 <etharp_output+0x1e4>)
 8012b84:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8012b88:	496b      	ldr	r1, [pc, #428]	@ (8012d38 <etharp_output+0x1f4>)
 8012b8a:	4869      	ldr	r0, [pc, #420]	@ (8012d30 <etharp_output+0x1ec>)
 8012b8c:	f002 f86a 	bl	8014c64 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	68f9      	ldr	r1, [r7, #12]
 8012b96:	4618      	mov	r0, r3
 8012b98:	f000 fef8 	bl	801398c <ip4_addr_isbroadcast_u32>
 8012b9c:	4603      	mov	r3, r0
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d002      	beq.n	8012ba8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8012ba2:	4b66      	ldr	r3, [pc, #408]	@ (8012d3c <etharp_output+0x1f8>)
 8012ba4:	61fb      	str	r3, [r7, #28]
 8012ba6:	e0af      	b.n	8012d08 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012bb0:	2be0      	cmp	r3, #224	@ 0xe0
 8012bb2:	d118      	bne.n	8012be6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012bb4:	2301      	movs	r3, #1
 8012bb6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012bb8:	2300      	movs	r3, #0
 8012bba:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012bbc:	235e      	movs	r3, #94	@ 0x5e
 8012bbe:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	3301      	adds	r3, #1
 8012bc4:	781b      	ldrb	r3, [r3, #0]
 8012bc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012bca:	b2db      	uxtb	r3, r3
 8012bcc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	3302      	adds	r3, #2
 8012bd2:	781b      	ldrb	r3, [r3, #0]
 8012bd4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	3303      	adds	r3, #3
 8012bda:	781b      	ldrb	r3, [r3, #0]
 8012bdc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8012bde:	f107 0310 	add.w	r3, r7, #16
 8012be2:	61fb      	str	r3, [r7, #28]
 8012be4:	e090      	b.n	8012d08 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	681a      	ldr	r2, [r3, #0]
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	3304      	adds	r3, #4
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	405a      	eors	r2, r3
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	3308      	adds	r3, #8
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	4013      	ands	r3, r2
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d012      	beq.n	8012c24 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012c04:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8012c08:	4293      	cmp	r3, r2
 8012c0a:	d00b      	beq.n	8012c24 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	330c      	adds	r3, #12
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d003      	beq.n	8012c1e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	330c      	adds	r3, #12
 8012c1a:	61bb      	str	r3, [r7, #24]
 8012c1c:	e002      	b.n	8012c24 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8012c1e:	f06f 0303 	mvn.w	r3, #3
 8012c22:	e07d      	b.n	8012d20 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012c24:	4b46      	ldr	r3, [pc, #280]	@ (8012d40 <etharp_output+0x1fc>)
 8012c26:	781b      	ldrb	r3, [r3, #0]
 8012c28:	4619      	mov	r1, r3
 8012c2a:	4a46      	ldr	r2, [pc, #280]	@ (8012d44 <etharp_output+0x200>)
 8012c2c:	460b      	mov	r3, r1
 8012c2e:	005b      	lsls	r3, r3, #1
 8012c30:	440b      	add	r3, r1
 8012c32:	00db      	lsls	r3, r3, #3
 8012c34:	4413      	add	r3, r2
 8012c36:	3314      	adds	r3, #20
 8012c38:	781b      	ldrb	r3, [r3, #0]
 8012c3a:	2b01      	cmp	r3, #1
 8012c3c:	d925      	bls.n	8012c8a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012c3e:	4b40      	ldr	r3, [pc, #256]	@ (8012d40 <etharp_output+0x1fc>)
 8012c40:	781b      	ldrb	r3, [r3, #0]
 8012c42:	4619      	mov	r1, r3
 8012c44:	4a3f      	ldr	r2, [pc, #252]	@ (8012d44 <etharp_output+0x200>)
 8012c46:	460b      	mov	r3, r1
 8012c48:	005b      	lsls	r3, r3, #1
 8012c4a:	440b      	add	r3, r1
 8012c4c:	00db      	lsls	r3, r3, #3
 8012c4e:	4413      	add	r3, r2
 8012c50:	3308      	adds	r3, #8
 8012c52:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012c54:	68fa      	ldr	r2, [r7, #12]
 8012c56:	429a      	cmp	r2, r3
 8012c58:	d117      	bne.n	8012c8a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012c5a:	69bb      	ldr	r3, [r7, #24]
 8012c5c:	681a      	ldr	r2, [r3, #0]
 8012c5e:	4b38      	ldr	r3, [pc, #224]	@ (8012d40 <etharp_output+0x1fc>)
 8012c60:	781b      	ldrb	r3, [r3, #0]
 8012c62:	4618      	mov	r0, r3
 8012c64:	4937      	ldr	r1, [pc, #220]	@ (8012d44 <etharp_output+0x200>)
 8012c66:	4603      	mov	r3, r0
 8012c68:	005b      	lsls	r3, r3, #1
 8012c6a:	4403      	add	r3, r0
 8012c6c:	00db      	lsls	r3, r3, #3
 8012c6e:	440b      	add	r3, r1
 8012c70:	3304      	adds	r3, #4
 8012c72:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012c74:	429a      	cmp	r2, r3
 8012c76:	d108      	bne.n	8012c8a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012c78:	4b31      	ldr	r3, [pc, #196]	@ (8012d40 <etharp_output+0x1fc>)
 8012c7a:	781b      	ldrb	r3, [r3, #0]
 8012c7c:	461a      	mov	r2, r3
 8012c7e:	68b9      	ldr	r1, [r7, #8]
 8012c80:	68f8      	ldr	r0, [r7, #12]
 8012c82:	f7ff fec5 	bl	8012a10 <etharp_output_to_arp_index>
 8012c86:	4603      	mov	r3, r0
 8012c88:	e04a      	b.n	8012d20 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	75fb      	strb	r3, [r7, #23]
 8012c8e:	e031      	b.n	8012cf4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012c90:	7dfa      	ldrb	r2, [r7, #23]
 8012c92:	492c      	ldr	r1, [pc, #176]	@ (8012d44 <etharp_output+0x200>)
 8012c94:	4613      	mov	r3, r2
 8012c96:	005b      	lsls	r3, r3, #1
 8012c98:	4413      	add	r3, r2
 8012c9a:	00db      	lsls	r3, r3, #3
 8012c9c:	440b      	add	r3, r1
 8012c9e:	3314      	adds	r3, #20
 8012ca0:	781b      	ldrb	r3, [r3, #0]
 8012ca2:	2b01      	cmp	r3, #1
 8012ca4:	d923      	bls.n	8012cee <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8012ca6:	7dfa      	ldrb	r2, [r7, #23]
 8012ca8:	4926      	ldr	r1, [pc, #152]	@ (8012d44 <etharp_output+0x200>)
 8012caa:	4613      	mov	r3, r2
 8012cac:	005b      	lsls	r3, r3, #1
 8012cae:	4413      	add	r3, r2
 8012cb0:	00db      	lsls	r3, r3, #3
 8012cb2:	440b      	add	r3, r1
 8012cb4:	3308      	adds	r3, #8
 8012cb6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012cb8:	68fa      	ldr	r2, [r7, #12]
 8012cba:	429a      	cmp	r2, r3
 8012cbc:	d117      	bne.n	8012cee <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012cbe:	69bb      	ldr	r3, [r7, #24]
 8012cc0:	6819      	ldr	r1, [r3, #0]
 8012cc2:	7dfa      	ldrb	r2, [r7, #23]
 8012cc4:	481f      	ldr	r0, [pc, #124]	@ (8012d44 <etharp_output+0x200>)
 8012cc6:	4613      	mov	r3, r2
 8012cc8:	005b      	lsls	r3, r3, #1
 8012cca:	4413      	add	r3, r2
 8012ccc:	00db      	lsls	r3, r3, #3
 8012cce:	4403      	add	r3, r0
 8012cd0:	3304      	adds	r3, #4
 8012cd2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012cd4:	4299      	cmp	r1, r3
 8012cd6:	d10a      	bne.n	8012cee <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012cd8:	4a19      	ldr	r2, [pc, #100]	@ (8012d40 <etharp_output+0x1fc>)
 8012cda:	7dfb      	ldrb	r3, [r7, #23]
 8012cdc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8012cde:	7dfb      	ldrb	r3, [r7, #23]
 8012ce0:	461a      	mov	r2, r3
 8012ce2:	68b9      	ldr	r1, [r7, #8]
 8012ce4:	68f8      	ldr	r0, [r7, #12]
 8012ce6:	f7ff fe93 	bl	8012a10 <etharp_output_to_arp_index>
 8012cea:	4603      	mov	r3, r0
 8012cec:	e018      	b.n	8012d20 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012cee:	7dfb      	ldrb	r3, [r7, #23]
 8012cf0:	3301      	adds	r3, #1
 8012cf2:	75fb      	strb	r3, [r7, #23]
 8012cf4:	7dfb      	ldrb	r3, [r7, #23]
 8012cf6:	2b09      	cmp	r3, #9
 8012cf8:	d9ca      	bls.n	8012c90 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8012cfa:	68ba      	ldr	r2, [r7, #8]
 8012cfc:	69b9      	ldr	r1, [r7, #24]
 8012cfe:	68f8      	ldr	r0, [r7, #12]
 8012d00:	f000 f822 	bl	8012d48 <etharp_query>
 8012d04:	4603      	mov	r3, r0
 8012d06:	e00b      	b.n	8012d20 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8012d0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012d12:	9300      	str	r3, [sp, #0]
 8012d14:	69fb      	ldr	r3, [r7, #28]
 8012d16:	68b9      	ldr	r1, [r7, #8]
 8012d18:	68f8      	ldr	r0, [r7, #12]
 8012d1a:	f001 fd45 	bl	80147a8 <ethernet_output>
 8012d1e:	4603      	mov	r3, r0
}
 8012d20:	4618      	mov	r0, r3
 8012d22:	3720      	adds	r7, #32
 8012d24:	46bd      	mov	sp, r7
 8012d26:	bd80      	pop	{r7, pc}
 8012d28:	08017f4c 	.word	0x08017f4c
 8012d2c:	0801809c 	.word	0x0801809c
 8012d30:	08017fc4 	.word	0x08017fc4
 8012d34:	080180ec 	.word	0x080180ec
 8012d38:	0801808c 	.word	0x0801808c
 8012d3c:	08018748 	.word	0x08018748
 8012d40:	2001045c 	.word	0x2001045c
 8012d44:	2001036c 	.word	0x2001036c

08012d48 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b08c      	sub	sp, #48	@ 0x30
 8012d4c:	af02      	add	r7, sp, #8
 8012d4e:	60f8      	str	r0, [r7, #12]
 8012d50:	60b9      	str	r1, [r7, #8]
 8012d52:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	3326      	adds	r3, #38	@ 0x26
 8012d58:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8012d5a:	23ff      	movs	r3, #255	@ 0xff
 8012d5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8012d60:	2300      	movs	r3, #0
 8012d62:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012d64:	68bb      	ldr	r3, [r7, #8]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	68f9      	ldr	r1, [r7, #12]
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f000 fe0e 	bl	801398c <ip4_addr_isbroadcast_u32>
 8012d70:	4603      	mov	r3, r0
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d10c      	bne.n	8012d90 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012d76:	68bb      	ldr	r3, [r7, #8]
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012d7e:	2be0      	cmp	r3, #224	@ 0xe0
 8012d80:	d006      	beq.n	8012d90 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012d82:	68bb      	ldr	r3, [r7, #8]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d003      	beq.n	8012d90 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012d88:	68bb      	ldr	r3, [r7, #8]
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d102      	bne.n	8012d96 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012d90:	f06f 030f 	mvn.w	r3, #15
 8012d94:	e101      	b.n	8012f9a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012d96:	68fa      	ldr	r2, [r7, #12]
 8012d98:	2101      	movs	r1, #1
 8012d9a:	68b8      	ldr	r0, [r7, #8]
 8012d9c:	f7ff fb60 	bl	8012460 <etharp_find_entry>
 8012da0:	4603      	mov	r3, r0
 8012da2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012da4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	da02      	bge.n	8012db2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012dac:	8a7b      	ldrh	r3, [r7, #18]
 8012dae:	b25b      	sxtb	r3, r3
 8012db0:	e0f3      	b.n	8012f9a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8012db2:	8a7b      	ldrh	r3, [r7, #18]
 8012db4:	2b7e      	cmp	r3, #126	@ 0x7e
 8012db6:	d906      	bls.n	8012dc6 <etharp_query+0x7e>
 8012db8:	4b7a      	ldr	r3, [pc, #488]	@ (8012fa4 <etharp_query+0x25c>)
 8012dba:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8012dbe:	497a      	ldr	r1, [pc, #488]	@ (8012fa8 <etharp_query+0x260>)
 8012dc0:	487a      	ldr	r0, [pc, #488]	@ (8012fac <etharp_query+0x264>)
 8012dc2:	f001 ff4f 	bl	8014c64 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012dc6:	8a7b      	ldrh	r3, [r7, #18]
 8012dc8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012dca:	7c7a      	ldrb	r2, [r7, #17]
 8012dcc:	4978      	ldr	r1, [pc, #480]	@ (8012fb0 <etharp_query+0x268>)
 8012dce:	4613      	mov	r3, r2
 8012dd0:	005b      	lsls	r3, r3, #1
 8012dd2:	4413      	add	r3, r2
 8012dd4:	00db      	lsls	r3, r3, #3
 8012dd6:	440b      	add	r3, r1
 8012dd8:	3314      	adds	r3, #20
 8012dda:	781b      	ldrb	r3, [r3, #0]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d115      	bne.n	8012e0c <etharp_query+0xc4>
    is_new_entry = 1;
 8012de0:	2301      	movs	r3, #1
 8012de2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012de4:	7c7a      	ldrb	r2, [r7, #17]
 8012de6:	4972      	ldr	r1, [pc, #456]	@ (8012fb0 <etharp_query+0x268>)
 8012de8:	4613      	mov	r3, r2
 8012dea:	005b      	lsls	r3, r3, #1
 8012dec:	4413      	add	r3, r2
 8012dee:	00db      	lsls	r3, r3, #3
 8012df0:	440b      	add	r3, r1
 8012df2:	3314      	adds	r3, #20
 8012df4:	2201      	movs	r2, #1
 8012df6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012df8:	7c7a      	ldrb	r2, [r7, #17]
 8012dfa:	496d      	ldr	r1, [pc, #436]	@ (8012fb0 <etharp_query+0x268>)
 8012dfc:	4613      	mov	r3, r2
 8012dfe:	005b      	lsls	r3, r3, #1
 8012e00:	4413      	add	r3, r2
 8012e02:	00db      	lsls	r3, r3, #3
 8012e04:	440b      	add	r3, r1
 8012e06:	3308      	adds	r3, #8
 8012e08:	68fa      	ldr	r2, [r7, #12]
 8012e0a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012e0c:	7c7a      	ldrb	r2, [r7, #17]
 8012e0e:	4968      	ldr	r1, [pc, #416]	@ (8012fb0 <etharp_query+0x268>)
 8012e10:	4613      	mov	r3, r2
 8012e12:	005b      	lsls	r3, r3, #1
 8012e14:	4413      	add	r3, r2
 8012e16:	00db      	lsls	r3, r3, #3
 8012e18:	440b      	add	r3, r1
 8012e1a:	3314      	adds	r3, #20
 8012e1c:	781b      	ldrb	r3, [r3, #0]
 8012e1e:	2b01      	cmp	r3, #1
 8012e20:	d011      	beq.n	8012e46 <etharp_query+0xfe>
 8012e22:	7c7a      	ldrb	r2, [r7, #17]
 8012e24:	4962      	ldr	r1, [pc, #392]	@ (8012fb0 <etharp_query+0x268>)
 8012e26:	4613      	mov	r3, r2
 8012e28:	005b      	lsls	r3, r3, #1
 8012e2a:	4413      	add	r3, r2
 8012e2c:	00db      	lsls	r3, r3, #3
 8012e2e:	440b      	add	r3, r1
 8012e30:	3314      	adds	r3, #20
 8012e32:	781b      	ldrb	r3, [r3, #0]
 8012e34:	2b01      	cmp	r3, #1
 8012e36:	d806      	bhi.n	8012e46 <etharp_query+0xfe>
 8012e38:	4b5a      	ldr	r3, [pc, #360]	@ (8012fa4 <etharp_query+0x25c>)
 8012e3a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8012e3e:	495d      	ldr	r1, [pc, #372]	@ (8012fb4 <etharp_query+0x26c>)
 8012e40:	485a      	ldr	r0, [pc, #360]	@ (8012fac <etharp_query+0x264>)
 8012e42:	f001 ff0f 	bl	8014c64 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012e46:	6a3b      	ldr	r3, [r7, #32]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d102      	bne.n	8012e52 <etharp_query+0x10a>
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d10c      	bne.n	8012e6c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012e52:	68b9      	ldr	r1, [r7, #8]
 8012e54:	68f8      	ldr	r0, [r7, #12]
 8012e56:	f000 f963 	bl	8013120 <etharp_request>
 8012e5a:	4603      	mov	r3, r0
 8012e5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d102      	bne.n	8012e6c <etharp_query+0x124>
      return result;
 8012e66:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8012e6a:	e096      	b.n	8012f9a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d106      	bne.n	8012e80 <etharp_query+0x138>
 8012e72:	4b4c      	ldr	r3, [pc, #304]	@ (8012fa4 <etharp_query+0x25c>)
 8012e74:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8012e78:	494f      	ldr	r1, [pc, #316]	@ (8012fb8 <etharp_query+0x270>)
 8012e7a:	484c      	ldr	r0, [pc, #304]	@ (8012fac <etharp_query+0x264>)
 8012e7c:	f001 fef2 	bl	8014c64 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012e80:	7c7a      	ldrb	r2, [r7, #17]
 8012e82:	494b      	ldr	r1, [pc, #300]	@ (8012fb0 <etharp_query+0x268>)
 8012e84:	4613      	mov	r3, r2
 8012e86:	005b      	lsls	r3, r3, #1
 8012e88:	4413      	add	r3, r2
 8012e8a:	00db      	lsls	r3, r3, #3
 8012e8c:	440b      	add	r3, r1
 8012e8e:	3314      	adds	r3, #20
 8012e90:	781b      	ldrb	r3, [r3, #0]
 8012e92:	2b01      	cmp	r3, #1
 8012e94:	d917      	bls.n	8012ec6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8012e96:	4a49      	ldr	r2, [pc, #292]	@ (8012fbc <etharp_query+0x274>)
 8012e98:	7c7b      	ldrb	r3, [r7, #17]
 8012e9a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012e9c:	7c7a      	ldrb	r2, [r7, #17]
 8012e9e:	4613      	mov	r3, r2
 8012ea0:	005b      	lsls	r3, r3, #1
 8012ea2:	4413      	add	r3, r2
 8012ea4:	00db      	lsls	r3, r3, #3
 8012ea6:	3308      	adds	r3, #8
 8012ea8:	4a41      	ldr	r2, [pc, #260]	@ (8012fb0 <etharp_query+0x268>)
 8012eaa:	4413      	add	r3, r2
 8012eac:	3304      	adds	r3, #4
 8012eae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012eb2:	9200      	str	r2, [sp, #0]
 8012eb4:	697a      	ldr	r2, [r7, #20]
 8012eb6:	6879      	ldr	r1, [r7, #4]
 8012eb8:	68f8      	ldr	r0, [r7, #12]
 8012eba:	f001 fc75 	bl	80147a8 <ethernet_output>
 8012ebe:	4603      	mov	r3, r0
 8012ec0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012ec4:	e067      	b.n	8012f96 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012ec6:	7c7a      	ldrb	r2, [r7, #17]
 8012ec8:	4939      	ldr	r1, [pc, #228]	@ (8012fb0 <etharp_query+0x268>)
 8012eca:	4613      	mov	r3, r2
 8012ecc:	005b      	lsls	r3, r3, #1
 8012ece:	4413      	add	r3, r2
 8012ed0:	00db      	lsls	r3, r3, #3
 8012ed2:	440b      	add	r3, r1
 8012ed4:	3314      	adds	r3, #20
 8012ed6:	781b      	ldrb	r3, [r3, #0]
 8012ed8:	2b01      	cmp	r3, #1
 8012eda:	d15c      	bne.n	8012f96 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012edc:	2300      	movs	r3, #0
 8012ede:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012ee4:	e01c      	b.n	8012f20 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012ee6:	69fb      	ldr	r3, [r7, #28]
 8012ee8:	895a      	ldrh	r2, [r3, #10]
 8012eea:	69fb      	ldr	r3, [r7, #28]
 8012eec:	891b      	ldrh	r3, [r3, #8]
 8012eee:	429a      	cmp	r2, r3
 8012ef0:	d10a      	bne.n	8012f08 <etharp_query+0x1c0>
 8012ef2:	69fb      	ldr	r3, [r7, #28]
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d006      	beq.n	8012f08 <etharp_query+0x1c0>
 8012efa:	4b2a      	ldr	r3, [pc, #168]	@ (8012fa4 <etharp_query+0x25c>)
 8012efc:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8012f00:	492f      	ldr	r1, [pc, #188]	@ (8012fc0 <etharp_query+0x278>)
 8012f02:	482a      	ldr	r0, [pc, #168]	@ (8012fac <etharp_query+0x264>)
 8012f04:	f001 feae 	bl	8014c64 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012f08:	69fb      	ldr	r3, [r7, #28]
 8012f0a:	7b1b      	ldrb	r3, [r3, #12]
 8012f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d002      	beq.n	8012f1a <etharp_query+0x1d2>
        copy_needed = 1;
 8012f14:	2301      	movs	r3, #1
 8012f16:	61bb      	str	r3, [r7, #24]
        break;
 8012f18:	e005      	b.n	8012f26 <etharp_query+0x1de>
      }
      p = p->next;
 8012f1a:	69fb      	ldr	r3, [r7, #28]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012f20:	69fb      	ldr	r3, [r7, #28]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d1df      	bne.n	8012ee6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8012f26:	69bb      	ldr	r3, [r7, #24]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d007      	beq.n	8012f3c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012f2c:	687a      	ldr	r2, [r7, #4]
 8012f2e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8012f32:	200e      	movs	r0, #14
 8012f34:	f7f9 fcf6 	bl	800c924 <pbuf_clone>
 8012f38:	61f8      	str	r0, [r7, #28]
 8012f3a:	e004      	b.n	8012f46 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012f40:	69f8      	ldr	r0, [r7, #28]
 8012f42:	f7f9 fb2d 	bl	800c5a0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012f46:	69fb      	ldr	r3, [r7, #28]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d021      	beq.n	8012f90 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012f4c:	7c7a      	ldrb	r2, [r7, #17]
 8012f4e:	4918      	ldr	r1, [pc, #96]	@ (8012fb0 <etharp_query+0x268>)
 8012f50:	4613      	mov	r3, r2
 8012f52:	005b      	lsls	r3, r3, #1
 8012f54:	4413      	add	r3, r2
 8012f56:	00db      	lsls	r3, r3, #3
 8012f58:	440b      	add	r3, r1
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d00a      	beq.n	8012f76 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8012f60:	7c7a      	ldrb	r2, [r7, #17]
 8012f62:	4913      	ldr	r1, [pc, #76]	@ (8012fb0 <etharp_query+0x268>)
 8012f64:	4613      	mov	r3, r2
 8012f66:	005b      	lsls	r3, r3, #1
 8012f68:	4413      	add	r3, r2
 8012f6a:	00db      	lsls	r3, r3, #3
 8012f6c:	440b      	add	r3, r1
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	4618      	mov	r0, r3
 8012f72:	f7f9 fa6f 	bl	800c454 <pbuf_free>
      }
      arp_table[i].q = p;
 8012f76:	7c7a      	ldrb	r2, [r7, #17]
 8012f78:	490d      	ldr	r1, [pc, #52]	@ (8012fb0 <etharp_query+0x268>)
 8012f7a:	4613      	mov	r3, r2
 8012f7c:	005b      	lsls	r3, r3, #1
 8012f7e:	4413      	add	r3, r2
 8012f80:	00db      	lsls	r3, r3, #3
 8012f82:	440b      	add	r3, r1
 8012f84:	69fa      	ldr	r2, [r7, #28]
 8012f86:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012f88:	2300      	movs	r3, #0
 8012f8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012f8e:	e002      	b.n	8012f96 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8012f90:	23ff      	movs	r3, #255	@ 0xff
 8012f92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8012f96:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	3728      	adds	r7, #40	@ 0x28
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	bd80      	pop	{r7, pc}
 8012fa2:	bf00      	nop
 8012fa4:	08017f4c 	.word	0x08017f4c
 8012fa8:	080180f8 	.word	0x080180f8
 8012fac:	08017fc4 	.word	0x08017fc4
 8012fb0:	2001036c 	.word	0x2001036c
 8012fb4:	08018108 	.word	0x08018108
 8012fb8:	080180ec 	.word	0x080180ec
 8012fbc:	2001045c 	.word	0x2001045c
 8012fc0:	08018130 	.word	0x08018130

08012fc4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b08a      	sub	sp, #40	@ 0x28
 8012fc8:	af02      	add	r7, sp, #8
 8012fca:	60f8      	str	r0, [r7, #12]
 8012fcc:	60b9      	str	r1, [r7, #8]
 8012fce:	607a      	str	r2, [r7, #4]
 8012fd0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d106      	bne.n	8012fea <etharp_raw+0x26>
 8012fdc:	4b3a      	ldr	r3, [pc, #232]	@ (80130c8 <etharp_raw+0x104>)
 8012fde:	f240 4257 	movw	r2, #1111	@ 0x457
 8012fe2:	493a      	ldr	r1, [pc, #232]	@ (80130cc <etharp_raw+0x108>)
 8012fe4:	483a      	ldr	r0, [pc, #232]	@ (80130d0 <etharp_raw+0x10c>)
 8012fe6:	f001 fe3d 	bl	8014c64 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012fea:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012fee:	211c      	movs	r1, #28
 8012ff0:	200e      	movs	r0, #14
 8012ff2:	f7f8 ff47 	bl	800be84 <pbuf_alloc>
 8012ff6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012ff8:	69bb      	ldr	r3, [r7, #24]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d102      	bne.n	8013004 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012ffe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013002:	e05d      	b.n	80130c0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8013004:	69bb      	ldr	r3, [r7, #24]
 8013006:	895b      	ldrh	r3, [r3, #10]
 8013008:	2b1b      	cmp	r3, #27
 801300a:	d806      	bhi.n	801301a <etharp_raw+0x56>
 801300c:	4b2e      	ldr	r3, [pc, #184]	@ (80130c8 <etharp_raw+0x104>)
 801300e:	f240 4262 	movw	r2, #1122	@ 0x462
 8013012:	4930      	ldr	r1, [pc, #192]	@ (80130d4 <etharp_raw+0x110>)
 8013014:	482e      	ldr	r0, [pc, #184]	@ (80130d0 <etharp_raw+0x10c>)
 8013016:	f001 fe25 	bl	8014c64 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801301a:	69bb      	ldr	r3, [r7, #24]
 801301c:	685b      	ldr	r3, [r3, #4]
 801301e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8013020:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8013022:	4618      	mov	r0, r3
 8013024:	f7f7 fe14 	bl	800ac50 <lwip_htons>
 8013028:	4603      	mov	r3, r0
 801302a:	461a      	mov	r2, r3
 801302c:	697b      	ldr	r3, [r7, #20]
 801302e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8013036:	2b06      	cmp	r3, #6
 8013038:	d006      	beq.n	8013048 <etharp_raw+0x84>
 801303a:	4b23      	ldr	r3, [pc, #140]	@ (80130c8 <etharp_raw+0x104>)
 801303c:	f240 4269 	movw	r2, #1129	@ 0x469
 8013040:	4925      	ldr	r1, [pc, #148]	@ (80130d8 <etharp_raw+0x114>)
 8013042:	4823      	ldr	r0, [pc, #140]	@ (80130d0 <etharp_raw+0x10c>)
 8013044:	f001 fe0e 	bl	8014c64 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8013048:	697b      	ldr	r3, [r7, #20]
 801304a:	3308      	adds	r3, #8
 801304c:	2206      	movs	r2, #6
 801304e:	6839      	ldr	r1, [r7, #0]
 8013050:	4618      	mov	r0, r3
 8013052:	f001 fee2 	bl	8014e1a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8013056:	697b      	ldr	r3, [r7, #20]
 8013058:	3312      	adds	r3, #18
 801305a:	2206      	movs	r2, #6
 801305c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801305e:	4618      	mov	r0, r3
 8013060:	f001 fedb 	bl	8014e1a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8013064:	697b      	ldr	r3, [r7, #20]
 8013066:	330e      	adds	r3, #14
 8013068:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801306a:	6812      	ldr	r2, [r2, #0]
 801306c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801306e:	697b      	ldr	r3, [r7, #20]
 8013070:	3318      	adds	r3, #24
 8013072:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013074:	6812      	ldr	r2, [r2, #0]
 8013076:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8013078:	697b      	ldr	r3, [r7, #20]
 801307a:	2200      	movs	r2, #0
 801307c:	701a      	strb	r2, [r3, #0]
 801307e:	2200      	movs	r2, #0
 8013080:	f042 0201 	orr.w	r2, r2, #1
 8013084:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8013086:	697b      	ldr	r3, [r7, #20]
 8013088:	2200      	movs	r2, #0
 801308a:	f042 0208 	orr.w	r2, r2, #8
 801308e:	709a      	strb	r2, [r3, #2]
 8013090:	2200      	movs	r2, #0
 8013092:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8013094:	697b      	ldr	r3, [r7, #20]
 8013096:	2206      	movs	r2, #6
 8013098:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801309a:	697b      	ldr	r3, [r7, #20]
 801309c:	2204      	movs	r2, #4
 801309e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80130a0:	f640 0306 	movw	r3, #2054	@ 0x806
 80130a4:	9300      	str	r3, [sp, #0]
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	68ba      	ldr	r2, [r7, #8]
 80130aa:	69b9      	ldr	r1, [r7, #24]
 80130ac:	68f8      	ldr	r0, [r7, #12]
 80130ae:	f001 fb7b 	bl	80147a8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80130b2:	69b8      	ldr	r0, [r7, #24]
 80130b4:	f7f9 f9ce 	bl	800c454 <pbuf_free>
  p = NULL;
 80130b8:	2300      	movs	r3, #0
 80130ba:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80130bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80130c0:	4618      	mov	r0, r3
 80130c2:	3720      	adds	r7, #32
 80130c4:	46bd      	mov	sp, r7
 80130c6:	bd80      	pop	{r7, pc}
 80130c8:	08017f4c 	.word	0x08017f4c
 80130cc:	0801809c 	.word	0x0801809c
 80130d0:	08017fc4 	.word	0x08017fc4
 80130d4:	0801814c 	.word	0x0801814c
 80130d8:	08018180 	.word	0x08018180

080130dc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80130dc:	b580      	push	{r7, lr}
 80130de:	b088      	sub	sp, #32
 80130e0:	af04      	add	r7, sp, #16
 80130e2:	60f8      	str	r0, [r7, #12]
 80130e4:	60b9      	str	r1, [r7, #8]
 80130e6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80130f8:	2201      	movs	r2, #1
 80130fa:	9203      	str	r2, [sp, #12]
 80130fc:	68ba      	ldr	r2, [r7, #8]
 80130fe:	9202      	str	r2, [sp, #8]
 8013100:	4a06      	ldr	r2, [pc, #24]	@ (801311c <etharp_request_dst+0x40>)
 8013102:	9201      	str	r2, [sp, #4]
 8013104:	9300      	str	r3, [sp, #0]
 8013106:	4603      	mov	r3, r0
 8013108:	687a      	ldr	r2, [r7, #4]
 801310a:	68f8      	ldr	r0, [r7, #12]
 801310c:	f7ff ff5a 	bl	8012fc4 <etharp_raw>
 8013110:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8013112:	4618      	mov	r0, r3
 8013114:	3710      	adds	r7, #16
 8013116:	46bd      	mov	sp, r7
 8013118:	bd80      	pop	{r7, pc}
 801311a:	bf00      	nop
 801311c:	08018750 	.word	0x08018750

08013120 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013120:	b580      	push	{r7, lr}
 8013122:	b082      	sub	sp, #8
 8013124:	af00      	add	r7, sp, #0
 8013126:	6078      	str	r0, [r7, #4]
 8013128:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801312a:	4a05      	ldr	r2, [pc, #20]	@ (8013140 <etharp_request+0x20>)
 801312c:	6839      	ldr	r1, [r7, #0]
 801312e:	6878      	ldr	r0, [r7, #4]
 8013130:	f7ff ffd4 	bl	80130dc <etharp_request_dst>
 8013134:	4603      	mov	r3, r0
}
 8013136:	4618      	mov	r0, r3
 8013138:	3708      	adds	r7, #8
 801313a:	46bd      	mov	sp, r7
 801313c:	bd80      	pop	{r7, pc}
 801313e:	bf00      	nop
 8013140:	08018748 	.word	0x08018748

08013144 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8013144:	b580      	push	{r7, lr}
 8013146:	b08e      	sub	sp, #56	@ 0x38
 8013148:	af04      	add	r7, sp, #16
 801314a:	6078      	str	r0, [r7, #4]
 801314c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801314e:	4b79      	ldr	r3, [pc, #484]	@ (8013334 <icmp_input+0x1f0>)
 8013150:	689b      	ldr	r3, [r3, #8]
 8013152:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8013154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013156:	781b      	ldrb	r3, [r3, #0]
 8013158:	f003 030f 	and.w	r3, r3, #15
 801315c:	b2db      	uxtb	r3, r3
 801315e:	009b      	lsls	r3, r3, #2
 8013160:	b2db      	uxtb	r3, r3
 8013162:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8013164:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013166:	2b13      	cmp	r3, #19
 8013168:	f240 80cd 	bls.w	8013306 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	895b      	ldrh	r3, [r3, #10]
 8013170:	2b03      	cmp	r3, #3
 8013172:	f240 80ca 	bls.w	801330a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	685b      	ldr	r3, [r3, #4]
 801317a:	781b      	ldrb	r3, [r3, #0]
 801317c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013180:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8013184:	2b00      	cmp	r3, #0
 8013186:	f000 80b7 	beq.w	80132f8 <icmp_input+0x1b4>
 801318a:	2b08      	cmp	r3, #8
 801318c:	f040 80b7 	bne.w	80132fe <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013190:	4b69      	ldr	r3, [pc, #420]	@ (8013338 <icmp_input+0x1f4>)
 8013192:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013194:	4b67      	ldr	r3, [pc, #412]	@ (8013334 <icmp_input+0x1f0>)
 8013196:	695b      	ldr	r3, [r3, #20]
 8013198:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801319c:	2be0      	cmp	r3, #224	@ 0xe0
 801319e:	f000 80bb 	beq.w	8013318 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80131a2:	4b64      	ldr	r3, [pc, #400]	@ (8013334 <icmp_input+0x1f0>)
 80131a4:	695b      	ldr	r3, [r3, #20]
 80131a6:	4a63      	ldr	r2, [pc, #396]	@ (8013334 <icmp_input+0x1f0>)
 80131a8:	6812      	ldr	r2, [r2, #0]
 80131aa:	4611      	mov	r1, r2
 80131ac:	4618      	mov	r0, r3
 80131ae:	f000 fbed 	bl	801398c <ip4_addr_isbroadcast_u32>
 80131b2:	4603      	mov	r3, r0
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	f040 80b1 	bne.w	801331c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	891b      	ldrh	r3, [r3, #8]
 80131be:	2b07      	cmp	r3, #7
 80131c0:	f240 80a5 	bls.w	801330e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80131c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80131c6:	330e      	adds	r3, #14
 80131c8:	4619      	mov	r1, r3
 80131ca:	6878      	ldr	r0, [r7, #4]
 80131cc:	f7f9 f8ac 	bl	800c328 <pbuf_add_header>
 80131d0:	4603      	mov	r3, r0
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d04b      	beq.n	801326e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	891a      	ldrh	r2, [r3, #8]
 80131da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80131dc:	4413      	add	r3, r2
 80131de:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	891b      	ldrh	r3, [r3, #8]
 80131e4:	8b7a      	ldrh	r2, [r7, #26]
 80131e6:	429a      	cmp	r2, r3
 80131e8:	f0c0 809a 	bcc.w	8013320 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80131ec:	8b7b      	ldrh	r3, [r7, #26]
 80131ee:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80131f2:	4619      	mov	r1, r3
 80131f4:	200e      	movs	r0, #14
 80131f6:	f7f8 fe45 	bl	800be84 <pbuf_alloc>
 80131fa:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80131fc:	697b      	ldr	r3, [r7, #20]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	f000 8090 	beq.w	8013324 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013204:	697b      	ldr	r3, [r7, #20]
 8013206:	895b      	ldrh	r3, [r3, #10]
 8013208:	461a      	mov	r2, r3
 801320a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801320c:	3308      	adds	r3, #8
 801320e:	429a      	cmp	r2, r3
 8013210:	d203      	bcs.n	801321a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8013212:	6978      	ldr	r0, [r7, #20]
 8013214:	f7f9 f91e 	bl	800c454 <pbuf_free>
          goto icmperr;
 8013218:	e085      	b.n	8013326 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801321a:	697b      	ldr	r3, [r7, #20]
 801321c:	685b      	ldr	r3, [r3, #4]
 801321e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013220:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013222:	4618      	mov	r0, r3
 8013224:	f001 fdf9 	bl	8014e1a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013228:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801322a:	4619      	mov	r1, r3
 801322c:	6978      	ldr	r0, [r7, #20]
 801322e:	f7f9 f88b 	bl	800c348 <pbuf_remove_header>
 8013232:	4603      	mov	r3, r0
 8013234:	2b00      	cmp	r3, #0
 8013236:	d009      	beq.n	801324c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013238:	4b40      	ldr	r3, [pc, #256]	@ (801333c <icmp_input+0x1f8>)
 801323a:	22b6      	movs	r2, #182	@ 0xb6
 801323c:	4940      	ldr	r1, [pc, #256]	@ (8013340 <icmp_input+0x1fc>)
 801323e:	4841      	ldr	r0, [pc, #260]	@ (8013344 <icmp_input+0x200>)
 8013240:	f001 fd10 	bl	8014c64 <iprintf>
          pbuf_free(r);
 8013244:	6978      	ldr	r0, [r7, #20]
 8013246:	f7f9 f905 	bl	800c454 <pbuf_free>
          goto icmperr;
 801324a:	e06c      	b.n	8013326 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801324c:	6879      	ldr	r1, [r7, #4]
 801324e:	6978      	ldr	r0, [r7, #20]
 8013250:	f7f9 fa24 	bl	800c69c <pbuf_copy>
 8013254:	4603      	mov	r3, r0
 8013256:	2b00      	cmp	r3, #0
 8013258:	d003      	beq.n	8013262 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801325a:	6978      	ldr	r0, [r7, #20]
 801325c:	f7f9 f8fa 	bl	800c454 <pbuf_free>
          goto icmperr;
 8013260:	e061      	b.n	8013326 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8013262:	6878      	ldr	r0, [r7, #4]
 8013264:	f7f9 f8f6 	bl	800c454 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8013268:	697b      	ldr	r3, [r7, #20]
 801326a:	607b      	str	r3, [r7, #4]
 801326c:	e00f      	b.n	801328e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801326e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013270:	330e      	adds	r3, #14
 8013272:	4619      	mov	r1, r3
 8013274:	6878      	ldr	r0, [r7, #4]
 8013276:	f7f9 f867 	bl	800c348 <pbuf_remove_header>
 801327a:	4603      	mov	r3, r0
 801327c:	2b00      	cmp	r3, #0
 801327e:	d006      	beq.n	801328e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013280:	4b2e      	ldr	r3, [pc, #184]	@ (801333c <icmp_input+0x1f8>)
 8013282:	22c7      	movs	r2, #199	@ 0xc7
 8013284:	4930      	ldr	r1, [pc, #192]	@ (8013348 <icmp_input+0x204>)
 8013286:	482f      	ldr	r0, [pc, #188]	@ (8013344 <icmp_input+0x200>)
 8013288:	f001 fcec 	bl	8014c64 <iprintf>
          goto icmperr;
 801328c:	e04b      	b.n	8013326 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	685b      	ldr	r3, [r3, #4]
 8013292:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013294:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013296:	4619      	mov	r1, r3
 8013298:	6878      	ldr	r0, [r7, #4]
 801329a:	f7f9 f845 	bl	800c328 <pbuf_add_header>
 801329e:	4603      	mov	r3, r0
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d12b      	bne.n	80132fc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	685b      	ldr	r3, [r3, #4]
 80132a8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80132aa:	69fb      	ldr	r3, [r7, #28]
 80132ac:	681a      	ldr	r2, [r3, #0]
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80132b2:	4b20      	ldr	r3, [pc, #128]	@ (8013334 <icmp_input+0x1f0>)
 80132b4:	691a      	ldr	r2, [r3, #16]
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80132ba:	693b      	ldr	r3, [r7, #16]
 80132bc:	2200      	movs	r2, #0
 80132be:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80132c0:	693b      	ldr	r3, [r7, #16]
 80132c2:	2200      	movs	r2, #0
 80132c4:	709a      	strb	r2, [r3, #2]
 80132c6:	2200      	movs	r2, #0
 80132c8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	22ff      	movs	r2, #255	@ 0xff
 80132ce:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	2200      	movs	r2, #0
 80132d4:	729a      	strb	r2, [r3, #10]
 80132d6:	2200      	movs	r2, #0
 80132d8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80132da:	683b      	ldr	r3, [r7, #0]
 80132dc:	9302      	str	r3, [sp, #8]
 80132de:	2301      	movs	r3, #1
 80132e0:	9301      	str	r3, [sp, #4]
 80132e2:	2300      	movs	r3, #0
 80132e4:	9300      	str	r3, [sp, #0]
 80132e6:	23ff      	movs	r3, #255	@ 0xff
 80132e8:	2200      	movs	r2, #0
 80132ea:	69f9      	ldr	r1, [r7, #28]
 80132ec:	6878      	ldr	r0, [r7, #4]
 80132ee:	f000 fa75 	bl	80137dc <ip4_output_if>
 80132f2:	4603      	mov	r3, r0
 80132f4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80132f6:	e001      	b.n	80132fc <icmp_input+0x1b8>
      break;
 80132f8:	bf00      	nop
 80132fa:	e000      	b.n	80132fe <icmp_input+0x1ba>
      break;
 80132fc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80132fe:	6878      	ldr	r0, [r7, #4]
 8013300:	f7f9 f8a8 	bl	800c454 <pbuf_free>
  return;
 8013304:	e013      	b.n	801332e <icmp_input+0x1ea>
    goto lenerr;
 8013306:	bf00      	nop
 8013308:	e002      	b.n	8013310 <icmp_input+0x1cc>
    goto lenerr;
 801330a:	bf00      	nop
 801330c:	e000      	b.n	8013310 <icmp_input+0x1cc>
        goto lenerr;
 801330e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013310:	6878      	ldr	r0, [r7, #4]
 8013312:	f7f9 f89f 	bl	800c454 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013316:	e00a      	b.n	801332e <icmp_input+0x1ea>
        goto icmperr;
 8013318:	bf00      	nop
 801331a:	e004      	b.n	8013326 <icmp_input+0x1e2>
        goto icmperr;
 801331c:	bf00      	nop
 801331e:	e002      	b.n	8013326 <icmp_input+0x1e2>
          goto icmperr;
 8013320:	bf00      	nop
 8013322:	e000      	b.n	8013326 <icmp_input+0x1e2>
          goto icmperr;
 8013324:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8013326:	6878      	ldr	r0, [r7, #4]
 8013328:	f7f9 f894 	bl	800c454 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801332c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801332e:	3728      	adds	r7, #40	@ 0x28
 8013330:	46bd      	mov	sp, r7
 8013332:	bd80      	pop	{r7, pc}
 8013334:	2000984c 	.word	0x2000984c
 8013338:	20009860 	.word	0x20009860
 801333c:	080181c4 	.word	0x080181c4
 8013340:	080181fc 	.word	0x080181fc
 8013344:	08018234 	.word	0x08018234
 8013348:	0801825c 	.word	0x0801825c

0801334c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801334c:	b580      	push	{r7, lr}
 801334e:	b082      	sub	sp, #8
 8013350:	af00      	add	r7, sp, #0
 8013352:	6078      	str	r0, [r7, #4]
 8013354:	460b      	mov	r3, r1
 8013356:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013358:	78fb      	ldrb	r3, [r7, #3]
 801335a:	461a      	mov	r2, r3
 801335c:	2103      	movs	r1, #3
 801335e:	6878      	ldr	r0, [r7, #4]
 8013360:	f000 f814 	bl	801338c <icmp_send_response>
}
 8013364:	bf00      	nop
 8013366:	3708      	adds	r7, #8
 8013368:	46bd      	mov	sp, r7
 801336a:	bd80      	pop	{r7, pc}

0801336c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801336c:	b580      	push	{r7, lr}
 801336e:	b082      	sub	sp, #8
 8013370:	af00      	add	r7, sp, #0
 8013372:	6078      	str	r0, [r7, #4]
 8013374:	460b      	mov	r3, r1
 8013376:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013378:	78fb      	ldrb	r3, [r7, #3]
 801337a:	461a      	mov	r2, r3
 801337c:	210b      	movs	r1, #11
 801337e:	6878      	ldr	r0, [r7, #4]
 8013380:	f000 f804 	bl	801338c <icmp_send_response>
}
 8013384:	bf00      	nop
 8013386:	3708      	adds	r7, #8
 8013388:	46bd      	mov	sp, r7
 801338a:	bd80      	pop	{r7, pc}

0801338c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b08c      	sub	sp, #48	@ 0x30
 8013390:	af04      	add	r7, sp, #16
 8013392:	6078      	str	r0, [r7, #4]
 8013394:	460b      	mov	r3, r1
 8013396:	70fb      	strb	r3, [r7, #3]
 8013398:	4613      	mov	r3, r2
 801339a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801339c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80133a0:	2124      	movs	r1, #36	@ 0x24
 80133a2:	2022      	movs	r0, #34	@ 0x22
 80133a4:	f7f8 fd6e 	bl	800be84 <pbuf_alloc>
 80133a8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80133aa:	69fb      	ldr	r3, [r7, #28]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d04c      	beq.n	801344a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80133b0:	69fb      	ldr	r3, [r7, #28]
 80133b2:	895b      	ldrh	r3, [r3, #10]
 80133b4:	2b23      	cmp	r3, #35	@ 0x23
 80133b6:	d806      	bhi.n	80133c6 <icmp_send_response+0x3a>
 80133b8:	4b26      	ldr	r3, [pc, #152]	@ (8013454 <icmp_send_response+0xc8>)
 80133ba:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80133be:	4926      	ldr	r1, [pc, #152]	@ (8013458 <icmp_send_response+0xcc>)
 80133c0:	4826      	ldr	r0, [pc, #152]	@ (801345c <icmp_send_response+0xd0>)
 80133c2:	f001 fc4f 	bl	8014c64 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	685b      	ldr	r3, [r3, #4]
 80133ca:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80133cc:	69fb      	ldr	r3, [r7, #28]
 80133ce:	685b      	ldr	r3, [r3, #4]
 80133d0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80133d2:	697b      	ldr	r3, [r7, #20]
 80133d4:	78fa      	ldrb	r2, [r7, #3]
 80133d6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80133d8:	697b      	ldr	r3, [r7, #20]
 80133da:	78ba      	ldrb	r2, [r7, #2]
 80133dc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80133de:	697b      	ldr	r3, [r7, #20]
 80133e0:	2200      	movs	r2, #0
 80133e2:	711a      	strb	r2, [r3, #4]
 80133e4:	2200      	movs	r2, #0
 80133e6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80133e8:	697b      	ldr	r3, [r7, #20]
 80133ea:	2200      	movs	r2, #0
 80133ec:	719a      	strb	r2, [r3, #6]
 80133ee:	2200      	movs	r2, #0
 80133f0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80133f2:	69fb      	ldr	r3, [r7, #28]
 80133f4:	685b      	ldr	r3, [r3, #4]
 80133f6:	f103 0008 	add.w	r0, r3, #8
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	685b      	ldr	r3, [r3, #4]
 80133fe:	221c      	movs	r2, #28
 8013400:	4619      	mov	r1, r3
 8013402:	f001 fd0a 	bl	8014e1a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8013406:	69bb      	ldr	r3, [r7, #24]
 8013408:	68db      	ldr	r3, [r3, #12]
 801340a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801340c:	f107 030c 	add.w	r3, r7, #12
 8013410:	4618      	mov	r0, r3
 8013412:	f000 f825 	bl	8013460 <ip4_route>
 8013416:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013418:	693b      	ldr	r3, [r7, #16]
 801341a:	2b00      	cmp	r3, #0
 801341c:	d011      	beq.n	8013442 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801341e:	697b      	ldr	r3, [r7, #20]
 8013420:	2200      	movs	r2, #0
 8013422:	709a      	strb	r2, [r3, #2]
 8013424:	2200      	movs	r2, #0
 8013426:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013428:	f107 020c 	add.w	r2, r7, #12
 801342c:	693b      	ldr	r3, [r7, #16]
 801342e:	9302      	str	r3, [sp, #8]
 8013430:	2301      	movs	r3, #1
 8013432:	9301      	str	r3, [sp, #4]
 8013434:	2300      	movs	r3, #0
 8013436:	9300      	str	r3, [sp, #0]
 8013438:	23ff      	movs	r3, #255	@ 0xff
 801343a:	2100      	movs	r1, #0
 801343c:	69f8      	ldr	r0, [r7, #28]
 801343e:	f000 f9cd 	bl	80137dc <ip4_output_if>
  }
  pbuf_free(q);
 8013442:	69f8      	ldr	r0, [r7, #28]
 8013444:	f7f9 f806 	bl	800c454 <pbuf_free>
 8013448:	e000      	b.n	801344c <icmp_send_response+0xc0>
    return;
 801344a:	bf00      	nop
}
 801344c:	3720      	adds	r7, #32
 801344e:	46bd      	mov	sp, r7
 8013450:	bd80      	pop	{r7, pc}
 8013452:	bf00      	nop
 8013454:	080181c4 	.word	0x080181c4
 8013458:	08018290 	.word	0x08018290
 801345c:	08018234 	.word	0x08018234

08013460 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013460:	b480      	push	{r7}
 8013462:	b085      	sub	sp, #20
 8013464:	af00      	add	r7, sp, #0
 8013466:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013468:	4b33      	ldr	r3, [pc, #204]	@ (8013538 <ip4_route+0xd8>)
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	60fb      	str	r3, [r7, #12]
 801346e:	e036      	b.n	80134de <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013476:	f003 0301 	and.w	r3, r3, #1
 801347a:	b2db      	uxtb	r3, r3
 801347c:	2b00      	cmp	r3, #0
 801347e:	d02b      	beq.n	80134d8 <ip4_route+0x78>
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013486:	089b      	lsrs	r3, r3, #2
 8013488:	f003 0301 	and.w	r3, r3, #1
 801348c:	b2db      	uxtb	r3, r3
 801348e:	2b00      	cmp	r3, #0
 8013490:	d022      	beq.n	80134d8 <ip4_route+0x78>
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	3304      	adds	r3, #4
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d01d      	beq.n	80134d8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	681a      	ldr	r2, [r3, #0]
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	3304      	adds	r3, #4
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	405a      	eors	r2, r3
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	3308      	adds	r3, #8
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	4013      	ands	r3, r2
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d101      	bne.n	80134b8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	e038      	b.n	801352a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80134be:	f003 0302 	and.w	r3, r3, #2
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d108      	bne.n	80134d8 <ip4_route+0x78>
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	681a      	ldr	r2, [r3, #0]
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	330c      	adds	r3, #12
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	429a      	cmp	r2, r3
 80134d2:	d101      	bne.n	80134d8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	e028      	b.n	801352a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	60fb      	str	r3, [r7, #12]
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d1c5      	bne.n	8013470 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80134e4:	4b15      	ldr	r3, [pc, #84]	@ (801353c <ip4_route+0xdc>)
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d01a      	beq.n	8013522 <ip4_route+0xc2>
 80134ec:	4b13      	ldr	r3, [pc, #76]	@ (801353c <ip4_route+0xdc>)
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80134f4:	f003 0301 	and.w	r3, r3, #1
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d012      	beq.n	8013522 <ip4_route+0xc2>
 80134fc:	4b0f      	ldr	r3, [pc, #60]	@ (801353c <ip4_route+0xdc>)
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013504:	f003 0304 	and.w	r3, r3, #4
 8013508:	2b00      	cmp	r3, #0
 801350a:	d00a      	beq.n	8013522 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801350c:	4b0b      	ldr	r3, [pc, #44]	@ (801353c <ip4_route+0xdc>)
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	3304      	adds	r3, #4
 8013512:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013514:	2b00      	cmp	r3, #0
 8013516:	d004      	beq.n	8013522 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	b2db      	uxtb	r3, r3
 801351e:	2b7f      	cmp	r3, #127	@ 0x7f
 8013520:	d101      	bne.n	8013526 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8013522:	2300      	movs	r3, #0
 8013524:	e001      	b.n	801352a <ip4_route+0xca>
  }

  return netif_default;
 8013526:	4b05      	ldr	r3, [pc, #20]	@ (801353c <ip4_route+0xdc>)
 8013528:	681b      	ldr	r3, [r3, #0]
}
 801352a:	4618      	mov	r0, r3
 801352c:	3714      	adds	r7, #20
 801352e:	46bd      	mov	sp, r7
 8013530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013534:	4770      	bx	lr
 8013536:	bf00      	nop
 8013538:	20010300 	.word	0x20010300
 801353c:	20010304 	.word	0x20010304

08013540 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013540:	b580      	push	{r7, lr}
 8013542:	b082      	sub	sp, #8
 8013544:	af00      	add	r7, sp, #0
 8013546:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801354e:	f003 0301 	and.w	r3, r3, #1
 8013552:	b2db      	uxtb	r3, r3
 8013554:	2b00      	cmp	r3, #0
 8013556:	d016      	beq.n	8013586 <ip4_input_accept+0x46>
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	3304      	adds	r3, #4
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	2b00      	cmp	r3, #0
 8013560:	d011      	beq.n	8013586 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013562:	4b0b      	ldr	r3, [pc, #44]	@ (8013590 <ip4_input_accept+0x50>)
 8013564:	695a      	ldr	r2, [r3, #20]
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	3304      	adds	r3, #4
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	429a      	cmp	r2, r3
 801356e:	d008      	beq.n	8013582 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8013570:	4b07      	ldr	r3, [pc, #28]	@ (8013590 <ip4_input_accept+0x50>)
 8013572:	695b      	ldr	r3, [r3, #20]
 8013574:	6879      	ldr	r1, [r7, #4]
 8013576:	4618      	mov	r0, r3
 8013578:	f000 fa08 	bl	801398c <ip4_addr_isbroadcast_u32>
 801357c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801357e:	2b00      	cmp	r3, #0
 8013580:	d001      	beq.n	8013586 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8013582:	2301      	movs	r3, #1
 8013584:	e000      	b.n	8013588 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8013586:	2300      	movs	r3, #0
}
 8013588:	4618      	mov	r0, r3
 801358a:	3708      	adds	r7, #8
 801358c:	46bd      	mov	sp, r7
 801358e:	bd80      	pop	{r7, pc}
 8013590:	2000984c 	.word	0x2000984c

08013594 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013594:	b580      	push	{r7, lr}
 8013596:	b086      	sub	sp, #24
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
 801359c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	685b      	ldr	r3, [r3, #4]
 80135a2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80135a4:	697b      	ldr	r3, [r7, #20]
 80135a6:	781b      	ldrb	r3, [r3, #0]
 80135a8:	091b      	lsrs	r3, r3, #4
 80135aa:	b2db      	uxtb	r3, r3
 80135ac:	2b04      	cmp	r3, #4
 80135ae:	d004      	beq.n	80135ba <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80135b0:	6878      	ldr	r0, [r7, #4]
 80135b2:	f7f8 ff4f 	bl	800c454 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80135b6:	2300      	movs	r3, #0
 80135b8:	e107      	b.n	80137ca <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80135ba:	697b      	ldr	r3, [r7, #20]
 80135bc:	781b      	ldrb	r3, [r3, #0]
 80135be:	f003 030f 	and.w	r3, r3, #15
 80135c2:	b2db      	uxtb	r3, r3
 80135c4:	009b      	lsls	r3, r3, #2
 80135c6:	b2db      	uxtb	r3, r3
 80135c8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80135ca:	697b      	ldr	r3, [r7, #20]
 80135cc:	885b      	ldrh	r3, [r3, #2]
 80135ce:	b29b      	uxth	r3, r3
 80135d0:	4618      	mov	r0, r3
 80135d2:	f7f7 fb3d 	bl	800ac50 <lwip_htons>
 80135d6:	4603      	mov	r3, r0
 80135d8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	891b      	ldrh	r3, [r3, #8]
 80135de:	89ba      	ldrh	r2, [r7, #12]
 80135e0:	429a      	cmp	r2, r3
 80135e2:	d204      	bcs.n	80135ee <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80135e4:	89bb      	ldrh	r3, [r7, #12]
 80135e6:	4619      	mov	r1, r3
 80135e8:	6878      	ldr	r0, [r7, #4]
 80135ea:	f7f8 fdad 	bl	800c148 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	895b      	ldrh	r3, [r3, #10]
 80135f2:	89fa      	ldrh	r2, [r7, #14]
 80135f4:	429a      	cmp	r2, r3
 80135f6:	d807      	bhi.n	8013608 <ip4_input+0x74>
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	891b      	ldrh	r3, [r3, #8]
 80135fc:	89ba      	ldrh	r2, [r7, #12]
 80135fe:	429a      	cmp	r2, r3
 8013600:	d802      	bhi.n	8013608 <ip4_input+0x74>
 8013602:	89fb      	ldrh	r3, [r7, #14]
 8013604:	2b13      	cmp	r3, #19
 8013606:	d804      	bhi.n	8013612 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013608:	6878      	ldr	r0, [r7, #4]
 801360a:	f7f8 ff23 	bl	800c454 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801360e:	2300      	movs	r3, #0
 8013610:	e0db      	b.n	80137ca <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8013612:	697b      	ldr	r3, [r7, #20]
 8013614:	691b      	ldr	r3, [r3, #16]
 8013616:	4a6f      	ldr	r2, [pc, #444]	@ (80137d4 <ip4_input+0x240>)
 8013618:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801361a:	697b      	ldr	r3, [r7, #20]
 801361c:	68db      	ldr	r3, [r3, #12]
 801361e:	4a6d      	ldr	r2, [pc, #436]	@ (80137d4 <ip4_input+0x240>)
 8013620:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013622:	4b6c      	ldr	r3, [pc, #432]	@ (80137d4 <ip4_input+0x240>)
 8013624:	695b      	ldr	r3, [r3, #20]
 8013626:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801362a:	2be0      	cmp	r3, #224	@ 0xe0
 801362c:	d112      	bne.n	8013654 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801362e:	683b      	ldr	r3, [r7, #0]
 8013630:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013634:	f003 0301 	and.w	r3, r3, #1
 8013638:	b2db      	uxtb	r3, r3
 801363a:	2b00      	cmp	r3, #0
 801363c:	d007      	beq.n	801364e <ip4_input+0xba>
 801363e:	683b      	ldr	r3, [r7, #0]
 8013640:	3304      	adds	r3, #4
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d002      	beq.n	801364e <ip4_input+0xba>
      netif = inp;
 8013648:	683b      	ldr	r3, [r7, #0]
 801364a:	613b      	str	r3, [r7, #16]
 801364c:	e02a      	b.n	80136a4 <ip4_input+0x110>
    } else {
      netif = NULL;
 801364e:	2300      	movs	r3, #0
 8013650:	613b      	str	r3, [r7, #16]
 8013652:	e027      	b.n	80136a4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013654:	6838      	ldr	r0, [r7, #0]
 8013656:	f7ff ff73 	bl	8013540 <ip4_input_accept>
 801365a:	4603      	mov	r3, r0
 801365c:	2b00      	cmp	r3, #0
 801365e:	d002      	beq.n	8013666 <ip4_input+0xd2>
      netif = inp;
 8013660:	683b      	ldr	r3, [r7, #0]
 8013662:	613b      	str	r3, [r7, #16]
 8013664:	e01e      	b.n	80136a4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8013666:	2300      	movs	r3, #0
 8013668:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801366a:	4b5a      	ldr	r3, [pc, #360]	@ (80137d4 <ip4_input+0x240>)
 801366c:	695b      	ldr	r3, [r3, #20]
 801366e:	b2db      	uxtb	r3, r3
 8013670:	2b7f      	cmp	r3, #127	@ 0x7f
 8013672:	d017      	beq.n	80136a4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8013674:	4b58      	ldr	r3, [pc, #352]	@ (80137d8 <ip4_input+0x244>)
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	613b      	str	r3, [r7, #16]
 801367a:	e00e      	b.n	801369a <ip4_input+0x106>
          if (netif == inp) {
 801367c:	693a      	ldr	r2, [r7, #16]
 801367e:	683b      	ldr	r3, [r7, #0]
 8013680:	429a      	cmp	r2, r3
 8013682:	d006      	beq.n	8013692 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8013684:	6938      	ldr	r0, [r7, #16]
 8013686:	f7ff ff5b 	bl	8013540 <ip4_input_accept>
 801368a:	4603      	mov	r3, r0
 801368c:	2b00      	cmp	r3, #0
 801368e:	d108      	bne.n	80136a2 <ip4_input+0x10e>
 8013690:	e000      	b.n	8013694 <ip4_input+0x100>
            continue;
 8013692:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013694:	693b      	ldr	r3, [r7, #16]
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	613b      	str	r3, [r7, #16]
 801369a:	693b      	ldr	r3, [r7, #16]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d1ed      	bne.n	801367c <ip4_input+0xe8>
 80136a0:	e000      	b.n	80136a4 <ip4_input+0x110>
            break;
 80136a2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80136a4:	4b4b      	ldr	r3, [pc, #300]	@ (80137d4 <ip4_input+0x240>)
 80136a6:	691b      	ldr	r3, [r3, #16]
 80136a8:	6839      	ldr	r1, [r7, #0]
 80136aa:	4618      	mov	r0, r3
 80136ac:	f000 f96e 	bl	801398c <ip4_addr_isbroadcast_u32>
 80136b0:	4603      	mov	r3, r0
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d105      	bne.n	80136c2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80136b6:	4b47      	ldr	r3, [pc, #284]	@ (80137d4 <ip4_input+0x240>)
 80136b8:	691b      	ldr	r3, [r3, #16]
 80136ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80136be:	2be0      	cmp	r3, #224	@ 0xe0
 80136c0:	d104      	bne.n	80136cc <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80136c2:	6878      	ldr	r0, [r7, #4]
 80136c4:	f7f8 fec6 	bl	800c454 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80136c8:	2300      	movs	r3, #0
 80136ca:	e07e      	b.n	80137ca <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80136cc:	693b      	ldr	r3, [r7, #16]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d104      	bne.n	80136dc <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80136d2:	6878      	ldr	r0, [r7, #4]
 80136d4:	f7f8 febe 	bl	800c454 <pbuf_free>
    return ERR_OK;
 80136d8:	2300      	movs	r3, #0
 80136da:	e076      	b.n	80137ca <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80136dc:	697b      	ldr	r3, [r7, #20]
 80136de:	88db      	ldrh	r3, [r3, #6]
 80136e0:	b29b      	uxth	r3, r3
 80136e2:	461a      	mov	r2, r3
 80136e4:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80136e8:	4013      	ands	r3, r2
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d00b      	beq.n	8013706 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80136ee:	6878      	ldr	r0, [r7, #4]
 80136f0:	f000 fc92 	bl	8014018 <ip4_reass>
 80136f4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d101      	bne.n	8013700 <ip4_input+0x16c>
      return ERR_OK;
 80136fc:	2300      	movs	r3, #0
 80136fe:	e064      	b.n	80137ca <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	685b      	ldr	r3, [r3, #4]
 8013704:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013706:	4a33      	ldr	r2, [pc, #204]	@ (80137d4 <ip4_input+0x240>)
 8013708:	693b      	ldr	r3, [r7, #16]
 801370a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801370c:	4a31      	ldr	r2, [pc, #196]	@ (80137d4 <ip4_input+0x240>)
 801370e:	683b      	ldr	r3, [r7, #0]
 8013710:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013712:	4a30      	ldr	r2, [pc, #192]	@ (80137d4 <ip4_input+0x240>)
 8013714:	697b      	ldr	r3, [r7, #20]
 8013716:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013718:	697b      	ldr	r3, [r7, #20]
 801371a:	781b      	ldrb	r3, [r3, #0]
 801371c:	f003 030f 	and.w	r3, r3, #15
 8013720:	b2db      	uxtb	r3, r3
 8013722:	009b      	lsls	r3, r3, #2
 8013724:	b2db      	uxtb	r3, r3
 8013726:	461a      	mov	r2, r3
 8013728:	4b2a      	ldr	r3, [pc, #168]	@ (80137d4 <ip4_input+0x240>)
 801372a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801372c:	89fb      	ldrh	r3, [r7, #14]
 801372e:	4619      	mov	r1, r3
 8013730:	6878      	ldr	r0, [r7, #4]
 8013732:	f7f8 fe09 	bl	800c348 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013736:	697b      	ldr	r3, [r7, #20]
 8013738:	7a5b      	ldrb	r3, [r3, #9]
 801373a:	2b11      	cmp	r3, #17
 801373c:	d006      	beq.n	801374c <ip4_input+0x1b8>
 801373e:	2b11      	cmp	r3, #17
 8013740:	dc13      	bgt.n	801376a <ip4_input+0x1d6>
 8013742:	2b01      	cmp	r3, #1
 8013744:	d00c      	beq.n	8013760 <ip4_input+0x1cc>
 8013746:	2b06      	cmp	r3, #6
 8013748:	d005      	beq.n	8013756 <ip4_input+0x1c2>
 801374a:	e00e      	b.n	801376a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801374c:	6839      	ldr	r1, [r7, #0]
 801374e:	6878      	ldr	r0, [r7, #4]
 8013750:	f7fe fc68 	bl	8012024 <udp_input>
        break;
 8013754:	e026      	b.n	80137a4 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013756:	6839      	ldr	r1, [r7, #0]
 8013758:	6878      	ldr	r0, [r7, #4]
 801375a:	f7fa fcb5 	bl	800e0c8 <tcp_input>
        break;
 801375e:	e021      	b.n	80137a4 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013760:	6839      	ldr	r1, [r7, #0]
 8013762:	6878      	ldr	r0, [r7, #4]
 8013764:	f7ff fcee 	bl	8013144 <icmp_input>
        break;
 8013768:	e01c      	b.n	80137a4 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801376a:	4b1a      	ldr	r3, [pc, #104]	@ (80137d4 <ip4_input+0x240>)
 801376c:	695b      	ldr	r3, [r3, #20]
 801376e:	6939      	ldr	r1, [r7, #16]
 8013770:	4618      	mov	r0, r3
 8013772:	f000 f90b 	bl	801398c <ip4_addr_isbroadcast_u32>
 8013776:	4603      	mov	r3, r0
 8013778:	2b00      	cmp	r3, #0
 801377a:	d10f      	bne.n	801379c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801377c:	4b15      	ldr	r3, [pc, #84]	@ (80137d4 <ip4_input+0x240>)
 801377e:	695b      	ldr	r3, [r3, #20]
 8013780:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013784:	2be0      	cmp	r3, #224	@ 0xe0
 8013786:	d009      	beq.n	801379c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013788:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801378c:	4619      	mov	r1, r3
 801378e:	6878      	ldr	r0, [r7, #4]
 8013790:	f7f8 fe4d 	bl	800c42e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013794:	2102      	movs	r1, #2
 8013796:	6878      	ldr	r0, [r7, #4]
 8013798:	f7ff fdd8 	bl	801334c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801379c:	6878      	ldr	r0, [r7, #4]
 801379e:	f7f8 fe59 	bl	800c454 <pbuf_free>
        break;
 80137a2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80137a4:	4b0b      	ldr	r3, [pc, #44]	@ (80137d4 <ip4_input+0x240>)
 80137a6:	2200      	movs	r2, #0
 80137a8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80137aa:	4b0a      	ldr	r3, [pc, #40]	@ (80137d4 <ip4_input+0x240>)
 80137ac:	2200      	movs	r2, #0
 80137ae:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80137b0:	4b08      	ldr	r3, [pc, #32]	@ (80137d4 <ip4_input+0x240>)
 80137b2:	2200      	movs	r2, #0
 80137b4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80137b6:	4b07      	ldr	r3, [pc, #28]	@ (80137d4 <ip4_input+0x240>)
 80137b8:	2200      	movs	r2, #0
 80137ba:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80137bc:	4b05      	ldr	r3, [pc, #20]	@ (80137d4 <ip4_input+0x240>)
 80137be:	2200      	movs	r2, #0
 80137c0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80137c2:	4b04      	ldr	r3, [pc, #16]	@ (80137d4 <ip4_input+0x240>)
 80137c4:	2200      	movs	r2, #0
 80137c6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80137c8:	2300      	movs	r3, #0
}
 80137ca:	4618      	mov	r0, r3
 80137cc:	3718      	adds	r7, #24
 80137ce:	46bd      	mov	sp, r7
 80137d0:	bd80      	pop	{r7, pc}
 80137d2:	bf00      	nop
 80137d4:	2000984c 	.word	0x2000984c
 80137d8:	20010300 	.word	0x20010300

080137dc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80137dc:	b580      	push	{r7, lr}
 80137de:	b08a      	sub	sp, #40	@ 0x28
 80137e0:	af04      	add	r7, sp, #16
 80137e2:	60f8      	str	r0, [r7, #12]
 80137e4:	60b9      	str	r1, [r7, #8]
 80137e6:	607a      	str	r2, [r7, #4]
 80137e8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80137ea:	68bb      	ldr	r3, [r7, #8]
 80137ec:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d009      	beq.n	8013808 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80137f4:	68bb      	ldr	r3, [r7, #8]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d003      	beq.n	8013802 <ip4_output_if+0x26>
 80137fa:	68bb      	ldr	r3, [r7, #8]
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d102      	bne.n	8013808 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013804:	3304      	adds	r3, #4
 8013806:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013808:	78fa      	ldrb	r2, [r7, #3]
 801380a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801380c:	9302      	str	r3, [sp, #8]
 801380e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013812:	9301      	str	r3, [sp, #4]
 8013814:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013818:	9300      	str	r3, [sp, #0]
 801381a:	4613      	mov	r3, r2
 801381c:	687a      	ldr	r2, [r7, #4]
 801381e:	6979      	ldr	r1, [r7, #20]
 8013820:	68f8      	ldr	r0, [r7, #12]
 8013822:	f000 f805 	bl	8013830 <ip4_output_if_src>
 8013826:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013828:	4618      	mov	r0, r3
 801382a:	3718      	adds	r7, #24
 801382c:	46bd      	mov	sp, r7
 801382e:	bd80      	pop	{r7, pc}

08013830 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013830:	b580      	push	{r7, lr}
 8013832:	b088      	sub	sp, #32
 8013834:	af00      	add	r7, sp, #0
 8013836:	60f8      	str	r0, [r7, #12]
 8013838:	60b9      	str	r1, [r7, #8]
 801383a:	607a      	str	r2, [r7, #4]
 801383c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	7b9b      	ldrb	r3, [r3, #14]
 8013842:	2b01      	cmp	r3, #1
 8013844:	d006      	beq.n	8013854 <ip4_output_if_src+0x24>
 8013846:	4b4b      	ldr	r3, [pc, #300]	@ (8013974 <ip4_output_if_src+0x144>)
 8013848:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801384c:	494a      	ldr	r1, [pc, #296]	@ (8013978 <ip4_output_if_src+0x148>)
 801384e:	484b      	ldr	r0, [pc, #300]	@ (801397c <ip4_output_if_src+0x14c>)
 8013850:	f001 fa08 	bl	8014c64 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d060      	beq.n	801391c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801385a:	2314      	movs	r3, #20
 801385c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801385e:	2114      	movs	r1, #20
 8013860:	68f8      	ldr	r0, [r7, #12]
 8013862:	f7f8 fd61 	bl	800c328 <pbuf_add_header>
 8013866:	4603      	mov	r3, r0
 8013868:	2b00      	cmp	r3, #0
 801386a:	d002      	beq.n	8013872 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801386c:	f06f 0301 	mvn.w	r3, #1
 8013870:	e07c      	b.n	801396c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	685b      	ldr	r3, [r3, #4]
 8013876:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	895b      	ldrh	r3, [r3, #10]
 801387c:	2b13      	cmp	r3, #19
 801387e:	d806      	bhi.n	801388e <ip4_output_if_src+0x5e>
 8013880:	4b3c      	ldr	r3, [pc, #240]	@ (8013974 <ip4_output_if_src+0x144>)
 8013882:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8013886:	493e      	ldr	r1, [pc, #248]	@ (8013980 <ip4_output_if_src+0x150>)
 8013888:	483c      	ldr	r0, [pc, #240]	@ (801397c <ip4_output_if_src+0x14c>)
 801388a:	f001 f9eb 	bl	8014c64 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801388e:	69fb      	ldr	r3, [r7, #28]
 8013890:	78fa      	ldrb	r2, [r7, #3]
 8013892:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013894:	69fb      	ldr	r3, [r7, #28]
 8013896:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801389a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	681a      	ldr	r2, [r3, #0]
 80138a0:	69fb      	ldr	r3, [r7, #28]
 80138a2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80138a4:	8b7b      	ldrh	r3, [r7, #26]
 80138a6:	089b      	lsrs	r3, r3, #2
 80138a8:	b29b      	uxth	r3, r3
 80138aa:	b2db      	uxtb	r3, r3
 80138ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80138b0:	b2da      	uxtb	r2, r3
 80138b2:	69fb      	ldr	r3, [r7, #28]
 80138b4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80138b6:	69fb      	ldr	r3, [r7, #28]
 80138b8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80138bc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	891b      	ldrh	r3, [r3, #8]
 80138c2:	4618      	mov	r0, r3
 80138c4:	f7f7 f9c4 	bl	800ac50 <lwip_htons>
 80138c8:	4603      	mov	r3, r0
 80138ca:	461a      	mov	r2, r3
 80138cc:	69fb      	ldr	r3, [r7, #28]
 80138ce:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80138d0:	69fb      	ldr	r3, [r7, #28]
 80138d2:	2200      	movs	r2, #0
 80138d4:	719a      	strb	r2, [r3, #6]
 80138d6:	2200      	movs	r2, #0
 80138d8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80138da:	4b2a      	ldr	r3, [pc, #168]	@ (8013984 <ip4_output_if_src+0x154>)
 80138dc:	881b      	ldrh	r3, [r3, #0]
 80138de:	4618      	mov	r0, r3
 80138e0:	f7f7 f9b6 	bl	800ac50 <lwip_htons>
 80138e4:	4603      	mov	r3, r0
 80138e6:	461a      	mov	r2, r3
 80138e8:	69fb      	ldr	r3, [r7, #28]
 80138ea:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80138ec:	4b25      	ldr	r3, [pc, #148]	@ (8013984 <ip4_output_if_src+0x154>)
 80138ee:	881b      	ldrh	r3, [r3, #0]
 80138f0:	3301      	adds	r3, #1
 80138f2:	b29a      	uxth	r2, r3
 80138f4:	4b23      	ldr	r3, [pc, #140]	@ (8013984 <ip4_output_if_src+0x154>)
 80138f6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80138f8:	68bb      	ldr	r3, [r7, #8]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d104      	bne.n	8013908 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80138fe:	4b22      	ldr	r3, [pc, #136]	@ (8013988 <ip4_output_if_src+0x158>)
 8013900:	681a      	ldr	r2, [r3, #0]
 8013902:	69fb      	ldr	r3, [r7, #28]
 8013904:	60da      	str	r2, [r3, #12]
 8013906:	e003      	b.n	8013910 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013908:	68bb      	ldr	r3, [r7, #8]
 801390a:	681a      	ldr	r2, [r3, #0]
 801390c:	69fb      	ldr	r3, [r7, #28]
 801390e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013910:	69fb      	ldr	r3, [r7, #28]
 8013912:	2200      	movs	r2, #0
 8013914:	729a      	strb	r2, [r3, #10]
 8013916:	2200      	movs	r2, #0
 8013918:	72da      	strb	r2, [r3, #11]
 801391a:	e00f      	b.n	801393c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	895b      	ldrh	r3, [r3, #10]
 8013920:	2b13      	cmp	r3, #19
 8013922:	d802      	bhi.n	801392a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013924:	f06f 0301 	mvn.w	r3, #1
 8013928:	e020      	b.n	801396c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	685b      	ldr	r3, [r3, #4]
 801392e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013930:	69fb      	ldr	r3, [r7, #28]
 8013932:	691b      	ldr	r3, [r3, #16]
 8013934:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013936:	f107 0314 	add.w	r3, r7, #20
 801393a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801393c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801393e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013940:	2b00      	cmp	r3, #0
 8013942:	d00c      	beq.n	801395e <ip4_output_if_src+0x12e>
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	891a      	ldrh	r2, [r3, #8]
 8013948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801394a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801394c:	429a      	cmp	r2, r3
 801394e:	d906      	bls.n	801395e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8013950:	687a      	ldr	r2, [r7, #4]
 8013952:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013954:	68f8      	ldr	r0, [r7, #12]
 8013956:	f000 fd53 	bl	8014400 <ip4_frag>
 801395a:	4603      	mov	r3, r0
 801395c:	e006      	b.n	801396c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801395e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013960:	695b      	ldr	r3, [r3, #20]
 8013962:	687a      	ldr	r2, [r7, #4]
 8013964:	68f9      	ldr	r1, [r7, #12]
 8013966:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013968:	4798      	blx	r3
 801396a:	4603      	mov	r3, r0
}
 801396c:	4618      	mov	r0, r3
 801396e:	3720      	adds	r7, #32
 8013970:	46bd      	mov	sp, r7
 8013972:	bd80      	pop	{r7, pc}
 8013974:	080182bc 	.word	0x080182bc
 8013978:	080182f0 	.word	0x080182f0
 801397c:	080182fc 	.word	0x080182fc
 8013980:	08018324 	.word	0x08018324
 8013984:	2001045e 	.word	0x2001045e
 8013988:	08018744 	.word	0x08018744

0801398c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801398c:	b480      	push	{r7}
 801398e:	b085      	sub	sp, #20
 8013990:	af00      	add	r7, sp, #0
 8013992:	6078      	str	r0, [r7, #4]
 8013994:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80139a0:	d002      	beq.n	80139a8 <ip4_addr_isbroadcast_u32+0x1c>
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d101      	bne.n	80139ac <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80139a8:	2301      	movs	r3, #1
 80139aa:	e02a      	b.n	8013a02 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80139ac:	683b      	ldr	r3, [r7, #0]
 80139ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80139b2:	f003 0302 	and.w	r3, r3, #2
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d101      	bne.n	80139be <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80139ba:	2300      	movs	r3, #0
 80139bc:	e021      	b.n	8013a02 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80139be:	683b      	ldr	r3, [r7, #0]
 80139c0:	3304      	adds	r3, #4
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	687a      	ldr	r2, [r7, #4]
 80139c6:	429a      	cmp	r2, r3
 80139c8:	d101      	bne.n	80139ce <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80139ca:	2300      	movs	r3, #0
 80139cc:	e019      	b.n	8013a02 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80139ce:	68fa      	ldr	r2, [r7, #12]
 80139d0:	683b      	ldr	r3, [r7, #0]
 80139d2:	3304      	adds	r3, #4
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	405a      	eors	r2, r3
 80139d8:	683b      	ldr	r3, [r7, #0]
 80139da:	3308      	adds	r3, #8
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	4013      	ands	r3, r2
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d10d      	bne.n	8013a00 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80139e4:	683b      	ldr	r3, [r7, #0]
 80139e6:	3308      	adds	r3, #8
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	43da      	mvns	r2, r3
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80139f0:	683b      	ldr	r3, [r7, #0]
 80139f2:	3308      	adds	r3, #8
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80139f8:	429a      	cmp	r2, r3
 80139fa:	d101      	bne.n	8013a00 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80139fc:	2301      	movs	r3, #1
 80139fe:	e000      	b.n	8013a02 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013a00:	2300      	movs	r3, #0
  }
}
 8013a02:	4618      	mov	r0, r3
 8013a04:	3714      	adds	r7, #20
 8013a06:	46bd      	mov	sp, r7
 8013a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a0c:	4770      	bx	lr
	...

08013a10 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013a10:	b580      	push	{r7, lr}
 8013a12:	b084      	sub	sp, #16
 8013a14:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013a16:	2300      	movs	r3, #0
 8013a18:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013a1a:	4b12      	ldr	r3, [pc, #72]	@ (8013a64 <ip_reass_tmr+0x54>)
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013a20:	e018      	b.n	8013a54 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	7fdb      	ldrb	r3, [r3, #31]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d00b      	beq.n	8013a42 <ip_reass_tmr+0x32>
      r->timer--;
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	7fdb      	ldrb	r3, [r3, #31]
 8013a2e:	3b01      	subs	r3, #1
 8013a30:	b2da      	uxtb	r2, r3
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	60fb      	str	r3, [r7, #12]
 8013a40:	e008      	b.n	8013a54 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013a4c:	68b9      	ldr	r1, [r7, #8]
 8013a4e:	6878      	ldr	r0, [r7, #4]
 8013a50:	f000 f80a 	bl	8013a68 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d1e3      	bne.n	8013a22 <ip_reass_tmr+0x12>
    }
  }
}
 8013a5a:	bf00      	nop
 8013a5c:	bf00      	nop
 8013a5e:	3710      	adds	r7, #16
 8013a60:	46bd      	mov	sp, r7
 8013a62:	bd80      	pop	{r7, pc}
 8013a64:	20010460 	.word	0x20010460

08013a68 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b088      	sub	sp, #32
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	6078      	str	r0, [r7, #4]
 8013a70:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013a72:	2300      	movs	r3, #0
 8013a74:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013a76:	683a      	ldr	r2, [r7, #0]
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	429a      	cmp	r2, r3
 8013a7c:	d105      	bne.n	8013a8a <ip_reass_free_complete_datagram+0x22>
 8013a7e:	4b45      	ldr	r3, [pc, #276]	@ (8013b94 <ip_reass_free_complete_datagram+0x12c>)
 8013a80:	22ab      	movs	r2, #171	@ 0xab
 8013a82:	4945      	ldr	r1, [pc, #276]	@ (8013b98 <ip_reass_free_complete_datagram+0x130>)
 8013a84:	4845      	ldr	r0, [pc, #276]	@ (8013b9c <ip_reass_free_complete_datagram+0x134>)
 8013a86:	f001 f8ed 	bl	8014c64 <iprintf>
  if (prev != NULL) {
 8013a8a:	683b      	ldr	r3, [r7, #0]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d00a      	beq.n	8013aa6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013a90:	683b      	ldr	r3, [r7, #0]
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	687a      	ldr	r2, [r7, #4]
 8013a96:	429a      	cmp	r2, r3
 8013a98:	d005      	beq.n	8013aa6 <ip_reass_free_complete_datagram+0x3e>
 8013a9a:	4b3e      	ldr	r3, [pc, #248]	@ (8013b94 <ip_reass_free_complete_datagram+0x12c>)
 8013a9c:	22ad      	movs	r2, #173	@ 0xad
 8013a9e:	4940      	ldr	r1, [pc, #256]	@ (8013ba0 <ip_reass_free_complete_datagram+0x138>)
 8013aa0:	483e      	ldr	r0, [pc, #248]	@ (8013b9c <ip_reass_free_complete_datagram+0x134>)
 8013aa2:	f001 f8df 	bl	8014c64 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	685b      	ldr	r3, [r3, #4]
 8013aaa:	685b      	ldr	r3, [r3, #4]
 8013aac:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013aae:	697b      	ldr	r3, [r7, #20]
 8013ab0:	889b      	ldrh	r3, [r3, #4]
 8013ab2:	b29b      	uxth	r3, r3
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d12a      	bne.n	8013b0e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	685b      	ldr	r3, [r3, #4]
 8013abc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013abe:	697b      	ldr	r3, [r7, #20]
 8013ac0:	681a      	ldr	r2, [r3, #0]
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013ac6:	69bb      	ldr	r3, [r7, #24]
 8013ac8:	6858      	ldr	r0, [r3, #4]
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	3308      	adds	r3, #8
 8013ace:	2214      	movs	r2, #20
 8013ad0:	4619      	mov	r1, r3
 8013ad2:	f001 f9a2 	bl	8014e1a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013ad6:	2101      	movs	r1, #1
 8013ad8:	69b8      	ldr	r0, [r7, #24]
 8013ada:	f7ff fc47 	bl	801336c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013ade:	69b8      	ldr	r0, [r7, #24]
 8013ae0:	f7f8 fd46 	bl	800c570 <pbuf_clen>
 8013ae4:	4603      	mov	r3, r0
 8013ae6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013ae8:	8bfa      	ldrh	r2, [r7, #30]
 8013aea:	8a7b      	ldrh	r3, [r7, #18]
 8013aec:	4413      	add	r3, r2
 8013aee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013af2:	db05      	blt.n	8013b00 <ip_reass_free_complete_datagram+0x98>
 8013af4:	4b27      	ldr	r3, [pc, #156]	@ (8013b94 <ip_reass_free_complete_datagram+0x12c>)
 8013af6:	22bc      	movs	r2, #188	@ 0xbc
 8013af8:	492a      	ldr	r1, [pc, #168]	@ (8013ba4 <ip_reass_free_complete_datagram+0x13c>)
 8013afa:	4828      	ldr	r0, [pc, #160]	@ (8013b9c <ip_reass_free_complete_datagram+0x134>)
 8013afc:	f001 f8b2 	bl	8014c64 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013b00:	8bfa      	ldrh	r2, [r7, #30]
 8013b02:	8a7b      	ldrh	r3, [r7, #18]
 8013b04:	4413      	add	r3, r2
 8013b06:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013b08:	69b8      	ldr	r0, [r7, #24]
 8013b0a:	f7f8 fca3 	bl	800c454 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	685b      	ldr	r3, [r3, #4]
 8013b12:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013b14:	e01f      	b.n	8013b56 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013b16:	69bb      	ldr	r3, [r7, #24]
 8013b18:	685b      	ldr	r3, [r3, #4]
 8013b1a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013b1c:	69bb      	ldr	r3, [r7, #24]
 8013b1e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013b20:	697b      	ldr	r3, [r7, #20]
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013b26:	68f8      	ldr	r0, [r7, #12]
 8013b28:	f7f8 fd22 	bl	800c570 <pbuf_clen>
 8013b2c:	4603      	mov	r3, r0
 8013b2e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013b30:	8bfa      	ldrh	r2, [r7, #30]
 8013b32:	8a7b      	ldrh	r3, [r7, #18]
 8013b34:	4413      	add	r3, r2
 8013b36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013b3a:	db05      	blt.n	8013b48 <ip_reass_free_complete_datagram+0xe0>
 8013b3c:	4b15      	ldr	r3, [pc, #84]	@ (8013b94 <ip_reass_free_complete_datagram+0x12c>)
 8013b3e:	22cc      	movs	r2, #204	@ 0xcc
 8013b40:	4918      	ldr	r1, [pc, #96]	@ (8013ba4 <ip_reass_free_complete_datagram+0x13c>)
 8013b42:	4816      	ldr	r0, [pc, #88]	@ (8013b9c <ip_reass_free_complete_datagram+0x134>)
 8013b44:	f001 f88e 	bl	8014c64 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013b48:	8bfa      	ldrh	r2, [r7, #30]
 8013b4a:	8a7b      	ldrh	r3, [r7, #18]
 8013b4c:	4413      	add	r3, r2
 8013b4e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8013b50:	68f8      	ldr	r0, [r7, #12]
 8013b52:	f7f8 fc7f 	bl	800c454 <pbuf_free>
  while (p != NULL) {
 8013b56:	69bb      	ldr	r3, [r7, #24]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d1dc      	bne.n	8013b16 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013b5c:	6839      	ldr	r1, [r7, #0]
 8013b5e:	6878      	ldr	r0, [r7, #4]
 8013b60:	f000 f8c2 	bl	8013ce8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013b64:	4b10      	ldr	r3, [pc, #64]	@ (8013ba8 <ip_reass_free_complete_datagram+0x140>)
 8013b66:	881b      	ldrh	r3, [r3, #0]
 8013b68:	8bfa      	ldrh	r2, [r7, #30]
 8013b6a:	429a      	cmp	r2, r3
 8013b6c:	d905      	bls.n	8013b7a <ip_reass_free_complete_datagram+0x112>
 8013b6e:	4b09      	ldr	r3, [pc, #36]	@ (8013b94 <ip_reass_free_complete_datagram+0x12c>)
 8013b70:	22d2      	movs	r2, #210	@ 0xd2
 8013b72:	490e      	ldr	r1, [pc, #56]	@ (8013bac <ip_reass_free_complete_datagram+0x144>)
 8013b74:	4809      	ldr	r0, [pc, #36]	@ (8013b9c <ip_reass_free_complete_datagram+0x134>)
 8013b76:	f001 f875 	bl	8014c64 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8013ba8 <ip_reass_free_complete_datagram+0x140>)
 8013b7c:	881a      	ldrh	r2, [r3, #0]
 8013b7e:	8bfb      	ldrh	r3, [r7, #30]
 8013b80:	1ad3      	subs	r3, r2, r3
 8013b82:	b29a      	uxth	r2, r3
 8013b84:	4b08      	ldr	r3, [pc, #32]	@ (8013ba8 <ip_reass_free_complete_datagram+0x140>)
 8013b86:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013b88:	8bfb      	ldrh	r3, [r7, #30]
}
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	3720      	adds	r7, #32
 8013b8e:	46bd      	mov	sp, r7
 8013b90:	bd80      	pop	{r7, pc}
 8013b92:	bf00      	nop
 8013b94:	08018354 	.word	0x08018354
 8013b98:	08018390 	.word	0x08018390
 8013b9c:	0801839c 	.word	0x0801839c
 8013ba0:	080183c4 	.word	0x080183c4
 8013ba4:	080183d8 	.word	0x080183d8
 8013ba8:	20010464 	.word	0x20010464
 8013bac:	080183f8 	.word	0x080183f8

08013bb0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b08a      	sub	sp, #40	@ 0x28
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	6078      	str	r0, [r7, #4]
 8013bb8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013bba:	2300      	movs	r3, #0
 8013bbc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013bca:	2300      	movs	r3, #0
 8013bcc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8013bce:	4b28      	ldr	r3, [pc, #160]	@ (8013c70 <ip_reass_remove_oldest_datagram+0xc0>)
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8013bd4:	e030      	b.n	8013c38 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bd8:	695a      	ldr	r2, [r3, #20]
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	68db      	ldr	r3, [r3, #12]
 8013bde:	429a      	cmp	r2, r3
 8013be0:	d10c      	bne.n	8013bfc <ip_reass_remove_oldest_datagram+0x4c>
 8013be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013be4:	699a      	ldr	r2, [r3, #24]
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	691b      	ldr	r3, [r3, #16]
 8013bea:	429a      	cmp	r2, r3
 8013bec:	d106      	bne.n	8013bfc <ip_reass_remove_oldest_datagram+0x4c>
 8013bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bf0:	899a      	ldrh	r2, [r3, #12]
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	889b      	ldrh	r3, [r3, #4]
 8013bf6:	b29b      	uxth	r3, r3
 8013bf8:	429a      	cmp	r2, r3
 8013bfa:	d014      	beq.n	8013c26 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013bfc:	693b      	ldr	r3, [r7, #16]
 8013bfe:	3301      	adds	r3, #1
 8013c00:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013c02:	6a3b      	ldr	r3, [r7, #32]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d104      	bne.n	8013c12 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c0a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013c0c:	69fb      	ldr	r3, [r7, #28]
 8013c0e:	61bb      	str	r3, [r7, #24]
 8013c10:	e009      	b.n	8013c26 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c14:	7fda      	ldrb	r2, [r3, #31]
 8013c16:	6a3b      	ldr	r3, [r7, #32]
 8013c18:	7fdb      	ldrb	r3, [r3, #31]
 8013c1a:	429a      	cmp	r2, r3
 8013c1c:	d803      	bhi.n	8013c26 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8013c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c20:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013c22:	69fb      	ldr	r3, [r7, #28]
 8013c24:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d001      	beq.n	8013c32 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8013c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c30:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8013c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8013c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d1cb      	bne.n	8013bd6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013c3e:	6a3b      	ldr	r3, [r7, #32]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d008      	beq.n	8013c56 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013c44:	69b9      	ldr	r1, [r7, #24]
 8013c46:	6a38      	ldr	r0, [r7, #32]
 8013c48:	f7ff ff0e 	bl	8013a68 <ip_reass_free_complete_datagram>
 8013c4c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8013c4e:	697a      	ldr	r2, [r7, #20]
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	4413      	add	r3, r2
 8013c54:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013c56:	697a      	ldr	r2, [r7, #20]
 8013c58:	683b      	ldr	r3, [r7, #0]
 8013c5a:	429a      	cmp	r2, r3
 8013c5c:	da02      	bge.n	8013c64 <ip_reass_remove_oldest_datagram+0xb4>
 8013c5e:	693b      	ldr	r3, [r7, #16]
 8013c60:	2b01      	cmp	r3, #1
 8013c62:	dcac      	bgt.n	8013bbe <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8013c64:	697b      	ldr	r3, [r7, #20]
}
 8013c66:	4618      	mov	r0, r3
 8013c68:	3728      	adds	r7, #40	@ 0x28
 8013c6a:	46bd      	mov	sp, r7
 8013c6c:	bd80      	pop	{r7, pc}
 8013c6e:	bf00      	nop
 8013c70:	20010460 	.word	0x20010460

08013c74 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b084      	sub	sp, #16
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	6078      	str	r0, [r7, #4]
 8013c7c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013c7e:	2004      	movs	r0, #4
 8013c80:	f7f7 fcca 	bl	800b618 <memp_malloc>
 8013c84:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d110      	bne.n	8013cae <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013c8c:	6839      	ldr	r1, [r7, #0]
 8013c8e:	6878      	ldr	r0, [r7, #4]
 8013c90:	f7ff ff8e 	bl	8013bb0 <ip_reass_remove_oldest_datagram>
 8013c94:	4602      	mov	r2, r0
 8013c96:	683b      	ldr	r3, [r7, #0]
 8013c98:	4293      	cmp	r3, r2
 8013c9a:	dc03      	bgt.n	8013ca4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013c9c:	2004      	movs	r0, #4
 8013c9e:	f7f7 fcbb 	bl	800b618 <memp_malloc>
 8013ca2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d101      	bne.n	8013cae <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8013caa:	2300      	movs	r3, #0
 8013cac:	e016      	b.n	8013cdc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013cae:	2220      	movs	r2, #32
 8013cb0:	2100      	movs	r1, #0
 8013cb2:	68f8      	ldr	r0, [r7, #12]
 8013cb4:	f001 f83b 	bl	8014d2e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	220f      	movs	r2, #15
 8013cbc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013cbe:	4b09      	ldr	r3, [pc, #36]	@ (8013ce4 <ip_reass_enqueue_new_datagram+0x70>)
 8013cc0:	681a      	ldr	r2, [r3, #0]
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013cc6:	4a07      	ldr	r2, [pc, #28]	@ (8013ce4 <ip_reass_enqueue_new_datagram+0x70>)
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	3308      	adds	r3, #8
 8013cd0:	2214      	movs	r2, #20
 8013cd2:	6879      	ldr	r1, [r7, #4]
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	f001 f8a0 	bl	8014e1a <memcpy>
  return ipr;
 8013cda:	68fb      	ldr	r3, [r7, #12]
}
 8013cdc:	4618      	mov	r0, r3
 8013cde:	3710      	adds	r7, #16
 8013ce0:	46bd      	mov	sp, r7
 8013ce2:	bd80      	pop	{r7, pc}
 8013ce4:	20010460 	.word	0x20010460

08013ce8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b082      	sub	sp, #8
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	6078      	str	r0, [r7, #4]
 8013cf0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013cf2:	4b10      	ldr	r3, [pc, #64]	@ (8013d34 <ip_reass_dequeue_datagram+0x4c>)
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	687a      	ldr	r2, [r7, #4]
 8013cf8:	429a      	cmp	r2, r3
 8013cfa:	d104      	bne.n	8013d06 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	4a0c      	ldr	r2, [pc, #48]	@ (8013d34 <ip_reass_dequeue_datagram+0x4c>)
 8013d02:	6013      	str	r3, [r2, #0]
 8013d04:	e00d      	b.n	8013d22 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013d06:	683b      	ldr	r3, [r7, #0]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d106      	bne.n	8013d1a <ip_reass_dequeue_datagram+0x32>
 8013d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8013d38 <ip_reass_dequeue_datagram+0x50>)
 8013d0e:	f240 1245 	movw	r2, #325	@ 0x145
 8013d12:	490a      	ldr	r1, [pc, #40]	@ (8013d3c <ip_reass_dequeue_datagram+0x54>)
 8013d14:	480a      	ldr	r0, [pc, #40]	@ (8013d40 <ip_reass_dequeue_datagram+0x58>)
 8013d16:	f000 ffa5 	bl	8014c64 <iprintf>
    prev->next = ipr->next;
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	681a      	ldr	r2, [r3, #0]
 8013d1e:	683b      	ldr	r3, [r7, #0]
 8013d20:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013d22:	6879      	ldr	r1, [r7, #4]
 8013d24:	2004      	movs	r0, #4
 8013d26:	f7f7 fced 	bl	800b704 <memp_free>
}
 8013d2a:	bf00      	nop
 8013d2c:	3708      	adds	r7, #8
 8013d2e:	46bd      	mov	sp, r7
 8013d30:	bd80      	pop	{r7, pc}
 8013d32:	bf00      	nop
 8013d34:	20010460 	.word	0x20010460
 8013d38:	08018354 	.word	0x08018354
 8013d3c:	0801841c 	.word	0x0801841c
 8013d40:	0801839c 	.word	0x0801839c

08013d44 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013d44:	b580      	push	{r7, lr}
 8013d46:	b08c      	sub	sp, #48	@ 0x30
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	60f8      	str	r0, [r7, #12]
 8013d4c:	60b9      	str	r1, [r7, #8]
 8013d4e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8013d50:	2300      	movs	r3, #0
 8013d52:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013d54:	2301      	movs	r3, #1
 8013d56:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013d58:	68bb      	ldr	r3, [r7, #8]
 8013d5a:	685b      	ldr	r3, [r3, #4]
 8013d5c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013d5e:	69fb      	ldr	r3, [r7, #28]
 8013d60:	885b      	ldrh	r3, [r3, #2]
 8013d62:	b29b      	uxth	r3, r3
 8013d64:	4618      	mov	r0, r3
 8013d66:	f7f6 ff73 	bl	800ac50 <lwip_htons>
 8013d6a:	4603      	mov	r3, r0
 8013d6c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013d6e:	69fb      	ldr	r3, [r7, #28]
 8013d70:	781b      	ldrb	r3, [r3, #0]
 8013d72:	f003 030f 	and.w	r3, r3, #15
 8013d76:	b2db      	uxtb	r3, r3
 8013d78:	009b      	lsls	r3, r3, #2
 8013d7a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013d7c:	7e7b      	ldrb	r3, [r7, #25]
 8013d7e:	b29b      	uxth	r3, r3
 8013d80:	8b7a      	ldrh	r2, [r7, #26]
 8013d82:	429a      	cmp	r2, r3
 8013d84:	d202      	bcs.n	8013d8c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013d86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013d8a:	e135      	b.n	8013ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013d8c:	7e7b      	ldrb	r3, [r7, #25]
 8013d8e:	b29b      	uxth	r3, r3
 8013d90:	8b7a      	ldrh	r2, [r7, #26]
 8013d92:	1ad3      	subs	r3, r2, r3
 8013d94:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013d96:	69fb      	ldr	r3, [r7, #28]
 8013d98:	88db      	ldrh	r3, [r3, #6]
 8013d9a:	b29b      	uxth	r3, r3
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	f7f6 ff57 	bl	800ac50 <lwip_htons>
 8013da2:	4603      	mov	r3, r0
 8013da4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013da8:	b29b      	uxth	r3, r3
 8013daa:	00db      	lsls	r3, r3, #3
 8013dac:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8013dae:	68bb      	ldr	r3, [r7, #8]
 8013db0:	685b      	ldr	r3, [r3, #4]
 8013db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8013db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013db6:	2200      	movs	r2, #0
 8013db8:	701a      	strb	r2, [r3, #0]
 8013dba:	2200      	movs	r2, #0
 8013dbc:	705a      	strb	r2, [r3, #1]
 8013dbe:	2200      	movs	r2, #0
 8013dc0:	709a      	strb	r2, [r3, #2]
 8013dc2:	2200      	movs	r2, #0
 8013dc4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013dc8:	8afa      	ldrh	r2, [r7, #22]
 8013dca:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013dcc:	8afa      	ldrh	r2, [r7, #22]
 8013dce:	8b7b      	ldrh	r3, [r7, #26]
 8013dd0:	4413      	add	r3, r2
 8013dd2:	b29a      	uxth	r2, r3
 8013dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013dd6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013dda:	88db      	ldrh	r3, [r3, #6]
 8013ddc:	b29b      	uxth	r3, r3
 8013dde:	8afa      	ldrh	r2, [r7, #22]
 8013de0:	429a      	cmp	r2, r3
 8013de2:	d902      	bls.n	8013dea <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013de4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013de8:	e106      	b.n	8013ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	685b      	ldr	r3, [r3, #4]
 8013dee:	627b      	str	r3, [r7, #36]	@ 0x24
 8013df0:	e068      	b.n	8013ec4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8013df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013df4:	685b      	ldr	r3, [r3, #4]
 8013df6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013dfa:	889b      	ldrh	r3, [r3, #4]
 8013dfc:	b29a      	uxth	r2, r3
 8013dfe:	693b      	ldr	r3, [r7, #16]
 8013e00:	889b      	ldrh	r3, [r3, #4]
 8013e02:	b29b      	uxth	r3, r3
 8013e04:	429a      	cmp	r2, r3
 8013e06:	d235      	bcs.n	8013e74 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013e0c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d020      	beq.n	8013e56 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e16:	889b      	ldrh	r3, [r3, #4]
 8013e18:	b29a      	uxth	r2, r3
 8013e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e1c:	88db      	ldrh	r3, [r3, #6]
 8013e1e:	b29b      	uxth	r3, r3
 8013e20:	429a      	cmp	r2, r3
 8013e22:	d307      	bcc.n	8013e34 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e26:	88db      	ldrh	r3, [r3, #6]
 8013e28:	b29a      	uxth	r2, r3
 8013e2a:	693b      	ldr	r3, [r7, #16]
 8013e2c:	889b      	ldrh	r3, [r3, #4]
 8013e2e:	b29b      	uxth	r3, r3
 8013e30:	429a      	cmp	r2, r3
 8013e32:	d902      	bls.n	8013e3a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013e34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013e38:	e0de      	b.n	8013ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e3c:	68ba      	ldr	r2, [r7, #8]
 8013e3e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e42:	88db      	ldrh	r3, [r3, #6]
 8013e44:	b29a      	uxth	r2, r3
 8013e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e48:	889b      	ldrh	r3, [r3, #4]
 8013e4a:	b29b      	uxth	r3, r3
 8013e4c:	429a      	cmp	r2, r3
 8013e4e:	d03d      	beq.n	8013ecc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013e50:	2300      	movs	r3, #0
 8013e52:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013e54:	e03a      	b.n	8013ecc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8013e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e58:	88db      	ldrh	r3, [r3, #6]
 8013e5a:	b29a      	uxth	r2, r3
 8013e5c:	693b      	ldr	r3, [r7, #16]
 8013e5e:	889b      	ldrh	r3, [r3, #4]
 8013e60:	b29b      	uxth	r3, r3
 8013e62:	429a      	cmp	r2, r3
 8013e64:	d902      	bls.n	8013e6c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013e66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013e6a:	e0c5      	b.n	8013ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	68ba      	ldr	r2, [r7, #8]
 8013e70:	605a      	str	r2, [r3, #4]
      break;
 8013e72:	e02b      	b.n	8013ecc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8013e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e76:	889b      	ldrh	r3, [r3, #4]
 8013e78:	b29a      	uxth	r2, r3
 8013e7a:	693b      	ldr	r3, [r7, #16]
 8013e7c:	889b      	ldrh	r3, [r3, #4]
 8013e7e:	b29b      	uxth	r3, r3
 8013e80:	429a      	cmp	r2, r3
 8013e82:	d102      	bne.n	8013e8a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013e84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013e88:	e0b6      	b.n	8013ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8013e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e8c:	889b      	ldrh	r3, [r3, #4]
 8013e8e:	b29a      	uxth	r2, r3
 8013e90:	693b      	ldr	r3, [r7, #16]
 8013e92:	88db      	ldrh	r3, [r3, #6]
 8013e94:	b29b      	uxth	r3, r3
 8013e96:	429a      	cmp	r2, r3
 8013e98:	d202      	bcs.n	8013ea0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013e9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013e9e:	e0ab      	b.n	8013ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d009      	beq.n	8013eba <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8013ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ea8:	88db      	ldrh	r3, [r3, #6]
 8013eaa:	b29a      	uxth	r2, r3
 8013eac:	693b      	ldr	r3, [r7, #16]
 8013eae:	889b      	ldrh	r3, [r3, #4]
 8013eb0:	b29b      	uxth	r3, r3
 8013eb2:	429a      	cmp	r2, r3
 8013eb4:	d001      	beq.n	8013eba <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013eb6:	2300      	movs	r3, #0
 8013eb8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013eba:	693b      	ldr	r3, [r7, #16]
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8013ec0:	693b      	ldr	r3, [r7, #16]
 8013ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8013ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d193      	bne.n	8013df2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013eca:	e000      	b.n	8013ece <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013ecc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8013ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d12d      	bne.n	8013f30 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d01c      	beq.n	8013f14 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013edc:	88db      	ldrh	r3, [r3, #6]
 8013ede:	b29a      	uxth	r2, r3
 8013ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ee2:	889b      	ldrh	r3, [r3, #4]
 8013ee4:	b29b      	uxth	r3, r3
 8013ee6:	429a      	cmp	r2, r3
 8013ee8:	d906      	bls.n	8013ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013eea:	4b45      	ldr	r3, [pc, #276]	@ (8014000 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013eec:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8013ef0:	4944      	ldr	r1, [pc, #272]	@ (8014004 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013ef2:	4845      	ldr	r0, [pc, #276]	@ (8014008 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013ef4:	f000 feb6 	bl	8014c64 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013efa:	68ba      	ldr	r2, [r7, #8]
 8013efc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f00:	88db      	ldrh	r3, [r3, #6]
 8013f02:	b29a      	uxth	r2, r3
 8013f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f06:	889b      	ldrh	r3, [r3, #4]
 8013f08:	b29b      	uxth	r3, r3
 8013f0a:	429a      	cmp	r2, r3
 8013f0c:	d010      	beq.n	8013f30 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8013f0e:	2300      	movs	r3, #0
 8013f10:	623b      	str	r3, [r7, #32]
 8013f12:	e00d      	b.n	8013f30 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	685b      	ldr	r3, [r3, #4]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d006      	beq.n	8013f2a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013f1c:	4b38      	ldr	r3, [pc, #224]	@ (8014000 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013f1e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8013f22:	493a      	ldr	r1, [pc, #232]	@ (801400c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013f24:	4838      	ldr	r0, [pc, #224]	@ (8014008 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013f26:	f000 fe9d 	bl	8014c64 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	68ba      	ldr	r2, [r7, #8]
 8013f2e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d105      	bne.n	8013f42 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	7f9b      	ldrb	r3, [r3, #30]
 8013f3a:	f003 0301 	and.w	r3, r3, #1
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d059      	beq.n	8013ff6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8013f42:	6a3b      	ldr	r3, [r7, #32]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d04f      	beq.n	8013fe8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	685b      	ldr	r3, [r3, #4]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d006      	beq.n	8013f5e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	685b      	ldr	r3, [r3, #4]
 8013f54:	685b      	ldr	r3, [r3, #4]
 8013f56:	889b      	ldrh	r3, [r3, #4]
 8013f58:	b29b      	uxth	r3, r3
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d002      	beq.n	8013f64 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8013f5e:	2300      	movs	r3, #0
 8013f60:	623b      	str	r3, [r7, #32]
 8013f62:	e041      	b.n	8013fe8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f66:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8013f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8013f6e:	e012      	b.n	8013f96 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f72:	685b      	ldr	r3, [r3, #4]
 8013f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8013f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f78:	88db      	ldrh	r3, [r3, #6]
 8013f7a:	b29a      	uxth	r2, r3
 8013f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f7e:	889b      	ldrh	r3, [r3, #4]
 8013f80:	b29b      	uxth	r3, r3
 8013f82:	429a      	cmp	r2, r3
 8013f84:	d002      	beq.n	8013f8c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8013f86:	2300      	movs	r3, #0
 8013f88:	623b      	str	r3, [r7, #32]
            break;
 8013f8a:	e007      	b.n	8013f9c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8013f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8013f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8013f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d1e9      	bne.n	8013f70 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8013f9c:	6a3b      	ldr	r3, [r7, #32]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d022      	beq.n	8013fe8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	685b      	ldr	r3, [r3, #4]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d106      	bne.n	8013fb8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8013faa:	4b15      	ldr	r3, [pc, #84]	@ (8014000 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013fac:	f240 12df 	movw	r2, #479	@ 0x1df
 8013fb0:	4917      	ldr	r1, [pc, #92]	@ (8014010 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013fb2:	4815      	ldr	r0, [pc, #84]	@ (8014008 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013fb4:	f000 fe56 	bl	8014c64 <iprintf>
          LWIP_ASSERT("sanity check",
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	685b      	ldr	r3, [r3, #4]
 8013fbc:	685b      	ldr	r3, [r3, #4]
 8013fbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013fc0:	429a      	cmp	r2, r3
 8013fc2:	d106      	bne.n	8013fd2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8014000 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013fc6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8013fca:	4911      	ldr	r1, [pc, #68]	@ (8014010 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013fcc:	480e      	ldr	r0, [pc, #56]	@ (8014008 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013fce:	f000 fe49 	bl	8014c64 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d006      	beq.n	8013fe8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013fda:	4b09      	ldr	r3, [pc, #36]	@ (8014000 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013fdc:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8013fe0:	490c      	ldr	r1, [pc, #48]	@ (8014014 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013fe2:	4809      	ldr	r0, [pc, #36]	@ (8014008 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013fe4:	f000 fe3e 	bl	8014c64 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013fe8:	6a3b      	ldr	r3, [r7, #32]
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	bf14      	ite	ne
 8013fee:	2301      	movne	r3, #1
 8013ff0:	2300      	moveq	r3, #0
 8013ff2:	b2db      	uxtb	r3, r3
 8013ff4:	e000      	b.n	8013ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013ff6:	2300      	movs	r3, #0
}
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	3730      	adds	r7, #48	@ 0x30
 8013ffc:	46bd      	mov	sp, r7
 8013ffe:	bd80      	pop	{r7, pc}
 8014000:	08018354 	.word	0x08018354
 8014004:	08018438 	.word	0x08018438
 8014008:	0801839c 	.word	0x0801839c
 801400c:	08018458 	.word	0x08018458
 8014010:	08018490 	.word	0x08018490
 8014014:	080184a0 	.word	0x080184a0

08014018 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014018:	b580      	push	{r7, lr}
 801401a:	b08e      	sub	sp, #56	@ 0x38
 801401c:	af00      	add	r7, sp, #0
 801401e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	685b      	ldr	r3, [r3, #4]
 8014024:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8014026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014028:	781b      	ldrb	r3, [r3, #0]
 801402a:	f003 030f 	and.w	r3, r3, #15
 801402e:	b2db      	uxtb	r3, r3
 8014030:	009b      	lsls	r3, r3, #2
 8014032:	b2db      	uxtb	r3, r3
 8014034:	2b14      	cmp	r3, #20
 8014036:	f040 8171 	bne.w	801431c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801403a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801403c:	88db      	ldrh	r3, [r3, #6]
 801403e:	b29b      	uxth	r3, r3
 8014040:	4618      	mov	r0, r3
 8014042:	f7f6 fe05 	bl	800ac50 <lwip_htons>
 8014046:	4603      	mov	r3, r0
 8014048:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801404c:	b29b      	uxth	r3, r3
 801404e:	00db      	lsls	r3, r3, #3
 8014050:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014054:	885b      	ldrh	r3, [r3, #2]
 8014056:	b29b      	uxth	r3, r3
 8014058:	4618      	mov	r0, r3
 801405a:	f7f6 fdf9 	bl	800ac50 <lwip_htons>
 801405e:	4603      	mov	r3, r0
 8014060:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8014062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014064:	781b      	ldrb	r3, [r3, #0]
 8014066:	f003 030f 	and.w	r3, r3, #15
 801406a:	b2db      	uxtb	r3, r3
 801406c:	009b      	lsls	r3, r3, #2
 801406e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8014072:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014076:	b29b      	uxth	r3, r3
 8014078:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801407a:	429a      	cmp	r2, r3
 801407c:	f0c0 8150 	bcc.w	8014320 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8014080:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014084:	b29b      	uxth	r3, r3
 8014086:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014088:	1ad3      	subs	r3, r2, r3
 801408a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801408c:	6878      	ldr	r0, [r7, #4]
 801408e:	f7f8 fa6f 	bl	800c570 <pbuf_clen>
 8014092:	4603      	mov	r3, r0
 8014094:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8014096:	4b8c      	ldr	r3, [pc, #560]	@ (80142c8 <ip4_reass+0x2b0>)
 8014098:	881b      	ldrh	r3, [r3, #0]
 801409a:	461a      	mov	r2, r3
 801409c:	8c3b      	ldrh	r3, [r7, #32]
 801409e:	4413      	add	r3, r2
 80140a0:	2b0a      	cmp	r3, #10
 80140a2:	dd10      	ble.n	80140c6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80140a4:	8c3b      	ldrh	r3, [r7, #32]
 80140a6:	4619      	mov	r1, r3
 80140a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80140aa:	f7ff fd81 	bl	8013bb0 <ip_reass_remove_oldest_datagram>
 80140ae:	4603      	mov	r3, r0
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	f000 8137 	beq.w	8014324 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80140b6:	4b84      	ldr	r3, [pc, #528]	@ (80142c8 <ip4_reass+0x2b0>)
 80140b8:	881b      	ldrh	r3, [r3, #0]
 80140ba:	461a      	mov	r2, r3
 80140bc:	8c3b      	ldrh	r3, [r7, #32]
 80140be:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80140c0:	2b0a      	cmp	r3, #10
 80140c2:	f300 812f 	bgt.w	8014324 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80140c6:	4b81      	ldr	r3, [pc, #516]	@ (80142cc <ip4_reass+0x2b4>)
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80140cc:	e015      	b.n	80140fa <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80140ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140d0:	695a      	ldr	r2, [r3, #20]
 80140d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140d4:	68db      	ldr	r3, [r3, #12]
 80140d6:	429a      	cmp	r2, r3
 80140d8:	d10c      	bne.n	80140f4 <ip4_reass+0xdc>
 80140da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140dc:	699a      	ldr	r2, [r3, #24]
 80140de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140e0:	691b      	ldr	r3, [r3, #16]
 80140e2:	429a      	cmp	r2, r3
 80140e4:	d106      	bne.n	80140f4 <ip4_reass+0xdc>
 80140e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140e8:	899a      	ldrh	r2, [r3, #12]
 80140ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140ec:	889b      	ldrh	r3, [r3, #4]
 80140ee:	b29b      	uxth	r3, r3
 80140f0:	429a      	cmp	r2, r3
 80140f2:	d006      	beq.n	8014102 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80140f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80140fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d1e6      	bne.n	80140ce <ip4_reass+0xb6>
 8014100:	e000      	b.n	8014104 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8014102:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014106:	2b00      	cmp	r3, #0
 8014108:	d109      	bne.n	801411e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801410a:	8c3b      	ldrh	r3, [r7, #32]
 801410c:	4619      	mov	r1, r3
 801410e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014110:	f7ff fdb0 	bl	8013c74 <ip_reass_enqueue_new_datagram>
 8014114:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8014116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014118:	2b00      	cmp	r3, #0
 801411a:	d11c      	bne.n	8014156 <ip4_reass+0x13e>
      goto nullreturn;
 801411c:	e105      	b.n	801432a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801411e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014120:	88db      	ldrh	r3, [r3, #6]
 8014122:	b29b      	uxth	r3, r3
 8014124:	4618      	mov	r0, r3
 8014126:	f7f6 fd93 	bl	800ac50 <lwip_htons>
 801412a:	4603      	mov	r3, r0
 801412c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014130:	2b00      	cmp	r3, #0
 8014132:	d110      	bne.n	8014156 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8014134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014136:	89db      	ldrh	r3, [r3, #14]
 8014138:	4618      	mov	r0, r3
 801413a:	f7f6 fd89 	bl	800ac50 <lwip_htons>
 801413e:	4603      	mov	r3, r0
 8014140:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014144:	2b00      	cmp	r3, #0
 8014146:	d006      	beq.n	8014156 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801414a:	3308      	adds	r3, #8
 801414c:	2214      	movs	r2, #20
 801414e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014150:	4618      	mov	r0, r3
 8014152:	f000 fe62 	bl	8014e1a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014158:	88db      	ldrh	r3, [r3, #6]
 801415a:	b29b      	uxth	r3, r3
 801415c:	f003 0320 	and.w	r3, r3, #32
 8014160:	2b00      	cmp	r3, #0
 8014162:	bf0c      	ite	eq
 8014164:	2301      	moveq	r3, #1
 8014166:	2300      	movne	r3, #0
 8014168:	b2db      	uxtb	r3, r3
 801416a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801416c:	69fb      	ldr	r3, [r7, #28]
 801416e:	2b00      	cmp	r3, #0
 8014170:	d00e      	beq.n	8014190 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8014172:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8014174:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014176:	4413      	add	r3, r2
 8014178:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801417a:	8b7a      	ldrh	r2, [r7, #26]
 801417c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801417e:	429a      	cmp	r2, r3
 8014180:	f0c0 80a0 	bcc.w	80142c4 <ip4_reass+0x2ac>
 8014184:	8b7b      	ldrh	r3, [r7, #26]
 8014186:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801418a:	4293      	cmp	r3, r2
 801418c:	f200 809a 	bhi.w	80142c4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8014190:	69fa      	ldr	r2, [r7, #28]
 8014192:	6879      	ldr	r1, [r7, #4]
 8014194:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014196:	f7ff fdd5 	bl	8013d44 <ip_reass_chain_frag_into_datagram_and_validate>
 801419a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801419c:	697b      	ldr	r3, [r7, #20]
 801419e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80141a2:	f000 809b 	beq.w	80142dc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80141a6:	4b48      	ldr	r3, [pc, #288]	@ (80142c8 <ip4_reass+0x2b0>)
 80141a8:	881a      	ldrh	r2, [r3, #0]
 80141aa:	8c3b      	ldrh	r3, [r7, #32]
 80141ac:	4413      	add	r3, r2
 80141ae:	b29a      	uxth	r2, r3
 80141b0:	4b45      	ldr	r3, [pc, #276]	@ (80142c8 <ip4_reass+0x2b0>)
 80141b2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80141b4:	69fb      	ldr	r3, [r7, #28]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d00d      	beq.n	80141d6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80141ba:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80141bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80141be:	4413      	add	r3, r2
 80141c0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80141c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141c4:	8a7a      	ldrh	r2, [r7, #18]
 80141c6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80141c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141ca:	7f9b      	ldrb	r3, [r3, #30]
 80141cc:	f043 0301 	orr.w	r3, r3, #1
 80141d0:	b2da      	uxtb	r2, r3
 80141d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141d4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80141d6:	697b      	ldr	r3, [r7, #20]
 80141d8:	2b01      	cmp	r3, #1
 80141da:	d171      	bne.n	80142c0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80141dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141de:	8b9b      	ldrh	r3, [r3, #28]
 80141e0:	3314      	adds	r3, #20
 80141e2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80141e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141e6:	685b      	ldr	r3, [r3, #4]
 80141e8:	685b      	ldr	r3, [r3, #4]
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80141ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141f0:	685b      	ldr	r3, [r3, #4]
 80141f2:	685b      	ldr	r3, [r3, #4]
 80141f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80141f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141f8:	3308      	adds	r3, #8
 80141fa:	2214      	movs	r2, #20
 80141fc:	4619      	mov	r1, r3
 80141fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014200:	f000 fe0b 	bl	8014e1a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8014204:	8a3b      	ldrh	r3, [r7, #16]
 8014206:	4618      	mov	r0, r3
 8014208:	f7f6 fd22 	bl	800ac50 <lwip_htons>
 801420c:	4603      	mov	r3, r0
 801420e:	461a      	mov	r2, r3
 8014210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014212:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014216:	2200      	movs	r2, #0
 8014218:	719a      	strb	r2, [r3, #6]
 801421a:	2200      	movs	r2, #0
 801421c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801421e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014220:	2200      	movs	r2, #0
 8014222:	729a      	strb	r2, [r3, #10]
 8014224:	2200      	movs	r2, #0
 8014226:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801422a:	685b      	ldr	r3, [r3, #4]
 801422c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801422e:	e00d      	b.n	801424c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8014230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014232:	685b      	ldr	r3, [r3, #4]
 8014234:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8014236:	2114      	movs	r1, #20
 8014238:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801423a:	f7f8 f885 	bl	800c348 <pbuf_remove_header>
      pbuf_cat(p, r);
 801423e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8014240:	6878      	ldr	r0, [r7, #4]
 8014242:	f7f8 f9d5 	bl	800c5f0 <pbuf_cat>
      r = iprh->next_pbuf;
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801424c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801424e:	2b00      	cmp	r3, #0
 8014250:	d1ee      	bne.n	8014230 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8014252:	4b1e      	ldr	r3, [pc, #120]	@ (80142cc <ip4_reass+0x2b4>)
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014258:	429a      	cmp	r2, r3
 801425a:	d102      	bne.n	8014262 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801425c:	2300      	movs	r3, #0
 801425e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014260:	e010      	b.n	8014284 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014262:	4b1a      	ldr	r3, [pc, #104]	@ (80142cc <ip4_reass+0x2b4>)
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014268:	e007      	b.n	801427a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801426a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014270:	429a      	cmp	r2, r3
 8014272:	d006      	beq.n	8014282 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801427a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801427c:	2b00      	cmp	r3, #0
 801427e:	d1f4      	bne.n	801426a <ip4_reass+0x252>
 8014280:	e000      	b.n	8014284 <ip4_reass+0x26c>
          break;
 8014282:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014284:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014286:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014288:	f7ff fd2e 	bl	8013ce8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801428c:	6878      	ldr	r0, [r7, #4]
 801428e:	f7f8 f96f 	bl	800c570 <pbuf_clen>
 8014292:	4603      	mov	r3, r0
 8014294:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014296:	4b0c      	ldr	r3, [pc, #48]	@ (80142c8 <ip4_reass+0x2b0>)
 8014298:	881b      	ldrh	r3, [r3, #0]
 801429a:	8c3a      	ldrh	r2, [r7, #32]
 801429c:	429a      	cmp	r2, r3
 801429e:	d906      	bls.n	80142ae <ip4_reass+0x296>
 80142a0:	4b0b      	ldr	r3, [pc, #44]	@ (80142d0 <ip4_reass+0x2b8>)
 80142a2:	f240 229b 	movw	r2, #667	@ 0x29b
 80142a6:	490b      	ldr	r1, [pc, #44]	@ (80142d4 <ip4_reass+0x2bc>)
 80142a8:	480b      	ldr	r0, [pc, #44]	@ (80142d8 <ip4_reass+0x2c0>)
 80142aa:	f000 fcdb 	bl	8014c64 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80142ae:	4b06      	ldr	r3, [pc, #24]	@ (80142c8 <ip4_reass+0x2b0>)
 80142b0:	881a      	ldrh	r2, [r3, #0]
 80142b2:	8c3b      	ldrh	r3, [r7, #32]
 80142b4:	1ad3      	subs	r3, r2, r3
 80142b6:	b29a      	uxth	r2, r3
 80142b8:	4b03      	ldr	r3, [pc, #12]	@ (80142c8 <ip4_reass+0x2b0>)
 80142ba:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	e038      	b.n	8014332 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80142c0:	2300      	movs	r3, #0
 80142c2:	e036      	b.n	8014332 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80142c4:	bf00      	nop
 80142c6:	e00a      	b.n	80142de <ip4_reass+0x2c6>
 80142c8:	20010464 	.word	0x20010464
 80142cc:	20010460 	.word	0x20010460
 80142d0:	08018354 	.word	0x08018354
 80142d4:	080184c4 	.word	0x080184c4
 80142d8:	0801839c 	.word	0x0801839c
    goto nullreturn_ipr;
 80142dc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80142de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d106      	bne.n	80142f2 <ip4_reass+0x2da>
 80142e4:	4b15      	ldr	r3, [pc, #84]	@ (801433c <ip4_reass+0x324>)
 80142e6:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80142ea:	4915      	ldr	r1, [pc, #84]	@ (8014340 <ip4_reass+0x328>)
 80142ec:	4815      	ldr	r0, [pc, #84]	@ (8014344 <ip4_reass+0x32c>)
 80142ee:	f000 fcb9 	bl	8014c64 <iprintf>
  if (ipr->p == NULL) {
 80142f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142f4:	685b      	ldr	r3, [r3, #4]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d116      	bne.n	8014328 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80142fa:	4b13      	ldr	r3, [pc, #76]	@ (8014348 <ip4_reass+0x330>)
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014300:	429a      	cmp	r2, r3
 8014302:	d006      	beq.n	8014312 <ip4_reass+0x2fa>
 8014304:	4b0d      	ldr	r3, [pc, #52]	@ (801433c <ip4_reass+0x324>)
 8014306:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801430a:	4910      	ldr	r1, [pc, #64]	@ (801434c <ip4_reass+0x334>)
 801430c:	480d      	ldr	r0, [pc, #52]	@ (8014344 <ip4_reass+0x32c>)
 801430e:	f000 fca9 	bl	8014c64 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8014312:	2100      	movs	r1, #0
 8014314:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014316:	f7ff fce7 	bl	8013ce8 <ip_reass_dequeue_datagram>
 801431a:	e006      	b.n	801432a <ip4_reass+0x312>
    goto nullreturn;
 801431c:	bf00      	nop
 801431e:	e004      	b.n	801432a <ip4_reass+0x312>
    goto nullreturn;
 8014320:	bf00      	nop
 8014322:	e002      	b.n	801432a <ip4_reass+0x312>
      goto nullreturn;
 8014324:	bf00      	nop
 8014326:	e000      	b.n	801432a <ip4_reass+0x312>
  }

nullreturn:
 8014328:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801432a:	6878      	ldr	r0, [r7, #4]
 801432c:	f7f8 f892 	bl	800c454 <pbuf_free>
  return NULL;
 8014330:	2300      	movs	r3, #0
}
 8014332:	4618      	mov	r0, r3
 8014334:	3738      	adds	r7, #56	@ 0x38
 8014336:	46bd      	mov	sp, r7
 8014338:	bd80      	pop	{r7, pc}
 801433a:	bf00      	nop
 801433c:	08018354 	.word	0x08018354
 8014340:	080184e0 	.word	0x080184e0
 8014344:	0801839c 	.word	0x0801839c
 8014348:	20010460 	.word	0x20010460
 801434c:	080184ec 	.word	0x080184ec

08014350 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014350:	b580      	push	{r7, lr}
 8014352:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014354:	2005      	movs	r0, #5
 8014356:	f7f7 f95f 	bl	800b618 <memp_malloc>
 801435a:	4603      	mov	r3, r0
}
 801435c:	4618      	mov	r0, r3
 801435e:	bd80      	pop	{r7, pc}

08014360 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014360:	b580      	push	{r7, lr}
 8014362:	b082      	sub	sp, #8
 8014364:	af00      	add	r7, sp, #0
 8014366:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d106      	bne.n	801437c <ip_frag_free_pbuf_custom_ref+0x1c>
 801436e:	4b07      	ldr	r3, [pc, #28]	@ (801438c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014370:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8014374:	4906      	ldr	r1, [pc, #24]	@ (8014390 <ip_frag_free_pbuf_custom_ref+0x30>)
 8014376:	4807      	ldr	r0, [pc, #28]	@ (8014394 <ip_frag_free_pbuf_custom_ref+0x34>)
 8014378:	f000 fc74 	bl	8014c64 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801437c:	6879      	ldr	r1, [r7, #4]
 801437e:	2005      	movs	r0, #5
 8014380:	f7f7 f9c0 	bl	800b704 <memp_free>
}
 8014384:	bf00      	nop
 8014386:	3708      	adds	r7, #8
 8014388:	46bd      	mov	sp, r7
 801438a:	bd80      	pop	{r7, pc}
 801438c:	08018354 	.word	0x08018354
 8014390:	0801850c 	.word	0x0801850c
 8014394:	0801839c 	.word	0x0801839c

08014398 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014398:	b580      	push	{r7, lr}
 801439a:	b084      	sub	sp, #16
 801439c:	af00      	add	r7, sp, #0
 801439e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d106      	bne.n	80143b8 <ipfrag_free_pbuf_custom+0x20>
 80143aa:	4b11      	ldr	r3, [pc, #68]	@ (80143f0 <ipfrag_free_pbuf_custom+0x58>)
 80143ac:	f240 22ce 	movw	r2, #718	@ 0x2ce
 80143b0:	4910      	ldr	r1, [pc, #64]	@ (80143f4 <ipfrag_free_pbuf_custom+0x5c>)
 80143b2:	4811      	ldr	r0, [pc, #68]	@ (80143f8 <ipfrag_free_pbuf_custom+0x60>)
 80143b4:	f000 fc56 	bl	8014c64 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80143b8:	68fa      	ldr	r2, [r7, #12]
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	429a      	cmp	r2, r3
 80143be:	d006      	beq.n	80143ce <ipfrag_free_pbuf_custom+0x36>
 80143c0:	4b0b      	ldr	r3, [pc, #44]	@ (80143f0 <ipfrag_free_pbuf_custom+0x58>)
 80143c2:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80143c6:	490d      	ldr	r1, [pc, #52]	@ (80143fc <ipfrag_free_pbuf_custom+0x64>)
 80143c8:	480b      	ldr	r0, [pc, #44]	@ (80143f8 <ipfrag_free_pbuf_custom+0x60>)
 80143ca:	f000 fc4b 	bl	8014c64 <iprintf>
  if (pcr->original != NULL) {
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	695b      	ldr	r3, [r3, #20]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d004      	beq.n	80143e0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	695b      	ldr	r3, [r3, #20]
 80143da:	4618      	mov	r0, r3
 80143dc:	f7f8 f83a 	bl	800c454 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80143e0:	68f8      	ldr	r0, [r7, #12]
 80143e2:	f7ff ffbd 	bl	8014360 <ip_frag_free_pbuf_custom_ref>
}
 80143e6:	bf00      	nop
 80143e8:	3710      	adds	r7, #16
 80143ea:	46bd      	mov	sp, r7
 80143ec:	bd80      	pop	{r7, pc}
 80143ee:	bf00      	nop
 80143f0:	08018354 	.word	0x08018354
 80143f4:	08018518 	.word	0x08018518
 80143f8:	0801839c 	.word	0x0801839c
 80143fc:	08018524 	.word	0x08018524

08014400 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014400:	b580      	push	{r7, lr}
 8014402:	b094      	sub	sp, #80	@ 0x50
 8014404:	af02      	add	r7, sp, #8
 8014406:	60f8      	str	r0, [r7, #12]
 8014408:	60b9      	str	r1, [r7, #8]
 801440a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801440c:	2300      	movs	r3, #0
 801440e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8014412:	68bb      	ldr	r3, [r7, #8]
 8014414:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014416:	3b14      	subs	r3, #20
 8014418:	2b00      	cmp	r3, #0
 801441a:	da00      	bge.n	801441e <ip4_frag+0x1e>
 801441c:	3307      	adds	r3, #7
 801441e:	10db      	asrs	r3, r3, #3
 8014420:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8014422:	2314      	movs	r3, #20
 8014424:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	685b      	ldr	r3, [r3, #4]
 801442a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801442c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801442e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014432:	781b      	ldrb	r3, [r3, #0]
 8014434:	f003 030f 	and.w	r3, r3, #15
 8014438:	b2db      	uxtb	r3, r3
 801443a:	009b      	lsls	r3, r3, #2
 801443c:	b2db      	uxtb	r3, r3
 801443e:	2b14      	cmp	r3, #20
 8014440:	d002      	beq.n	8014448 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8014442:	f06f 0305 	mvn.w	r3, #5
 8014446:	e110      	b.n	801466a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	895b      	ldrh	r3, [r3, #10]
 801444c:	2b13      	cmp	r3, #19
 801444e:	d809      	bhi.n	8014464 <ip4_frag+0x64>
 8014450:	4b88      	ldr	r3, [pc, #544]	@ (8014674 <ip4_frag+0x274>)
 8014452:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8014456:	4988      	ldr	r1, [pc, #544]	@ (8014678 <ip4_frag+0x278>)
 8014458:	4888      	ldr	r0, [pc, #544]	@ (801467c <ip4_frag+0x27c>)
 801445a:	f000 fc03 	bl	8014c64 <iprintf>
 801445e:	f06f 0305 	mvn.w	r3, #5
 8014462:	e102      	b.n	801466a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014466:	88db      	ldrh	r3, [r3, #6]
 8014468:	b29b      	uxth	r3, r3
 801446a:	4618      	mov	r0, r3
 801446c:	f7f6 fbf0 	bl	800ac50 <lwip_htons>
 8014470:	4603      	mov	r3, r0
 8014472:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8014474:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014476:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801447a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801447e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014480:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014484:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	891b      	ldrh	r3, [r3, #8]
 801448a:	3b14      	subs	r3, #20
 801448c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8014490:	e0e1      	b.n	8014656 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8014492:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014494:	00db      	lsls	r3, r3, #3
 8014496:	b29b      	uxth	r3, r3
 8014498:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801449c:	4293      	cmp	r3, r2
 801449e:	bf28      	it	cs
 80144a0:	4613      	movcs	r3, r2
 80144a2:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80144a4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80144a8:	2114      	movs	r1, #20
 80144aa:	200e      	movs	r0, #14
 80144ac:	f7f7 fcea 	bl	800be84 <pbuf_alloc>
 80144b0:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 80144b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	f000 80d5 	beq.w	8014664 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80144ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144bc:	895b      	ldrh	r3, [r3, #10]
 80144be:	2b13      	cmp	r3, #19
 80144c0:	d806      	bhi.n	80144d0 <ip4_frag+0xd0>
 80144c2:	4b6c      	ldr	r3, [pc, #432]	@ (8014674 <ip4_frag+0x274>)
 80144c4:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80144c8:	496d      	ldr	r1, [pc, #436]	@ (8014680 <ip4_frag+0x280>)
 80144ca:	486c      	ldr	r0, [pc, #432]	@ (801467c <ip4_frag+0x27c>)
 80144cc:	f000 fbca 	bl	8014c64 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80144d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144d2:	685b      	ldr	r3, [r3, #4]
 80144d4:	2214      	movs	r2, #20
 80144d6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80144d8:	4618      	mov	r0, r3
 80144da:	f000 fc9e 	bl	8014e1a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80144de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144e0:	685b      	ldr	r3, [r3, #4]
 80144e2:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80144e4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80144e6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80144ea:	e064      	b.n	80145b6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	895a      	ldrh	r2, [r3, #10]
 80144f0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80144f2:	1ad3      	subs	r3, r2, r3
 80144f4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	895b      	ldrh	r3, [r3, #10]
 80144fa:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80144fc:	429a      	cmp	r2, r3
 80144fe:	d906      	bls.n	801450e <ip4_frag+0x10e>
 8014500:	4b5c      	ldr	r3, [pc, #368]	@ (8014674 <ip4_frag+0x274>)
 8014502:	f240 322d 	movw	r2, #813	@ 0x32d
 8014506:	495f      	ldr	r1, [pc, #380]	@ (8014684 <ip4_frag+0x284>)
 8014508:	485c      	ldr	r0, [pc, #368]	@ (801467c <ip4_frag+0x27c>)
 801450a:	f000 fbab 	bl	8014c64 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801450e:	8bfa      	ldrh	r2, [r7, #30]
 8014510:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014514:	4293      	cmp	r3, r2
 8014516:	bf28      	it	cs
 8014518:	4613      	movcs	r3, r2
 801451a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801451e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014522:	2b00      	cmp	r3, #0
 8014524:	d105      	bne.n	8014532 <ip4_frag+0x132>
        poff = 0;
 8014526:	2300      	movs	r3, #0
 8014528:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	60fb      	str	r3, [r7, #12]
        continue;
 8014530:	e041      	b.n	80145b6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8014532:	f7ff ff0d 	bl	8014350 <ip_frag_alloc_pbuf_custom_ref>
 8014536:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014538:	69bb      	ldr	r3, [r7, #24]
 801453a:	2b00      	cmp	r3, #0
 801453c:	d103      	bne.n	8014546 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801453e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014540:	f7f7 ff88 	bl	800c454 <pbuf_free>
        goto memerr;
 8014544:	e08f      	b.n	8014666 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014546:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014548:	68fb      	ldr	r3, [r7, #12]
 801454a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801454c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801454e:	4413      	add	r3, r2
 8014550:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8014554:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8014558:	9201      	str	r2, [sp, #4]
 801455a:	9300      	str	r3, [sp, #0]
 801455c:	4603      	mov	r3, r0
 801455e:	2241      	movs	r2, #65	@ 0x41
 8014560:	2000      	movs	r0, #0
 8014562:	f7f7 fdbd 	bl	800c0e0 <pbuf_alloced_custom>
 8014566:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014568:	697b      	ldr	r3, [r7, #20]
 801456a:	2b00      	cmp	r3, #0
 801456c:	d106      	bne.n	801457c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801456e:	69b8      	ldr	r0, [r7, #24]
 8014570:	f7ff fef6 	bl	8014360 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014574:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014576:	f7f7 ff6d 	bl	800c454 <pbuf_free>
        goto memerr;
 801457a:	e074      	b.n	8014666 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801457c:	68f8      	ldr	r0, [r7, #12]
 801457e:	f7f8 f80f 	bl	800c5a0 <pbuf_ref>
      pcr->original = p;
 8014582:	69bb      	ldr	r3, [r7, #24]
 8014584:	68fa      	ldr	r2, [r7, #12]
 8014586:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014588:	69bb      	ldr	r3, [r7, #24]
 801458a:	4a3f      	ldr	r2, [pc, #252]	@ (8014688 <ip4_frag+0x288>)
 801458c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801458e:	6979      	ldr	r1, [r7, #20]
 8014590:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014592:	f7f8 f82d 	bl	800c5f0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014596:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801459a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801459e:	1ad3      	subs	r3, r2, r3
 80145a0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 80145a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d004      	beq.n	80145b6 <ip4_frag+0x1b6>
        poff = 0;
 80145ac:	2300      	movs	r3, #0
 80145ae:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80145b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d196      	bne.n	80144ec <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80145be:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80145c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80145c4:	4413      	add	r3, r2
 80145c6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80145c8:	68bb      	ldr	r3, [r7, #8]
 80145ca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80145cc:	f1a3 0213 	sub.w	r2, r3, #19
 80145d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80145d4:	429a      	cmp	r2, r3
 80145d6:	bfcc      	ite	gt
 80145d8:	2301      	movgt	r3, #1
 80145da:	2300      	movle	r3, #0
 80145dc:	b2db      	uxtb	r3, r3
 80145de:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80145e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80145e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80145e8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80145ea:	6a3b      	ldr	r3, [r7, #32]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d002      	beq.n	80145f6 <ip4_frag+0x1f6>
 80145f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d003      	beq.n	80145fe <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80145f6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80145f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80145fc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80145fe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014600:	4618      	mov	r0, r3
 8014602:	f7f6 fb25 	bl	800ac50 <lwip_htons>
 8014606:	4603      	mov	r3, r0
 8014608:	461a      	mov	r2, r3
 801460a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801460c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801460e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014610:	3314      	adds	r3, #20
 8014612:	b29b      	uxth	r3, r3
 8014614:	4618      	mov	r0, r3
 8014616:	f7f6 fb1b 	bl	800ac50 <lwip_htons>
 801461a:	4603      	mov	r3, r0
 801461c:	461a      	mov	r2, r3
 801461e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014620:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014624:	2200      	movs	r2, #0
 8014626:	729a      	strb	r2, [r3, #10]
 8014628:	2200      	movs	r2, #0
 801462a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801462c:	68bb      	ldr	r3, [r7, #8]
 801462e:	695b      	ldr	r3, [r3, #20]
 8014630:	687a      	ldr	r2, [r7, #4]
 8014632:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014634:	68b8      	ldr	r0, [r7, #8]
 8014636:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014638:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801463a:	f7f7 ff0b 	bl	800c454 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801463e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014642:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014644:	1ad3      	subs	r3, r2, r3
 8014646:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801464a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801464e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014650:	4413      	add	r3, r2
 8014652:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8014656:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801465a:	2b00      	cmp	r3, #0
 801465c:	f47f af19 	bne.w	8014492 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014660:	2300      	movs	r3, #0
 8014662:	e002      	b.n	801466a <ip4_frag+0x26a>
      goto memerr;
 8014664:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014666:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801466a:	4618      	mov	r0, r3
 801466c:	3748      	adds	r7, #72	@ 0x48
 801466e:	46bd      	mov	sp, r7
 8014670:	bd80      	pop	{r7, pc}
 8014672:	bf00      	nop
 8014674:	08018354 	.word	0x08018354
 8014678:	08018530 	.word	0x08018530
 801467c:	0801839c 	.word	0x0801839c
 8014680:	0801854c 	.word	0x0801854c
 8014684:	0801856c 	.word	0x0801856c
 8014688:	08014399 	.word	0x08014399

0801468c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801468c:	b580      	push	{r7, lr}
 801468e:	b086      	sub	sp, #24
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]
 8014694:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014696:	230e      	movs	r3, #14
 8014698:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	895b      	ldrh	r3, [r3, #10]
 801469e:	2b0e      	cmp	r3, #14
 80146a0:	d96e      	bls.n	8014780 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	7bdb      	ldrb	r3, [r3, #15]
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d106      	bne.n	80146b8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80146aa:	683b      	ldr	r3, [r7, #0]
 80146ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80146b0:	3301      	adds	r3, #1
 80146b2:	b2da      	uxtb	r2, r3
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	685b      	ldr	r3, [r3, #4]
 80146bc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80146be:	693b      	ldr	r3, [r7, #16]
 80146c0:	7b1a      	ldrb	r2, [r3, #12]
 80146c2:	7b5b      	ldrb	r3, [r3, #13]
 80146c4:	021b      	lsls	r3, r3, #8
 80146c6:	4313      	orrs	r3, r2
 80146c8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80146ca:	693b      	ldr	r3, [r7, #16]
 80146cc:	781b      	ldrb	r3, [r3, #0]
 80146ce:	f003 0301 	and.w	r3, r3, #1
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d023      	beq.n	801471e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80146d6:	693b      	ldr	r3, [r7, #16]
 80146d8:	781b      	ldrb	r3, [r3, #0]
 80146da:	2b01      	cmp	r3, #1
 80146dc:	d10f      	bne.n	80146fe <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80146de:	693b      	ldr	r3, [r7, #16]
 80146e0:	785b      	ldrb	r3, [r3, #1]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d11b      	bne.n	801471e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80146e6:	693b      	ldr	r3, [r7, #16]
 80146e8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80146ea:	2b5e      	cmp	r3, #94	@ 0x5e
 80146ec:	d117      	bne.n	801471e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	7b5b      	ldrb	r3, [r3, #13]
 80146f2:	f043 0310 	orr.w	r3, r3, #16
 80146f6:	b2da      	uxtb	r2, r3
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	735a      	strb	r2, [r3, #13]
 80146fc:	e00f      	b.n	801471e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80146fe:	693b      	ldr	r3, [r7, #16]
 8014700:	2206      	movs	r2, #6
 8014702:	4928      	ldr	r1, [pc, #160]	@ (80147a4 <ethernet_input+0x118>)
 8014704:	4618      	mov	r0, r3
 8014706:	f000 fb02 	bl	8014d0e <memcmp>
 801470a:	4603      	mov	r3, r0
 801470c:	2b00      	cmp	r3, #0
 801470e:	d106      	bne.n	801471e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	7b5b      	ldrb	r3, [r3, #13]
 8014714:	f043 0308 	orr.w	r3, r3, #8
 8014718:	b2da      	uxtb	r2, r3
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801471e:	89fb      	ldrh	r3, [r7, #14]
 8014720:	2b08      	cmp	r3, #8
 8014722:	d003      	beq.n	801472c <ethernet_input+0xa0>
 8014724:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8014728:	d014      	beq.n	8014754 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801472a:	e032      	b.n	8014792 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801472c:	683b      	ldr	r3, [r7, #0]
 801472e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014732:	f003 0308 	and.w	r3, r3, #8
 8014736:	2b00      	cmp	r3, #0
 8014738:	d024      	beq.n	8014784 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801473a:	8afb      	ldrh	r3, [r7, #22]
 801473c:	4619      	mov	r1, r3
 801473e:	6878      	ldr	r0, [r7, #4]
 8014740:	f7f7 fe02 	bl	800c348 <pbuf_remove_header>
 8014744:	4603      	mov	r3, r0
 8014746:	2b00      	cmp	r3, #0
 8014748:	d11e      	bne.n	8014788 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801474a:	6839      	ldr	r1, [r7, #0]
 801474c:	6878      	ldr	r0, [r7, #4]
 801474e:	f7fe ff21 	bl	8013594 <ip4_input>
      break;
 8014752:	e013      	b.n	801477c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014754:	683b      	ldr	r3, [r7, #0]
 8014756:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801475a:	f003 0308 	and.w	r3, r3, #8
 801475e:	2b00      	cmp	r3, #0
 8014760:	d014      	beq.n	801478c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014762:	8afb      	ldrh	r3, [r7, #22]
 8014764:	4619      	mov	r1, r3
 8014766:	6878      	ldr	r0, [r7, #4]
 8014768:	f7f7 fdee 	bl	800c348 <pbuf_remove_header>
 801476c:	4603      	mov	r3, r0
 801476e:	2b00      	cmp	r3, #0
 8014770:	d10e      	bne.n	8014790 <ethernet_input+0x104>
        etharp_input(p, netif);
 8014772:	6839      	ldr	r1, [r7, #0]
 8014774:	6878      	ldr	r0, [r7, #4]
 8014776:	f7fe f8c1 	bl	80128fc <etharp_input>
      break;
 801477a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801477c:	2300      	movs	r3, #0
 801477e:	e00c      	b.n	801479a <ethernet_input+0x10e>
    goto free_and_return;
 8014780:	bf00      	nop
 8014782:	e006      	b.n	8014792 <ethernet_input+0x106>
        goto free_and_return;
 8014784:	bf00      	nop
 8014786:	e004      	b.n	8014792 <ethernet_input+0x106>
        goto free_and_return;
 8014788:	bf00      	nop
 801478a:	e002      	b.n	8014792 <ethernet_input+0x106>
        goto free_and_return;
 801478c:	bf00      	nop
 801478e:	e000      	b.n	8014792 <ethernet_input+0x106>
        goto free_and_return;
 8014790:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014792:	6878      	ldr	r0, [r7, #4]
 8014794:	f7f7 fe5e 	bl	800c454 <pbuf_free>
  return ERR_OK;
 8014798:	2300      	movs	r3, #0
}
 801479a:	4618      	mov	r0, r3
 801479c:	3718      	adds	r7, #24
 801479e:	46bd      	mov	sp, r7
 80147a0:	bd80      	pop	{r7, pc}
 80147a2:	bf00      	nop
 80147a4:	08018748 	.word	0x08018748

080147a8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80147a8:	b580      	push	{r7, lr}
 80147aa:	b086      	sub	sp, #24
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	60f8      	str	r0, [r7, #12]
 80147b0:	60b9      	str	r1, [r7, #8]
 80147b2:	607a      	str	r2, [r7, #4]
 80147b4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80147b6:	8c3b      	ldrh	r3, [r7, #32]
 80147b8:	4618      	mov	r0, r3
 80147ba:	f7f6 fa49 	bl	800ac50 <lwip_htons>
 80147be:	4603      	mov	r3, r0
 80147c0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80147c2:	210e      	movs	r1, #14
 80147c4:	68b8      	ldr	r0, [r7, #8]
 80147c6:	f7f7 fdaf 	bl	800c328 <pbuf_add_header>
 80147ca:	4603      	mov	r3, r0
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d125      	bne.n	801481c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80147d0:	68bb      	ldr	r3, [r7, #8]
 80147d2:	685b      	ldr	r3, [r3, #4]
 80147d4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80147d6:	693b      	ldr	r3, [r7, #16]
 80147d8:	8afa      	ldrh	r2, [r7, #22]
 80147da:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80147dc:	693b      	ldr	r3, [r7, #16]
 80147de:	2206      	movs	r2, #6
 80147e0:	6839      	ldr	r1, [r7, #0]
 80147e2:	4618      	mov	r0, r3
 80147e4:	f000 fb19 	bl	8014e1a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80147e8:	693b      	ldr	r3, [r7, #16]
 80147ea:	3306      	adds	r3, #6
 80147ec:	2206      	movs	r2, #6
 80147ee:	6879      	ldr	r1, [r7, #4]
 80147f0:	4618      	mov	r0, r3
 80147f2:	f000 fb12 	bl	8014e1a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80147fc:	2b06      	cmp	r3, #6
 80147fe:	d006      	beq.n	801480e <ethernet_output+0x66>
 8014800:	4b0a      	ldr	r3, [pc, #40]	@ (801482c <ethernet_output+0x84>)
 8014802:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8014806:	490a      	ldr	r1, [pc, #40]	@ (8014830 <ethernet_output+0x88>)
 8014808:	480a      	ldr	r0, [pc, #40]	@ (8014834 <ethernet_output+0x8c>)
 801480a:	f000 fa2b 	bl	8014c64 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	699b      	ldr	r3, [r3, #24]
 8014812:	68b9      	ldr	r1, [r7, #8]
 8014814:	68f8      	ldr	r0, [r7, #12]
 8014816:	4798      	blx	r3
 8014818:	4603      	mov	r3, r0
 801481a:	e002      	b.n	8014822 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801481c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801481e:	f06f 0301 	mvn.w	r3, #1
}
 8014822:	4618      	mov	r0, r3
 8014824:	3718      	adds	r7, #24
 8014826:	46bd      	mov	sp, r7
 8014828:	bd80      	pop	{r7, pc}
 801482a:	bf00      	nop
 801482c:	0801857c 	.word	0x0801857c
 8014830:	080185b4 	.word	0x080185b4
 8014834:	080185e8 	.word	0x080185e8

08014838 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8014838:	b580      	push	{r7, lr}
 801483a:	b086      	sub	sp, #24
 801483c:	af00      	add	r7, sp, #0
 801483e:	6078      	str	r0, [r7, #4]
 8014840:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8014842:	683b      	ldr	r3, [r7, #0]
 8014844:	60bb      	str	r3, [r7, #8]
 8014846:	2304      	movs	r3, #4
 8014848:	60fb      	str	r3, [r7, #12]
 801484a:	2300      	movs	r3, #0
 801484c:	613b      	str	r3, [r7, #16]
 801484e:	2300      	movs	r3, #0
 8014850:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8014852:	f107 0308 	add.w	r3, r7, #8
 8014856:	2100      	movs	r1, #0
 8014858:	4618      	mov	r0, r3
 801485a:	f7f3 fa19 	bl	8007c90 <osMessageCreate>
 801485e:	4602      	mov	r2, r0
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	681b      	ldr	r3, [r3, #0]
 8014868:	2b00      	cmp	r3, #0
 801486a:	d102      	bne.n	8014872 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801486c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014870:	e000      	b.n	8014874 <sys_mbox_new+0x3c>

  return ERR_OK;
 8014872:	2300      	movs	r3, #0
}
 8014874:	4618      	mov	r0, r3
 8014876:	3718      	adds	r7, #24
 8014878:	46bd      	mov	sp, r7
 801487a:	bd80      	pop	{r7, pc}

0801487c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801487c:	b580      	push	{r7, lr}
 801487e:	b084      	sub	sp, #16
 8014880:	af00      	add	r7, sp, #0
 8014882:	6078      	str	r0, [r7, #4]
 8014884:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	6839      	ldr	r1, [r7, #0]
 801488c:	2200      	movs	r2, #0
 801488e:	4618      	mov	r0, r3
 8014890:	f7f3 fa26 	bl	8007ce0 <osMessagePut>
 8014894:	4603      	mov	r3, r0
 8014896:	2b00      	cmp	r3, #0
 8014898:	d102      	bne.n	80148a0 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801489a:	2300      	movs	r3, #0
 801489c:	73fb      	strb	r3, [r7, #15]
 801489e:	e001      	b.n	80148a4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80148a0:	23ff      	movs	r3, #255	@ 0xff
 80148a2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80148a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80148a8:	4618      	mov	r0, r3
 80148aa:	3710      	adds	r7, #16
 80148ac:	46bd      	mov	sp, r7
 80148ae:	bd80      	pop	{r7, pc}

080148b0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b08c      	sub	sp, #48	@ 0x30
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	61f8      	str	r0, [r7, #28]
 80148b8:	61b9      	str	r1, [r7, #24]
 80148ba:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80148bc:	f7f3 f819 	bl	80078f2 <osKernelSysTick>
 80148c0:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80148c2:	697b      	ldr	r3, [r7, #20]
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d017      	beq.n	80148f8 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80148c8:	69fb      	ldr	r3, [r7, #28]
 80148ca:	6819      	ldr	r1, [r3, #0]
 80148cc:	f107 0320 	add.w	r3, r7, #32
 80148d0:	697a      	ldr	r2, [r7, #20]
 80148d2:	4618      	mov	r0, r3
 80148d4:	f7f3 fa44 	bl	8007d60 <osMessageGet>

    if(event.status == osEventMessage)
 80148d8:	6a3b      	ldr	r3, [r7, #32]
 80148da:	2b10      	cmp	r3, #16
 80148dc:	d109      	bne.n	80148f2 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80148de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148e0:	461a      	mov	r2, r3
 80148e2:	69bb      	ldr	r3, [r7, #24]
 80148e4:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80148e6:	f7f3 f804 	bl	80078f2 <osKernelSysTick>
 80148ea:	4602      	mov	r2, r0
 80148ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148ee:	1ad3      	subs	r3, r2, r3
 80148f0:	e019      	b.n	8014926 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80148f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80148f6:	e016      	b.n	8014926 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80148f8:	69fb      	ldr	r3, [r7, #28]
 80148fa:	6819      	ldr	r1, [r3, #0]
 80148fc:	463b      	mov	r3, r7
 80148fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014902:	4618      	mov	r0, r3
 8014904:	f7f3 fa2c 	bl	8007d60 <osMessageGet>
 8014908:	f107 0320 	add.w	r3, r7, #32
 801490c:	463a      	mov	r2, r7
 801490e:	ca07      	ldmia	r2, {r0, r1, r2}
 8014910:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8014914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014916:	461a      	mov	r2, r3
 8014918:	69bb      	ldr	r3, [r7, #24]
 801491a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801491c:	f7f2 ffe9 	bl	80078f2 <osKernelSysTick>
 8014920:	4602      	mov	r2, r0
 8014922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014924:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8014926:	4618      	mov	r0, r3
 8014928:	3730      	adds	r7, #48	@ 0x30
 801492a:	46bd      	mov	sp, r7
 801492c:	bd80      	pop	{r7, pc}

0801492e <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801492e:	b480      	push	{r7}
 8014930:	b083      	sub	sp, #12
 8014932:	af00      	add	r7, sp, #0
 8014934:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	2b00      	cmp	r3, #0
 801493c:	d101      	bne.n	8014942 <sys_mbox_valid+0x14>
    return 0;
 801493e:	2300      	movs	r3, #0
 8014940:	e000      	b.n	8014944 <sys_mbox_valid+0x16>
  else
    return 1;
 8014942:	2301      	movs	r3, #1
}
 8014944:	4618      	mov	r0, r3
 8014946:	370c      	adds	r7, #12
 8014948:	46bd      	mov	sp, r7
 801494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801494e:	4770      	bx	lr

08014950 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8014950:	b580      	push	{r7, lr}
 8014952:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8014954:	4803      	ldr	r0, [pc, #12]	@ (8014964 <sys_init+0x14>)
 8014956:	f7f3 f848 	bl	80079ea <osMutexCreate>
 801495a:	4603      	mov	r3, r0
 801495c:	4a02      	ldr	r2, [pc, #8]	@ (8014968 <sys_init+0x18>)
 801495e:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8014960:	bf00      	nop
 8014962:	bd80      	pop	{r7, pc}
 8014964:	08018758 	.word	0x08018758
 8014968:	2001046c 	.word	0x2001046c

0801496c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801496c:	b580      	push	{r7, lr}
 801496e:	b084      	sub	sp, #16
 8014970:	af00      	add	r7, sp, #0
 8014972:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8014974:	2300      	movs	r3, #0
 8014976:	60bb      	str	r3, [r7, #8]
 8014978:	2300      	movs	r3, #0
 801497a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801497c:	f107 0308 	add.w	r3, r7, #8
 8014980:	4618      	mov	r0, r3
 8014982:	f7f3 f832 	bl	80079ea <osMutexCreate>
 8014986:	4602      	mov	r2, r0
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d102      	bne.n	801499a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8014994:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014998:	e000      	b.n	801499c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801499a:	2300      	movs	r3, #0
}
 801499c:	4618      	mov	r0, r3
 801499e:	3710      	adds	r7, #16
 80149a0:	46bd      	mov	sp, r7
 80149a2:	bd80      	pop	{r7, pc}

080149a4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80149a4:	b580      	push	{r7, lr}
 80149a6:	b082      	sub	sp, #8
 80149a8:	af00      	add	r7, sp, #0
 80149aa:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80149b4:	4618      	mov	r0, r3
 80149b6:	f7f3 f831 	bl	8007a1c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80149ba:	bf00      	nop
 80149bc:	3708      	adds	r7, #8
 80149be:	46bd      	mov	sp, r7
 80149c0:	bd80      	pop	{r7, pc}

080149c2 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80149c2:	b580      	push	{r7, lr}
 80149c4:	b082      	sub	sp, #8
 80149c6:	af00      	add	r7, sp, #0
 80149c8:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	4618      	mov	r0, r3
 80149d0:	f7f3 f872 	bl	8007ab8 <osMutexRelease>
}
 80149d4:	bf00      	nop
 80149d6:	3708      	adds	r7, #8
 80149d8:	46bd      	mov	sp, r7
 80149da:	bd80      	pop	{r7, pc}

080149dc <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80149dc:	b580      	push	{r7, lr}
 80149de:	b08c      	sub	sp, #48	@ 0x30
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	60f8      	str	r0, [r7, #12]
 80149e4:	60b9      	str	r1, [r7, #8]
 80149e6:	607a      	str	r2, [r7, #4]
 80149e8:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80149ea:	f107 0314 	add.w	r3, r7, #20
 80149ee:	2200      	movs	r2, #0
 80149f0:	601a      	str	r2, [r3, #0]
 80149f2:	605a      	str	r2, [r3, #4]
 80149f4:	609a      	str	r2, [r3, #8]
 80149f6:	60da      	str	r2, [r3, #12]
 80149f8:	611a      	str	r2, [r3, #16]
 80149fa:	615a      	str	r2, [r3, #20]
 80149fc:	619a      	str	r2, [r3, #24]
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	617b      	str	r3, [r7, #20]
 8014a02:	68bb      	ldr	r3, [r7, #8]
 8014a04:	61bb      	str	r3, [r7, #24]
 8014a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a08:	b21b      	sxth	r3, r3
 8014a0a:	83bb      	strh	r3, [r7, #28]
 8014a0c:	683b      	ldr	r3, [r7, #0]
 8014a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8014a10:	f107 0314 	add.w	r3, r7, #20
 8014a14:	6879      	ldr	r1, [r7, #4]
 8014a16:	4618      	mov	r0, r3
 8014a18:	f7f2 ff7b 	bl	8007912 <osThreadCreate>
 8014a1c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8014a1e:	4618      	mov	r0, r3
 8014a20:	3730      	adds	r7, #48	@ 0x30
 8014a22:	46bd      	mov	sp, r7
 8014a24:	bd80      	pop	{r7, pc}
	...

08014a28 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8014a28:	b580      	push	{r7, lr}
 8014a2a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8014a2c:	4b04      	ldr	r3, [pc, #16]	@ (8014a40 <sys_arch_protect+0x18>)
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8014a34:	4618      	mov	r0, r3
 8014a36:	f7f2 fff1 	bl	8007a1c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8014a3a:	2301      	movs	r3, #1
}
 8014a3c:	4618      	mov	r0, r3
 8014a3e:	bd80      	pop	{r7, pc}
 8014a40:	2001046c 	.word	0x2001046c

08014a44 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8014a44:	b580      	push	{r7, lr}
 8014a46:	b082      	sub	sp, #8
 8014a48:	af00      	add	r7, sp, #0
 8014a4a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8014a4c:	4b04      	ldr	r3, [pc, #16]	@ (8014a60 <sys_arch_unprotect+0x1c>)
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	4618      	mov	r0, r3
 8014a52:	f7f3 f831 	bl	8007ab8 <osMutexRelease>
}
 8014a56:	bf00      	nop
 8014a58:	3708      	adds	r7, #8
 8014a5a:	46bd      	mov	sp, r7
 8014a5c:	bd80      	pop	{r7, pc}
 8014a5e:	bf00      	nop
 8014a60:	2001046c 	.word	0x2001046c

08014a64 <rand>:
 8014a64:	4b16      	ldr	r3, [pc, #88]	@ (8014ac0 <rand+0x5c>)
 8014a66:	b510      	push	{r4, lr}
 8014a68:	681c      	ldr	r4, [r3, #0]
 8014a6a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014a6c:	b9b3      	cbnz	r3, 8014a9c <rand+0x38>
 8014a6e:	2018      	movs	r0, #24
 8014a70:	f000 fa00 	bl	8014e74 <malloc>
 8014a74:	4602      	mov	r2, r0
 8014a76:	6320      	str	r0, [r4, #48]	@ 0x30
 8014a78:	b920      	cbnz	r0, 8014a84 <rand+0x20>
 8014a7a:	4b12      	ldr	r3, [pc, #72]	@ (8014ac4 <rand+0x60>)
 8014a7c:	4812      	ldr	r0, [pc, #72]	@ (8014ac8 <rand+0x64>)
 8014a7e:	2152      	movs	r1, #82	@ 0x52
 8014a80:	f000 f9da 	bl	8014e38 <__assert_func>
 8014a84:	4911      	ldr	r1, [pc, #68]	@ (8014acc <rand+0x68>)
 8014a86:	4b12      	ldr	r3, [pc, #72]	@ (8014ad0 <rand+0x6c>)
 8014a88:	e9c0 1300 	strd	r1, r3, [r0]
 8014a8c:	4b11      	ldr	r3, [pc, #68]	@ (8014ad4 <rand+0x70>)
 8014a8e:	6083      	str	r3, [r0, #8]
 8014a90:	230b      	movs	r3, #11
 8014a92:	8183      	strh	r3, [r0, #12]
 8014a94:	2100      	movs	r1, #0
 8014a96:	2001      	movs	r0, #1
 8014a98:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8014a9c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014a9e:	480e      	ldr	r0, [pc, #56]	@ (8014ad8 <rand+0x74>)
 8014aa0:	690b      	ldr	r3, [r1, #16]
 8014aa2:	694c      	ldr	r4, [r1, #20]
 8014aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8014adc <rand+0x78>)
 8014aa6:	4358      	muls	r0, r3
 8014aa8:	fb02 0004 	mla	r0, r2, r4, r0
 8014aac:	fba3 3202 	umull	r3, r2, r3, r2
 8014ab0:	3301      	adds	r3, #1
 8014ab2:	eb40 0002 	adc.w	r0, r0, r2
 8014ab6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8014aba:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8014abe:	bd10      	pop	{r4, pc}
 8014ac0:	2000003c 	.word	0x2000003c
 8014ac4:	08018760 	.word	0x08018760
 8014ac8:	08018777 	.word	0x08018777
 8014acc:	abcd330e 	.word	0xabcd330e
 8014ad0:	e66d1234 	.word	0xe66d1234
 8014ad4:	0005deec 	.word	0x0005deec
 8014ad8:	5851f42d 	.word	0x5851f42d
 8014adc:	4c957f2d 	.word	0x4c957f2d

08014ae0 <std>:
 8014ae0:	2300      	movs	r3, #0
 8014ae2:	b510      	push	{r4, lr}
 8014ae4:	4604      	mov	r4, r0
 8014ae6:	e9c0 3300 	strd	r3, r3, [r0]
 8014aea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014aee:	6083      	str	r3, [r0, #8]
 8014af0:	8181      	strh	r1, [r0, #12]
 8014af2:	6643      	str	r3, [r0, #100]	@ 0x64
 8014af4:	81c2      	strh	r2, [r0, #14]
 8014af6:	6183      	str	r3, [r0, #24]
 8014af8:	4619      	mov	r1, r3
 8014afa:	2208      	movs	r2, #8
 8014afc:	305c      	adds	r0, #92	@ 0x5c
 8014afe:	f000 f916 	bl	8014d2e <memset>
 8014b02:	4b0d      	ldr	r3, [pc, #52]	@ (8014b38 <std+0x58>)
 8014b04:	6263      	str	r3, [r4, #36]	@ 0x24
 8014b06:	4b0d      	ldr	r3, [pc, #52]	@ (8014b3c <std+0x5c>)
 8014b08:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8014b40 <std+0x60>)
 8014b0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8014b44 <std+0x64>)
 8014b10:	6323      	str	r3, [r4, #48]	@ 0x30
 8014b12:	4b0d      	ldr	r3, [pc, #52]	@ (8014b48 <std+0x68>)
 8014b14:	6224      	str	r4, [r4, #32]
 8014b16:	429c      	cmp	r4, r3
 8014b18:	d006      	beq.n	8014b28 <std+0x48>
 8014b1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014b1e:	4294      	cmp	r4, r2
 8014b20:	d002      	beq.n	8014b28 <std+0x48>
 8014b22:	33d0      	adds	r3, #208	@ 0xd0
 8014b24:	429c      	cmp	r4, r3
 8014b26:	d105      	bne.n	8014b34 <std+0x54>
 8014b28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014b30:	f000 b970 	b.w	8014e14 <__retarget_lock_init_recursive>
 8014b34:	bd10      	pop	{r4, pc}
 8014b36:	bf00      	nop
 8014b38:	08014c89 	.word	0x08014c89
 8014b3c:	08014cab 	.word	0x08014cab
 8014b40:	08014ce3 	.word	0x08014ce3
 8014b44:	08014d07 	.word	0x08014d07
 8014b48:	20010470 	.word	0x20010470

08014b4c <stdio_exit_handler>:
 8014b4c:	4a02      	ldr	r2, [pc, #8]	@ (8014b58 <stdio_exit_handler+0xc>)
 8014b4e:	4903      	ldr	r1, [pc, #12]	@ (8014b5c <stdio_exit_handler+0x10>)
 8014b50:	4803      	ldr	r0, [pc, #12]	@ (8014b60 <stdio_exit_handler+0x14>)
 8014b52:	f000 b869 	b.w	8014c28 <_fwalk_sglue>
 8014b56:	bf00      	nop
 8014b58:	20000030 	.word	0x20000030
 8014b5c:	08015689 	.word	0x08015689
 8014b60:	20000040 	.word	0x20000040

08014b64 <cleanup_stdio>:
 8014b64:	6841      	ldr	r1, [r0, #4]
 8014b66:	4b0c      	ldr	r3, [pc, #48]	@ (8014b98 <cleanup_stdio+0x34>)
 8014b68:	4299      	cmp	r1, r3
 8014b6a:	b510      	push	{r4, lr}
 8014b6c:	4604      	mov	r4, r0
 8014b6e:	d001      	beq.n	8014b74 <cleanup_stdio+0x10>
 8014b70:	f000 fd8a 	bl	8015688 <_fflush_r>
 8014b74:	68a1      	ldr	r1, [r4, #8]
 8014b76:	4b09      	ldr	r3, [pc, #36]	@ (8014b9c <cleanup_stdio+0x38>)
 8014b78:	4299      	cmp	r1, r3
 8014b7a:	d002      	beq.n	8014b82 <cleanup_stdio+0x1e>
 8014b7c:	4620      	mov	r0, r4
 8014b7e:	f000 fd83 	bl	8015688 <_fflush_r>
 8014b82:	68e1      	ldr	r1, [r4, #12]
 8014b84:	4b06      	ldr	r3, [pc, #24]	@ (8014ba0 <cleanup_stdio+0x3c>)
 8014b86:	4299      	cmp	r1, r3
 8014b88:	d004      	beq.n	8014b94 <cleanup_stdio+0x30>
 8014b8a:	4620      	mov	r0, r4
 8014b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014b90:	f000 bd7a 	b.w	8015688 <_fflush_r>
 8014b94:	bd10      	pop	{r4, pc}
 8014b96:	bf00      	nop
 8014b98:	20010470 	.word	0x20010470
 8014b9c:	200104d8 	.word	0x200104d8
 8014ba0:	20010540 	.word	0x20010540

08014ba4 <global_stdio_init.part.0>:
 8014ba4:	b510      	push	{r4, lr}
 8014ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8014bd4 <global_stdio_init.part.0+0x30>)
 8014ba8:	4c0b      	ldr	r4, [pc, #44]	@ (8014bd8 <global_stdio_init.part.0+0x34>)
 8014baa:	4a0c      	ldr	r2, [pc, #48]	@ (8014bdc <global_stdio_init.part.0+0x38>)
 8014bac:	601a      	str	r2, [r3, #0]
 8014bae:	4620      	mov	r0, r4
 8014bb0:	2200      	movs	r2, #0
 8014bb2:	2104      	movs	r1, #4
 8014bb4:	f7ff ff94 	bl	8014ae0 <std>
 8014bb8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014bbc:	2201      	movs	r2, #1
 8014bbe:	2109      	movs	r1, #9
 8014bc0:	f7ff ff8e 	bl	8014ae0 <std>
 8014bc4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014bc8:	2202      	movs	r2, #2
 8014bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014bce:	2112      	movs	r1, #18
 8014bd0:	f7ff bf86 	b.w	8014ae0 <std>
 8014bd4:	200105a8 	.word	0x200105a8
 8014bd8:	20010470 	.word	0x20010470
 8014bdc:	08014b4d 	.word	0x08014b4d

08014be0 <__sfp_lock_acquire>:
 8014be0:	4801      	ldr	r0, [pc, #4]	@ (8014be8 <__sfp_lock_acquire+0x8>)
 8014be2:	f000 b918 	b.w	8014e16 <__retarget_lock_acquire_recursive>
 8014be6:	bf00      	nop
 8014be8:	200105ad 	.word	0x200105ad

08014bec <__sfp_lock_release>:
 8014bec:	4801      	ldr	r0, [pc, #4]	@ (8014bf4 <__sfp_lock_release+0x8>)
 8014bee:	f000 b913 	b.w	8014e18 <__retarget_lock_release_recursive>
 8014bf2:	bf00      	nop
 8014bf4:	200105ad 	.word	0x200105ad

08014bf8 <__sinit>:
 8014bf8:	b510      	push	{r4, lr}
 8014bfa:	4604      	mov	r4, r0
 8014bfc:	f7ff fff0 	bl	8014be0 <__sfp_lock_acquire>
 8014c00:	6a23      	ldr	r3, [r4, #32]
 8014c02:	b11b      	cbz	r3, 8014c0c <__sinit+0x14>
 8014c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c08:	f7ff bff0 	b.w	8014bec <__sfp_lock_release>
 8014c0c:	4b04      	ldr	r3, [pc, #16]	@ (8014c20 <__sinit+0x28>)
 8014c0e:	6223      	str	r3, [r4, #32]
 8014c10:	4b04      	ldr	r3, [pc, #16]	@ (8014c24 <__sinit+0x2c>)
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d1f5      	bne.n	8014c04 <__sinit+0xc>
 8014c18:	f7ff ffc4 	bl	8014ba4 <global_stdio_init.part.0>
 8014c1c:	e7f2      	b.n	8014c04 <__sinit+0xc>
 8014c1e:	bf00      	nop
 8014c20:	08014b65 	.word	0x08014b65
 8014c24:	200105a8 	.word	0x200105a8

08014c28 <_fwalk_sglue>:
 8014c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c2c:	4607      	mov	r7, r0
 8014c2e:	4688      	mov	r8, r1
 8014c30:	4614      	mov	r4, r2
 8014c32:	2600      	movs	r6, #0
 8014c34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014c38:	f1b9 0901 	subs.w	r9, r9, #1
 8014c3c:	d505      	bpl.n	8014c4a <_fwalk_sglue+0x22>
 8014c3e:	6824      	ldr	r4, [r4, #0]
 8014c40:	2c00      	cmp	r4, #0
 8014c42:	d1f7      	bne.n	8014c34 <_fwalk_sglue+0xc>
 8014c44:	4630      	mov	r0, r6
 8014c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c4a:	89ab      	ldrh	r3, [r5, #12]
 8014c4c:	2b01      	cmp	r3, #1
 8014c4e:	d907      	bls.n	8014c60 <_fwalk_sglue+0x38>
 8014c50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014c54:	3301      	adds	r3, #1
 8014c56:	d003      	beq.n	8014c60 <_fwalk_sglue+0x38>
 8014c58:	4629      	mov	r1, r5
 8014c5a:	4638      	mov	r0, r7
 8014c5c:	47c0      	blx	r8
 8014c5e:	4306      	orrs	r6, r0
 8014c60:	3568      	adds	r5, #104	@ 0x68
 8014c62:	e7e9      	b.n	8014c38 <_fwalk_sglue+0x10>

08014c64 <iprintf>:
 8014c64:	b40f      	push	{r0, r1, r2, r3}
 8014c66:	b507      	push	{r0, r1, r2, lr}
 8014c68:	4906      	ldr	r1, [pc, #24]	@ (8014c84 <iprintf+0x20>)
 8014c6a:	ab04      	add	r3, sp, #16
 8014c6c:	6808      	ldr	r0, [r1, #0]
 8014c6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014c72:	6881      	ldr	r1, [r0, #8]
 8014c74:	9301      	str	r3, [sp, #4]
 8014c76:	f000 f9dd 	bl	8015034 <_vfiprintf_r>
 8014c7a:	b003      	add	sp, #12
 8014c7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014c80:	b004      	add	sp, #16
 8014c82:	4770      	bx	lr
 8014c84:	2000003c 	.word	0x2000003c

08014c88 <__sread>:
 8014c88:	b510      	push	{r4, lr}
 8014c8a:	460c      	mov	r4, r1
 8014c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c90:	f000 f878 	bl	8014d84 <_read_r>
 8014c94:	2800      	cmp	r0, #0
 8014c96:	bfab      	itete	ge
 8014c98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014c9a:	89a3      	ldrhlt	r3, [r4, #12]
 8014c9c:	181b      	addge	r3, r3, r0
 8014c9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014ca2:	bfac      	ite	ge
 8014ca4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014ca6:	81a3      	strhlt	r3, [r4, #12]
 8014ca8:	bd10      	pop	{r4, pc}

08014caa <__swrite>:
 8014caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cae:	461f      	mov	r7, r3
 8014cb0:	898b      	ldrh	r3, [r1, #12]
 8014cb2:	05db      	lsls	r3, r3, #23
 8014cb4:	4605      	mov	r5, r0
 8014cb6:	460c      	mov	r4, r1
 8014cb8:	4616      	mov	r6, r2
 8014cba:	d505      	bpl.n	8014cc8 <__swrite+0x1e>
 8014cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014cc0:	2302      	movs	r3, #2
 8014cc2:	2200      	movs	r2, #0
 8014cc4:	f000 f84c 	bl	8014d60 <_lseek_r>
 8014cc8:	89a3      	ldrh	r3, [r4, #12]
 8014cca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014cce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014cd2:	81a3      	strh	r3, [r4, #12]
 8014cd4:	4632      	mov	r2, r6
 8014cd6:	463b      	mov	r3, r7
 8014cd8:	4628      	mov	r0, r5
 8014cda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014cde:	f000 b863 	b.w	8014da8 <_write_r>

08014ce2 <__sseek>:
 8014ce2:	b510      	push	{r4, lr}
 8014ce4:	460c      	mov	r4, r1
 8014ce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014cea:	f000 f839 	bl	8014d60 <_lseek_r>
 8014cee:	1c43      	adds	r3, r0, #1
 8014cf0:	89a3      	ldrh	r3, [r4, #12]
 8014cf2:	bf15      	itete	ne
 8014cf4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014cf6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014cfa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014cfe:	81a3      	strheq	r3, [r4, #12]
 8014d00:	bf18      	it	ne
 8014d02:	81a3      	strhne	r3, [r4, #12]
 8014d04:	bd10      	pop	{r4, pc}

08014d06 <__sclose>:
 8014d06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d0a:	f000 b819 	b.w	8014d40 <_close_r>

08014d0e <memcmp>:
 8014d0e:	b510      	push	{r4, lr}
 8014d10:	3901      	subs	r1, #1
 8014d12:	4402      	add	r2, r0
 8014d14:	4290      	cmp	r0, r2
 8014d16:	d101      	bne.n	8014d1c <memcmp+0xe>
 8014d18:	2000      	movs	r0, #0
 8014d1a:	e005      	b.n	8014d28 <memcmp+0x1a>
 8014d1c:	7803      	ldrb	r3, [r0, #0]
 8014d1e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014d22:	42a3      	cmp	r3, r4
 8014d24:	d001      	beq.n	8014d2a <memcmp+0x1c>
 8014d26:	1b18      	subs	r0, r3, r4
 8014d28:	bd10      	pop	{r4, pc}
 8014d2a:	3001      	adds	r0, #1
 8014d2c:	e7f2      	b.n	8014d14 <memcmp+0x6>

08014d2e <memset>:
 8014d2e:	4402      	add	r2, r0
 8014d30:	4603      	mov	r3, r0
 8014d32:	4293      	cmp	r3, r2
 8014d34:	d100      	bne.n	8014d38 <memset+0xa>
 8014d36:	4770      	bx	lr
 8014d38:	f803 1b01 	strb.w	r1, [r3], #1
 8014d3c:	e7f9      	b.n	8014d32 <memset+0x4>
	...

08014d40 <_close_r>:
 8014d40:	b538      	push	{r3, r4, r5, lr}
 8014d42:	4d06      	ldr	r5, [pc, #24]	@ (8014d5c <_close_r+0x1c>)
 8014d44:	2300      	movs	r3, #0
 8014d46:	4604      	mov	r4, r0
 8014d48:	4608      	mov	r0, r1
 8014d4a:	602b      	str	r3, [r5, #0]
 8014d4c:	f7ec fdde 	bl	800190c <_close>
 8014d50:	1c43      	adds	r3, r0, #1
 8014d52:	d102      	bne.n	8014d5a <_close_r+0x1a>
 8014d54:	682b      	ldr	r3, [r5, #0]
 8014d56:	b103      	cbz	r3, 8014d5a <_close_r+0x1a>
 8014d58:	6023      	str	r3, [r4, #0]
 8014d5a:	bd38      	pop	{r3, r4, r5, pc}
 8014d5c:	20010468 	.word	0x20010468

08014d60 <_lseek_r>:
 8014d60:	b538      	push	{r3, r4, r5, lr}
 8014d62:	4d07      	ldr	r5, [pc, #28]	@ (8014d80 <_lseek_r+0x20>)
 8014d64:	4604      	mov	r4, r0
 8014d66:	4608      	mov	r0, r1
 8014d68:	4611      	mov	r1, r2
 8014d6a:	2200      	movs	r2, #0
 8014d6c:	602a      	str	r2, [r5, #0]
 8014d6e:	461a      	mov	r2, r3
 8014d70:	f7ec fdf3 	bl	800195a <_lseek>
 8014d74:	1c43      	adds	r3, r0, #1
 8014d76:	d102      	bne.n	8014d7e <_lseek_r+0x1e>
 8014d78:	682b      	ldr	r3, [r5, #0]
 8014d7a:	b103      	cbz	r3, 8014d7e <_lseek_r+0x1e>
 8014d7c:	6023      	str	r3, [r4, #0]
 8014d7e:	bd38      	pop	{r3, r4, r5, pc}
 8014d80:	20010468 	.word	0x20010468

08014d84 <_read_r>:
 8014d84:	b538      	push	{r3, r4, r5, lr}
 8014d86:	4d07      	ldr	r5, [pc, #28]	@ (8014da4 <_read_r+0x20>)
 8014d88:	4604      	mov	r4, r0
 8014d8a:	4608      	mov	r0, r1
 8014d8c:	4611      	mov	r1, r2
 8014d8e:	2200      	movs	r2, #0
 8014d90:	602a      	str	r2, [r5, #0]
 8014d92:	461a      	mov	r2, r3
 8014d94:	f7ec fd81 	bl	800189a <_read>
 8014d98:	1c43      	adds	r3, r0, #1
 8014d9a:	d102      	bne.n	8014da2 <_read_r+0x1e>
 8014d9c:	682b      	ldr	r3, [r5, #0]
 8014d9e:	b103      	cbz	r3, 8014da2 <_read_r+0x1e>
 8014da0:	6023      	str	r3, [r4, #0]
 8014da2:	bd38      	pop	{r3, r4, r5, pc}
 8014da4:	20010468 	.word	0x20010468

08014da8 <_write_r>:
 8014da8:	b538      	push	{r3, r4, r5, lr}
 8014daa:	4d07      	ldr	r5, [pc, #28]	@ (8014dc8 <_write_r+0x20>)
 8014dac:	4604      	mov	r4, r0
 8014dae:	4608      	mov	r0, r1
 8014db0:	4611      	mov	r1, r2
 8014db2:	2200      	movs	r2, #0
 8014db4:	602a      	str	r2, [r5, #0]
 8014db6:	461a      	mov	r2, r3
 8014db8:	f7ec fd8c 	bl	80018d4 <_write>
 8014dbc:	1c43      	adds	r3, r0, #1
 8014dbe:	d102      	bne.n	8014dc6 <_write_r+0x1e>
 8014dc0:	682b      	ldr	r3, [r5, #0]
 8014dc2:	b103      	cbz	r3, 8014dc6 <_write_r+0x1e>
 8014dc4:	6023      	str	r3, [r4, #0]
 8014dc6:	bd38      	pop	{r3, r4, r5, pc}
 8014dc8:	20010468 	.word	0x20010468

08014dcc <__libc_init_array>:
 8014dcc:	b570      	push	{r4, r5, r6, lr}
 8014dce:	4d0d      	ldr	r5, [pc, #52]	@ (8014e04 <__libc_init_array+0x38>)
 8014dd0:	4c0d      	ldr	r4, [pc, #52]	@ (8014e08 <__libc_init_array+0x3c>)
 8014dd2:	1b64      	subs	r4, r4, r5
 8014dd4:	10a4      	asrs	r4, r4, #2
 8014dd6:	2600      	movs	r6, #0
 8014dd8:	42a6      	cmp	r6, r4
 8014dda:	d109      	bne.n	8014df0 <__libc_init_array+0x24>
 8014ddc:	4d0b      	ldr	r5, [pc, #44]	@ (8014e0c <__libc_init_array+0x40>)
 8014dde:	4c0c      	ldr	r4, [pc, #48]	@ (8014e10 <__libc_init_array+0x44>)
 8014de0:	f000 fe4a 	bl	8015a78 <_init>
 8014de4:	1b64      	subs	r4, r4, r5
 8014de6:	10a4      	asrs	r4, r4, #2
 8014de8:	2600      	movs	r6, #0
 8014dea:	42a6      	cmp	r6, r4
 8014dec:	d105      	bne.n	8014dfa <__libc_init_array+0x2e>
 8014dee:	bd70      	pop	{r4, r5, r6, pc}
 8014df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8014df4:	4798      	blx	r3
 8014df6:	3601      	adds	r6, #1
 8014df8:	e7ee      	b.n	8014dd8 <__libc_init_array+0xc>
 8014dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8014dfe:	4798      	blx	r3
 8014e00:	3601      	adds	r6, #1
 8014e02:	e7f2      	b.n	8014dea <__libc_init_array+0x1e>
 8014e04:	08018848 	.word	0x08018848
 8014e08:	08018848 	.word	0x08018848
 8014e0c:	08018848 	.word	0x08018848
 8014e10:	0801884c 	.word	0x0801884c

08014e14 <__retarget_lock_init_recursive>:
 8014e14:	4770      	bx	lr

08014e16 <__retarget_lock_acquire_recursive>:
 8014e16:	4770      	bx	lr

08014e18 <__retarget_lock_release_recursive>:
 8014e18:	4770      	bx	lr

08014e1a <memcpy>:
 8014e1a:	440a      	add	r2, r1
 8014e1c:	4291      	cmp	r1, r2
 8014e1e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8014e22:	d100      	bne.n	8014e26 <memcpy+0xc>
 8014e24:	4770      	bx	lr
 8014e26:	b510      	push	{r4, lr}
 8014e28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014e2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014e30:	4291      	cmp	r1, r2
 8014e32:	d1f9      	bne.n	8014e28 <memcpy+0xe>
 8014e34:	bd10      	pop	{r4, pc}
	...

08014e38 <__assert_func>:
 8014e38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014e3a:	4614      	mov	r4, r2
 8014e3c:	461a      	mov	r2, r3
 8014e3e:	4b09      	ldr	r3, [pc, #36]	@ (8014e64 <__assert_func+0x2c>)
 8014e40:	681b      	ldr	r3, [r3, #0]
 8014e42:	4605      	mov	r5, r0
 8014e44:	68d8      	ldr	r0, [r3, #12]
 8014e46:	b954      	cbnz	r4, 8014e5e <__assert_func+0x26>
 8014e48:	4b07      	ldr	r3, [pc, #28]	@ (8014e68 <__assert_func+0x30>)
 8014e4a:	461c      	mov	r4, r3
 8014e4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014e50:	9100      	str	r1, [sp, #0]
 8014e52:	462b      	mov	r3, r5
 8014e54:	4905      	ldr	r1, [pc, #20]	@ (8014e6c <__assert_func+0x34>)
 8014e56:	f000 fc3f 	bl	80156d8 <fiprintf>
 8014e5a:	f000 fcf3 	bl	8015844 <abort>
 8014e5e:	4b04      	ldr	r3, [pc, #16]	@ (8014e70 <__assert_func+0x38>)
 8014e60:	e7f4      	b.n	8014e4c <__assert_func+0x14>
 8014e62:	bf00      	nop
 8014e64:	2000003c 	.word	0x2000003c
 8014e68:	0801880a 	.word	0x0801880a
 8014e6c:	080187dc 	.word	0x080187dc
 8014e70:	080187cf 	.word	0x080187cf

08014e74 <malloc>:
 8014e74:	4b02      	ldr	r3, [pc, #8]	@ (8014e80 <malloc+0xc>)
 8014e76:	4601      	mov	r1, r0
 8014e78:	6818      	ldr	r0, [r3, #0]
 8014e7a:	f000 b825 	b.w	8014ec8 <_malloc_r>
 8014e7e:	bf00      	nop
 8014e80:	2000003c 	.word	0x2000003c

08014e84 <sbrk_aligned>:
 8014e84:	b570      	push	{r4, r5, r6, lr}
 8014e86:	4e0f      	ldr	r6, [pc, #60]	@ (8014ec4 <sbrk_aligned+0x40>)
 8014e88:	460c      	mov	r4, r1
 8014e8a:	6831      	ldr	r1, [r6, #0]
 8014e8c:	4605      	mov	r5, r0
 8014e8e:	b911      	cbnz	r1, 8014e96 <sbrk_aligned+0x12>
 8014e90:	f000 fcc8 	bl	8015824 <_sbrk_r>
 8014e94:	6030      	str	r0, [r6, #0]
 8014e96:	4621      	mov	r1, r4
 8014e98:	4628      	mov	r0, r5
 8014e9a:	f000 fcc3 	bl	8015824 <_sbrk_r>
 8014e9e:	1c43      	adds	r3, r0, #1
 8014ea0:	d103      	bne.n	8014eaa <sbrk_aligned+0x26>
 8014ea2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8014ea6:	4620      	mov	r0, r4
 8014ea8:	bd70      	pop	{r4, r5, r6, pc}
 8014eaa:	1cc4      	adds	r4, r0, #3
 8014eac:	f024 0403 	bic.w	r4, r4, #3
 8014eb0:	42a0      	cmp	r0, r4
 8014eb2:	d0f8      	beq.n	8014ea6 <sbrk_aligned+0x22>
 8014eb4:	1a21      	subs	r1, r4, r0
 8014eb6:	4628      	mov	r0, r5
 8014eb8:	f000 fcb4 	bl	8015824 <_sbrk_r>
 8014ebc:	3001      	adds	r0, #1
 8014ebe:	d1f2      	bne.n	8014ea6 <sbrk_aligned+0x22>
 8014ec0:	e7ef      	b.n	8014ea2 <sbrk_aligned+0x1e>
 8014ec2:	bf00      	nop
 8014ec4:	200105b0 	.word	0x200105b0

08014ec8 <_malloc_r>:
 8014ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ecc:	1ccd      	adds	r5, r1, #3
 8014ece:	f025 0503 	bic.w	r5, r5, #3
 8014ed2:	3508      	adds	r5, #8
 8014ed4:	2d0c      	cmp	r5, #12
 8014ed6:	bf38      	it	cc
 8014ed8:	250c      	movcc	r5, #12
 8014eda:	2d00      	cmp	r5, #0
 8014edc:	4606      	mov	r6, r0
 8014ede:	db01      	blt.n	8014ee4 <_malloc_r+0x1c>
 8014ee0:	42a9      	cmp	r1, r5
 8014ee2:	d904      	bls.n	8014eee <_malloc_r+0x26>
 8014ee4:	230c      	movs	r3, #12
 8014ee6:	6033      	str	r3, [r6, #0]
 8014ee8:	2000      	movs	r0, #0
 8014eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014eee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014fc4 <_malloc_r+0xfc>
 8014ef2:	f000 f869 	bl	8014fc8 <__malloc_lock>
 8014ef6:	f8d8 3000 	ldr.w	r3, [r8]
 8014efa:	461c      	mov	r4, r3
 8014efc:	bb44      	cbnz	r4, 8014f50 <_malloc_r+0x88>
 8014efe:	4629      	mov	r1, r5
 8014f00:	4630      	mov	r0, r6
 8014f02:	f7ff ffbf 	bl	8014e84 <sbrk_aligned>
 8014f06:	1c43      	adds	r3, r0, #1
 8014f08:	4604      	mov	r4, r0
 8014f0a:	d158      	bne.n	8014fbe <_malloc_r+0xf6>
 8014f0c:	f8d8 4000 	ldr.w	r4, [r8]
 8014f10:	4627      	mov	r7, r4
 8014f12:	2f00      	cmp	r7, #0
 8014f14:	d143      	bne.n	8014f9e <_malloc_r+0xd6>
 8014f16:	2c00      	cmp	r4, #0
 8014f18:	d04b      	beq.n	8014fb2 <_malloc_r+0xea>
 8014f1a:	6823      	ldr	r3, [r4, #0]
 8014f1c:	4639      	mov	r1, r7
 8014f1e:	4630      	mov	r0, r6
 8014f20:	eb04 0903 	add.w	r9, r4, r3
 8014f24:	f000 fc7e 	bl	8015824 <_sbrk_r>
 8014f28:	4581      	cmp	r9, r0
 8014f2a:	d142      	bne.n	8014fb2 <_malloc_r+0xea>
 8014f2c:	6821      	ldr	r1, [r4, #0]
 8014f2e:	1a6d      	subs	r5, r5, r1
 8014f30:	4629      	mov	r1, r5
 8014f32:	4630      	mov	r0, r6
 8014f34:	f7ff ffa6 	bl	8014e84 <sbrk_aligned>
 8014f38:	3001      	adds	r0, #1
 8014f3a:	d03a      	beq.n	8014fb2 <_malloc_r+0xea>
 8014f3c:	6823      	ldr	r3, [r4, #0]
 8014f3e:	442b      	add	r3, r5
 8014f40:	6023      	str	r3, [r4, #0]
 8014f42:	f8d8 3000 	ldr.w	r3, [r8]
 8014f46:	685a      	ldr	r2, [r3, #4]
 8014f48:	bb62      	cbnz	r2, 8014fa4 <_malloc_r+0xdc>
 8014f4a:	f8c8 7000 	str.w	r7, [r8]
 8014f4e:	e00f      	b.n	8014f70 <_malloc_r+0xa8>
 8014f50:	6822      	ldr	r2, [r4, #0]
 8014f52:	1b52      	subs	r2, r2, r5
 8014f54:	d420      	bmi.n	8014f98 <_malloc_r+0xd0>
 8014f56:	2a0b      	cmp	r2, #11
 8014f58:	d917      	bls.n	8014f8a <_malloc_r+0xc2>
 8014f5a:	1961      	adds	r1, r4, r5
 8014f5c:	42a3      	cmp	r3, r4
 8014f5e:	6025      	str	r5, [r4, #0]
 8014f60:	bf18      	it	ne
 8014f62:	6059      	strne	r1, [r3, #4]
 8014f64:	6863      	ldr	r3, [r4, #4]
 8014f66:	bf08      	it	eq
 8014f68:	f8c8 1000 	streq.w	r1, [r8]
 8014f6c:	5162      	str	r2, [r4, r5]
 8014f6e:	604b      	str	r3, [r1, #4]
 8014f70:	4630      	mov	r0, r6
 8014f72:	f000 f82f 	bl	8014fd4 <__malloc_unlock>
 8014f76:	f104 000b 	add.w	r0, r4, #11
 8014f7a:	1d23      	adds	r3, r4, #4
 8014f7c:	f020 0007 	bic.w	r0, r0, #7
 8014f80:	1ac2      	subs	r2, r0, r3
 8014f82:	bf1c      	itt	ne
 8014f84:	1a1b      	subne	r3, r3, r0
 8014f86:	50a3      	strne	r3, [r4, r2]
 8014f88:	e7af      	b.n	8014eea <_malloc_r+0x22>
 8014f8a:	6862      	ldr	r2, [r4, #4]
 8014f8c:	42a3      	cmp	r3, r4
 8014f8e:	bf0c      	ite	eq
 8014f90:	f8c8 2000 	streq.w	r2, [r8]
 8014f94:	605a      	strne	r2, [r3, #4]
 8014f96:	e7eb      	b.n	8014f70 <_malloc_r+0xa8>
 8014f98:	4623      	mov	r3, r4
 8014f9a:	6864      	ldr	r4, [r4, #4]
 8014f9c:	e7ae      	b.n	8014efc <_malloc_r+0x34>
 8014f9e:	463c      	mov	r4, r7
 8014fa0:	687f      	ldr	r7, [r7, #4]
 8014fa2:	e7b6      	b.n	8014f12 <_malloc_r+0x4a>
 8014fa4:	461a      	mov	r2, r3
 8014fa6:	685b      	ldr	r3, [r3, #4]
 8014fa8:	42a3      	cmp	r3, r4
 8014faa:	d1fb      	bne.n	8014fa4 <_malloc_r+0xdc>
 8014fac:	2300      	movs	r3, #0
 8014fae:	6053      	str	r3, [r2, #4]
 8014fb0:	e7de      	b.n	8014f70 <_malloc_r+0xa8>
 8014fb2:	230c      	movs	r3, #12
 8014fb4:	6033      	str	r3, [r6, #0]
 8014fb6:	4630      	mov	r0, r6
 8014fb8:	f000 f80c 	bl	8014fd4 <__malloc_unlock>
 8014fbc:	e794      	b.n	8014ee8 <_malloc_r+0x20>
 8014fbe:	6005      	str	r5, [r0, #0]
 8014fc0:	e7d6      	b.n	8014f70 <_malloc_r+0xa8>
 8014fc2:	bf00      	nop
 8014fc4:	200105b4 	.word	0x200105b4

08014fc8 <__malloc_lock>:
 8014fc8:	4801      	ldr	r0, [pc, #4]	@ (8014fd0 <__malloc_lock+0x8>)
 8014fca:	f7ff bf24 	b.w	8014e16 <__retarget_lock_acquire_recursive>
 8014fce:	bf00      	nop
 8014fd0:	200105ac 	.word	0x200105ac

08014fd4 <__malloc_unlock>:
 8014fd4:	4801      	ldr	r0, [pc, #4]	@ (8014fdc <__malloc_unlock+0x8>)
 8014fd6:	f7ff bf1f 	b.w	8014e18 <__retarget_lock_release_recursive>
 8014fda:	bf00      	nop
 8014fdc:	200105ac 	.word	0x200105ac

08014fe0 <__sfputc_r>:
 8014fe0:	6893      	ldr	r3, [r2, #8]
 8014fe2:	3b01      	subs	r3, #1
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	b410      	push	{r4}
 8014fe8:	6093      	str	r3, [r2, #8]
 8014fea:	da08      	bge.n	8014ffe <__sfputc_r+0x1e>
 8014fec:	6994      	ldr	r4, [r2, #24]
 8014fee:	42a3      	cmp	r3, r4
 8014ff0:	db01      	blt.n	8014ff6 <__sfputc_r+0x16>
 8014ff2:	290a      	cmp	r1, #10
 8014ff4:	d103      	bne.n	8014ffe <__sfputc_r+0x1e>
 8014ff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ffa:	f000 bb7f 	b.w	80156fc <__swbuf_r>
 8014ffe:	6813      	ldr	r3, [r2, #0]
 8015000:	1c58      	adds	r0, r3, #1
 8015002:	6010      	str	r0, [r2, #0]
 8015004:	7019      	strb	r1, [r3, #0]
 8015006:	4608      	mov	r0, r1
 8015008:	f85d 4b04 	ldr.w	r4, [sp], #4
 801500c:	4770      	bx	lr

0801500e <__sfputs_r>:
 801500e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015010:	4606      	mov	r6, r0
 8015012:	460f      	mov	r7, r1
 8015014:	4614      	mov	r4, r2
 8015016:	18d5      	adds	r5, r2, r3
 8015018:	42ac      	cmp	r4, r5
 801501a:	d101      	bne.n	8015020 <__sfputs_r+0x12>
 801501c:	2000      	movs	r0, #0
 801501e:	e007      	b.n	8015030 <__sfputs_r+0x22>
 8015020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015024:	463a      	mov	r2, r7
 8015026:	4630      	mov	r0, r6
 8015028:	f7ff ffda 	bl	8014fe0 <__sfputc_r>
 801502c:	1c43      	adds	r3, r0, #1
 801502e:	d1f3      	bne.n	8015018 <__sfputs_r+0xa>
 8015030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015034 <_vfiprintf_r>:
 8015034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015038:	460d      	mov	r5, r1
 801503a:	b09d      	sub	sp, #116	@ 0x74
 801503c:	4614      	mov	r4, r2
 801503e:	4698      	mov	r8, r3
 8015040:	4606      	mov	r6, r0
 8015042:	b118      	cbz	r0, 801504c <_vfiprintf_r+0x18>
 8015044:	6a03      	ldr	r3, [r0, #32]
 8015046:	b90b      	cbnz	r3, 801504c <_vfiprintf_r+0x18>
 8015048:	f7ff fdd6 	bl	8014bf8 <__sinit>
 801504c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801504e:	07d9      	lsls	r1, r3, #31
 8015050:	d405      	bmi.n	801505e <_vfiprintf_r+0x2a>
 8015052:	89ab      	ldrh	r3, [r5, #12]
 8015054:	059a      	lsls	r2, r3, #22
 8015056:	d402      	bmi.n	801505e <_vfiprintf_r+0x2a>
 8015058:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801505a:	f7ff fedc 	bl	8014e16 <__retarget_lock_acquire_recursive>
 801505e:	89ab      	ldrh	r3, [r5, #12]
 8015060:	071b      	lsls	r3, r3, #28
 8015062:	d501      	bpl.n	8015068 <_vfiprintf_r+0x34>
 8015064:	692b      	ldr	r3, [r5, #16]
 8015066:	b99b      	cbnz	r3, 8015090 <_vfiprintf_r+0x5c>
 8015068:	4629      	mov	r1, r5
 801506a:	4630      	mov	r0, r6
 801506c:	f000 fb84 	bl	8015778 <__swsetup_r>
 8015070:	b170      	cbz	r0, 8015090 <_vfiprintf_r+0x5c>
 8015072:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015074:	07dc      	lsls	r4, r3, #31
 8015076:	d504      	bpl.n	8015082 <_vfiprintf_r+0x4e>
 8015078:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801507c:	b01d      	add	sp, #116	@ 0x74
 801507e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015082:	89ab      	ldrh	r3, [r5, #12]
 8015084:	0598      	lsls	r0, r3, #22
 8015086:	d4f7      	bmi.n	8015078 <_vfiprintf_r+0x44>
 8015088:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801508a:	f7ff fec5 	bl	8014e18 <__retarget_lock_release_recursive>
 801508e:	e7f3      	b.n	8015078 <_vfiprintf_r+0x44>
 8015090:	2300      	movs	r3, #0
 8015092:	9309      	str	r3, [sp, #36]	@ 0x24
 8015094:	2320      	movs	r3, #32
 8015096:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801509a:	f8cd 800c 	str.w	r8, [sp, #12]
 801509e:	2330      	movs	r3, #48	@ 0x30
 80150a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015250 <_vfiprintf_r+0x21c>
 80150a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80150a8:	f04f 0901 	mov.w	r9, #1
 80150ac:	4623      	mov	r3, r4
 80150ae:	469a      	mov	sl, r3
 80150b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80150b4:	b10a      	cbz	r2, 80150ba <_vfiprintf_r+0x86>
 80150b6:	2a25      	cmp	r2, #37	@ 0x25
 80150b8:	d1f9      	bne.n	80150ae <_vfiprintf_r+0x7a>
 80150ba:	ebba 0b04 	subs.w	fp, sl, r4
 80150be:	d00b      	beq.n	80150d8 <_vfiprintf_r+0xa4>
 80150c0:	465b      	mov	r3, fp
 80150c2:	4622      	mov	r2, r4
 80150c4:	4629      	mov	r1, r5
 80150c6:	4630      	mov	r0, r6
 80150c8:	f7ff ffa1 	bl	801500e <__sfputs_r>
 80150cc:	3001      	adds	r0, #1
 80150ce:	f000 80a7 	beq.w	8015220 <_vfiprintf_r+0x1ec>
 80150d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80150d4:	445a      	add	r2, fp
 80150d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80150d8:	f89a 3000 	ldrb.w	r3, [sl]
 80150dc:	2b00      	cmp	r3, #0
 80150de:	f000 809f 	beq.w	8015220 <_vfiprintf_r+0x1ec>
 80150e2:	2300      	movs	r3, #0
 80150e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80150e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80150ec:	f10a 0a01 	add.w	sl, sl, #1
 80150f0:	9304      	str	r3, [sp, #16]
 80150f2:	9307      	str	r3, [sp, #28]
 80150f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80150f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80150fa:	4654      	mov	r4, sl
 80150fc:	2205      	movs	r2, #5
 80150fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015102:	4853      	ldr	r0, [pc, #332]	@ (8015250 <_vfiprintf_r+0x21c>)
 8015104:	f7eb f89c 	bl	8000240 <memchr>
 8015108:	9a04      	ldr	r2, [sp, #16]
 801510a:	b9d8      	cbnz	r0, 8015144 <_vfiprintf_r+0x110>
 801510c:	06d1      	lsls	r1, r2, #27
 801510e:	bf44      	itt	mi
 8015110:	2320      	movmi	r3, #32
 8015112:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015116:	0713      	lsls	r3, r2, #28
 8015118:	bf44      	itt	mi
 801511a:	232b      	movmi	r3, #43	@ 0x2b
 801511c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015120:	f89a 3000 	ldrb.w	r3, [sl]
 8015124:	2b2a      	cmp	r3, #42	@ 0x2a
 8015126:	d015      	beq.n	8015154 <_vfiprintf_r+0x120>
 8015128:	9a07      	ldr	r2, [sp, #28]
 801512a:	4654      	mov	r4, sl
 801512c:	2000      	movs	r0, #0
 801512e:	f04f 0c0a 	mov.w	ip, #10
 8015132:	4621      	mov	r1, r4
 8015134:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015138:	3b30      	subs	r3, #48	@ 0x30
 801513a:	2b09      	cmp	r3, #9
 801513c:	d94b      	bls.n	80151d6 <_vfiprintf_r+0x1a2>
 801513e:	b1b0      	cbz	r0, 801516e <_vfiprintf_r+0x13a>
 8015140:	9207      	str	r2, [sp, #28]
 8015142:	e014      	b.n	801516e <_vfiprintf_r+0x13a>
 8015144:	eba0 0308 	sub.w	r3, r0, r8
 8015148:	fa09 f303 	lsl.w	r3, r9, r3
 801514c:	4313      	orrs	r3, r2
 801514e:	9304      	str	r3, [sp, #16]
 8015150:	46a2      	mov	sl, r4
 8015152:	e7d2      	b.n	80150fa <_vfiprintf_r+0xc6>
 8015154:	9b03      	ldr	r3, [sp, #12]
 8015156:	1d19      	adds	r1, r3, #4
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	9103      	str	r1, [sp, #12]
 801515c:	2b00      	cmp	r3, #0
 801515e:	bfbb      	ittet	lt
 8015160:	425b      	neglt	r3, r3
 8015162:	f042 0202 	orrlt.w	r2, r2, #2
 8015166:	9307      	strge	r3, [sp, #28]
 8015168:	9307      	strlt	r3, [sp, #28]
 801516a:	bfb8      	it	lt
 801516c:	9204      	strlt	r2, [sp, #16]
 801516e:	7823      	ldrb	r3, [r4, #0]
 8015170:	2b2e      	cmp	r3, #46	@ 0x2e
 8015172:	d10a      	bne.n	801518a <_vfiprintf_r+0x156>
 8015174:	7863      	ldrb	r3, [r4, #1]
 8015176:	2b2a      	cmp	r3, #42	@ 0x2a
 8015178:	d132      	bne.n	80151e0 <_vfiprintf_r+0x1ac>
 801517a:	9b03      	ldr	r3, [sp, #12]
 801517c:	1d1a      	adds	r2, r3, #4
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	9203      	str	r2, [sp, #12]
 8015182:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015186:	3402      	adds	r4, #2
 8015188:	9305      	str	r3, [sp, #20]
 801518a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015260 <_vfiprintf_r+0x22c>
 801518e:	7821      	ldrb	r1, [r4, #0]
 8015190:	2203      	movs	r2, #3
 8015192:	4650      	mov	r0, sl
 8015194:	f7eb f854 	bl	8000240 <memchr>
 8015198:	b138      	cbz	r0, 80151aa <_vfiprintf_r+0x176>
 801519a:	9b04      	ldr	r3, [sp, #16]
 801519c:	eba0 000a 	sub.w	r0, r0, sl
 80151a0:	2240      	movs	r2, #64	@ 0x40
 80151a2:	4082      	lsls	r2, r0
 80151a4:	4313      	orrs	r3, r2
 80151a6:	3401      	adds	r4, #1
 80151a8:	9304      	str	r3, [sp, #16]
 80151aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80151ae:	4829      	ldr	r0, [pc, #164]	@ (8015254 <_vfiprintf_r+0x220>)
 80151b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80151b4:	2206      	movs	r2, #6
 80151b6:	f7eb f843 	bl	8000240 <memchr>
 80151ba:	2800      	cmp	r0, #0
 80151bc:	d03f      	beq.n	801523e <_vfiprintf_r+0x20a>
 80151be:	4b26      	ldr	r3, [pc, #152]	@ (8015258 <_vfiprintf_r+0x224>)
 80151c0:	bb1b      	cbnz	r3, 801520a <_vfiprintf_r+0x1d6>
 80151c2:	9b03      	ldr	r3, [sp, #12]
 80151c4:	3307      	adds	r3, #7
 80151c6:	f023 0307 	bic.w	r3, r3, #7
 80151ca:	3308      	adds	r3, #8
 80151cc:	9303      	str	r3, [sp, #12]
 80151ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80151d0:	443b      	add	r3, r7
 80151d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80151d4:	e76a      	b.n	80150ac <_vfiprintf_r+0x78>
 80151d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80151da:	460c      	mov	r4, r1
 80151dc:	2001      	movs	r0, #1
 80151de:	e7a8      	b.n	8015132 <_vfiprintf_r+0xfe>
 80151e0:	2300      	movs	r3, #0
 80151e2:	3401      	adds	r4, #1
 80151e4:	9305      	str	r3, [sp, #20]
 80151e6:	4619      	mov	r1, r3
 80151e8:	f04f 0c0a 	mov.w	ip, #10
 80151ec:	4620      	mov	r0, r4
 80151ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80151f2:	3a30      	subs	r2, #48	@ 0x30
 80151f4:	2a09      	cmp	r2, #9
 80151f6:	d903      	bls.n	8015200 <_vfiprintf_r+0x1cc>
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d0c6      	beq.n	801518a <_vfiprintf_r+0x156>
 80151fc:	9105      	str	r1, [sp, #20]
 80151fe:	e7c4      	b.n	801518a <_vfiprintf_r+0x156>
 8015200:	fb0c 2101 	mla	r1, ip, r1, r2
 8015204:	4604      	mov	r4, r0
 8015206:	2301      	movs	r3, #1
 8015208:	e7f0      	b.n	80151ec <_vfiprintf_r+0x1b8>
 801520a:	ab03      	add	r3, sp, #12
 801520c:	9300      	str	r3, [sp, #0]
 801520e:	462a      	mov	r2, r5
 8015210:	4b12      	ldr	r3, [pc, #72]	@ (801525c <_vfiprintf_r+0x228>)
 8015212:	a904      	add	r1, sp, #16
 8015214:	4630      	mov	r0, r6
 8015216:	f3af 8000 	nop.w
 801521a:	4607      	mov	r7, r0
 801521c:	1c78      	adds	r0, r7, #1
 801521e:	d1d6      	bne.n	80151ce <_vfiprintf_r+0x19a>
 8015220:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015222:	07d9      	lsls	r1, r3, #31
 8015224:	d405      	bmi.n	8015232 <_vfiprintf_r+0x1fe>
 8015226:	89ab      	ldrh	r3, [r5, #12]
 8015228:	059a      	lsls	r2, r3, #22
 801522a:	d402      	bmi.n	8015232 <_vfiprintf_r+0x1fe>
 801522c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801522e:	f7ff fdf3 	bl	8014e18 <__retarget_lock_release_recursive>
 8015232:	89ab      	ldrh	r3, [r5, #12]
 8015234:	065b      	lsls	r3, r3, #25
 8015236:	f53f af1f 	bmi.w	8015078 <_vfiprintf_r+0x44>
 801523a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801523c:	e71e      	b.n	801507c <_vfiprintf_r+0x48>
 801523e:	ab03      	add	r3, sp, #12
 8015240:	9300      	str	r3, [sp, #0]
 8015242:	462a      	mov	r2, r5
 8015244:	4b05      	ldr	r3, [pc, #20]	@ (801525c <_vfiprintf_r+0x228>)
 8015246:	a904      	add	r1, sp, #16
 8015248:	4630      	mov	r0, r6
 801524a:	f000 f879 	bl	8015340 <_printf_i>
 801524e:	e7e4      	b.n	801521a <_vfiprintf_r+0x1e6>
 8015250:	0801880b 	.word	0x0801880b
 8015254:	08018815 	.word	0x08018815
 8015258:	00000000 	.word	0x00000000
 801525c:	0801500f 	.word	0x0801500f
 8015260:	08018811 	.word	0x08018811

08015264 <_printf_common>:
 8015264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015268:	4616      	mov	r6, r2
 801526a:	4698      	mov	r8, r3
 801526c:	688a      	ldr	r2, [r1, #8]
 801526e:	690b      	ldr	r3, [r1, #16]
 8015270:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015274:	4293      	cmp	r3, r2
 8015276:	bfb8      	it	lt
 8015278:	4613      	movlt	r3, r2
 801527a:	6033      	str	r3, [r6, #0]
 801527c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015280:	4607      	mov	r7, r0
 8015282:	460c      	mov	r4, r1
 8015284:	b10a      	cbz	r2, 801528a <_printf_common+0x26>
 8015286:	3301      	adds	r3, #1
 8015288:	6033      	str	r3, [r6, #0]
 801528a:	6823      	ldr	r3, [r4, #0]
 801528c:	0699      	lsls	r1, r3, #26
 801528e:	bf42      	ittt	mi
 8015290:	6833      	ldrmi	r3, [r6, #0]
 8015292:	3302      	addmi	r3, #2
 8015294:	6033      	strmi	r3, [r6, #0]
 8015296:	6825      	ldr	r5, [r4, #0]
 8015298:	f015 0506 	ands.w	r5, r5, #6
 801529c:	d106      	bne.n	80152ac <_printf_common+0x48>
 801529e:	f104 0a19 	add.w	sl, r4, #25
 80152a2:	68e3      	ldr	r3, [r4, #12]
 80152a4:	6832      	ldr	r2, [r6, #0]
 80152a6:	1a9b      	subs	r3, r3, r2
 80152a8:	42ab      	cmp	r3, r5
 80152aa:	dc26      	bgt.n	80152fa <_printf_common+0x96>
 80152ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80152b0:	6822      	ldr	r2, [r4, #0]
 80152b2:	3b00      	subs	r3, #0
 80152b4:	bf18      	it	ne
 80152b6:	2301      	movne	r3, #1
 80152b8:	0692      	lsls	r2, r2, #26
 80152ba:	d42b      	bmi.n	8015314 <_printf_common+0xb0>
 80152bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80152c0:	4641      	mov	r1, r8
 80152c2:	4638      	mov	r0, r7
 80152c4:	47c8      	blx	r9
 80152c6:	3001      	adds	r0, #1
 80152c8:	d01e      	beq.n	8015308 <_printf_common+0xa4>
 80152ca:	6823      	ldr	r3, [r4, #0]
 80152cc:	6922      	ldr	r2, [r4, #16]
 80152ce:	f003 0306 	and.w	r3, r3, #6
 80152d2:	2b04      	cmp	r3, #4
 80152d4:	bf02      	ittt	eq
 80152d6:	68e5      	ldreq	r5, [r4, #12]
 80152d8:	6833      	ldreq	r3, [r6, #0]
 80152da:	1aed      	subeq	r5, r5, r3
 80152dc:	68a3      	ldr	r3, [r4, #8]
 80152de:	bf0c      	ite	eq
 80152e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80152e4:	2500      	movne	r5, #0
 80152e6:	4293      	cmp	r3, r2
 80152e8:	bfc4      	itt	gt
 80152ea:	1a9b      	subgt	r3, r3, r2
 80152ec:	18ed      	addgt	r5, r5, r3
 80152ee:	2600      	movs	r6, #0
 80152f0:	341a      	adds	r4, #26
 80152f2:	42b5      	cmp	r5, r6
 80152f4:	d11a      	bne.n	801532c <_printf_common+0xc8>
 80152f6:	2000      	movs	r0, #0
 80152f8:	e008      	b.n	801530c <_printf_common+0xa8>
 80152fa:	2301      	movs	r3, #1
 80152fc:	4652      	mov	r2, sl
 80152fe:	4641      	mov	r1, r8
 8015300:	4638      	mov	r0, r7
 8015302:	47c8      	blx	r9
 8015304:	3001      	adds	r0, #1
 8015306:	d103      	bne.n	8015310 <_printf_common+0xac>
 8015308:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801530c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015310:	3501      	adds	r5, #1
 8015312:	e7c6      	b.n	80152a2 <_printf_common+0x3e>
 8015314:	18e1      	adds	r1, r4, r3
 8015316:	1c5a      	adds	r2, r3, #1
 8015318:	2030      	movs	r0, #48	@ 0x30
 801531a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801531e:	4422      	add	r2, r4
 8015320:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015324:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015328:	3302      	adds	r3, #2
 801532a:	e7c7      	b.n	80152bc <_printf_common+0x58>
 801532c:	2301      	movs	r3, #1
 801532e:	4622      	mov	r2, r4
 8015330:	4641      	mov	r1, r8
 8015332:	4638      	mov	r0, r7
 8015334:	47c8      	blx	r9
 8015336:	3001      	adds	r0, #1
 8015338:	d0e6      	beq.n	8015308 <_printf_common+0xa4>
 801533a:	3601      	adds	r6, #1
 801533c:	e7d9      	b.n	80152f2 <_printf_common+0x8e>
	...

08015340 <_printf_i>:
 8015340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015344:	7e0f      	ldrb	r7, [r1, #24]
 8015346:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015348:	2f78      	cmp	r7, #120	@ 0x78
 801534a:	4691      	mov	r9, r2
 801534c:	4680      	mov	r8, r0
 801534e:	460c      	mov	r4, r1
 8015350:	469a      	mov	sl, r3
 8015352:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015356:	d807      	bhi.n	8015368 <_printf_i+0x28>
 8015358:	2f62      	cmp	r7, #98	@ 0x62
 801535a:	d80a      	bhi.n	8015372 <_printf_i+0x32>
 801535c:	2f00      	cmp	r7, #0
 801535e:	f000 80d2 	beq.w	8015506 <_printf_i+0x1c6>
 8015362:	2f58      	cmp	r7, #88	@ 0x58
 8015364:	f000 80b9 	beq.w	80154da <_printf_i+0x19a>
 8015368:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801536c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015370:	e03a      	b.n	80153e8 <_printf_i+0xa8>
 8015372:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015376:	2b15      	cmp	r3, #21
 8015378:	d8f6      	bhi.n	8015368 <_printf_i+0x28>
 801537a:	a101      	add	r1, pc, #4	@ (adr r1, 8015380 <_printf_i+0x40>)
 801537c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015380:	080153d9 	.word	0x080153d9
 8015384:	080153ed 	.word	0x080153ed
 8015388:	08015369 	.word	0x08015369
 801538c:	08015369 	.word	0x08015369
 8015390:	08015369 	.word	0x08015369
 8015394:	08015369 	.word	0x08015369
 8015398:	080153ed 	.word	0x080153ed
 801539c:	08015369 	.word	0x08015369
 80153a0:	08015369 	.word	0x08015369
 80153a4:	08015369 	.word	0x08015369
 80153a8:	08015369 	.word	0x08015369
 80153ac:	080154ed 	.word	0x080154ed
 80153b0:	08015417 	.word	0x08015417
 80153b4:	080154a7 	.word	0x080154a7
 80153b8:	08015369 	.word	0x08015369
 80153bc:	08015369 	.word	0x08015369
 80153c0:	0801550f 	.word	0x0801550f
 80153c4:	08015369 	.word	0x08015369
 80153c8:	08015417 	.word	0x08015417
 80153cc:	08015369 	.word	0x08015369
 80153d0:	08015369 	.word	0x08015369
 80153d4:	080154af 	.word	0x080154af
 80153d8:	6833      	ldr	r3, [r6, #0]
 80153da:	1d1a      	adds	r2, r3, #4
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	6032      	str	r2, [r6, #0]
 80153e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80153e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80153e8:	2301      	movs	r3, #1
 80153ea:	e09d      	b.n	8015528 <_printf_i+0x1e8>
 80153ec:	6833      	ldr	r3, [r6, #0]
 80153ee:	6820      	ldr	r0, [r4, #0]
 80153f0:	1d19      	adds	r1, r3, #4
 80153f2:	6031      	str	r1, [r6, #0]
 80153f4:	0606      	lsls	r6, r0, #24
 80153f6:	d501      	bpl.n	80153fc <_printf_i+0xbc>
 80153f8:	681d      	ldr	r5, [r3, #0]
 80153fa:	e003      	b.n	8015404 <_printf_i+0xc4>
 80153fc:	0645      	lsls	r5, r0, #25
 80153fe:	d5fb      	bpl.n	80153f8 <_printf_i+0xb8>
 8015400:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015404:	2d00      	cmp	r5, #0
 8015406:	da03      	bge.n	8015410 <_printf_i+0xd0>
 8015408:	232d      	movs	r3, #45	@ 0x2d
 801540a:	426d      	negs	r5, r5
 801540c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015410:	4859      	ldr	r0, [pc, #356]	@ (8015578 <_printf_i+0x238>)
 8015412:	230a      	movs	r3, #10
 8015414:	e011      	b.n	801543a <_printf_i+0xfa>
 8015416:	6821      	ldr	r1, [r4, #0]
 8015418:	6833      	ldr	r3, [r6, #0]
 801541a:	0608      	lsls	r0, r1, #24
 801541c:	f853 5b04 	ldr.w	r5, [r3], #4
 8015420:	d402      	bmi.n	8015428 <_printf_i+0xe8>
 8015422:	0649      	lsls	r1, r1, #25
 8015424:	bf48      	it	mi
 8015426:	b2ad      	uxthmi	r5, r5
 8015428:	2f6f      	cmp	r7, #111	@ 0x6f
 801542a:	4853      	ldr	r0, [pc, #332]	@ (8015578 <_printf_i+0x238>)
 801542c:	6033      	str	r3, [r6, #0]
 801542e:	bf14      	ite	ne
 8015430:	230a      	movne	r3, #10
 8015432:	2308      	moveq	r3, #8
 8015434:	2100      	movs	r1, #0
 8015436:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801543a:	6866      	ldr	r6, [r4, #4]
 801543c:	60a6      	str	r6, [r4, #8]
 801543e:	2e00      	cmp	r6, #0
 8015440:	bfa2      	ittt	ge
 8015442:	6821      	ldrge	r1, [r4, #0]
 8015444:	f021 0104 	bicge.w	r1, r1, #4
 8015448:	6021      	strge	r1, [r4, #0]
 801544a:	b90d      	cbnz	r5, 8015450 <_printf_i+0x110>
 801544c:	2e00      	cmp	r6, #0
 801544e:	d04b      	beq.n	80154e8 <_printf_i+0x1a8>
 8015450:	4616      	mov	r6, r2
 8015452:	fbb5 f1f3 	udiv	r1, r5, r3
 8015456:	fb03 5711 	mls	r7, r3, r1, r5
 801545a:	5dc7      	ldrb	r7, [r0, r7]
 801545c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015460:	462f      	mov	r7, r5
 8015462:	42bb      	cmp	r3, r7
 8015464:	460d      	mov	r5, r1
 8015466:	d9f4      	bls.n	8015452 <_printf_i+0x112>
 8015468:	2b08      	cmp	r3, #8
 801546a:	d10b      	bne.n	8015484 <_printf_i+0x144>
 801546c:	6823      	ldr	r3, [r4, #0]
 801546e:	07df      	lsls	r7, r3, #31
 8015470:	d508      	bpl.n	8015484 <_printf_i+0x144>
 8015472:	6923      	ldr	r3, [r4, #16]
 8015474:	6861      	ldr	r1, [r4, #4]
 8015476:	4299      	cmp	r1, r3
 8015478:	bfde      	ittt	le
 801547a:	2330      	movle	r3, #48	@ 0x30
 801547c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015480:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8015484:	1b92      	subs	r2, r2, r6
 8015486:	6122      	str	r2, [r4, #16]
 8015488:	f8cd a000 	str.w	sl, [sp]
 801548c:	464b      	mov	r3, r9
 801548e:	aa03      	add	r2, sp, #12
 8015490:	4621      	mov	r1, r4
 8015492:	4640      	mov	r0, r8
 8015494:	f7ff fee6 	bl	8015264 <_printf_common>
 8015498:	3001      	adds	r0, #1
 801549a:	d14a      	bne.n	8015532 <_printf_i+0x1f2>
 801549c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80154a0:	b004      	add	sp, #16
 80154a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80154a6:	6823      	ldr	r3, [r4, #0]
 80154a8:	f043 0320 	orr.w	r3, r3, #32
 80154ac:	6023      	str	r3, [r4, #0]
 80154ae:	4833      	ldr	r0, [pc, #204]	@ (801557c <_printf_i+0x23c>)
 80154b0:	2778      	movs	r7, #120	@ 0x78
 80154b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80154b6:	6823      	ldr	r3, [r4, #0]
 80154b8:	6831      	ldr	r1, [r6, #0]
 80154ba:	061f      	lsls	r7, r3, #24
 80154bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80154c0:	d402      	bmi.n	80154c8 <_printf_i+0x188>
 80154c2:	065f      	lsls	r7, r3, #25
 80154c4:	bf48      	it	mi
 80154c6:	b2ad      	uxthmi	r5, r5
 80154c8:	6031      	str	r1, [r6, #0]
 80154ca:	07d9      	lsls	r1, r3, #31
 80154cc:	bf44      	itt	mi
 80154ce:	f043 0320 	orrmi.w	r3, r3, #32
 80154d2:	6023      	strmi	r3, [r4, #0]
 80154d4:	b11d      	cbz	r5, 80154de <_printf_i+0x19e>
 80154d6:	2310      	movs	r3, #16
 80154d8:	e7ac      	b.n	8015434 <_printf_i+0xf4>
 80154da:	4827      	ldr	r0, [pc, #156]	@ (8015578 <_printf_i+0x238>)
 80154dc:	e7e9      	b.n	80154b2 <_printf_i+0x172>
 80154de:	6823      	ldr	r3, [r4, #0]
 80154e0:	f023 0320 	bic.w	r3, r3, #32
 80154e4:	6023      	str	r3, [r4, #0]
 80154e6:	e7f6      	b.n	80154d6 <_printf_i+0x196>
 80154e8:	4616      	mov	r6, r2
 80154ea:	e7bd      	b.n	8015468 <_printf_i+0x128>
 80154ec:	6833      	ldr	r3, [r6, #0]
 80154ee:	6825      	ldr	r5, [r4, #0]
 80154f0:	6961      	ldr	r1, [r4, #20]
 80154f2:	1d18      	adds	r0, r3, #4
 80154f4:	6030      	str	r0, [r6, #0]
 80154f6:	062e      	lsls	r6, r5, #24
 80154f8:	681b      	ldr	r3, [r3, #0]
 80154fa:	d501      	bpl.n	8015500 <_printf_i+0x1c0>
 80154fc:	6019      	str	r1, [r3, #0]
 80154fe:	e002      	b.n	8015506 <_printf_i+0x1c6>
 8015500:	0668      	lsls	r0, r5, #25
 8015502:	d5fb      	bpl.n	80154fc <_printf_i+0x1bc>
 8015504:	8019      	strh	r1, [r3, #0]
 8015506:	2300      	movs	r3, #0
 8015508:	6123      	str	r3, [r4, #16]
 801550a:	4616      	mov	r6, r2
 801550c:	e7bc      	b.n	8015488 <_printf_i+0x148>
 801550e:	6833      	ldr	r3, [r6, #0]
 8015510:	1d1a      	adds	r2, r3, #4
 8015512:	6032      	str	r2, [r6, #0]
 8015514:	681e      	ldr	r6, [r3, #0]
 8015516:	6862      	ldr	r2, [r4, #4]
 8015518:	2100      	movs	r1, #0
 801551a:	4630      	mov	r0, r6
 801551c:	f7ea fe90 	bl	8000240 <memchr>
 8015520:	b108      	cbz	r0, 8015526 <_printf_i+0x1e6>
 8015522:	1b80      	subs	r0, r0, r6
 8015524:	6060      	str	r0, [r4, #4]
 8015526:	6863      	ldr	r3, [r4, #4]
 8015528:	6123      	str	r3, [r4, #16]
 801552a:	2300      	movs	r3, #0
 801552c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015530:	e7aa      	b.n	8015488 <_printf_i+0x148>
 8015532:	6923      	ldr	r3, [r4, #16]
 8015534:	4632      	mov	r2, r6
 8015536:	4649      	mov	r1, r9
 8015538:	4640      	mov	r0, r8
 801553a:	47d0      	blx	sl
 801553c:	3001      	adds	r0, #1
 801553e:	d0ad      	beq.n	801549c <_printf_i+0x15c>
 8015540:	6823      	ldr	r3, [r4, #0]
 8015542:	079b      	lsls	r3, r3, #30
 8015544:	d413      	bmi.n	801556e <_printf_i+0x22e>
 8015546:	68e0      	ldr	r0, [r4, #12]
 8015548:	9b03      	ldr	r3, [sp, #12]
 801554a:	4298      	cmp	r0, r3
 801554c:	bfb8      	it	lt
 801554e:	4618      	movlt	r0, r3
 8015550:	e7a6      	b.n	80154a0 <_printf_i+0x160>
 8015552:	2301      	movs	r3, #1
 8015554:	4632      	mov	r2, r6
 8015556:	4649      	mov	r1, r9
 8015558:	4640      	mov	r0, r8
 801555a:	47d0      	blx	sl
 801555c:	3001      	adds	r0, #1
 801555e:	d09d      	beq.n	801549c <_printf_i+0x15c>
 8015560:	3501      	adds	r5, #1
 8015562:	68e3      	ldr	r3, [r4, #12]
 8015564:	9903      	ldr	r1, [sp, #12]
 8015566:	1a5b      	subs	r3, r3, r1
 8015568:	42ab      	cmp	r3, r5
 801556a:	dcf2      	bgt.n	8015552 <_printf_i+0x212>
 801556c:	e7eb      	b.n	8015546 <_printf_i+0x206>
 801556e:	2500      	movs	r5, #0
 8015570:	f104 0619 	add.w	r6, r4, #25
 8015574:	e7f5      	b.n	8015562 <_printf_i+0x222>
 8015576:	bf00      	nop
 8015578:	0801881c 	.word	0x0801881c
 801557c:	0801882d 	.word	0x0801882d

08015580 <__sflush_r>:
 8015580:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015588:	0716      	lsls	r6, r2, #28
 801558a:	4605      	mov	r5, r0
 801558c:	460c      	mov	r4, r1
 801558e:	d454      	bmi.n	801563a <__sflush_r+0xba>
 8015590:	684b      	ldr	r3, [r1, #4]
 8015592:	2b00      	cmp	r3, #0
 8015594:	dc02      	bgt.n	801559c <__sflush_r+0x1c>
 8015596:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015598:	2b00      	cmp	r3, #0
 801559a:	dd48      	ble.n	801562e <__sflush_r+0xae>
 801559c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801559e:	2e00      	cmp	r6, #0
 80155a0:	d045      	beq.n	801562e <__sflush_r+0xae>
 80155a2:	2300      	movs	r3, #0
 80155a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80155a8:	682f      	ldr	r7, [r5, #0]
 80155aa:	6a21      	ldr	r1, [r4, #32]
 80155ac:	602b      	str	r3, [r5, #0]
 80155ae:	d030      	beq.n	8015612 <__sflush_r+0x92>
 80155b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80155b2:	89a3      	ldrh	r3, [r4, #12]
 80155b4:	0759      	lsls	r1, r3, #29
 80155b6:	d505      	bpl.n	80155c4 <__sflush_r+0x44>
 80155b8:	6863      	ldr	r3, [r4, #4]
 80155ba:	1ad2      	subs	r2, r2, r3
 80155bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80155be:	b10b      	cbz	r3, 80155c4 <__sflush_r+0x44>
 80155c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80155c2:	1ad2      	subs	r2, r2, r3
 80155c4:	2300      	movs	r3, #0
 80155c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80155c8:	6a21      	ldr	r1, [r4, #32]
 80155ca:	4628      	mov	r0, r5
 80155cc:	47b0      	blx	r6
 80155ce:	1c43      	adds	r3, r0, #1
 80155d0:	89a3      	ldrh	r3, [r4, #12]
 80155d2:	d106      	bne.n	80155e2 <__sflush_r+0x62>
 80155d4:	6829      	ldr	r1, [r5, #0]
 80155d6:	291d      	cmp	r1, #29
 80155d8:	d82b      	bhi.n	8015632 <__sflush_r+0xb2>
 80155da:	4a2a      	ldr	r2, [pc, #168]	@ (8015684 <__sflush_r+0x104>)
 80155dc:	410a      	asrs	r2, r1
 80155de:	07d6      	lsls	r6, r2, #31
 80155e0:	d427      	bmi.n	8015632 <__sflush_r+0xb2>
 80155e2:	2200      	movs	r2, #0
 80155e4:	6062      	str	r2, [r4, #4]
 80155e6:	04d9      	lsls	r1, r3, #19
 80155e8:	6922      	ldr	r2, [r4, #16]
 80155ea:	6022      	str	r2, [r4, #0]
 80155ec:	d504      	bpl.n	80155f8 <__sflush_r+0x78>
 80155ee:	1c42      	adds	r2, r0, #1
 80155f0:	d101      	bne.n	80155f6 <__sflush_r+0x76>
 80155f2:	682b      	ldr	r3, [r5, #0]
 80155f4:	b903      	cbnz	r3, 80155f8 <__sflush_r+0x78>
 80155f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80155f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80155fa:	602f      	str	r7, [r5, #0]
 80155fc:	b1b9      	cbz	r1, 801562e <__sflush_r+0xae>
 80155fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015602:	4299      	cmp	r1, r3
 8015604:	d002      	beq.n	801560c <__sflush_r+0x8c>
 8015606:	4628      	mov	r0, r5
 8015608:	f000 f924 	bl	8015854 <_free_r>
 801560c:	2300      	movs	r3, #0
 801560e:	6363      	str	r3, [r4, #52]	@ 0x34
 8015610:	e00d      	b.n	801562e <__sflush_r+0xae>
 8015612:	2301      	movs	r3, #1
 8015614:	4628      	mov	r0, r5
 8015616:	47b0      	blx	r6
 8015618:	4602      	mov	r2, r0
 801561a:	1c50      	adds	r0, r2, #1
 801561c:	d1c9      	bne.n	80155b2 <__sflush_r+0x32>
 801561e:	682b      	ldr	r3, [r5, #0]
 8015620:	2b00      	cmp	r3, #0
 8015622:	d0c6      	beq.n	80155b2 <__sflush_r+0x32>
 8015624:	2b1d      	cmp	r3, #29
 8015626:	d001      	beq.n	801562c <__sflush_r+0xac>
 8015628:	2b16      	cmp	r3, #22
 801562a:	d11e      	bne.n	801566a <__sflush_r+0xea>
 801562c:	602f      	str	r7, [r5, #0]
 801562e:	2000      	movs	r0, #0
 8015630:	e022      	b.n	8015678 <__sflush_r+0xf8>
 8015632:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015636:	b21b      	sxth	r3, r3
 8015638:	e01b      	b.n	8015672 <__sflush_r+0xf2>
 801563a:	690f      	ldr	r7, [r1, #16]
 801563c:	2f00      	cmp	r7, #0
 801563e:	d0f6      	beq.n	801562e <__sflush_r+0xae>
 8015640:	0793      	lsls	r3, r2, #30
 8015642:	680e      	ldr	r6, [r1, #0]
 8015644:	bf08      	it	eq
 8015646:	694b      	ldreq	r3, [r1, #20]
 8015648:	600f      	str	r7, [r1, #0]
 801564a:	bf18      	it	ne
 801564c:	2300      	movne	r3, #0
 801564e:	eba6 0807 	sub.w	r8, r6, r7
 8015652:	608b      	str	r3, [r1, #8]
 8015654:	f1b8 0f00 	cmp.w	r8, #0
 8015658:	dde9      	ble.n	801562e <__sflush_r+0xae>
 801565a:	6a21      	ldr	r1, [r4, #32]
 801565c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801565e:	4643      	mov	r3, r8
 8015660:	463a      	mov	r2, r7
 8015662:	4628      	mov	r0, r5
 8015664:	47b0      	blx	r6
 8015666:	2800      	cmp	r0, #0
 8015668:	dc08      	bgt.n	801567c <__sflush_r+0xfc>
 801566a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801566e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015672:	81a3      	strh	r3, [r4, #12]
 8015674:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801567c:	4407      	add	r7, r0
 801567e:	eba8 0800 	sub.w	r8, r8, r0
 8015682:	e7e7      	b.n	8015654 <__sflush_r+0xd4>
 8015684:	dfbffffe 	.word	0xdfbffffe

08015688 <_fflush_r>:
 8015688:	b538      	push	{r3, r4, r5, lr}
 801568a:	690b      	ldr	r3, [r1, #16]
 801568c:	4605      	mov	r5, r0
 801568e:	460c      	mov	r4, r1
 8015690:	b913      	cbnz	r3, 8015698 <_fflush_r+0x10>
 8015692:	2500      	movs	r5, #0
 8015694:	4628      	mov	r0, r5
 8015696:	bd38      	pop	{r3, r4, r5, pc}
 8015698:	b118      	cbz	r0, 80156a2 <_fflush_r+0x1a>
 801569a:	6a03      	ldr	r3, [r0, #32]
 801569c:	b90b      	cbnz	r3, 80156a2 <_fflush_r+0x1a>
 801569e:	f7ff faab 	bl	8014bf8 <__sinit>
 80156a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d0f3      	beq.n	8015692 <_fflush_r+0xa>
 80156aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80156ac:	07d0      	lsls	r0, r2, #31
 80156ae:	d404      	bmi.n	80156ba <_fflush_r+0x32>
 80156b0:	0599      	lsls	r1, r3, #22
 80156b2:	d402      	bmi.n	80156ba <_fflush_r+0x32>
 80156b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80156b6:	f7ff fbae 	bl	8014e16 <__retarget_lock_acquire_recursive>
 80156ba:	4628      	mov	r0, r5
 80156bc:	4621      	mov	r1, r4
 80156be:	f7ff ff5f 	bl	8015580 <__sflush_r>
 80156c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80156c4:	07da      	lsls	r2, r3, #31
 80156c6:	4605      	mov	r5, r0
 80156c8:	d4e4      	bmi.n	8015694 <_fflush_r+0xc>
 80156ca:	89a3      	ldrh	r3, [r4, #12]
 80156cc:	059b      	lsls	r3, r3, #22
 80156ce:	d4e1      	bmi.n	8015694 <_fflush_r+0xc>
 80156d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80156d2:	f7ff fba1 	bl	8014e18 <__retarget_lock_release_recursive>
 80156d6:	e7dd      	b.n	8015694 <_fflush_r+0xc>

080156d8 <fiprintf>:
 80156d8:	b40e      	push	{r1, r2, r3}
 80156da:	b503      	push	{r0, r1, lr}
 80156dc:	4601      	mov	r1, r0
 80156de:	ab03      	add	r3, sp, #12
 80156e0:	4805      	ldr	r0, [pc, #20]	@ (80156f8 <fiprintf+0x20>)
 80156e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80156e6:	6800      	ldr	r0, [r0, #0]
 80156e8:	9301      	str	r3, [sp, #4]
 80156ea:	f7ff fca3 	bl	8015034 <_vfiprintf_r>
 80156ee:	b002      	add	sp, #8
 80156f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80156f4:	b003      	add	sp, #12
 80156f6:	4770      	bx	lr
 80156f8:	2000003c 	.word	0x2000003c

080156fc <__swbuf_r>:
 80156fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156fe:	460e      	mov	r6, r1
 8015700:	4614      	mov	r4, r2
 8015702:	4605      	mov	r5, r0
 8015704:	b118      	cbz	r0, 801570e <__swbuf_r+0x12>
 8015706:	6a03      	ldr	r3, [r0, #32]
 8015708:	b90b      	cbnz	r3, 801570e <__swbuf_r+0x12>
 801570a:	f7ff fa75 	bl	8014bf8 <__sinit>
 801570e:	69a3      	ldr	r3, [r4, #24]
 8015710:	60a3      	str	r3, [r4, #8]
 8015712:	89a3      	ldrh	r3, [r4, #12]
 8015714:	071a      	lsls	r2, r3, #28
 8015716:	d501      	bpl.n	801571c <__swbuf_r+0x20>
 8015718:	6923      	ldr	r3, [r4, #16]
 801571a:	b943      	cbnz	r3, 801572e <__swbuf_r+0x32>
 801571c:	4621      	mov	r1, r4
 801571e:	4628      	mov	r0, r5
 8015720:	f000 f82a 	bl	8015778 <__swsetup_r>
 8015724:	b118      	cbz	r0, 801572e <__swbuf_r+0x32>
 8015726:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801572a:	4638      	mov	r0, r7
 801572c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801572e:	6823      	ldr	r3, [r4, #0]
 8015730:	6922      	ldr	r2, [r4, #16]
 8015732:	1a98      	subs	r0, r3, r2
 8015734:	6963      	ldr	r3, [r4, #20]
 8015736:	b2f6      	uxtb	r6, r6
 8015738:	4283      	cmp	r3, r0
 801573a:	4637      	mov	r7, r6
 801573c:	dc05      	bgt.n	801574a <__swbuf_r+0x4e>
 801573e:	4621      	mov	r1, r4
 8015740:	4628      	mov	r0, r5
 8015742:	f7ff ffa1 	bl	8015688 <_fflush_r>
 8015746:	2800      	cmp	r0, #0
 8015748:	d1ed      	bne.n	8015726 <__swbuf_r+0x2a>
 801574a:	68a3      	ldr	r3, [r4, #8]
 801574c:	3b01      	subs	r3, #1
 801574e:	60a3      	str	r3, [r4, #8]
 8015750:	6823      	ldr	r3, [r4, #0]
 8015752:	1c5a      	adds	r2, r3, #1
 8015754:	6022      	str	r2, [r4, #0]
 8015756:	701e      	strb	r6, [r3, #0]
 8015758:	6962      	ldr	r2, [r4, #20]
 801575a:	1c43      	adds	r3, r0, #1
 801575c:	429a      	cmp	r2, r3
 801575e:	d004      	beq.n	801576a <__swbuf_r+0x6e>
 8015760:	89a3      	ldrh	r3, [r4, #12]
 8015762:	07db      	lsls	r3, r3, #31
 8015764:	d5e1      	bpl.n	801572a <__swbuf_r+0x2e>
 8015766:	2e0a      	cmp	r6, #10
 8015768:	d1df      	bne.n	801572a <__swbuf_r+0x2e>
 801576a:	4621      	mov	r1, r4
 801576c:	4628      	mov	r0, r5
 801576e:	f7ff ff8b 	bl	8015688 <_fflush_r>
 8015772:	2800      	cmp	r0, #0
 8015774:	d0d9      	beq.n	801572a <__swbuf_r+0x2e>
 8015776:	e7d6      	b.n	8015726 <__swbuf_r+0x2a>

08015778 <__swsetup_r>:
 8015778:	b538      	push	{r3, r4, r5, lr}
 801577a:	4b29      	ldr	r3, [pc, #164]	@ (8015820 <__swsetup_r+0xa8>)
 801577c:	4605      	mov	r5, r0
 801577e:	6818      	ldr	r0, [r3, #0]
 8015780:	460c      	mov	r4, r1
 8015782:	b118      	cbz	r0, 801578c <__swsetup_r+0x14>
 8015784:	6a03      	ldr	r3, [r0, #32]
 8015786:	b90b      	cbnz	r3, 801578c <__swsetup_r+0x14>
 8015788:	f7ff fa36 	bl	8014bf8 <__sinit>
 801578c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015790:	0719      	lsls	r1, r3, #28
 8015792:	d422      	bmi.n	80157da <__swsetup_r+0x62>
 8015794:	06da      	lsls	r2, r3, #27
 8015796:	d407      	bmi.n	80157a8 <__swsetup_r+0x30>
 8015798:	2209      	movs	r2, #9
 801579a:	602a      	str	r2, [r5, #0]
 801579c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80157a0:	81a3      	strh	r3, [r4, #12]
 80157a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80157a6:	e033      	b.n	8015810 <__swsetup_r+0x98>
 80157a8:	0758      	lsls	r0, r3, #29
 80157aa:	d512      	bpl.n	80157d2 <__swsetup_r+0x5a>
 80157ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80157ae:	b141      	cbz	r1, 80157c2 <__swsetup_r+0x4a>
 80157b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80157b4:	4299      	cmp	r1, r3
 80157b6:	d002      	beq.n	80157be <__swsetup_r+0x46>
 80157b8:	4628      	mov	r0, r5
 80157ba:	f000 f84b 	bl	8015854 <_free_r>
 80157be:	2300      	movs	r3, #0
 80157c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80157c2:	89a3      	ldrh	r3, [r4, #12]
 80157c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80157c8:	81a3      	strh	r3, [r4, #12]
 80157ca:	2300      	movs	r3, #0
 80157cc:	6063      	str	r3, [r4, #4]
 80157ce:	6923      	ldr	r3, [r4, #16]
 80157d0:	6023      	str	r3, [r4, #0]
 80157d2:	89a3      	ldrh	r3, [r4, #12]
 80157d4:	f043 0308 	orr.w	r3, r3, #8
 80157d8:	81a3      	strh	r3, [r4, #12]
 80157da:	6923      	ldr	r3, [r4, #16]
 80157dc:	b94b      	cbnz	r3, 80157f2 <__swsetup_r+0x7a>
 80157de:	89a3      	ldrh	r3, [r4, #12]
 80157e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80157e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80157e8:	d003      	beq.n	80157f2 <__swsetup_r+0x7a>
 80157ea:	4621      	mov	r1, r4
 80157ec:	4628      	mov	r0, r5
 80157ee:	f000 f8a1 	bl	8015934 <__smakebuf_r>
 80157f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80157f6:	f013 0201 	ands.w	r2, r3, #1
 80157fa:	d00a      	beq.n	8015812 <__swsetup_r+0x9a>
 80157fc:	2200      	movs	r2, #0
 80157fe:	60a2      	str	r2, [r4, #8]
 8015800:	6962      	ldr	r2, [r4, #20]
 8015802:	4252      	negs	r2, r2
 8015804:	61a2      	str	r2, [r4, #24]
 8015806:	6922      	ldr	r2, [r4, #16]
 8015808:	b942      	cbnz	r2, 801581c <__swsetup_r+0xa4>
 801580a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801580e:	d1c5      	bne.n	801579c <__swsetup_r+0x24>
 8015810:	bd38      	pop	{r3, r4, r5, pc}
 8015812:	0799      	lsls	r1, r3, #30
 8015814:	bf58      	it	pl
 8015816:	6962      	ldrpl	r2, [r4, #20]
 8015818:	60a2      	str	r2, [r4, #8]
 801581a:	e7f4      	b.n	8015806 <__swsetup_r+0x8e>
 801581c:	2000      	movs	r0, #0
 801581e:	e7f7      	b.n	8015810 <__swsetup_r+0x98>
 8015820:	2000003c 	.word	0x2000003c

08015824 <_sbrk_r>:
 8015824:	b538      	push	{r3, r4, r5, lr}
 8015826:	4d06      	ldr	r5, [pc, #24]	@ (8015840 <_sbrk_r+0x1c>)
 8015828:	2300      	movs	r3, #0
 801582a:	4604      	mov	r4, r0
 801582c:	4608      	mov	r0, r1
 801582e:	602b      	str	r3, [r5, #0]
 8015830:	f7ec f8a0 	bl	8001974 <_sbrk>
 8015834:	1c43      	adds	r3, r0, #1
 8015836:	d102      	bne.n	801583e <_sbrk_r+0x1a>
 8015838:	682b      	ldr	r3, [r5, #0]
 801583a:	b103      	cbz	r3, 801583e <_sbrk_r+0x1a>
 801583c:	6023      	str	r3, [r4, #0]
 801583e:	bd38      	pop	{r3, r4, r5, pc}
 8015840:	20010468 	.word	0x20010468

08015844 <abort>:
 8015844:	b508      	push	{r3, lr}
 8015846:	2006      	movs	r0, #6
 8015848:	f000 f8d8 	bl	80159fc <raise>
 801584c:	2001      	movs	r0, #1
 801584e:	f7ec f819 	bl	8001884 <_exit>
	...

08015854 <_free_r>:
 8015854:	b538      	push	{r3, r4, r5, lr}
 8015856:	4605      	mov	r5, r0
 8015858:	2900      	cmp	r1, #0
 801585a:	d041      	beq.n	80158e0 <_free_r+0x8c>
 801585c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015860:	1f0c      	subs	r4, r1, #4
 8015862:	2b00      	cmp	r3, #0
 8015864:	bfb8      	it	lt
 8015866:	18e4      	addlt	r4, r4, r3
 8015868:	f7ff fbae 	bl	8014fc8 <__malloc_lock>
 801586c:	4a1d      	ldr	r2, [pc, #116]	@ (80158e4 <_free_r+0x90>)
 801586e:	6813      	ldr	r3, [r2, #0]
 8015870:	b933      	cbnz	r3, 8015880 <_free_r+0x2c>
 8015872:	6063      	str	r3, [r4, #4]
 8015874:	6014      	str	r4, [r2, #0]
 8015876:	4628      	mov	r0, r5
 8015878:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801587c:	f7ff bbaa 	b.w	8014fd4 <__malloc_unlock>
 8015880:	42a3      	cmp	r3, r4
 8015882:	d908      	bls.n	8015896 <_free_r+0x42>
 8015884:	6820      	ldr	r0, [r4, #0]
 8015886:	1821      	adds	r1, r4, r0
 8015888:	428b      	cmp	r3, r1
 801588a:	bf01      	itttt	eq
 801588c:	6819      	ldreq	r1, [r3, #0]
 801588e:	685b      	ldreq	r3, [r3, #4]
 8015890:	1809      	addeq	r1, r1, r0
 8015892:	6021      	streq	r1, [r4, #0]
 8015894:	e7ed      	b.n	8015872 <_free_r+0x1e>
 8015896:	461a      	mov	r2, r3
 8015898:	685b      	ldr	r3, [r3, #4]
 801589a:	b10b      	cbz	r3, 80158a0 <_free_r+0x4c>
 801589c:	42a3      	cmp	r3, r4
 801589e:	d9fa      	bls.n	8015896 <_free_r+0x42>
 80158a0:	6811      	ldr	r1, [r2, #0]
 80158a2:	1850      	adds	r0, r2, r1
 80158a4:	42a0      	cmp	r0, r4
 80158a6:	d10b      	bne.n	80158c0 <_free_r+0x6c>
 80158a8:	6820      	ldr	r0, [r4, #0]
 80158aa:	4401      	add	r1, r0
 80158ac:	1850      	adds	r0, r2, r1
 80158ae:	4283      	cmp	r3, r0
 80158b0:	6011      	str	r1, [r2, #0]
 80158b2:	d1e0      	bne.n	8015876 <_free_r+0x22>
 80158b4:	6818      	ldr	r0, [r3, #0]
 80158b6:	685b      	ldr	r3, [r3, #4]
 80158b8:	6053      	str	r3, [r2, #4]
 80158ba:	4408      	add	r0, r1
 80158bc:	6010      	str	r0, [r2, #0]
 80158be:	e7da      	b.n	8015876 <_free_r+0x22>
 80158c0:	d902      	bls.n	80158c8 <_free_r+0x74>
 80158c2:	230c      	movs	r3, #12
 80158c4:	602b      	str	r3, [r5, #0]
 80158c6:	e7d6      	b.n	8015876 <_free_r+0x22>
 80158c8:	6820      	ldr	r0, [r4, #0]
 80158ca:	1821      	adds	r1, r4, r0
 80158cc:	428b      	cmp	r3, r1
 80158ce:	bf04      	itt	eq
 80158d0:	6819      	ldreq	r1, [r3, #0]
 80158d2:	685b      	ldreq	r3, [r3, #4]
 80158d4:	6063      	str	r3, [r4, #4]
 80158d6:	bf04      	itt	eq
 80158d8:	1809      	addeq	r1, r1, r0
 80158da:	6021      	streq	r1, [r4, #0]
 80158dc:	6054      	str	r4, [r2, #4]
 80158de:	e7ca      	b.n	8015876 <_free_r+0x22>
 80158e0:	bd38      	pop	{r3, r4, r5, pc}
 80158e2:	bf00      	nop
 80158e4:	200105b4 	.word	0x200105b4

080158e8 <__swhatbuf_r>:
 80158e8:	b570      	push	{r4, r5, r6, lr}
 80158ea:	460c      	mov	r4, r1
 80158ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80158f0:	2900      	cmp	r1, #0
 80158f2:	b096      	sub	sp, #88	@ 0x58
 80158f4:	4615      	mov	r5, r2
 80158f6:	461e      	mov	r6, r3
 80158f8:	da0d      	bge.n	8015916 <__swhatbuf_r+0x2e>
 80158fa:	89a3      	ldrh	r3, [r4, #12]
 80158fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015900:	f04f 0100 	mov.w	r1, #0
 8015904:	bf14      	ite	ne
 8015906:	2340      	movne	r3, #64	@ 0x40
 8015908:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801590c:	2000      	movs	r0, #0
 801590e:	6031      	str	r1, [r6, #0]
 8015910:	602b      	str	r3, [r5, #0]
 8015912:	b016      	add	sp, #88	@ 0x58
 8015914:	bd70      	pop	{r4, r5, r6, pc}
 8015916:	466a      	mov	r2, sp
 8015918:	f000 f878 	bl	8015a0c <_fstat_r>
 801591c:	2800      	cmp	r0, #0
 801591e:	dbec      	blt.n	80158fa <__swhatbuf_r+0x12>
 8015920:	9901      	ldr	r1, [sp, #4]
 8015922:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015926:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801592a:	4259      	negs	r1, r3
 801592c:	4159      	adcs	r1, r3
 801592e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015932:	e7eb      	b.n	801590c <__swhatbuf_r+0x24>

08015934 <__smakebuf_r>:
 8015934:	898b      	ldrh	r3, [r1, #12]
 8015936:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015938:	079d      	lsls	r5, r3, #30
 801593a:	4606      	mov	r6, r0
 801593c:	460c      	mov	r4, r1
 801593e:	d507      	bpl.n	8015950 <__smakebuf_r+0x1c>
 8015940:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015944:	6023      	str	r3, [r4, #0]
 8015946:	6123      	str	r3, [r4, #16]
 8015948:	2301      	movs	r3, #1
 801594a:	6163      	str	r3, [r4, #20]
 801594c:	b003      	add	sp, #12
 801594e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015950:	ab01      	add	r3, sp, #4
 8015952:	466a      	mov	r2, sp
 8015954:	f7ff ffc8 	bl	80158e8 <__swhatbuf_r>
 8015958:	9f00      	ldr	r7, [sp, #0]
 801595a:	4605      	mov	r5, r0
 801595c:	4639      	mov	r1, r7
 801595e:	4630      	mov	r0, r6
 8015960:	f7ff fab2 	bl	8014ec8 <_malloc_r>
 8015964:	b948      	cbnz	r0, 801597a <__smakebuf_r+0x46>
 8015966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801596a:	059a      	lsls	r2, r3, #22
 801596c:	d4ee      	bmi.n	801594c <__smakebuf_r+0x18>
 801596e:	f023 0303 	bic.w	r3, r3, #3
 8015972:	f043 0302 	orr.w	r3, r3, #2
 8015976:	81a3      	strh	r3, [r4, #12]
 8015978:	e7e2      	b.n	8015940 <__smakebuf_r+0xc>
 801597a:	89a3      	ldrh	r3, [r4, #12]
 801597c:	6020      	str	r0, [r4, #0]
 801597e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015982:	81a3      	strh	r3, [r4, #12]
 8015984:	9b01      	ldr	r3, [sp, #4]
 8015986:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801598a:	b15b      	cbz	r3, 80159a4 <__smakebuf_r+0x70>
 801598c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015990:	4630      	mov	r0, r6
 8015992:	f000 f84d 	bl	8015a30 <_isatty_r>
 8015996:	b128      	cbz	r0, 80159a4 <__smakebuf_r+0x70>
 8015998:	89a3      	ldrh	r3, [r4, #12]
 801599a:	f023 0303 	bic.w	r3, r3, #3
 801599e:	f043 0301 	orr.w	r3, r3, #1
 80159a2:	81a3      	strh	r3, [r4, #12]
 80159a4:	89a3      	ldrh	r3, [r4, #12]
 80159a6:	431d      	orrs	r5, r3
 80159a8:	81a5      	strh	r5, [r4, #12]
 80159aa:	e7cf      	b.n	801594c <__smakebuf_r+0x18>

080159ac <_raise_r>:
 80159ac:	291f      	cmp	r1, #31
 80159ae:	b538      	push	{r3, r4, r5, lr}
 80159b0:	4605      	mov	r5, r0
 80159b2:	460c      	mov	r4, r1
 80159b4:	d904      	bls.n	80159c0 <_raise_r+0x14>
 80159b6:	2316      	movs	r3, #22
 80159b8:	6003      	str	r3, [r0, #0]
 80159ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80159be:	bd38      	pop	{r3, r4, r5, pc}
 80159c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80159c2:	b112      	cbz	r2, 80159ca <_raise_r+0x1e>
 80159c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80159c8:	b94b      	cbnz	r3, 80159de <_raise_r+0x32>
 80159ca:	4628      	mov	r0, r5
 80159cc:	f000 f852 	bl	8015a74 <_getpid_r>
 80159d0:	4622      	mov	r2, r4
 80159d2:	4601      	mov	r1, r0
 80159d4:	4628      	mov	r0, r5
 80159d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80159da:	f000 b839 	b.w	8015a50 <_kill_r>
 80159de:	2b01      	cmp	r3, #1
 80159e0:	d00a      	beq.n	80159f8 <_raise_r+0x4c>
 80159e2:	1c59      	adds	r1, r3, #1
 80159e4:	d103      	bne.n	80159ee <_raise_r+0x42>
 80159e6:	2316      	movs	r3, #22
 80159e8:	6003      	str	r3, [r0, #0]
 80159ea:	2001      	movs	r0, #1
 80159ec:	e7e7      	b.n	80159be <_raise_r+0x12>
 80159ee:	2100      	movs	r1, #0
 80159f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80159f4:	4620      	mov	r0, r4
 80159f6:	4798      	blx	r3
 80159f8:	2000      	movs	r0, #0
 80159fa:	e7e0      	b.n	80159be <_raise_r+0x12>

080159fc <raise>:
 80159fc:	4b02      	ldr	r3, [pc, #8]	@ (8015a08 <raise+0xc>)
 80159fe:	4601      	mov	r1, r0
 8015a00:	6818      	ldr	r0, [r3, #0]
 8015a02:	f7ff bfd3 	b.w	80159ac <_raise_r>
 8015a06:	bf00      	nop
 8015a08:	2000003c 	.word	0x2000003c

08015a0c <_fstat_r>:
 8015a0c:	b538      	push	{r3, r4, r5, lr}
 8015a0e:	4d07      	ldr	r5, [pc, #28]	@ (8015a2c <_fstat_r+0x20>)
 8015a10:	2300      	movs	r3, #0
 8015a12:	4604      	mov	r4, r0
 8015a14:	4608      	mov	r0, r1
 8015a16:	4611      	mov	r1, r2
 8015a18:	602b      	str	r3, [r5, #0]
 8015a1a:	f7eb ff83 	bl	8001924 <_fstat>
 8015a1e:	1c43      	adds	r3, r0, #1
 8015a20:	d102      	bne.n	8015a28 <_fstat_r+0x1c>
 8015a22:	682b      	ldr	r3, [r5, #0]
 8015a24:	b103      	cbz	r3, 8015a28 <_fstat_r+0x1c>
 8015a26:	6023      	str	r3, [r4, #0]
 8015a28:	bd38      	pop	{r3, r4, r5, pc}
 8015a2a:	bf00      	nop
 8015a2c:	20010468 	.word	0x20010468

08015a30 <_isatty_r>:
 8015a30:	b538      	push	{r3, r4, r5, lr}
 8015a32:	4d06      	ldr	r5, [pc, #24]	@ (8015a4c <_isatty_r+0x1c>)
 8015a34:	2300      	movs	r3, #0
 8015a36:	4604      	mov	r4, r0
 8015a38:	4608      	mov	r0, r1
 8015a3a:	602b      	str	r3, [r5, #0]
 8015a3c:	f7eb ff82 	bl	8001944 <_isatty>
 8015a40:	1c43      	adds	r3, r0, #1
 8015a42:	d102      	bne.n	8015a4a <_isatty_r+0x1a>
 8015a44:	682b      	ldr	r3, [r5, #0]
 8015a46:	b103      	cbz	r3, 8015a4a <_isatty_r+0x1a>
 8015a48:	6023      	str	r3, [r4, #0]
 8015a4a:	bd38      	pop	{r3, r4, r5, pc}
 8015a4c:	20010468 	.word	0x20010468

08015a50 <_kill_r>:
 8015a50:	b538      	push	{r3, r4, r5, lr}
 8015a52:	4d07      	ldr	r5, [pc, #28]	@ (8015a70 <_kill_r+0x20>)
 8015a54:	2300      	movs	r3, #0
 8015a56:	4604      	mov	r4, r0
 8015a58:	4608      	mov	r0, r1
 8015a5a:	4611      	mov	r1, r2
 8015a5c:	602b      	str	r3, [r5, #0]
 8015a5e:	f7eb feff 	bl	8001860 <_kill>
 8015a62:	1c43      	adds	r3, r0, #1
 8015a64:	d102      	bne.n	8015a6c <_kill_r+0x1c>
 8015a66:	682b      	ldr	r3, [r5, #0]
 8015a68:	b103      	cbz	r3, 8015a6c <_kill_r+0x1c>
 8015a6a:	6023      	str	r3, [r4, #0]
 8015a6c:	bd38      	pop	{r3, r4, r5, pc}
 8015a6e:	bf00      	nop
 8015a70:	20010468 	.word	0x20010468

08015a74 <_getpid_r>:
 8015a74:	f7eb beec 	b.w	8001850 <_getpid>

08015a78 <_init>:
 8015a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a7a:	bf00      	nop
 8015a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a7e:	bc08      	pop	{r3}
 8015a80:	469e      	mov	lr, r3
 8015a82:	4770      	bx	lr

08015a84 <_fini>:
 8015a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a86:	bf00      	nop
 8015a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a8a:	bc08      	pop	{r3}
 8015a8c:	469e      	mov	lr, r3
 8015a8e:	4770      	bx	lr
