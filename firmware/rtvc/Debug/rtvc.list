
rtvc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012600  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002db0  08012800  08012800  00013800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080155b0  080155b0  000171cc  2**0
                  CONTENTS
  4 .ARM          00000008  080155b0  080155b0  000165b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080155b8  080155b8  000171cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080155b8  080155b8  000165b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080155bc  080155bc  000165bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  080155c0  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  0801564c  0001708c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  080156ec  0001712c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000fe88  200001cc  0801578c  000171cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20010054  0801578c  00018054  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000171cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00026e7a  00000000  00000000  000171fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006bb2  00000000  00000000  0003e074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ed0  00000000  00000000  00044c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000184d  00000000  00000000  00046af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00036b3d  00000000  00000000  00048345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002ea53  00000000  00000000  0007ee82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011a13a  00000000  00000000  000ad8d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001c7a0f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000868c  00000000  00000000  001c7a54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000055  00000000  00000000  001d00e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001cc 	.word	0x200001cc
 800021c:	00000000 	.word	0x00000000
 8000220:	080127e8 	.word	0x080127e8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d0 	.word	0x200001d0
 800023c:	080127e8 	.word	0x080127e8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4a07      	ldr	r2, [pc, #28]	@ (80005fc <vApplicationGetIdleTaskMemory+0x2c>)
 80005e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	4a06      	ldr	r2, [pc, #24]	@ (8000600 <vApplicationGetIdleTaskMemory+0x30>)
 80005e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005ee:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005f0:	bf00      	nop
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	200001e8 	.word	0x200001e8
 8000600:	2000023c 	.word	0x2000023c

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b5b0      	push	{r4, r5, r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060a:	f000 fbdc 	bl	8000dc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060e:	f000 f81b 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000612:	f000 f887 	bl	8000724 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8000616:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <main+0x3c>)
 8000618:	1d3c      	adds	r4, r7, #4
 800061a:	461d      	mov	r5, r3
 800061c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000620:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000624:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f004 f82a 	bl	8004686 <osThreadCreate>
 8000632:	4603      	mov	r3, r0
 8000634:	4a03      	ldr	r2, [pc, #12]	@ (8000644 <main+0x40>)
 8000636:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000638:	f004 f80e 	bl	8004658 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063c:	bf00      	nop
 800063e:	e7fd      	b.n	800063c <main+0x38>
 8000640:	0801280c 	.word	0x0801280c
 8000644:	20000a3c 	.word	0x20000a3c

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	@ 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 031c 	add.w	r3, r7, #28
 8000652:	2234      	movs	r2, #52	@ 0x34
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f011 fa21 	bl	8011a9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	4b2b      	ldr	r3, [pc, #172]	@ (800071c <SystemClock_Config+0xd4>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000670:	4a2a      	ldr	r2, [pc, #168]	@ (800071c <SystemClock_Config+0xd4>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	@ 0x40
 8000678:	4b28      	ldr	r3, [pc, #160]	@ (800071c <SystemClock_Config+0xd4>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	4b26      	ldr	r3, [pc, #152]	@ (8000720 <SystemClock_Config+0xd8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a25      	ldr	r2, [pc, #148]	@ (8000720 <SystemClock_Config+0xd8>)
 800068a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b23      	ldr	r3, [pc, #140]	@ (8000720 <SystemClock_Config+0xd8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000698:	603b      	str	r3, [r7, #0]
 800069a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800069c:	2301      	movs	r3, #1
 800069e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	2302      	movs	r3, #2
 80006a8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b0:	2304      	movs	r3, #4
 80006b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006b4:	23d8      	movs	r3, #216	@ 0xd8
 80006b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4618      	mov	r0, r3
 80006ca:	f002 f92d 	bl	8002928 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006d4:	f000 f894 	bl	8000800 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006d8:	f002 f8d6 	bl	8002888 <HAL_PWREx_EnableOverDrive>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006e2:	f000 f88d 	bl	8000800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	230f      	movs	r3, #15
 80006e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2302      	movs	r3, #2
 80006ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006fc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	2107      	movs	r1, #7
 8000704:	4618      	mov	r0, r3
 8000706:	f002 fbbd 	bl	8002e84 <HAL_RCC_ClockConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000710:	f000 f876 	bl	8000800 <Error_Handler>
  }
}
 8000714:	bf00      	nop
 8000716:	3750      	adds	r7, #80	@ 0x50
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b480      	push	{r7}
 8000726:	b087      	sub	sp, #28
 8000728:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	4b21      	ldr	r3, [pc, #132]	@ (80007b0 <MX_GPIO_Init+0x8c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a20      	ldr	r2, [pc, #128]	@ (80007b0 <MX_GPIO_Init+0x8c>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b1e      	ldr	r3, [pc, #120]	@ (80007b0 <MX_GPIO_Init+0x8c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	4b1b      	ldr	r3, [pc, #108]	@ (80007b0 <MX_GPIO_Init+0x8c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a1a      	ldr	r2, [pc, #104]	@ (80007b0 <MX_GPIO_Init+0x8c>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b18      	ldr	r3, [pc, #96]	@ (80007b0 <MX_GPIO_Init+0x8c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <MX_GPIO_Init+0x8c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	4a14      	ldr	r2, [pc, #80]	@ (80007b0 <MX_GPIO_Init+0x8c>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6313      	str	r3, [r2, #48]	@ 0x30
 8000766:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <MX_GPIO_Init+0x8c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <MX_GPIO_Init+0x8c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a0e      	ldr	r2, [pc, #56]	@ (80007b0 <MX_GPIO_Init+0x8c>)
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <MX_GPIO_Init+0x8c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800078a:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <MX_GPIO_Init+0x8c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a08      	ldr	r2, [pc, #32]	@ (80007b0 <MX_GPIO_Init+0x8c>)
 8000790:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <MX_GPIO_Init+0x8c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007a2:	bf00      	nop
 80007a4:	371c      	adds	r7, #28
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800

080007b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80007bc:	f003 f87a 	bl	80038b4 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    volatile int32_t status = LAN8742_GetLinkState(&LAN8742);
 80007c0:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <StartDefaultTask+0x24>)
 80007c2:	f000 fa79 	bl	8000cb8 <LAN8742_GetLinkState>
 80007c6:	4603      	mov	r3, r0
 80007c8:	60fb      	str	r3, [r7, #12]
    osDelay(1000);
 80007ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007ce:	f003 ffb2 	bl	8004736 <osDelay>
  {
 80007d2:	bf00      	nop
 80007d4:	e7f4      	b.n	80007c0 <StartDefaultTask+0xc>
 80007d6:	bf00      	nop
 80007d8:	2000555c 	.word	0x2000555c

080007dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a04      	ldr	r2, [pc, #16]	@ (80007fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d101      	bne.n	80007f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ee:	f000 faf7 	bl	8000de0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40000400 	.word	0x40000400

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <Error_Handler+0x8>

0800080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000812:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <HAL_MspInit+0x4c>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000816:	4a10      	ldr	r2, [pc, #64]	@ (8000858 <HAL_MspInit+0x4c>)
 8000818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800081c:	6413      	str	r3, [r2, #64]	@ 0x40
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <HAL_MspInit+0x4c>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <HAL_MspInit+0x4c>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800082e:	4a0a      	ldr	r2, [pc, #40]	@ (8000858 <HAL_MspInit+0x4c>)
 8000830:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000834:	6453      	str	r3, [r2, #68]	@ 0x44
 8000836:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <HAL_MspInit+0x4c>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800083a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	210f      	movs	r1, #15
 8000846:	f06f 0001 	mvn.w	r0, #1
 800084a:	f000 fbd1 	bl	8000ff0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800

0800085c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08e      	sub	sp, #56	@ 0x38
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000864:	2300      	movs	r3, #0
 8000866:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000868:	2300      	movs	r3, #0
 800086a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800086c:	4b33      	ldr	r3, [pc, #204]	@ (800093c <HAL_InitTick+0xe0>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000870:	4a32      	ldr	r2, [pc, #200]	@ (800093c <HAL_InitTick+0xe0>)
 8000872:	f043 0302 	orr.w	r3, r3, #2
 8000876:	6413      	str	r3, [r2, #64]	@ 0x40
 8000878:	4b30      	ldr	r3, [pc, #192]	@ (800093c <HAL_InitTick+0xe0>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087c:	f003 0302 	and.w	r3, r3, #2
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000884:	f107 0210 	add.w	r2, r7, #16
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4611      	mov	r1, r2
 800088e:	4618      	mov	r0, r3
 8000890:	f002 fd0a 	bl	80032a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000894:	6a3b      	ldr	r3, [r7, #32]
 8000896:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800089a:	2b00      	cmp	r3, #0
 800089c:	d103      	bne.n	80008a6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800089e:	f002 fcef 	bl	8003280 <HAL_RCC_GetPCLK1Freq>
 80008a2:	6378      	str	r0, [r7, #52]	@ 0x34
 80008a4:	e004      	b.n	80008b0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008a6:	f002 fceb 	bl	8003280 <HAL_RCC_GetPCLK1Freq>
 80008aa:	4603      	mov	r3, r0
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008b2:	4a23      	ldr	r2, [pc, #140]	@ (8000940 <HAL_InitTick+0xe4>)
 80008b4:	fba2 2303 	umull	r2, r3, r2, r3
 80008b8:	0c9b      	lsrs	r3, r3, #18
 80008ba:	3b01      	subs	r3, #1
 80008bc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80008be:	4b21      	ldr	r3, [pc, #132]	@ (8000944 <HAL_InitTick+0xe8>)
 80008c0:	4a21      	ldr	r2, [pc, #132]	@ (8000948 <HAL_InitTick+0xec>)
 80008c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80008c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000944 <HAL_InitTick+0xe8>)
 80008c6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008ca:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80008cc:	4a1d      	ldr	r2, [pc, #116]	@ (8000944 <HAL_InitTick+0xe8>)
 80008ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008d0:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80008d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000944 <HAL_InitTick+0xe8>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000944 <HAL_InitTick+0xe8>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008de:	4b19      	ldr	r3, [pc, #100]	@ (8000944 <HAL_InitTick+0xe8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80008e4:	4817      	ldr	r0, [pc, #92]	@ (8000944 <HAL_InitTick+0xe8>)
 80008e6:	f002 fd11 	bl	800330c <HAL_TIM_Base_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80008f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d11b      	bne.n	8000930 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80008f8:	4812      	ldr	r0, [pc, #72]	@ (8000944 <HAL_InitTick+0xe8>)
 80008fa:	f002 fd69 	bl	80033d0 <HAL_TIM_Base_Start_IT>
 80008fe:	4603      	mov	r3, r0
 8000900:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000904:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000908:	2b00      	cmp	r3, #0
 800090a:	d111      	bne.n	8000930 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800090c:	201d      	movs	r0, #29
 800090e:	f000 fb8b 	bl	8001028 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2b0f      	cmp	r3, #15
 8000916:	d808      	bhi.n	800092a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000918:	2200      	movs	r2, #0
 800091a:	6879      	ldr	r1, [r7, #4]
 800091c:	201d      	movs	r0, #29
 800091e:	f000 fb67 	bl	8000ff0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000922:	4a0a      	ldr	r2, [pc, #40]	@ (800094c <HAL_InitTick+0xf0>)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6013      	str	r3, [r2, #0]
 8000928:	e002      	b.n	8000930 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800092a:	2301      	movs	r3, #1
 800092c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000930:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000934:	4618      	mov	r0, r3
 8000936:	3738      	adds	r7, #56	@ 0x38
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40023800 	.word	0x40023800
 8000940:	431bde83 	.word	0x431bde83
 8000944:	20000a40 	.word	0x20000a40
 8000948:	40000400 	.word	0x40000400
 800094c:	20000004 	.word	0x20000004

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <NMI_Handler+0x4>

08000958 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <HardFault_Handler+0x4>

08000960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <MemManage_Handler+0x4>

08000968 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <BusFault_Handler+0x4>

08000970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <UsageFault_Handler+0x4>

08000978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
	...

08000988 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800098c:	4802      	ldr	r0, [pc, #8]	@ (8000998 <TIM3_IRQHandler+0x10>)
 800098e:	f002 fd97 	bl	80034c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000a40 	.word	0x20000a40

0800099c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80009a0:	4802      	ldr	r0, [pc, #8]	@ (80009ac <ETH_IRQHandler+0x10>)
 80009a2:	f000 fedd 	bl	8001760 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20005474 	.word	0x20005474

080009b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  return 1;
 80009b4:	2301      	movs	r3, #1
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <_kill>:

int _kill(int pid, int sig)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80009ca:	4b05      	ldr	r3, [pc, #20]	@ (80009e0 <_kill+0x20>)
 80009cc:	2216      	movs	r2, #22
 80009ce:	601a      	str	r2, [r3, #0]
  return -1;
 80009d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	2000ff04 	.word	0x2000ff04

080009e4 <_exit>:

void _exit (int status)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80009ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff ffe5 	bl	80009c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80009f6:	bf00      	nop
 80009f8:	e7fd      	b.n	80009f6 <_exit+0x12>

080009fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	60f8      	str	r0, [r7, #12]
 8000a02:	60b9      	str	r1, [r7, #8]
 8000a04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
 8000a0a:	e00a      	b.n	8000a22 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a0c:	f3af 8000 	nop.w
 8000a10:	4601      	mov	r1, r0
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	1c5a      	adds	r2, r3, #1
 8000a16:	60ba      	str	r2, [r7, #8]
 8000a18:	b2ca      	uxtb	r2, r1
 8000a1a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	697a      	ldr	r2, [r7, #20]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	dbf0      	blt.n	8000a0c <_read+0x12>
  }

  return len;
 8000a2a:	687b      	ldr	r3, [r7, #4]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	e009      	b.n	8000a5a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	1c5a      	adds	r2, r3, #1
 8000a4a:	60ba      	str	r2, [r7, #8]
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	3301      	adds	r3, #1
 8000a58:	617b      	str	r3, [r7, #20]
 8000a5a:	697a      	ldr	r2, [r7, #20]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	dbf1      	blt.n	8000a46 <_write+0x12>
  }
  return len;
 8000a62:	687b      	ldr	r3, [r7, #4]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3718      	adds	r7, #24
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <_close>:

int _close(int file)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a94:	605a      	str	r2, [r3, #4]
  return 0;
 8000a96:	2300      	movs	r3, #0
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <_isatty>:

int _isatty(int file)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000aac:	2301      	movs	r3, #1
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b085      	sub	sp, #20
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	60f8      	str	r0, [r7, #12]
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ac6:	2300      	movs	r3, #0
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b087      	sub	sp, #28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000adc:	4a14      	ldr	r2, [pc, #80]	@ (8000b30 <_sbrk+0x5c>)
 8000ade:	4b15      	ldr	r3, [pc, #84]	@ (8000b34 <_sbrk+0x60>)
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ae8:	4b13      	ldr	r3, [pc, #76]	@ (8000b38 <_sbrk+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d102      	bne.n	8000af6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af0:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <_sbrk+0x64>)
 8000af2:	4a12      	ldr	r2, [pc, #72]	@ (8000b3c <_sbrk+0x68>)
 8000af4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000af6:	4b10      	ldr	r3, [pc, #64]	@ (8000b38 <_sbrk+0x64>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d205      	bcs.n	8000b10 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b04:	4b0e      	ldr	r3, [pc, #56]	@ (8000b40 <_sbrk+0x6c>)
 8000b06:	220c      	movs	r2, #12
 8000b08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b0e:	e009      	b.n	8000b24 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b10:	4b09      	ldr	r3, [pc, #36]	@ (8000b38 <_sbrk+0x64>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b16:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <_sbrk+0x64>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	4a06      	ldr	r2, [pc, #24]	@ (8000b38 <_sbrk+0x64>)
 8000b20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b22:	68fb      	ldr	r3, [r7, #12]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	371c      	adds	r7, #28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	20080000 	.word	0x20080000
 8000b34:	00000400 	.word	0x00000400
 8000b38:	20000a8c 	.word	0x20000a8c
 8000b3c:	20010058 	.word	0x20010058
 8000b40:	2000ff04 	.word	0x2000ff04

08000b44 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b48:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <SystemInit+0x20>)
 8000b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b4e:	4a05      	ldr	r2, [pc, #20]	@ (8000b64 <SystemInit+0x20>)
 8000b50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ba0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b6c:	f7ff ffea 	bl	8000b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b70:	480c      	ldr	r0, [pc, #48]	@ (8000ba4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b72:	490d      	ldr	r1, [pc, #52]	@ (8000ba8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b74:	4a0d      	ldr	r2, [pc, #52]	@ (8000bac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b78:	e002      	b.n	8000b80 <LoopCopyDataInit>

08000b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7e:	3304      	adds	r3, #4

08000b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b84:	d3f9      	bcc.n	8000b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b86:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b88:	4c0a      	ldr	r4, [pc, #40]	@ (8000bb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b8c:	e001      	b.n	8000b92 <LoopFillZerobss>

08000b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b90:	3204      	adds	r2, #4

08000b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b94:	d3fb      	bcc.n	8000b8e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b96:	f010 ffd1 	bl	8011b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b9a:	f7ff fd33 	bl	8000604 <main>
  bx  lr    
 8000b9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ba0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000bac:	080155c0 	.word	0x080155c0
  ldr r2, =_sbss
 8000bb0:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8000bb4:	20010054 	.word	0x20010054

08000bb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb8:	e7fe      	b.n	8000bb8 <ADC_IRQHandler>

08000bba <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	b083      	sub	sp, #12
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
 8000bc2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d00b      	beq.n	8000be2 <LAN8742_RegisterBusIO+0x28>
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d007      	beq.n	8000be2 <LAN8742_RegisterBusIO+0x28>
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d003      	beq.n	8000be2 <LAN8742_RegisterBusIO+0x28>
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	691b      	ldr	r3, [r3, #16]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d102      	bne.n	8000be8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000be6:	e014      	b.n	8000c12 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685a      	ldr	r2, [r3, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	68da      	ldr	r2, [r3, #12]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	689a      	ldr	r2, [r3, #8]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	691a      	ldr	r2, [r3, #16]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b086      	sub	sp, #24
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d139      	bne.n	8000cae <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d002      	beq.n	8000c48 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2220      	movs	r2, #32
 8000c4c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	e01c      	b.n	8000c8e <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	695b      	ldr	r3, [r3, #20]
 8000c58:	f107 020c 	add.w	r2, r7, #12
 8000c5c:	2112      	movs	r1, #18
 8000c5e:	6978      	ldr	r0, [r7, #20]
 8000c60:	4798      	blx	r3
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	da03      	bge.n	8000c70 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000c68:	f06f 0304 	mvn.w	r3, #4
 8000c6c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000c6e:	e00b      	b.n	8000c88 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f003 031f 	and.w	r3, r3, #31
 8000c76:	697a      	ldr	r2, [r7, #20]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d105      	bne.n	8000c88 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	697a      	ldr	r2, [r7, #20]
 8000c80:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
         break;
 8000c86:	e005      	b.n	8000c94 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	2b1f      	cmp	r3, #31
 8000c92:	d9df      	bls.n	8000c54 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b1f      	cmp	r3, #31
 8000c9a:	d902      	bls.n	8000ca2 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000c9c:	f06f 0302 	mvn.w	r3, #2
 8000ca0:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d102      	bne.n	8000cae <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2201      	movs	r2, #1
 8000cac:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000cae:	693b      	ldr	r3, [r7, #16]
 }
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	695b      	ldr	r3, [r3, #20]
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	6810      	ldr	r0, [r2, #0]
 8000ccc:	f107 020c 	add.w	r2, r7, #12
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	4798      	blx	r3
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	da02      	bge.n	8000ce0 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000cda:	f06f 0304 	mvn.w	r3, #4
 8000cde:	e06e      	b.n	8000dbe <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	695b      	ldr	r3, [r3, #20]
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	6810      	ldr	r0, [r2, #0]
 8000ce8:	f107 020c 	add.w	r2, r7, #12
 8000cec:	2101      	movs	r1, #1
 8000cee:	4798      	blx	r3
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	da02      	bge.n	8000cfc <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000cf6:	f06f 0304 	mvn.w	r3, #4
 8000cfa:	e060      	b.n	8000dbe <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f003 0304 	and.w	r3, r3, #4
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d101      	bne.n	8000d0a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e059      	b.n	8000dbe <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	6810      	ldr	r0, [r2, #0]
 8000d12:	f107 020c 	add.w	r2, r7, #12
 8000d16:	2100      	movs	r1, #0
 8000d18:	4798      	blx	r3
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	da02      	bge.n	8000d26 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d20:	f06f 0304 	mvn.w	r3, #4
 8000d24:	e04b      	b.n	8000dbe <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d11b      	bne.n	8000d68 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d006      	beq.n	8000d48 <LAN8742_GetLinkState+0x90>
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000d44:	2302      	movs	r3, #2
 8000d46:	e03a      	b.n	8000dbe <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000d52:	2303      	movs	r3, #3
 8000d54:	e033      	b.n	8000dbe <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000d60:	2304      	movs	r3, #4
 8000d62:	e02c      	b.n	8000dbe <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000d64:	2305      	movs	r3, #5
 8000d66:	e02a      	b.n	8000dbe <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	695b      	ldr	r3, [r3, #20]
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	6810      	ldr	r0, [r2, #0]
 8000d70:	f107 020c 	add.w	r2, r7, #12
 8000d74:	211f      	movs	r1, #31
 8000d76:	4798      	blx	r3
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	da02      	bge.n	8000d84 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000d7e:	f06f 0304 	mvn.w	r3, #4
 8000d82:	e01c      	b.n	8000dbe <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d101      	bne.n	8000d92 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000d8e:	2306      	movs	r3, #6
 8000d90:	e015      	b.n	8000dbe <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	f003 031c 	and.w	r3, r3, #28
 8000d98:	2b18      	cmp	r3, #24
 8000d9a:	d101      	bne.n	8000da0 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	e00e      	b.n	8000dbe <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f003 031c 	and.w	r3, r3, #28
 8000da6:	2b08      	cmp	r3, #8
 8000da8:	d101      	bne.n	8000dae <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000daa:	2303      	movs	r3, #3
 8000dac:	e007      	b.n	8000dbe <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	f003 031c 	and.w	r3, r3, #28
 8000db4:	2b14      	cmp	r3, #20
 8000db6:	d101      	bne.n	8000dbc <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000db8:	2304      	movs	r3, #4
 8000dba:	e000      	b.n	8000dbe <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000dbc:	2305      	movs	r3, #5
    }
  }
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dca:	2003      	movs	r0, #3
 8000dcc:	f000 f905 	bl	8000fda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dd0:	200f      	movs	r0, #15
 8000dd2:	f7ff fd43 	bl	800085c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd6:	f7ff fd19 	bl	800080c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dda:	2300      	movs	r3, #0
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de4:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <HAL_IncTick+0x20>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <HAL_IncTick+0x24>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4413      	add	r3, r2
 8000df0:	4a04      	ldr	r2, [pc, #16]	@ (8000e04 <HAL_IncTick+0x24>)
 8000df2:	6013      	str	r3, [r2, #0]
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000008 	.word	0x20000008
 8000e04:	20000a90 	.word	0x20000a90

08000e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e0c:	4b03      	ldr	r3, [pc, #12]	@ (8000e1c <HAL_GetTick+0x14>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000a90 	.word	0x20000a90

08000e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e28:	f7ff ffee 	bl	8000e08 <HAL_GetTick>
 8000e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e38:	d005      	beq.n	8000e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e64 <HAL_Delay+0x44>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4413      	add	r3, r2
 8000e44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e46:	bf00      	nop
 8000e48:	f7ff ffde 	bl	8000e08 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d8f7      	bhi.n	8000e48 <HAL_Delay+0x28>
  {
  }
}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000008 	.word	0x20000008

08000e68 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8000e6c:	4b03      	ldr	r3, [pc, #12]	@ (8000e7c <HAL_GetREVID+0x14>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	0c1b      	lsrs	r3, r3, #16
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e0042000 	.word	0xe0042000

08000e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e90:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec0 <__NVIC_SetPriorityGrouping+0x40>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e96:	68ba      	ldr	r2, [r7, #8]
 8000e98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eae:	4a04      	ldr	r2, [pc, #16]	@ (8000ec0 <__NVIC_SetPriorityGrouping+0x40>)
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	60d3      	str	r3, [r2, #12]
}
 8000eb4:	bf00      	nop
 8000eb6:	3714      	adds	r7, #20
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00
 8000ec4:	05fa0000 	.word	0x05fa0000

08000ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ecc:	4b04      	ldr	r3, [pc, #16]	@ (8000ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	f003 0307 	and.w	r3, r3, #7
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	db0b      	blt.n	8000f0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	f003 021f 	and.w	r2, r3, #31
 8000efc:	4907      	ldr	r1, [pc, #28]	@ (8000f1c <__NVIC_EnableIRQ+0x38>)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	095b      	lsrs	r3, r3, #5
 8000f04:	2001      	movs	r0, #1
 8000f06:	fa00 f202 	lsl.w	r2, r0, r2
 8000f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000e100 	.word	0xe000e100

08000f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	6039      	str	r1, [r7, #0]
 8000f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	db0a      	blt.n	8000f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	490c      	ldr	r1, [pc, #48]	@ (8000f6c <__NVIC_SetPriority+0x4c>)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	0112      	lsls	r2, r2, #4
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	440b      	add	r3, r1
 8000f44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f48:	e00a      	b.n	8000f60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4908      	ldr	r1, [pc, #32]	@ (8000f70 <__NVIC_SetPriority+0x50>)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	f003 030f 	and.w	r3, r3, #15
 8000f56:	3b04      	subs	r3, #4
 8000f58:	0112      	lsls	r2, r2, #4
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	761a      	strb	r2, [r3, #24]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000e100 	.word	0xe000e100
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b089      	sub	sp, #36	@ 0x24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f1c3 0307 	rsb	r3, r3, #7
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	bf28      	it	cs
 8000f92:	2304      	movcs	r3, #4
 8000f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3304      	adds	r3, #4
 8000f9a:	2b06      	cmp	r3, #6
 8000f9c:	d902      	bls.n	8000fa4 <NVIC_EncodePriority+0x30>
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3b03      	subs	r3, #3
 8000fa2:	e000      	b.n	8000fa6 <NVIC_EncodePriority+0x32>
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43da      	mvns	r2, r3
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fbc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc6:	43d9      	mvns	r1, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	4313      	orrs	r3, r2
         );
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3724      	adds	r7, #36	@ 0x24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff ff4c 	bl	8000e80 <__NVIC_SetPriorityGrouping>
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001002:	f7ff ff61 	bl	8000ec8 <__NVIC_GetPriorityGrouping>
 8001006:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	68b9      	ldr	r1, [r7, #8]
 800100c:	6978      	ldr	r0, [r7, #20]
 800100e:	f7ff ffb1 	bl	8000f74 <NVIC_EncodePriority>
 8001012:	4602      	mov	r2, r0
 8001014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001018:	4611      	mov	r1, r2
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ff80 	bl	8000f20 <__NVIC_SetPriority>
}
 8001020:	bf00      	nop
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff ff54 	bl	8000ee4 <__NVIC_EnableIRQ>
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e086      	b.n	8001164 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800105c:	2b00      	cmp	r3, #0
 800105e:	d106      	bne.n	800106e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2223      	movs	r2, #35	@ 0x23
 8001064:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f003 f87d 	bl	8004168 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	4b3f      	ldr	r3, [pc, #252]	@ (800116c <HAL_ETH_Init+0x128>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001072:	4a3e      	ldr	r2, [pc, #248]	@ (800116c <HAL_ETH_Init+0x128>)
 8001074:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001078:	6453      	str	r3, [r2, #68]	@ 0x44
 800107a:	4b3c      	ldr	r3, [pc, #240]	@ (800116c <HAL_ETH_Init+0x128>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001086:	4b3a      	ldr	r3, [pc, #232]	@ (8001170 <HAL_ETH_Init+0x12c>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	4a39      	ldr	r2, [pc, #228]	@ (8001170 <HAL_ETH_Init+0x12c>)
 800108c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001090:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001092:	4b37      	ldr	r3, [pc, #220]	@ (8001170 <HAL_ETH_Init+0x12c>)
 8001094:	685a      	ldr	r2, [r3, #4]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	4935      	ldr	r1, [pc, #212]	@ (8001170 <HAL_ETH_Init+0x12c>)
 800109c:	4313      	orrs	r3, r2
 800109e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80010a0:	4b33      	ldr	r3, [pc, #204]	@ (8001170 <HAL_ETH_Init+0x12c>)
 80010a2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	6812      	ldr	r2, [r2, #0]
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80010ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010bc:	f7ff fea4 	bl	8000e08 <HAL_GetTick>
 80010c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80010c2:	e011      	b.n	80010e8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80010c4:	f7ff fea0 	bl	8000e08 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80010d2:	d909      	bls.n	80010e8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2204      	movs	r2, #4
 80010d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	22e0      	movs	r2, #224	@ 0xe0
 80010e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e03d      	b.n	8001164 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1e4      	bne.n	80010c4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f000 ff5c 	bl	8001fb8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f001 f807 	bl	8002114 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f001 f85d 	bl	80021c6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	461a      	mov	r2, r3
 8001112:	2100      	movs	r1, #0
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f000 ffc5 	bl	80020a4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001128:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	4b0f      	ldr	r3, [pc, #60]	@ (8001174 <HAL_ETH_Init+0x130>)
 8001138:	430b      	orrs	r3, r1
 800113a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800114e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2210      	movs	r2, #16
 800115e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001162:	2300      	movs	r3, #0
}
 8001164:	4618      	mov	r0, r3
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40023800 	.word	0x40023800
 8001170:	40013800 	.word	0x40013800
 8001174:	00020060 	.word	0x00020060

08001178 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001186:	2b10      	cmp	r3, #16
 8001188:	d15f      	bne.n	800124a <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2223      	movs	r2, #35	@ 0x23
 800118e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2201      	movs	r2, #1
 8001196:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2204      	movs	r2, #4
 800119c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 f9f6 	bl	8001590 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80011ac:	2001      	movs	r0, #1
 80011ae:	f7ff fe37 	bl	8000e20 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	6812      	ldr	r2, [r2, #0]
 80011c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80011d0:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	6812      	ldr	r2, [r2, #0]
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80011e8:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 fd80 	bl	8001cf0 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f042 0208 	orr.w	r2, r2, #8
 80011fe:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001208:	2001      	movs	r0, #1
 800120a:	f7ff fe09 	bl	8000e20 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f042 0204 	orr.w	r2, r2, #4
 8001224:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800122e:	69d9      	ldr	r1, [r3, #28]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b07      	ldr	r3, [pc, #28]	@ (8001254 <HAL_ETH_Start_IT+0xdc>)
 8001236:	430b      	orrs	r3, r1
 8001238:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800123c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2223      	movs	r2, #35	@ 0x23
 8001242:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	e000      	b.n	800124c <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
  }
}
 800124c:	4618      	mov	r0, r3
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	0001a0c1 	.word	0x0001a0c1

08001258 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001266:	2b23      	cmp	r3, #35	@ 0x23
 8001268:	d16e      	bne.n	8001348 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2223      	movs	r2, #35	@ 0x23
 800126e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800127a:	69d9      	ldr	r1, [r3, #28]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b34      	ldr	r3, [pc, #208]	@ (8001354 <HAL_ETH_Stop_IT+0xfc>)
 8001282:	400b      	ands	r3, r1
 8001284:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001288:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	6812      	ldr	r2, [r2, #0]
 8001298:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800129c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012a0:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	f023 0302 	bic.w	r3, r3, #2
 80012b4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012b8:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 0204 	bic.w	r2, r2, #4
 80012c8:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80012d2:	2001      	movs	r0, #1
 80012d4:	f7ff fda4 	bl	8000e20 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f000 fd05 	bl	8001cf0 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 0208 	bic.w	r2, r2, #8
 80012f4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80012fe:	2001      	movs	r0, #1
 8001300:	f7ff fd8e 	bl	8000e20 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	e00e      	b.n	8001330 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	697a      	ldr	r2, [r7, #20]
 8001316:	3212      	adds	r2, #18
 8001318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800131c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	3301      	adds	r3, #1
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	2b03      	cmp	r3, #3
 8001334:	d9ed      	bls.n	8001312 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2210      	movs	r2, #16
 8001340:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001344:	2300      	movs	r3, #0
 8001346:	e000      	b.n	800134a <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
  }
}
 800134a:	4618      	mov	r0, r3
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	fffe5f3e 	.word	0xfffe5f3e

08001358 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d109      	bne.n	800137c <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800136e:	f043 0201 	orr.w	r2, r3, #1
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e045      	b.n	8001408 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001382:	2b23      	cmp	r3, #35	@ 0x23
 8001384:	d13f      	bne.n	8001406 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800138e:	2201      	movs	r2, #1
 8001390:	6839      	ldr	r1, [r7, #0]
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 ff86 	bl	80022a4 <ETH_Prepare_Tx_Descriptors>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d009      	beq.n	80013b2 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013a4:	f043 0202 	orr.w	r2, r3, #2
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e02a      	b.n	8001408 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013b2:	f3bf 8f4f 	dsb	sy
}
 80013b6:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013bc:	1c5a      	adds	r2, r3, #1
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c6:	2b03      	cmp	r3, #3
 80013c8:	d904      	bls.n	80013d4 <HAL_ETH_Transmit_IT+0x7c>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ce:	1f1a      	subs	r2, r3, #4
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00d      	beq.n	8001402 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013ee:	461a      	mov	r2, r3
 80013f0:	2304      	movs	r3, #4
 80013f2:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013fc:	461a      	mov	r2, r3
 80013fe:	2300      	movs	r3, #0
 8001400:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001402:	2300      	movs	r3, #0
 8001404:	e000      	b.n	8001408 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
  }
}
 8001408:	4618      	mov	r0, r3
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800141e:	2300      	movs	r3, #0
 8001420:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d109      	bne.n	800143c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800142e:	f043 0201 	orr.w	r2, r3, #1
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e0a4      	b.n	8001586 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001442:	2b23      	cmp	r3, #35	@ 0x23
 8001444:	d001      	beq.n	800144a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e09d      	b.n	8001586 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800144e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69fa      	ldr	r2, [r7, #28]
 8001454:	3212      	adds	r2, #18
 8001456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800145a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001460:	f1c3 0304 	rsb	r3, r3, #4
 8001464:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001466:	e066      	b.n	8001536 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001470:	2b00      	cmp	r3, #0
 8001472:	d007      	beq.n	8001484 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	69da      	ldr	r2, [r3, #28]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	699a      	ldr	r2, [r3, #24]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800148c:	2b00      	cmp	r3, #0
 800148e:	d103      	bne.n	8001498 <HAL_ETH_ReadData+0x88>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001494:	2b00      	cmp	r3, #0
 8001496:	d03c      	beq.n	8001512 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d005      	beq.n	80014b0 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	0c1b      	lsrs	r3, r3, #16
 80014b6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80014ba:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d005      	beq.n	80014d4 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80014d0:	2301      	movs	r3, #1
 80014d2:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80014ec:	461a      	mov	r2, r3
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	f003 f805 	bl	8004500 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014fa:	1c5a      	adds	r2, r3, #1
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	441a      	add	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	2200      	movs	r2, #0
 8001510:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3301      	adds	r3, #1
 8001516:	61fb      	str	r3, [r7, #28]
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	2b03      	cmp	r3, #3
 800151c:	d902      	bls.n	8001524 <HAL_ETH_ReadData+0x114>
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3b04      	subs	r3, #4
 8001522:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69fa      	ldr	r2, [r7, #28]
 8001528:	3212      	adds	r2, #18
 800152a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	3301      	adds	r3, #1
 8001534:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800153a:	2b00      	cmp	r3, #0
 800153c:	db06      	blt.n	800154c <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	429a      	cmp	r2, r3
 8001544:	d202      	bcs.n	800154c <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8001546:	7cfb      	ldrb	r3, [r7, #19]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d08d      	beq.n	8001468 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	441a      	add	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800155c:	2b00      	cmp	r3, #0
 800155e:	d002      	beq.n	8001566 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 f815 	bl	8001590 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69fa      	ldr	r2, [r7, #28]
 800156a:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800156c:	7cfb      	ldrb	r3, [r7, #19]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d108      	bne.n	8001584 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001580:	2300      	movs	r3, #0
 8001582:	e000      	b.n	8001586 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
}
 8001586:	4618      	mov	r0, r3
 8001588:	3720      	adds	r7, #32
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b088      	sub	sp, #32
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001598:	2300      	movs	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 800159c:	2301      	movs	r3, #1
 800159e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80015a4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69fa      	ldr	r2, [r7, #28]
 80015aa:	3212      	adds	r2, #18
 80015ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80015b6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80015b8:	e042      	b.n	8001640 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d112      	bne.n	80015e8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80015c2:	f107 0308 	add.w	r3, r7, #8
 80015c6:	4618      	mov	r0, r3
 80015c8:	f002 ff6a 	bl	80044a0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d102      	bne.n	80015d8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	74fb      	strb	r3, [r7, #19]
 80015d6:	e007      	b.n	80015e8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	461a      	mov	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	461a      	mov	r2, r3
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80015e8:	7cfb      	ldrb	r3, [r7, #19]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d028      	beq.n	8001640 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d106      	bne.n	8001604 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	695a      	ldr	r2, [r3, #20]
 80015fa:	4b26      	ldr	r3, [pc, #152]	@ (8001694 <ETH_UpdateDescriptor+0x104>)
 80015fc:	4313      	orrs	r3, r2
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	6053      	str	r3, [r2, #4]
 8001602:	e005      	b.n	8001610 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	3301      	adds	r3, #1
 8001620:	61fb      	str	r3, [r7, #28]
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	2b03      	cmp	r3, #3
 8001626:	d902      	bls.n	800162e <ETH_UpdateDescriptor+0x9e>
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	3b04      	subs	r3, #4
 800162c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69fa      	ldr	r2, [r7, #28]
 8001632:	3212      	adds	r2, #18
 8001634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001638:	617b      	str	r3, [r7, #20]
      desccount--;
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	3b01      	subs	r3, #1
 800163e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d002      	beq.n	800164c <ETH_UpdateDescriptor+0xbc>
 8001646:	7cfb      	ldrb	r3, [r7, #19]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1b6      	bne.n	80015ba <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	429a      	cmp	r2, r3
 8001654:	d01a      	beq.n	800168c <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3301      	adds	r3, #1
 800165a:	f003 0303 	and.w	r3, r3, #3
 800165e:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001660:	f3bf 8f5f 	dmb	sy
}
 8001664:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6919      	ldr	r1, [r3, #16]
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	4613      	mov	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	18ca      	adds	r2, r1, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800167e:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69fa      	ldr	r2, [r7, #28]
 8001684:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 800168c:	bf00      	nop
 800168e:	3720      	adds	r7, #32
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	80004000 	.word	0x80004000

08001698 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3318      	adds	r3, #24
 80016a4:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016aa:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b0:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80016b2:	2301      	movs	r3, #1
 80016b4:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80016b6:	e047      	b.n	8001748 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 80016b8:	2301      	movs	r3, #1
 80016ba:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	3b01      	subs	r3, #1
 80016c0:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	3304      	adds	r3, #4
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d10a      	bne.n	80016e8 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	3301      	adds	r3, #1
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	2b03      	cmp	r3, #3
 80016dc:	d902      	bls.n	80016e4 <HAL_ETH_ReleaseTxPacket+0x4c>
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	3b04      	subs	r3, #4
 80016e2:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80016e8:	7bbb      	ldrb	r3, [r7, #14]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d02c      	beq.n	8001748 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68d9      	ldr	r1, [r3, #12]
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	440b      	add	r3, r1
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	db1f      	blt.n	8001744 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001704:	68ba      	ldr	r2, [r7, #8]
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	3304      	adds	r3, #4
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	4618      	mov	r0, r3
 8001712:	f002 ff37 	bl	8004584 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	3304      	adds	r3, #4
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	2200      	movs	r2, #0
 8001722:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	3301      	adds	r3, #1
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	2b03      	cmp	r3, #3
 800172e:	d902      	bls.n	8001736 <HAL_ETH_ReleaseTxPacket+0x9e>
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	3b04      	subs	r3, #4
 8001734:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001742:	e001      	b.n	8001748 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001744:	2300      	movs	r3, #0
 8001746:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d002      	beq.n	8001754 <HAL_ETH_ReleaseTxPacket+0xbc>
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1b1      	bne.n	80016b8 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800176e:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8001788:	4b4b      	ldr	r3, [pc, #300]	@ (80018b8 <HAL_ETH_IRQHandler+0x158>)
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001794:	2b00      	cmp	r3, #0
 8001796:	d00e      	beq.n	80017b6 <HAL_ETH_IRQHandler+0x56>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d009      	beq.n	80017b6 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017aa:	461a      	mov	r2, r3
 80017ac:	4b43      	ldr	r3, [pc, #268]	@ (80018bc <HAL_ETH_IRQHandler+0x15c>)
 80017ae:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f002 f9ed 	bl	8003b90 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00f      	beq.n	80017e0 <HAL_ETH_IRQHandler+0x80>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00a      	beq.n	80017e0 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017d2:	461a      	mov	r2, r3
 80017d4:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80017d8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f002 f9e8 	bl	8003bb0 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d042      	beq.n	8001870 <HAL_ETH_IRQHandler+0x110>
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d03d      	beq.n	8001870 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017fa:	f043 0208 	orr.w	r2, r3, #8
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d01a      	beq.n	8001844 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001816:	695a      	ldr	r2, [r3, #20]
 8001818:	4b29      	ldr	r3, [pc, #164]	@ (80018c0 <HAL_ETH_IRQHandler+0x160>)
 800181a:	4013      	ands	r3, r2
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8001834:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001838:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	22e0      	movs	r2, #224	@ 0xe0
 800183e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001842:	e012      	b.n	800186a <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800184c:	695a      	ldr	r2, [r3, #20]
 800184e:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001852:	4013      	ands	r3, r2
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001862:	461a      	mov	r2, r3
 8001864:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001868:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f002 f9b0 	bl	8003bd0 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f003 0308 	and.w	r3, r3, #8
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00e      	beq.n	8001898 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001880:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 f81a 	bl	80018c4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d006      	beq.n	80018b0 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80018a2:	4b05      	ldr	r3, [pc, #20]	@ (80018b8 <HAL_ETH_IRQHandler+0x158>)
 80018a4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80018a8:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 f814 	bl	80018d8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80018b0:	bf00      	nop
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40013c00 	.word	0x40013c00
 80018bc:	00010040 	.word	0x00010040
 80018c0:	007e2000 	.word	0x007e2000

080018c4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
 80018f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f003 031c 	and.w	r3, r3, #28
 8001908:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	02db      	lsls	r3, r3, #11
 800190e:	b29b      	uxth	r3, r3
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	4313      	orrs	r3, r2
 8001914:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	019b      	lsls	r3, r3, #6
 800191a:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	4313      	orrs	r3, r2
 8001922:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	f023 0302 	bic.w	r3, r3, #2
 800192a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800193c:	f7ff fa64 	bl	8000e08 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001942:	e00d      	b.n	8001960 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001944:	f7ff fa60 	bl	8000e08 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001952:	d301      	bcc.n	8001958 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e010      	b.n	800197a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1ec      	bne.n	8001944 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	b29b      	uxth	r3, r3
 8001972:	461a      	mov	r2, r3
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b086      	sub	sp, #24
 8001986:	af00      	add	r7, sp, #0
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
 800198e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f003 031c 	and.w	r3, r3, #28
 800199e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	02db      	lsls	r3, r3, #11
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	019b      	lsls	r3, r3, #6
 80019b0:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019dc:	f7ff fa14 	bl	8000e08 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019e2:	e00d      	b.n	8001a00 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80019e4:	f7ff fa10 	bl	8000e08 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019f2:	d301      	bcc.n	80019f8 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e009      	b.n	8001a0c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1ec      	bne.n	80019e4 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e0e6      	b.n	8001bf6 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0310 	and.w	r3, r3, #16
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	bf14      	ite	ne
 8001a36:	2301      	movne	r3, #1
 8001a38:	2300      	moveq	r3, #0
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	bf0c      	ite	eq
 8001a60:	2301      	moveq	r3, #1
 8001a62:	2300      	movne	r3, #0
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	461a      	mov	r2, r3
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	bf14      	ite	ne
 8001a7c:	2301      	movne	r3, #1
 8001a7e:	2300      	moveq	r3, #0
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	bf0c      	ite	eq
 8001a96:	2301      	moveq	r3, #1
 8001a98:	2300      	movne	r3, #0
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	bf14      	ite	ne
 8001ab0:	2301      	movne	r3, #1
 8001ab2:	2300      	moveq	r3, #0
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	bf0c      	ite	eq
 8001ae6:	2301      	moveq	r3, #1
 8001ae8:	2300      	movne	r3, #0
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	461a      	mov	r2, r3
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	bf0c      	ite	eq
 8001b00:	2301      	moveq	r3, #1
 8001b02:	2300      	movne	r3, #0
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	461a      	mov	r2, r3
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	bf14      	ite	ne
 8001b1a:	2301      	movne	r3, #1
 8001b1c:	2300      	moveq	r3, #0
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	461a      	mov	r2, r3
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	bf14      	ite	ne
 8001b42:	2301      	movne	r3, #1
 8001b44:	2300      	moveq	r3, #0
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	461a      	mov	r2, r3
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	bf14      	ite	ne
 8001b5c:	2301      	movne	r3, #1
 8001b5e:	2300      	moveq	r3, #0
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	461a      	mov	r2, r3
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	bf14      	ite	ne
 8001b76:	2301      	movne	r3, #1
 8001b78:	2300      	moveq	r3, #0
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	bf0c      	ite	eq
 8001b92:	2301      	moveq	r3, #1
 8001b94:	2300      	movne	r3, #0
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	461a      	mov	r2, r3
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	0c1b      	lsrs	r3, r3, #16
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	bf14      	ite	ne
 8001bca:	2301      	movne	r3, #1
 8001bcc:	2300      	moveq	r3, #0
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	bf14      	ite	ne
 8001be6:	2301      	movne	r3, #1
 8001be8:	2300      	moveq	r3, #0
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e00b      	b.n	8001c2e <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c1c:	2b10      	cmp	r3, #16
 8001c1e:	d105      	bne.n	8001c2c <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001c20:	6839      	ldr	r1, [r7, #0]
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f88a 	bl	8001d3c <ETH_SetMACConfig>

    return HAL_OK;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	e000      	b.n	8001c2e <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
  }
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f023 031c 	bic.w	r3, r3, #28
 8001c4e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001c50:	f001 fb0a 	bl	8003268 <HAL_RCC_GetHCLKFreq>
 8001c54:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	4a14      	ldr	r2, [pc, #80]	@ (8001cac <HAL_ETH_SetMDIOClockRange+0x74>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d804      	bhi.n	8001c68 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f043 0308 	orr.w	r3, r3, #8
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	e019      	b.n	8001c9c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	4a11      	ldr	r2, [pc, #68]	@ (8001cb0 <HAL_ETH_SetMDIOClockRange+0x78>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d204      	bcs.n	8001c7a <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f043 030c 	orr.w	r3, r3, #12
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	e010      	b.n	8001c9c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb4 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d90c      	bls.n	8001c9c <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	4a0c      	ldr	r2, [pc, #48]	@ (8001cb8 <HAL_ETH_SetMDIOClockRange+0x80>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d804      	bhi.n	8001c94 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f043 0304 	orr.w	r3, r3, #4
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	e003      	b.n	8001c9c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f043 0310 	orr.w	r3, r3, #16
 8001c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
}
 8001ca4:	bf00      	nop
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	02160ebf 	.word	0x02160ebf
 8001cb0:	03938700 	.word	0x03938700
 8001cb4:	05f5e0ff 	.word	0x05f5e0ff
 8001cb8:	08f0d17f 	.word	0x08f0d17f

08001cbc <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6812      	ldr	r2, [r2, #0]
 8001d0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d0e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d12:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d20:	2001      	movs	r0, #1
 8001d22:	f7ff f87d 	bl	8000e20 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d30:	6193      	str	r3, [r2, #24]
}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	4b53      	ldr	r3, [pc, #332]	@ (8001ea0 <ETH_SetMACConfig+0x164>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	7b9b      	ldrb	r3, [r3, #14]
 8001d5a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	7c12      	ldrb	r2, [r2, #16]
 8001d60:	2a00      	cmp	r2, #0
 8001d62:	d102      	bne.n	8001d6a <ETH_SetMACConfig+0x2e>
 8001d64:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001d68:	e000      	b.n	8001d6c <ETH_SetMACConfig+0x30>
 8001d6a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001d6c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	7c52      	ldrb	r2, [r2, #17]
 8001d72:	2a00      	cmp	r2, #0
 8001d74:	d102      	bne.n	8001d7c <ETH_SetMACConfig+0x40>
 8001d76:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001d7a:	e000      	b.n	8001d7e <ETH_SetMACConfig+0x42>
 8001d7c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d7e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001d84:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	7fdb      	ldrb	r3, [r3, #31]
 8001d8a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001d8c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001d92:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	7f92      	ldrb	r2, [r2, #30]
 8001d98:	2a00      	cmp	r2, #0
 8001d9a:	d102      	bne.n	8001da2 <ETH_SetMACConfig+0x66>
 8001d9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001da0:	e000      	b.n	8001da4 <ETH_SetMACConfig+0x68>
 8001da2:	2200      	movs	r2, #0
                        macconf->Speed |
 8001da4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	7f1b      	ldrb	r3, [r3, #28]
 8001daa:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001dac:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001db2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	791b      	ldrb	r3, [r3, #4]
 8001db8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001dba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001dc2:	2a00      	cmp	r2, #0
 8001dc4:	d102      	bne.n	8001dcc <ETH_SetMACConfig+0x90>
 8001dc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dca:	e000      	b.n	8001dce <ETH_SetMACConfig+0x92>
 8001dcc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001dce:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	7bdb      	ldrb	r3, [r3, #15]
 8001dd4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001dd6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ddc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001de4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001de6:	4313      	orrs	r3, r2
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dfe:	2001      	movs	r0, #1
 8001e00:	f7ff f80e 	bl	8000e20 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e22:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001e2a:	2a00      	cmp	r2, #0
 8001e2c:	d101      	bne.n	8001e32 <ETH_SetMACConfig+0xf6>
 8001e2e:	2280      	movs	r2, #128	@ 0x80
 8001e30:	e000      	b.n	8001e34 <ETH_SetMACConfig+0xf8>
 8001e32:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e34:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001e3a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001e42:	2a01      	cmp	r2, #1
 8001e44:	d101      	bne.n	8001e4a <ETH_SetMACConfig+0x10e>
 8001e46:	2208      	movs	r2, #8
 8001e48:	e000      	b.n	8001e4c <ETH_SetMACConfig+0x110>
 8001e4a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001e4c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001e54:	2a01      	cmp	r2, #1
 8001e56:	d101      	bne.n	8001e5c <ETH_SetMACConfig+0x120>
 8001e58:	2204      	movs	r2, #4
 8001e5a:	e000      	b.n	8001e5e <ETH_SetMACConfig+0x122>
 8001e5c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e5e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001e66:	2a01      	cmp	r2, #1
 8001e68:	d101      	bne.n	8001e6e <ETH_SetMACConfig+0x132>
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	e000      	b.n	8001e70 <ETH_SetMACConfig+0x134>
 8001e6e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e70:	4313      	orrs	r3, r2
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e88:	2001      	movs	r0, #1
 8001e8a:	f7fe ffc9 	bl	8000e20 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	619a      	str	r2, [r3, #24]
}
 8001e96:	bf00      	nop
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	fd20810f 	.word	0xfd20810f

08001ea4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	4b3d      	ldr	r3, [pc, #244]	@ (8001fb4 <ETH_SetDMAConfig+0x110>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	7b1b      	ldrb	r3, [r3, #12]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d102      	bne.n	8001ed0 <ETH_SetDMAConfig+0x2c>
 8001eca:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ece:	e000      	b.n	8001ed2 <ETH_SetDMAConfig+0x2e>
 8001ed0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	7b5b      	ldrb	r3, [r3, #13]
 8001ed6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ed8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	7f52      	ldrb	r2, [r2, #29]
 8001ede:	2a00      	cmp	r2, #0
 8001ee0:	d102      	bne.n	8001ee8 <ETH_SetDMAConfig+0x44>
 8001ee2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001ee6:	e000      	b.n	8001eea <ETH_SetDMAConfig+0x46>
 8001ee8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001eea:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	7b9b      	ldrb	r3, [r3, #14]
 8001ef0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ef2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001ef8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	7f1b      	ldrb	r3, [r3, #28]
 8001efe:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001f00:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	7f9b      	ldrb	r3, [r3, #30]
 8001f06:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001f08:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f0e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f16:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f28:	461a      	mov	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f3a:	2001      	movs	r0, #1
 8001f3c:	f7fe ff70 	bl	8000e20 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f48:	461a      	mov	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	791b      	ldrb	r3, [r3, #4]
 8001f52:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f58:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001f5e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f64:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f6c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001f6e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f74:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001f76:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001f7c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f86:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f8a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f98:	2001      	movs	r0, #1
 8001f9a:	f7fe ff41 	bl	8000e20 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6013      	str	r3, [r2, #0]
}
 8001fac:	bf00      	nop
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	f8de3f23 	.word	0xf8de3f23

08001fb8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b0a6      	sub	sp, #152	@ 0x98
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001ffe:	2300      	movs	r3, #0
 8002000:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002004:	2300      	movs	r3, #0
 8002006:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002008:	2300      	movs	r3, #0
 800200a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800200e:	2300      	movs	r3, #0
 8002010:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002014:	2300      	movs	r3, #0
 8002016:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800201a:	2300      	movs	r3, #0
 800201c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002020:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002024:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002026:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800202a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800202c:	2300      	movs	r3, #0
 800202e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002032:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002036:	4619      	mov	r1, r3
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff fe7f 	bl	8001d3c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800203e:	2301      	movs	r3, #1
 8002040:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002042:	2301      	movs	r3, #1
 8002044:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002046:	2301      	movs	r3, #1
 8002048:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800204c:	2301      	movs	r3, #1
 800204e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002050:	2300      	movs	r3, #0
 8002052:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002054:	2300      	movs	r3, #0
 8002056:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800205a:	2300      	movs	r3, #0
 800205c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002060:	2300      	movs	r3, #0
 8002062:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002064:	2301      	movs	r3, #1
 8002066:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800206a:	2301      	movs	r3, #1
 800206c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800206e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002072:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002074:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002078:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800207a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800207e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002080:	2301      	movs	r3, #1
 8002082:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002086:	2300      	movs	r3, #0
 8002088:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800208a:	2300      	movs	r3, #0
 800208c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800208e:	f107 0308 	add.w	r3, r7, #8
 8002092:	4619      	mov	r1, r3
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff ff05 	bl	8001ea4 <ETH_SetDMAConfig>
}
 800209a:	bf00      	nop
 800209c:	3798      	adds	r7, #152	@ 0x98
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3305      	adds	r3, #5
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	021b      	lsls	r3, r3, #8
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	3204      	adds	r2, #4
 80020bc:	7812      	ldrb	r2, [r2, #0]
 80020be:	4313      	orrs	r3, r2
 80020c0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	4b11      	ldr	r3, [pc, #68]	@ (800210c <ETH_MACAddressConfig+0x68>)
 80020c6:	4413      	add	r3, r2
 80020c8:	461a      	mov	r2, r3
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	3303      	adds	r3, #3
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	061a      	lsls	r2, r3, #24
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3302      	adds	r3, #2
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	041b      	lsls	r3, r3, #16
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3301      	adds	r3, #1
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	021b      	lsls	r3, r3, #8
 80020e8:	4313      	orrs	r3, r2
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	7812      	ldrb	r2, [r2, #0]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <ETH_MACAddressConfig+0x6c>)
 80020f6:	4413      	add	r3, r2
 80020f8:	461a      	mov	r2, r3
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	6013      	str	r3, [r2, #0]
}
 80020fe:	bf00      	nop
 8002100:	371c      	adds	r7, #28
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	40028040 	.word	0x40028040
 8002110:	40028044 	.word	0x40028044

08002114 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800211c:	2300      	movs	r3, #0
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	e03e      	b.n	80021a0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68d9      	ldr	r1, [r3, #12]
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	440b      	add	r3, r1
 8002132:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2200      	movs	r2, #0
 800213e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2200      	movs	r2, #0
 8002144:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2200      	movs	r2, #0
 800214a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800214c:	68b9      	ldr	r1, [r7, #8]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	3206      	adds	r2, #6
 8002154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2b02      	cmp	r3, #2
 8002168:	d80c      	bhi.n	8002184 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68d9      	ldr	r1, [r3, #12]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	1c5a      	adds	r2, r3, #1
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	440b      	add	r3, r1
 800217c:	461a      	mov	r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	e004      	b.n	800218e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	461a      	mov	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	3301      	adds	r3, #1
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	d9bd      	bls.n	8002122 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021b8:	611a      	str	r2, [r3, #16]
}
 80021ba:	bf00      	nop
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b085      	sub	sp, #20
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	e048      	b.n	8002266 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6919      	ldr	r1, [r3, #16]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	440b      	add	r3, r1
 80021e4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	2200      	movs	r2, #0
 80021f0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	2200      	movs	r2, #0
 80021f6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	2200      	movs	r2, #0
 80021fc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	2200      	movs	r2, #0
 8002202:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2200      	movs	r2, #0
 8002208:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002210:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800222a:	68b9      	ldr	r1, [r7, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	3212      	adds	r2, #18
 8002232:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2b02      	cmp	r3, #2
 800223a:	d80c      	bhi.n	8002256 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6919      	ldr	r1, [r3, #16]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	440b      	add	r3, r1
 800224e:	461a      	mov	r2, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	60da      	str	r2, [r3, #12]
 8002254:	e004      	b.n	8002260 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	461a      	mov	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	3301      	adds	r3, #1
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2b03      	cmp	r3, #3
 800226a:	d9b3      	bls.n	80021d4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691a      	ldr	r2, [r3, #16]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002296:	60da      	str	r2, [r3, #12]
}
 8002298:	bf00      	nop
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b091      	sub	sp, #68	@ 0x44
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	3318      	adds	r3, #24
 80022b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80022b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80022bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ce:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80022da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80022e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80022e6:	d007      	beq.n	80022f8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80022e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022ec:	3304      	adds	r3, #4
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80022f8:	2302      	movs	r3, #2
 80022fa:	e111      	b.n	8002520 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 80022fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022fe:	3301      	adds	r3, #1
 8002300:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800230a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800230c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	4b86      	ldr	r3, [pc, #536]	@ (800252c <ETH_Prepare_Tx_Descriptors+0x288>)
 8002312:	4013      	ands	r3, r2
 8002314:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002316:	6852      	ldr	r2, [r2, #4]
 8002318:	431a      	orrs	r2, r3
 800231a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800231c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d008      	beq.n	800233c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800232a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	431a      	orrs	r2, r3
 8002338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800233a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0320 	and.w	r3, r3, #32
 8002344:	2b00      	cmp	r3, #0
 8002346:	d008      	beq.n	800235a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	431a      	orrs	r2, r3
 8002356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002358:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	2b00      	cmp	r3, #0
 8002364:	d005      	beq.n	8002372 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800236e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002370:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800237a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800237c:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800237e:	e082      	b.n	8002486 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800238a:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d006      	beq.n	80023a0 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800239a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	e005      	b.n	80023ac <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80023a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80023a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023aa:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80023ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023ae:	3301      	adds	r3, #1
 80023b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d902      	bls.n	80023be <ETH_Prepare_Tx_Descriptors+0x11a>
 80023b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023ba:	3b04      	subs	r3, #4
 80023bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80023be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80023c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80023c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80023d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80023d4:	d007      	beq.n	80023e6 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80023d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023da:	3304      	adds	r3, #4
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d029      	beq.n	800243a <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80023ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80023ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80023f4:	2300      	movs	r3, #0
 80023f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023f8:	e019      	b.n	800242e <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 80023fa:	f3bf 8f5f 	dmb	sy
}
 80023fe:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800240a:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800240c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800240e:	3301      	adds	r3, #1
 8002410:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002414:	2b03      	cmp	r3, #3
 8002416:	d902      	bls.n	800241e <ETH_Prepare_Tx_Descriptors+0x17a>
 8002418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800241a:	3b04      	subs	r3, #4
 800241c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800241e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002420:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002426:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800242a:	3301      	adds	r3, #1
 800242c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800242e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002432:	429a      	cmp	r2, r3
 8002434:	d3e1      	bcc.n	80023fa <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8002436:	2302      	movs	r3, #2
 8002438:	e072      	b.n	8002520 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800243a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002444:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002448:	3301      	adds	r3, #1
 800244a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800244c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	461a      	mov	r2, r3
 8002458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245a:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800245c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	4b32      	ldr	r3, [pc, #200]	@ (800252c <ETH_Prepare_Tx_Descriptors+0x288>)
 8002462:	4013      	ands	r3, r2
 8002464:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002466:	6852      	ldr	r2, [r2, #4]
 8002468:	431a      	orrs	r2, r3
 800246a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246c:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800246e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002470:	3301      	adds	r3, #1
 8002472:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002474:	f3bf 8f5f 	dmb	sy
}
 8002478:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800247a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002484:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	2b00      	cmp	r3, #0
 800248c:	f47f af78 	bne.w	8002380 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d006      	beq.n	80024a4 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800249e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	e005      	b.n	80024b0 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80024ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ae:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80024b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80024b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ba:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80024bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024be:	6a3a      	ldr	r2, [r7, #32]
 80024c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c4:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80024c6:	f3bf 8f5f 	dmb	sy
}
 80024ca:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80024cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80024d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d6:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80024d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80024de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024e0:	3304      	adds	r3, #4
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80024e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80024ec:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024ee:	f3ef 8310 	mrs	r3, PRIMASK
 80024f2:	613b      	str	r3, [r7, #16]
  return(result);
 80024f4:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80024f6:	61fb      	str	r3, [r7, #28]
 80024f8:	2301      	movs	r3, #1
 80024fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f383 8810 	msr	PRIMASK, r3
}
 8002502:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002506:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800250a:	4413      	add	r3, r2
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002510:	629a      	str	r2, [r3, #40]	@ 0x28
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	f383 8810 	msr	PRIMASK, r3
}
 800251c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3744      	adds	r7, #68	@ 0x44
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	ffffe000 	.word	0xffffe000

08002530 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002530:	b480      	push	{r7}
 8002532:	b089      	sub	sp, #36	@ 0x24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002542:	2300      	movs	r3, #0
 8002544:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002546:	2300      	movs	r3, #0
 8002548:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800254a:	2300      	movs	r3, #0
 800254c:	61fb      	str	r3, [r7, #28]
 800254e:	e175      	b.n	800283c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002550:	2201      	movs	r2, #1
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	4013      	ands	r3, r2
 8002562:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	429a      	cmp	r2, r3
 800256a:	f040 8164 	bne.w	8002836 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	2b01      	cmp	r3, #1
 8002578:	d005      	beq.n	8002586 <HAL_GPIO_Init+0x56>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d130      	bne.n	80025e8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	2203      	movs	r2, #3
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43db      	mvns	r3, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4013      	ands	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025bc:	2201      	movs	r2, #1
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	091b      	lsrs	r3, r3, #4
 80025d2:	f003 0201 	and.w	r2, r3, #1
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 0303 	and.w	r3, r3, #3
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d017      	beq.n	8002624 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	2203      	movs	r2, #3
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0303 	and.w	r3, r3, #3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d123      	bne.n	8002678 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	08da      	lsrs	r2, r3, #3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3208      	adds	r2, #8
 8002638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800263c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	220f      	movs	r2, #15
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	08da      	lsrs	r2, r3, #3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3208      	adds	r2, #8
 8002672:	69b9      	ldr	r1, [r7, #24]
 8002674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	2203      	movs	r2, #3
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 0203 	and.w	r2, r3, #3
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 80be 	beq.w	8002836 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ba:	4b66      	ldr	r3, [pc, #408]	@ (8002854 <HAL_GPIO_Init+0x324>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026be:	4a65      	ldr	r2, [pc, #404]	@ (8002854 <HAL_GPIO_Init+0x324>)
 80026c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026c6:	4b63      	ldr	r3, [pc, #396]	@ (8002854 <HAL_GPIO_Init+0x324>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80026d2:	4a61      	ldr	r2, [pc, #388]	@ (8002858 <HAL_GPIO_Init+0x328>)
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	089b      	lsrs	r3, r3, #2
 80026d8:	3302      	adds	r3, #2
 80026da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	220f      	movs	r2, #15
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4013      	ands	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a58      	ldr	r2, [pc, #352]	@ (800285c <HAL_GPIO_Init+0x32c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d037      	beq.n	800276e <HAL_GPIO_Init+0x23e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a57      	ldr	r2, [pc, #348]	@ (8002860 <HAL_GPIO_Init+0x330>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d031      	beq.n	800276a <HAL_GPIO_Init+0x23a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a56      	ldr	r2, [pc, #344]	@ (8002864 <HAL_GPIO_Init+0x334>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d02b      	beq.n	8002766 <HAL_GPIO_Init+0x236>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a55      	ldr	r2, [pc, #340]	@ (8002868 <HAL_GPIO_Init+0x338>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d025      	beq.n	8002762 <HAL_GPIO_Init+0x232>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a54      	ldr	r2, [pc, #336]	@ (800286c <HAL_GPIO_Init+0x33c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d01f      	beq.n	800275e <HAL_GPIO_Init+0x22e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a53      	ldr	r2, [pc, #332]	@ (8002870 <HAL_GPIO_Init+0x340>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d019      	beq.n	800275a <HAL_GPIO_Init+0x22a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a52      	ldr	r2, [pc, #328]	@ (8002874 <HAL_GPIO_Init+0x344>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d013      	beq.n	8002756 <HAL_GPIO_Init+0x226>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a51      	ldr	r2, [pc, #324]	@ (8002878 <HAL_GPIO_Init+0x348>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d00d      	beq.n	8002752 <HAL_GPIO_Init+0x222>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a50      	ldr	r2, [pc, #320]	@ (800287c <HAL_GPIO_Init+0x34c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d007      	beq.n	800274e <HAL_GPIO_Init+0x21e>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a4f      	ldr	r2, [pc, #316]	@ (8002880 <HAL_GPIO_Init+0x350>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d101      	bne.n	800274a <HAL_GPIO_Init+0x21a>
 8002746:	2309      	movs	r3, #9
 8002748:	e012      	b.n	8002770 <HAL_GPIO_Init+0x240>
 800274a:	230a      	movs	r3, #10
 800274c:	e010      	b.n	8002770 <HAL_GPIO_Init+0x240>
 800274e:	2308      	movs	r3, #8
 8002750:	e00e      	b.n	8002770 <HAL_GPIO_Init+0x240>
 8002752:	2307      	movs	r3, #7
 8002754:	e00c      	b.n	8002770 <HAL_GPIO_Init+0x240>
 8002756:	2306      	movs	r3, #6
 8002758:	e00a      	b.n	8002770 <HAL_GPIO_Init+0x240>
 800275a:	2305      	movs	r3, #5
 800275c:	e008      	b.n	8002770 <HAL_GPIO_Init+0x240>
 800275e:	2304      	movs	r3, #4
 8002760:	e006      	b.n	8002770 <HAL_GPIO_Init+0x240>
 8002762:	2303      	movs	r3, #3
 8002764:	e004      	b.n	8002770 <HAL_GPIO_Init+0x240>
 8002766:	2302      	movs	r3, #2
 8002768:	e002      	b.n	8002770 <HAL_GPIO_Init+0x240>
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <HAL_GPIO_Init+0x240>
 800276e:	2300      	movs	r3, #0
 8002770:	69fa      	ldr	r2, [r7, #28]
 8002772:	f002 0203 	and.w	r2, r2, #3
 8002776:	0092      	lsls	r2, r2, #2
 8002778:	4093      	lsls	r3, r2
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4313      	orrs	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002780:	4935      	ldr	r1, [pc, #212]	@ (8002858 <HAL_GPIO_Init+0x328>)
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	089b      	lsrs	r3, r3, #2
 8002786:	3302      	adds	r3, #2
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800278e:	4b3d      	ldr	r3, [pc, #244]	@ (8002884 <HAL_GPIO_Init+0x354>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	43db      	mvns	r3, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027b2:	4a34      	ldr	r2, [pc, #208]	@ (8002884 <HAL_GPIO_Init+0x354>)
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027b8:	4b32      	ldr	r3, [pc, #200]	@ (8002884 <HAL_GPIO_Init+0x354>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027dc:	4a29      	ldr	r2, [pc, #164]	@ (8002884 <HAL_GPIO_Init+0x354>)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027e2:	4b28      	ldr	r3, [pc, #160]	@ (8002884 <HAL_GPIO_Init+0x354>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	43db      	mvns	r3, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4013      	ands	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002806:	4a1f      	ldr	r2, [pc, #124]	@ (8002884 <HAL_GPIO_Init+0x354>)
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800280c:	4b1d      	ldr	r3, [pc, #116]	@ (8002884 <HAL_GPIO_Init+0x354>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002830:	4a14      	ldr	r2, [pc, #80]	@ (8002884 <HAL_GPIO_Init+0x354>)
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	3301      	adds	r3, #1
 800283a:	61fb      	str	r3, [r7, #28]
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	2b0f      	cmp	r3, #15
 8002840:	f67f ae86 	bls.w	8002550 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002844:	bf00      	nop
 8002846:	bf00      	nop
 8002848:	3724      	adds	r7, #36	@ 0x24
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	40023800 	.word	0x40023800
 8002858:	40013800 	.word	0x40013800
 800285c:	40020000 	.word	0x40020000
 8002860:	40020400 	.word	0x40020400
 8002864:	40020800 	.word	0x40020800
 8002868:	40020c00 	.word	0x40020c00
 800286c:	40021000 	.word	0x40021000
 8002870:	40021400 	.word	0x40021400
 8002874:	40021800 	.word	0x40021800
 8002878:	40021c00 	.word	0x40021c00
 800287c:	40022000 	.word	0x40022000
 8002880:	40022400 	.word	0x40022400
 8002884:	40013c00 	.word	0x40013c00

08002888 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800288e:	2300      	movs	r3, #0
 8002890:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002892:	4b23      	ldr	r3, [pc, #140]	@ (8002920 <HAL_PWREx_EnableOverDrive+0x98>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	4a22      	ldr	r2, [pc, #136]	@ (8002920 <HAL_PWREx_EnableOverDrive+0x98>)
 8002898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800289c:	6413      	str	r3, [r2, #64]	@ 0x40
 800289e:	4b20      	ldr	r3, [pc, #128]	@ (8002920 <HAL_PWREx_EnableOverDrive+0x98>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80028aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002924 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a1d      	ldr	r2, [pc, #116]	@ (8002924 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028b4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028b6:	f7fe faa7 	bl	8000e08 <HAL_GetTick>
 80028ba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028bc:	e009      	b.n	80028d2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028be:	f7fe faa3 	bl	8000e08 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80028cc:	d901      	bls.n	80028d2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e022      	b.n	8002918 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028d2:	4b14      	ldr	r3, [pc, #80]	@ (8002924 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028de:	d1ee      	bne.n	80028be <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80028e0:	4b10      	ldr	r3, [pc, #64]	@ (8002924 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a0f      	ldr	r2, [pc, #60]	@ (8002924 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028ec:	f7fe fa8c 	bl	8000e08 <HAL_GetTick>
 80028f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028f2:	e009      	b.n	8002908 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028f4:	f7fe fa88 	bl	8000e08 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002902:	d901      	bls.n	8002908 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e007      	b.n	8002918 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002908:	4b06      	ldr	r3, [pc, #24]	@ (8002924 <HAL_PWREx_EnableOverDrive+0x9c>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002910:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002914:	d1ee      	bne.n	80028f4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40023800 	.word	0x40023800
 8002924:	40007000 	.word	0x40007000

08002928 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002930:	2300      	movs	r3, #0
 8002932:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e29b      	b.n	8002e76 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 8087 	beq.w	8002a5a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800294c:	4b96      	ldr	r3, [pc, #600]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 030c 	and.w	r3, r3, #12
 8002954:	2b04      	cmp	r3, #4
 8002956:	d00c      	beq.n	8002972 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002958:	4b93      	ldr	r3, [pc, #588]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 030c 	and.w	r3, r3, #12
 8002960:	2b08      	cmp	r3, #8
 8002962:	d112      	bne.n	800298a <HAL_RCC_OscConfig+0x62>
 8002964:	4b90      	ldr	r3, [pc, #576]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800296c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002970:	d10b      	bne.n	800298a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002972:	4b8d      	ldr	r3, [pc, #564]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d06c      	beq.n	8002a58 <HAL_RCC_OscConfig+0x130>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d168      	bne.n	8002a58 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e275      	b.n	8002e76 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002992:	d106      	bne.n	80029a2 <HAL_RCC_OscConfig+0x7a>
 8002994:	4b84      	ldr	r3, [pc, #528]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a83      	ldr	r2, [pc, #524]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 800299a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	e02e      	b.n	8002a00 <HAL_RCC_OscConfig+0xd8>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10c      	bne.n	80029c4 <HAL_RCC_OscConfig+0x9c>
 80029aa:	4b7f      	ldr	r3, [pc, #508]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a7e      	ldr	r2, [pc, #504]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 80029b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	4b7c      	ldr	r3, [pc, #496]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a7b      	ldr	r2, [pc, #492]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 80029bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	e01d      	b.n	8002a00 <HAL_RCC_OscConfig+0xd8>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029cc:	d10c      	bne.n	80029e8 <HAL_RCC_OscConfig+0xc0>
 80029ce:	4b76      	ldr	r3, [pc, #472]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a75      	ldr	r2, [pc, #468]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 80029d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	4b73      	ldr	r3, [pc, #460]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a72      	ldr	r2, [pc, #456]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e00b      	b.n	8002a00 <HAL_RCC_OscConfig+0xd8>
 80029e8:	4b6f      	ldr	r3, [pc, #444]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a6e      	ldr	r2, [pc, #440]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 80029ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	4b6c      	ldr	r3, [pc, #432]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a6b      	ldr	r2, [pc, #428]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 80029fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d013      	beq.n	8002a30 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a08:	f7fe f9fe 	bl	8000e08 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a10:	f7fe f9fa 	bl	8000e08 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b64      	cmp	r3, #100	@ 0x64
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e229      	b.n	8002e76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a22:	4b61      	ldr	r3, [pc, #388]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0f0      	beq.n	8002a10 <HAL_RCC_OscConfig+0xe8>
 8002a2e:	e014      	b.n	8002a5a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a30:	f7fe f9ea 	bl	8000e08 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a38:	f7fe f9e6 	bl	8000e08 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b64      	cmp	r3, #100	@ 0x64
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e215      	b.n	8002e76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a4a:	4b57      	ldr	r3, [pc, #348]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x110>
 8002a56:	e000      	b.n	8002a5a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d069      	beq.n	8002b3a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a66:	4b50      	ldr	r3, [pc, #320]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 030c 	and.w	r3, r3, #12
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00b      	beq.n	8002a8a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a72:	4b4d      	ldr	r3, [pc, #308]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d11c      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x190>
 8002a7e:	4b4a      	ldr	r3, [pc, #296]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d116      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a8a:	4b47      	ldr	r3, [pc, #284]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d005      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x17a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d001      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e1e9      	b.n	8002e76 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa2:	4b41      	ldr	r3, [pc, #260]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	493d      	ldr	r1, [pc, #244]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab6:	e040      	b.n	8002b3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d023      	beq.n	8002b08 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ac0:	4b39      	ldr	r3, [pc, #228]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a38      	ldr	r2, [pc, #224]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002acc:	f7fe f99c 	bl	8000e08 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ad4:	f7fe f998 	bl	8000e08 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e1c7      	b.n	8002e76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae6:	4b30      	ldr	r3, [pc, #192]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0f0      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af2:	4b2d      	ldr	r3, [pc, #180]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	4929      	ldr	r1, [pc, #164]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	600b      	str	r3, [r1, #0]
 8002b06:	e018      	b.n	8002b3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b08:	4b27      	ldr	r3, [pc, #156]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a26      	ldr	r2, [pc, #152]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 8002b0e:	f023 0301 	bic.w	r3, r3, #1
 8002b12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b14:	f7fe f978 	bl	8000e08 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b1c:	f7fe f974 	bl	8000e08 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e1a3      	b.n	8002e76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f0      	bne.n	8002b1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d038      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d019      	beq.n	8002b82 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b4e:	4b16      	ldr	r3, [pc, #88]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 8002b50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b52:	4a15      	ldr	r2, [pc, #84]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 8002b54:	f043 0301 	orr.w	r3, r3, #1
 8002b58:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5a:	f7fe f955 	bl	8000e08 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b62:	f7fe f951 	bl	8000e08 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e180      	b.n	8002e76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b74:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 8002b76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0f0      	beq.n	8002b62 <HAL_RCC_OscConfig+0x23a>
 8002b80:	e01a      	b.n	8002bb8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b82:	4b09      	ldr	r3, [pc, #36]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 8002b84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b86:	4a08      	ldr	r2, [pc, #32]	@ (8002ba8 <HAL_RCC_OscConfig+0x280>)
 8002b88:	f023 0301 	bic.w	r3, r3, #1
 8002b8c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8e:	f7fe f93b 	bl	8000e08 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b94:	e00a      	b.n	8002bac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b96:	f7fe f937 	bl	8000e08 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d903      	bls.n	8002bac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e166      	b.n	8002e76 <HAL_RCC_OscConfig+0x54e>
 8002ba8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bac:	4b92      	ldr	r3, [pc, #584]	@ (8002df8 <HAL_RCC_OscConfig+0x4d0>)
 8002bae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1ee      	bne.n	8002b96 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 80a4 	beq.w	8002d0e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bc6:	4b8c      	ldr	r3, [pc, #560]	@ (8002df8 <HAL_RCC_OscConfig+0x4d0>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10d      	bne.n	8002bee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd2:	4b89      	ldr	r3, [pc, #548]	@ (8002df8 <HAL_RCC_OscConfig+0x4d0>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd6:	4a88      	ldr	r2, [pc, #544]	@ (8002df8 <HAL_RCC_OscConfig+0x4d0>)
 8002bd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bde:	4b86      	ldr	r3, [pc, #536]	@ (8002df8 <HAL_RCC_OscConfig+0x4d0>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be6:	60bb      	str	r3, [r7, #8]
 8002be8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bea:	2301      	movs	r3, #1
 8002bec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bee:	4b83      	ldr	r3, [pc, #524]	@ (8002dfc <HAL_RCC_OscConfig+0x4d4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d118      	bne.n	8002c2c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002bfa:	4b80      	ldr	r3, [pc, #512]	@ (8002dfc <HAL_RCC_OscConfig+0x4d4>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a7f      	ldr	r2, [pc, #508]	@ (8002dfc <HAL_RCC_OscConfig+0x4d4>)
 8002c00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c06:	f7fe f8ff 	bl	8000e08 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c0e:	f7fe f8fb 	bl	8000e08 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b64      	cmp	r3, #100	@ 0x64
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e12a      	b.n	8002e76 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c20:	4b76      	ldr	r3, [pc, #472]	@ (8002dfc <HAL_RCC_OscConfig+0x4d4>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0f0      	beq.n	8002c0e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d106      	bne.n	8002c42 <HAL_RCC_OscConfig+0x31a>
 8002c34:	4b70      	ldr	r3, [pc, #448]	@ (8002df8 <HAL_RCC_OscConfig+0x4d0>)
 8002c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c38:	4a6f      	ldr	r2, [pc, #444]	@ (8002df8 <HAL_RCC_OscConfig+0x4d0>)
 8002c3a:	f043 0301 	orr.w	r3, r3, #1
 8002c3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c40:	e02d      	b.n	8002c9e <HAL_RCC_OscConfig+0x376>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10c      	bne.n	8002c64 <HAL_RCC_OscConfig+0x33c>
 8002c4a:	4b6b      	ldr	r3, [pc, #428]	@ (8002df8 <HAL_RCC_OscConfig+0x4d0>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c4e:	4a6a      	ldr	r2, [pc, #424]	@ (8002df8 <HAL_RCC_OscConfig+0x4d0>)
 8002c50:	f023 0301 	bic.w	r3, r3, #1
 8002c54:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c56:	4b68      	ldr	r3, [pc, #416]	@ (8002df8 <HAL_RCC_OscConfig+0x4d0>)
 8002c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c5a:	4a67      	ldr	r2, [pc, #412]	@ (8002df8 <HAL_RCC_OscConfig+0x4d0>)
 8002c5c:	f023 0304 	bic.w	r3, r3, #4
 8002c60:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c62:	e01c      	b.n	8002c9e <HAL_RCC_OscConfig+0x376>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	2b05      	cmp	r3, #5
 8002c6a:	d10c      	bne.n	8002c86 <HAL_RCC_OscConfig+0x35e>
 8002c6c:	4b62      	ldr	r3, [pc, #392]	@ (8002df8 <HAL_RCC_OscConfig+0x4d0>)
 8002c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c70:	4a61      	ldr	r2, [pc, #388]	@ (8002df8 <HAL_RCC_OscConfig+0x4d0>)
 8002c72:	f043 0304 	orr.w	r3, r3, #4
 8002c76:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c78:	4b5f      	ldr	r3, [pc, #380]	@ (8002df8 <HAL_RCC_OscConfig+0x4d0>)
 8002c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c7c:	4a5e      	ldr	r2, [pc, #376]	@ (8002df8 <HAL_RCC_OscConfig+0x4d0>)
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c84:	e00b      	b.n	8002c9e <HAL_RCC_OscConfig+0x376>
 8002c86:	4b5c      	ldr	r3, [pc, #368]	@ (8002df8 <HAL_RCC_OscConfig+0x4d0>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c8a:	4a5b      	ldr	r2, [pc, #364]	@ (8002df8 <HAL_RCC_OscConfig+0x4d0>)
 8002c8c:	f023 0301 	bic.w	r3, r3, #1
 8002c90:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c92:	4b59      	ldr	r3, [pc, #356]	@ (8002df8 <HAL_RCC_OscConfig+0x4d0>)
 8002c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c96:	4a58      	ldr	r2, [pc, #352]	@ (8002df8 <HAL_RCC_OscConfig+0x4d0>)
 8002c98:	f023 0304 	bic.w	r3, r3, #4
 8002c9c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d015      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca6:	f7fe f8af 	bl	8000e08 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cac:	e00a      	b.n	8002cc4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cae:	f7fe f8ab 	bl	8000e08 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e0d8      	b.n	8002e76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc4:	4b4c      	ldr	r3, [pc, #304]	@ (8002df8 <HAL_RCC_OscConfig+0x4d0>)
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0ee      	beq.n	8002cae <HAL_RCC_OscConfig+0x386>
 8002cd0:	e014      	b.n	8002cfc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd2:	f7fe f899 	bl	8000e08 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd8:	e00a      	b.n	8002cf0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cda:	f7fe f895 	bl	8000e08 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e0c2      	b.n	8002e76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf0:	4b41      	ldr	r3, [pc, #260]	@ (8002df8 <HAL_RCC_OscConfig+0x4d0>)
 8002cf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1ee      	bne.n	8002cda <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cfc:	7dfb      	ldrb	r3, [r7, #23]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d105      	bne.n	8002d0e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d02:	4b3d      	ldr	r3, [pc, #244]	@ (8002df8 <HAL_RCC_OscConfig+0x4d0>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d06:	4a3c      	ldr	r2, [pc, #240]	@ (8002df8 <HAL_RCC_OscConfig+0x4d0>)
 8002d08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d0c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 80ae 	beq.w	8002e74 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d18:	4b37      	ldr	r3, [pc, #220]	@ (8002df8 <HAL_RCC_OscConfig+0x4d0>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 030c 	and.w	r3, r3, #12
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d06d      	beq.n	8002e00 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d14b      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d2c:	4b32      	ldr	r3, [pc, #200]	@ (8002df8 <HAL_RCC_OscConfig+0x4d0>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a31      	ldr	r2, [pc, #196]	@ (8002df8 <HAL_RCC_OscConfig+0x4d0>)
 8002d32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d38:	f7fe f866 	bl	8000e08 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d40:	f7fe f862 	bl	8000e08 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e091      	b.n	8002e76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d52:	4b29      	ldr	r3, [pc, #164]	@ (8002df8 <HAL_RCC_OscConfig+0x4d0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f0      	bne.n	8002d40 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69da      	ldr	r2, [r3, #28]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6c:	019b      	lsls	r3, r3, #6
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d74:	085b      	lsrs	r3, r3, #1
 8002d76:	3b01      	subs	r3, #1
 8002d78:	041b      	lsls	r3, r3, #16
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d80:	061b      	lsls	r3, r3, #24
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d88:	071b      	lsls	r3, r3, #28
 8002d8a:	491b      	ldr	r1, [pc, #108]	@ (8002df8 <HAL_RCC_OscConfig+0x4d0>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d90:	4b19      	ldr	r3, [pc, #100]	@ (8002df8 <HAL_RCC_OscConfig+0x4d0>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a18      	ldr	r2, [pc, #96]	@ (8002df8 <HAL_RCC_OscConfig+0x4d0>)
 8002d96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9c:	f7fe f834 	bl	8000e08 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da4:	f7fe f830 	bl	8000e08 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e05f      	b.n	8002e76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db6:	4b10      	ldr	r3, [pc, #64]	@ (8002df8 <HAL_RCC_OscConfig+0x4d0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0f0      	beq.n	8002da4 <HAL_RCC_OscConfig+0x47c>
 8002dc2:	e057      	b.n	8002e74 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8002df8 <HAL_RCC_OscConfig+0x4d0>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a0b      	ldr	r2, [pc, #44]	@ (8002df8 <HAL_RCC_OscConfig+0x4d0>)
 8002dca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd0:	f7fe f81a 	bl	8000e08 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd8:	f7fe f816 	bl	8000e08 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e045      	b.n	8002e76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dea:	4b03      	ldr	r3, [pc, #12]	@ (8002df8 <HAL_RCC_OscConfig+0x4d0>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x4b0>
 8002df6:	e03d      	b.n	8002e74 <HAL_RCC_OscConfig+0x54c>
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002e00:	4b1f      	ldr	r3, [pc, #124]	@ (8002e80 <HAL_RCC_OscConfig+0x558>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d030      	beq.n	8002e70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d129      	bne.n	8002e70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d122      	bne.n	8002e70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e30:	4013      	ands	r3, r2
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e36:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d119      	bne.n	8002e70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e46:	085b      	lsrs	r3, r3, #1
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d10f      	bne.n	8002e70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d107      	bne.n	8002e70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e000      	b.n	8002e76 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40023800 	.word	0x40023800

08002e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e0d0      	b.n	800303e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e9c:	4b6a      	ldr	r3, [pc, #424]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 030f 	and.w	r3, r3, #15
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d910      	bls.n	8002ecc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eaa:	4b67      	ldr	r3, [pc, #412]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 020f 	bic.w	r2, r3, #15
 8002eb2:	4965      	ldr	r1, [pc, #404]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eba:	4b63      	ldr	r3, [pc, #396]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d001      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e0b8      	b.n	800303e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d020      	beq.n	8002f1a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d005      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ee4:	4b59      	ldr	r3, [pc, #356]	@ (800304c <HAL_RCC_ClockConfig+0x1c8>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	4a58      	ldr	r2, [pc, #352]	@ (800304c <HAL_RCC_ClockConfig+0x1c8>)
 8002eea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002eee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0308 	and.w	r3, r3, #8
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d005      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002efc:	4b53      	ldr	r3, [pc, #332]	@ (800304c <HAL_RCC_ClockConfig+0x1c8>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	4a52      	ldr	r2, [pc, #328]	@ (800304c <HAL_RCC_ClockConfig+0x1c8>)
 8002f02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f08:	4b50      	ldr	r3, [pc, #320]	@ (800304c <HAL_RCC_ClockConfig+0x1c8>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	494d      	ldr	r1, [pc, #308]	@ (800304c <HAL_RCC_ClockConfig+0x1c8>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d040      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d107      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2e:	4b47      	ldr	r3, [pc, #284]	@ (800304c <HAL_RCC_ClockConfig+0x1c8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d115      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e07f      	b.n	800303e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d107      	bne.n	8002f56 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f46:	4b41      	ldr	r3, [pc, #260]	@ (800304c <HAL_RCC_ClockConfig+0x1c8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d109      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e073      	b.n	800303e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f56:	4b3d      	ldr	r3, [pc, #244]	@ (800304c <HAL_RCC_ClockConfig+0x1c8>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e06b      	b.n	800303e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f66:	4b39      	ldr	r3, [pc, #228]	@ (800304c <HAL_RCC_ClockConfig+0x1c8>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f023 0203 	bic.w	r2, r3, #3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	4936      	ldr	r1, [pc, #216]	@ (800304c <HAL_RCC_ClockConfig+0x1c8>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f78:	f7fd ff46 	bl	8000e08 <HAL_GetTick>
 8002f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7e:	e00a      	b.n	8002f96 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f80:	f7fd ff42 	bl	8000e08 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e053      	b.n	800303e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f96:	4b2d      	ldr	r3, [pc, #180]	@ (800304c <HAL_RCC_ClockConfig+0x1c8>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 020c 	and.w	r2, r3, #12
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d1eb      	bne.n	8002f80 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fa8:	4b27      	ldr	r3, [pc, #156]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 030f 	and.w	r3, r3, #15
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d210      	bcs.n	8002fd8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb6:	4b24      	ldr	r3, [pc, #144]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f023 020f 	bic.w	r2, r3, #15
 8002fbe:	4922      	ldr	r1, [pc, #136]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc6:	4b20      	ldr	r3, [pc, #128]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d001      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e032      	b.n	800303e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fe4:	4b19      	ldr	r3, [pc, #100]	@ (800304c <HAL_RCC_ClockConfig+0x1c8>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	4916      	ldr	r1, [pc, #88]	@ (800304c <HAL_RCC_ClockConfig+0x1c8>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d009      	beq.n	8003016 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003002:	4b12      	ldr	r3, [pc, #72]	@ (800304c <HAL_RCC_ClockConfig+0x1c8>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	490e      	ldr	r1, [pc, #56]	@ (800304c <HAL_RCC_ClockConfig+0x1c8>)
 8003012:	4313      	orrs	r3, r2
 8003014:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003016:	f000 f821 	bl	800305c <HAL_RCC_GetSysClockFreq>
 800301a:	4602      	mov	r2, r0
 800301c:	4b0b      	ldr	r3, [pc, #44]	@ (800304c <HAL_RCC_ClockConfig+0x1c8>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	091b      	lsrs	r3, r3, #4
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	490a      	ldr	r1, [pc, #40]	@ (8003050 <HAL_RCC_ClockConfig+0x1cc>)
 8003028:	5ccb      	ldrb	r3, [r1, r3]
 800302a:	fa22 f303 	lsr.w	r3, r2, r3
 800302e:	4a09      	ldr	r2, [pc, #36]	@ (8003054 <HAL_RCC_ClockConfig+0x1d0>)
 8003030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003032:	4b09      	ldr	r3, [pc, #36]	@ (8003058 <HAL_RCC_ClockConfig+0x1d4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7fd fc10 	bl	800085c <HAL_InitTick>

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40023c00 	.word	0x40023c00
 800304c:	40023800 	.word	0x40023800
 8003050:	08015380 	.word	0x08015380
 8003054:	20000000 	.word	0x20000000
 8003058:	20000004 	.word	0x20000004

0800305c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800305c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003060:	b094      	sub	sp, #80	@ 0x50
 8003062:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003064:	2300      	movs	r3, #0
 8003066:	647b      	str	r3, [r7, #68]	@ 0x44
 8003068:	2300      	movs	r3, #0
 800306a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800306c:	2300      	movs	r3, #0
 800306e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003070:	2300      	movs	r3, #0
 8003072:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003074:	4b79      	ldr	r3, [pc, #484]	@ (800325c <HAL_RCC_GetSysClockFreq+0x200>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 030c 	and.w	r3, r3, #12
 800307c:	2b08      	cmp	r3, #8
 800307e:	d00d      	beq.n	800309c <HAL_RCC_GetSysClockFreq+0x40>
 8003080:	2b08      	cmp	r3, #8
 8003082:	f200 80e1 	bhi.w	8003248 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003086:	2b00      	cmp	r3, #0
 8003088:	d002      	beq.n	8003090 <HAL_RCC_GetSysClockFreq+0x34>
 800308a:	2b04      	cmp	r3, #4
 800308c:	d003      	beq.n	8003096 <HAL_RCC_GetSysClockFreq+0x3a>
 800308e:	e0db      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003090:	4b73      	ldr	r3, [pc, #460]	@ (8003260 <HAL_RCC_GetSysClockFreq+0x204>)
 8003092:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003094:	e0db      	b.n	800324e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003096:	4b73      	ldr	r3, [pc, #460]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x208>)
 8003098:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800309a:	e0d8      	b.n	800324e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800309c:	4b6f      	ldr	r3, [pc, #444]	@ (800325c <HAL_RCC_GetSysClockFreq+0x200>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030a4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80030a6:	4b6d      	ldr	r3, [pc, #436]	@ (800325c <HAL_RCC_GetSysClockFreq+0x200>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d063      	beq.n	800317a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030b2:	4b6a      	ldr	r3, [pc, #424]	@ (800325c <HAL_RCC_GetSysClockFreq+0x200>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	099b      	lsrs	r3, r3, #6
 80030b8:	2200      	movs	r2, #0
 80030ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80030be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80030c6:	2300      	movs	r3, #0
 80030c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80030ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80030ce:	4622      	mov	r2, r4
 80030d0:	462b      	mov	r3, r5
 80030d2:	f04f 0000 	mov.w	r0, #0
 80030d6:	f04f 0100 	mov.w	r1, #0
 80030da:	0159      	lsls	r1, r3, #5
 80030dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030e0:	0150      	lsls	r0, r2, #5
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	4621      	mov	r1, r4
 80030e8:	1a51      	subs	r1, r2, r1
 80030ea:	6139      	str	r1, [r7, #16]
 80030ec:	4629      	mov	r1, r5
 80030ee:	eb63 0301 	sbc.w	r3, r3, r1
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	f04f 0300 	mov.w	r3, #0
 80030fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003100:	4659      	mov	r1, fp
 8003102:	018b      	lsls	r3, r1, #6
 8003104:	4651      	mov	r1, sl
 8003106:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800310a:	4651      	mov	r1, sl
 800310c:	018a      	lsls	r2, r1, #6
 800310e:	4651      	mov	r1, sl
 8003110:	ebb2 0801 	subs.w	r8, r2, r1
 8003114:	4659      	mov	r1, fp
 8003116:	eb63 0901 	sbc.w	r9, r3, r1
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003126:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800312a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800312e:	4690      	mov	r8, r2
 8003130:	4699      	mov	r9, r3
 8003132:	4623      	mov	r3, r4
 8003134:	eb18 0303 	adds.w	r3, r8, r3
 8003138:	60bb      	str	r3, [r7, #8]
 800313a:	462b      	mov	r3, r5
 800313c:	eb49 0303 	adc.w	r3, r9, r3
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	f04f 0300 	mov.w	r3, #0
 800314a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800314e:	4629      	mov	r1, r5
 8003150:	024b      	lsls	r3, r1, #9
 8003152:	4621      	mov	r1, r4
 8003154:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003158:	4621      	mov	r1, r4
 800315a:	024a      	lsls	r2, r1, #9
 800315c:	4610      	mov	r0, r2
 800315e:	4619      	mov	r1, r3
 8003160:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003162:	2200      	movs	r2, #0
 8003164:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003166:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003168:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800316c:	f7fd f8b8 	bl	80002e0 <__aeabi_uldivmod>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4613      	mov	r3, r2
 8003176:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003178:	e058      	b.n	800322c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800317a:	4b38      	ldr	r3, [pc, #224]	@ (800325c <HAL_RCC_GetSysClockFreq+0x200>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	099b      	lsrs	r3, r3, #6
 8003180:	2200      	movs	r2, #0
 8003182:	4618      	mov	r0, r3
 8003184:	4611      	mov	r1, r2
 8003186:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800318a:	623b      	str	r3, [r7, #32]
 800318c:	2300      	movs	r3, #0
 800318e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003190:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003194:	4642      	mov	r2, r8
 8003196:	464b      	mov	r3, r9
 8003198:	f04f 0000 	mov.w	r0, #0
 800319c:	f04f 0100 	mov.w	r1, #0
 80031a0:	0159      	lsls	r1, r3, #5
 80031a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031a6:	0150      	lsls	r0, r2, #5
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	4641      	mov	r1, r8
 80031ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80031b2:	4649      	mov	r1, r9
 80031b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	f04f 0300 	mov.w	r3, #0
 80031c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031cc:	ebb2 040a 	subs.w	r4, r2, sl
 80031d0:	eb63 050b 	sbc.w	r5, r3, fp
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	00eb      	lsls	r3, r5, #3
 80031de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031e2:	00e2      	lsls	r2, r4, #3
 80031e4:	4614      	mov	r4, r2
 80031e6:	461d      	mov	r5, r3
 80031e8:	4643      	mov	r3, r8
 80031ea:	18e3      	adds	r3, r4, r3
 80031ec:	603b      	str	r3, [r7, #0]
 80031ee:	464b      	mov	r3, r9
 80031f0:	eb45 0303 	adc.w	r3, r5, r3
 80031f4:	607b      	str	r3, [r7, #4]
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003202:	4629      	mov	r1, r5
 8003204:	028b      	lsls	r3, r1, #10
 8003206:	4621      	mov	r1, r4
 8003208:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800320c:	4621      	mov	r1, r4
 800320e:	028a      	lsls	r2, r1, #10
 8003210:	4610      	mov	r0, r2
 8003212:	4619      	mov	r1, r3
 8003214:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003216:	2200      	movs	r2, #0
 8003218:	61bb      	str	r3, [r7, #24]
 800321a:	61fa      	str	r2, [r7, #28]
 800321c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003220:	f7fd f85e 	bl	80002e0 <__aeabi_uldivmod>
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	4613      	mov	r3, r2
 800322a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800322c:	4b0b      	ldr	r3, [pc, #44]	@ (800325c <HAL_RCC_GetSysClockFreq+0x200>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	0c1b      	lsrs	r3, r3, #16
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	3301      	adds	r3, #1
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800323c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800323e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003240:	fbb2 f3f3 	udiv	r3, r2, r3
 8003244:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003246:	e002      	b.n	800324e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003248:	4b05      	ldr	r3, [pc, #20]	@ (8003260 <HAL_RCC_GetSysClockFreq+0x204>)
 800324a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800324c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800324e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003250:	4618      	mov	r0, r3
 8003252:	3750      	adds	r7, #80	@ 0x50
 8003254:	46bd      	mov	sp, r7
 8003256:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800325a:	bf00      	nop
 800325c:	40023800 	.word	0x40023800
 8003260:	00f42400 	.word	0x00f42400
 8003264:	007a1200 	.word	0x007a1200

08003268 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800326c:	4b03      	ldr	r3, [pc, #12]	@ (800327c <HAL_RCC_GetHCLKFreq+0x14>)
 800326e:	681b      	ldr	r3, [r3, #0]
}
 8003270:	4618      	mov	r0, r3
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	20000000 	.word	0x20000000

08003280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003284:	f7ff fff0 	bl	8003268 <HAL_RCC_GetHCLKFreq>
 8003288:	4602      	mov	r2, r0
 800328a:	4b05      	ldr	r3, [pc, #20]	@ (80032a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	0a9b      	lsrs	r3, r3, #10
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	4903      	ldr	r1, [pc, #12]	@ (80032a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003296:	5ccb      	ldrb	r3, [r1, r3]
 8003298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800329c:	4618      	mov	r0, r3
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40023800 	.word	0x40023800
 80032a4:	08015390 	.word	0x08015390

080032a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	220f      	movs	r2, #15
 80032b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032b8:	4b12      	ldr	r3, [pc, #72]	@ (8003304 <HAL_RCC_GetClockConfig+0x5c>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 0203 	and.w	r2, r3, #3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80032c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003304 <HAL_RCC_GetClockConfig+0x5c>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80032d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003304 <HAL_RCC_GetClockConfig+0x5c>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80032dc:	4b09      	ldr	r3, [pc, #36]	@ (8003304 <HAL_RCC_GetClockConfig+0x5c>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	08db      	lsrs	r3, r3, #3
 80032e2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80032ea:	4b07      	ldr	r3, [pc, #28]	@ (8003308 <HAL_RCC_GetClockConfig+0x60>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 020f 	and.w	r2, r3, #15
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	601a      	str	r2, [r3, #0]
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	40023800 	.word	0x40023800
 8003308:	40023c00 	.word	0x40023c00

0800330c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e049      	b.n	80033b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d106      	bne.n	8003338 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f841 	bl	80033ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3304      	adds	r3, #4
 8003348:	4619      	mov	r1, r3
 800334a:	4610      	mov	r0, r2
 800334c:	f000 f9e8 	bl	8003720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
	...

080033d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d001      	beq.n	80033e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e054      	b.n	8003492 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2202      	movs	r2, #2
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0201 	orr.w	r2, r2, #1
 80033fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a26      	ldr	r2, [pc, #152]	@ (80034a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d022      	beq.n	8003450 <HAL_TIM_Base_Start_IT+0x80>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003412:	d01d      	beq.n	8003450 <HAL_TIM_Base_Start_IT+0x80>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a22      	ldr	r2, [pc, #136]	@ (80034a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d018      	beq.n	8003450 <HAL_TIM_Base_Start_IT+0x80>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a21      	ldr	r2, [pc, #132]	@ (80034a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d013      	beq.n	8003450 <HAL_TIM_Base_Start_IT+0x80>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a1f      	ldr	r2, [pc, #124]	@ (80034ac <HAL_TIM_Base_Start_IT+0xdc>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d00e      	beq.n	8003450 <HAL_TIM_Base_Start_IT+0x80>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a1e      	ldr	r2, [pc, #120]	@ (80034b0 <HAL_TIM_Base_Start_IT+0xe0>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d009      	beq.n	8003450 <HAL_TIM_Base_Start_IT+0x80>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a1c      	ldr	r2, [pc, #112]	@ (80034b4 <HAL_TIM_Base_Start_IT+0xe4>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d004      	beq.n	8003450 <HAL_TIM_Base_Start_IT+0x80>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a1b      	ldr	r2, [pc, #108]	@ (80034b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d115      	bne.n	800347c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689a      	ldr	r2, [r3, #8]
 8003456:	4b19      	ldr	r3, [pc, #100]	@ (80034bc <HAL_TIM_Base_Start_IT+0xec>)
 8003458:	4013      	ands	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2b06      	cmp	r3, #6
 8003460:	d015      	beq.n	800348e <HAL_TIM_Base_Start_IT+0xbe>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003468:	d011      	beq.n	800348e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f042 0201 	orr.w	r2, r2, #1
 8003478:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800347a:	e008      	b.n	800348e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0201 	orr.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	e000      	b.n	8003490 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800348e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	40010000 	.word	0x40010000
 80034a4:	40000400 	.word	0x40000400
 80034a8:	40000800 	.word	0x40000800
 80034ac:	40000c00 	.word	0x40000c00
 80034b0:	40010400 	.word	0x40010400
 80034b4:	40014000 	.word	0x40014000
 80034b8:	40001800 	.word	0x40001800
 80034bc:	00010007 	.word	0x00010007

080034c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d020      	beq.n	8003524 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d01b      	beq.n	8003524 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f06f 0202 	mvn.w	r2, #2
 80034f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	f003 0303 	and.w	r3, r3, #3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f8e9 	bl	80036e2 <HAL_TIM_IC_CaptureCallback>
 8003510:	e005      	b.n	800351e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f8db 	bl	80036ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 f8ec 	bl	80036f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b00      	cmp	r3, #0
 800352c:	d020      	beq.n	8003570 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	d01b      	beq.n	8003570 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f06f 0204 	mvn.w	r2, #4
 8003540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2202      	movs	r2, #2
 8003546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f8c3 	bl	80036e2 <HAL_TIM_IC_CaptureCallback>
 800355c:	e005      	b.n	800356a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f8b5 	bl	80036ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f8c6 	bl	80036f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d020      	beq.n	80035bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	2b00      	cmp	r3, #0
 8003582:	d01b      	beq.n	80035bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f06f 0208 	mvn.w	r2, #8
 800358c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2204      	movs	r2, #4
 8003592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f89d 	bl	80036e2 <HAL_TIM_IC_CaptureCallback>
 80035a8:	e005      	b.n	80035b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f88f 	bl	80036ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f8a0 	bl	80036f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f003 0310 	and.w	r3, r3, #16
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d020      	beq.n	8003608 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f003 0310 	and.w	r3, r3, #16
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01b      	beq.n	8003608 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f06f 0210 	mvn.w	r2, #16
 80035d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2208      	movs	r2, #8
 80035de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f877 	bl	80036e2 <HAL_TIM_IC_CaptureCallback>
 80035f4:	e005      	b.n	8003602 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f869 	bl	80036ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f87a 	bl	80036f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00c      	beq.n	800362c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b00      	cmp	r3, #0
 800361a:	d007      	beq.n	800362c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f06f 0201 	mvn.w	r2, #1
 8003624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7fd f8d8 	bl	80007dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003632:	2b00      	cmp	r3, #0
 8003634:	d104      	bne.n	8003640 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00c      	beq.n	800365a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003646:	2b00      	cmp	r3, #0
 8003648:	d007      	beq.n	800365a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f919 	bl	800388c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00c      	beq.n	800367e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800366a:	2b00      	cmp	r3, #0
 800366c:	d007      	beq.n	800367e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f911 	bl	80038a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00c      	beq.n	80036a2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800368e:	2b00      	cmp	r3, #0
 8003690:	d007      	beq.n	80036a2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800369a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f834 	bl	800370a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f003 0320 	and.w	r3, r3, #32
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00c      	beq.n	80036c6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 0320 	and.w	r3, r3, #32
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d007      	beq.n	80036c6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f06f 0220 	mvn.w	r2, #32
 80036be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f8d9 	bl	8003878 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036c6:	bf00      	nop
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
	...

08003720 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a46      	ldr	r2, [pc, #280]	@ (800384c <TIM_Base_SetConfig+0x12c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d013      	beq.n	8003760 <TIM_Base_SetConfig+0x40>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800373e:	d00f      	beq.n	8003760 <TIM_Base_SetConfig+0x40>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a43      	ldr	r2, [pc, #268]	@ (8003850 <TIM_Base_SetConfig+0x130>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d00b      	beq.n	8003760 <TIM_Base_SetConfig+0x40>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a42      	ldr	r2, [pc, #264]	@ (8003854 <TIM_Base_SetConfig+0x134>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d007      	beq.n	8003760 <TIM_Base_SetConfig+0x40>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a41      	ldr	r2, [pc, #260]	@ (8003858 <TIM_Base_SetConfig+0x138>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d003      	beq.n	8003760 <TIM_Base_SetConfig+0x40>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a40      	ldr	r2, [pc, #256]	@ (800385c <TIM_Base_SetConfig+0x13c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d108      	bne.n	8003772 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003766:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a35      	ldr	r2, [pc, #212]	@ (800384c <TIM_Base_SetConfig+0x12c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d02b      	beq.n	80037d2 <TIM_Base_SetConfig+0xb2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003780:	d027      	beq.n	80037d2 <TIM_Base_SetConfig+0xb2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a32      	ldr	r2, [pc, #200]	@ (8003850 <TIM_Base_SetConfig+0x130>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d023      	beq.n	80037d2 <TIM_Base_SetConfig+0xb2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a31      	ldr	r2, [pc, #196]	@ (8003854 <TIM_Base_SetConfig+0x134>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d01f      	beq.n	80037d2 <TIM_Base_SetConfig+0xb2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a30      	ldr	r2, [pc, #192]	@ (8003858 <TIM_Base_SetConfig+0x138>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d01b      	beq.n	80037d2 <TIM_Base_SetConfig+0xb2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a2f      	ldr	r2, [pc, #188]	@ (800385c <TIM_Base_SetConfig+0x13c>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d017      	beq.n	80037d2 <TIM_Base_SetConfig+0xb2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a2e      	ldr	r2, [pc, #184]	@ (8003860 <TIM_Base_SetConfig+0x140>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d013      	beq.n	80037d2 <TIM_Base_SetConfig+0xb2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a2d      	ldr	r2, [pc, #180]	@ (8003864 <TIM_Base_SetConfig+0x144>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00f      	beq.n	80037d2 <TIM_Base_SetConfig+0xb2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a2c      	ldr	r2, [pc, #176]	@ (8003868 <TIM_Base_SetConfig+0x148>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d00b      	beq.n	80037d2 <TIM_Base_SetConfig+0xb2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a2b      	ldr	r2, [pc, #172]	@ (800386c <TIM_Base_SetConfig+0x14c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d007      	beq.n	80037d2 <TIM_Base_SetConfig+0xb2>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a2a      	ldr	r2, [pc, #168]	@ (8003870 <TIM_Base_SetConfig+0x150>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d003      	beq.n	80037d2 <TIM_Base_SetConfig+0xb2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a29      	ldr	r2, [pc, #164]	@ (8003874 <TIM_Base_SetConfig+0x154>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d108      	bne.n	80037e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a10      	ldr	r2, [pc, #64]	@ (800384c <TIM_Base_SetConfig+0x12c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d003      	beq.n	8003818 <TIM_Base_SetConfig+0xf8>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a12      	ldr	r2, [pc, #72]	@ (800385c <TIM_Base_SetConfig+0x13c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d103      	bne.n	8003820 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b01      	cmp	r3, #1
 8003830:	d105      	bne.n	800383e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	f023 0201 	bic.w	r2, r3, #1
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	611a      	str	r2, [r3, #16]
  }
}
 800383e:	bf00      	nop
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	40010000 	.word	0x40010000
 8003850:	40000400 	.word	0x40000400
 8003854:	40000800 	.word	0x40000800
 8003858:	40000c00 	.word	0x40000c00
 800385c:	40010400 	.word	0x40010400
 8003860:	40014000 	.word	0x40014000
 8003864:	40014400 	.word	0x40014400
 8003868:	40014800 	.word	0x40014800
 800386c:	40001800 	.word	0x40001800
 8003870:	40001c00 	.word	0x40001c00
 8003874:	40002000 	.word	0x40002000

08003878 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80038b4:	b5b0      	push	{r4, r5, r7, lr}
 80038b6:	b08c      	sub	sp, #48	@ 0x30
 80038b8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 80038ba:	4b8f      	ldr	r3, [pc, #572]	@ (8003af8 <MX_LWIP_Init+0x244>)
 80038bc:	220a      	movs	r2, #10
 80038be:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 80038c0:	4b8d      	ldr	r3, [pc, #564]	@ (8003af8 <MX_LWIP_Init+0x244>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80038c6:	4b8c      	ldr	r3, [pc, #560]	@ (8003af8 <MX_LWIP_Init+0x244>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 15;
 80038cc:	4b8a      	ldr	r3, [pc, #552]	@ (8003af8 <MX_LWIP_Init+0x244>)
 80038ce:	220f      	movs	r2, #15
 80038d0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80038d2:	4b8a      	ldr	r3, [pc, #552]	@ (8003afc <MX_LWIP_Init+0x248>)
 80038d4:	22ff      	movs	r2, #255	@ 0xff
 80038d6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80038d8:	4b88      	ldr	r3, [pc, #544]	@ (8003afc <MX_LWIP_Init+0x248>)
 80038da:	22ff      	movs	r2, #255	@ 0xff
 80038dc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80038de:	4b87      	ldr	r3, [pc, #540]	@ (8003afc <MX_LWIP_Init+0x248>)
 80038e0:	22ff      	movs	r2, #255	@ 0xff
 80038e2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80038e4:	4b85      	ldr	r3, [pc, #532]	@ (8003afc <MX_LWIP_Init+0x248>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 80038ea:	4b85      	ldr	r3, [pc, #532]	@ (8003b00 <MX_LWIP_Init+0x24c>)
 80038ec:	220a      	movs	r2, #10
 80038ee:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 80038f0:	4b83      	ldr	r3, [pc, #524]	@ (8003b00 <MX_LWIP_Init+0x24c>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80038f6:	4b82      	ldr	r3, [pc, #520]	@ (8003b00 <MX_LWIP_Init+0x24c>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 50;
 80038fc:	4b80      	ldr	r3, [pc, #512]	@ (8003b00 <MX_LWIP_Init+0x24c>)
 80038fe:	2232      	movs	r2, #50	@ 0x32
 8003900:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8003902:	2100      	movs	r1, #0
 8003904:	2000      	movs	r0, #0
 8003906:	f004 f811 	bl	800792c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800390a:	4b7b      	ldr	r3, [pc, #492]	@ (8003af8 <MX_LWIP_Init+0x244>)
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	061a      	lsls	r2, r3, #24
 8003910:	4b79      	ldr	r3, [pc, #484]	@ (8003af8 <MX_LWIP_Init+0x244>)
 8003912:	785b      	ldrb	r3, [r3, #1]
 8003914:	041b      	lsls	r3, r3, #16
 8003916:	431a      	orrs	r2, r3
 8003918:	4b77      	ldr	r3, [pc, #476]	@ (8003af8 <MX_LWIP_Init+0x244>)
 800391a:	789b      	ldrb	r3, [r3, #2]
 800391c:	021b      	lsls	r3, r3, #8
 800391e:	4313      	orrs	r3, r2
 8003920:	4a75      	ldr	r2, [pc, #468]	@ (8003af8 <MX_LWIP_Init+0x244>)
 8003922:	78d2      	ldrb	r2, [r2, #3]
 8003924:	4313      	orrs	r3, r2
 8003926:	061a      	lsls	r2, r3, #24
 8003928:	4b73      	ldr	r3, [pc, #460]	@ (8003af8 <MX_LWIP_Init+0x244>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	0619      	lsls	r1, r3, #24
 800392e:	4b72      	ldr	r3, [pc, #456]	@ (8003af8 <MX_LWIP_Init+0x244>)
 8003930:	785b      	ldrb	r3, [r3, #1]
 8003932:	041b      	lsls	r3, r3, #16
 8003934:	4319      	orrs	r1, r3
 8003936:	4b70      	ldr	r3, [pc, #448]	@ (8003af8 <MX_LWIP_Init+0x244>)
 8003938:	789b      	ldrb	r3, [r3, #2]
 800393a:	021b      	lsls	r3, r3, #8
 800393c:	430b      	orrs	r3, r1
 800393e:	496e      	ldr	r1, [pc, #440]	@ (8003af8 <MX_LWIP_Init+0x244>)
 8003940:	78c9      	ldrb	r1, [r1, #3]
 8003942:	430b      	orrs	r3, r1
 8003944:	021b      	lsls	r3, r3, #8
 8003946:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800394a:	431a      	orrs	r2, r3
 800394c:	4b6a      	ldr	r3, [pc, #424]	@ (8003af8 <MX_LWIP_Init+0x244>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	0619      	lsls	r1, r3, #24
 8003952:	4b69      	ldr	r3, [pc, #420]	@ (8003af8 <MX_LWIP_Init+0x244>)
 8003954:	785b      	ldrb	r3, [r3, #1]
 8003956:	041b      	lsls	r3, r3, #16
 8003958:	4319      	orrs	r1, r3
 800395a:	4b67      	ldr	r3, [pc, #412]	@ (8003af8 <MX_LWIP_Init+0x244>)
 800395c:	789b      	ldrb	r3, [r3, #2]
 800395e:	021b      	lsls	r3, r3, #8
 8003960:	430b      	orrs	r3, r1
 8003962:	4965      	ldr	r1, [pc, #404]	@ (8003af8 <MX_LWIP_Init+0x244>)
 8003964:	78c9      	ldrb	r1, [r1, #3]
 8003966:	430b      	orrs	r3, r1
 8003968:	0a1b      	lsrs	r3, r3, #8
 800396a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800396e:	431a      	orrs	r2, r3
 8003970:	4b61      	ldr	r3, [pc, #388]	@ (8003af8 <MX_LWIP_Init+0x244>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	0619      	lsls	r1, r3, #24
 8003976:	4b60      	ldr	r3, [pc, #384]	@ (8003af8 <MX_LWIP_Init+0x244>)
 8003978:	785b      	ldrb	r3, [r3, #1]
 800397a:	041b      	lsls	r3, r3, #16
 800397c:	4319      	orrs	r1, r3
 800397e:	4b5e      	ldr	r3, [pc, #376]	@ (8003af8 <MX_LWIP_Init+0x244>)
 8003980:	789b      	ldrb	r3, [r3, #2]
 8003982:	021b      	lsls	r3, r3, #8
 8003984:	430b      	orrs	r3, r1
 8003986:	495c      	ldr	r1, [pc, #368]	@ (8003af8 <MX_LWIP_Init+0x244>)
 8003988:	78c9      	ldrb	r1, [r1, #3]
 800398a:	430b      	orrs	r3, r1
 800398c:	0e1b      	lsrs	r3, r3, #24
 800398e:	4313      	orrs	r3, r2
 8003990:	4a5c      	ldr	r2, [pc, #368]	@ (8003b04 <MX_LWIP_Init+0x250>)
 8003992:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003994:	4b59      	ldr	r3, [pc, #356]	@ (8003afc <MX_LWIP_Init+0x248>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	061a      	lsls	r2, r3, #24
 800399a:	4b58      	ldr	r3, [pc, #352]	@ (8003afc <MX_LWIP_Init+0x248>)
 800399c:	785b      	ldrb	r3, [r3, #1]
 800399e:	041b      	lsls	r3, r3, #16
 80039a0:	431a      	orrs	r2, r3
 80039a2:	4b56      	ldr	r3, [pc, #344]	@ (8003afc <MX_LWIP_Init+0x248>)
 80039a4:	789b      	ldrb	r3, [r3, #2]
 80039a6:	021b      	lsls	r3, r3, #8
 80039a8:	4313      	orrs	r3, r2
 80039aa:	4a54      	ldr	r2, [pc, #336]	@ (8003afc <MX_LWIP_Init+0x248>)
 80039ac:	78d2      	ldrb	r2, [r2, #3]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	061a      	lsls	r2, r3, #24
 80039b2:	4b52      	ldr	r3, [pc, #328]	@ (8003afc <MX_LWIP_Init+0x248>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	0619      	lsls	r1, r3, #24
 80039b8:	4b50      	ldr	r3, [pc, #320]	@ (8003afc <MX_LWIP_Init+0x248>)
 80039ba:	785b      	ldrb	r3, [r3, #1]
 80039bc:	041b      	lsls	r3, r3, #16
 80039be:	4319      	orrs	r1, r3
 80039c0:	4b4e      	ldr	r3, [pc, #312]	@ (8003afc <MX_LWIP_Init+0x248>)
 80039c2:	789b      	ldrb	r3, [r3, #2]
 80039c4:	021b      	lsls	r3, r3, #8
 80039c6:	430b      	orrs	r3, r1
 80039c8:	494c      	ldr	r1, [pc, #304]	@ (8003afc <MX_LWIP_Init+0x248>)
 80039ca:	78c9      	ldrb	r1, [r1, #3]
 80039cc:	430b      	orrs	r3, r1
 80039ce:	021b      	lsls	r3, r3, #8
 80039d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80039d4:	431a      	orrs	r2, r3
 80039d6:	4b49      	ldr	r3, [pc, #292]	@ (8003afc <MX_LWIP_Init+0x248>)
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	0619      	lsls	r1, r3, #24
 80039dc:	4b47      	ldr	r3, [pc, #284]	@ (8003afc <MX_LWIP_Init+0x248>)
 80039de:	785b      	ldrb	r3, [r3, #1]
 80039e0:	041b      	lsls	r3, r3, #16
 80039e2:	4319      	orrs	r1, r3
 80039e4:	4b45      	ldr	r3, [pc, #276]	@ (8003afc <MX_LWIP_Init+0x248>)
 80039e6:	789b      	ldrb	r3, [r3, #2]
 80039e8:	021b      	lsls	r3, r3, #8
 80039ea:	430b      	orrs	r3, r1
 80039ec:	4943      	ldr	r1, [pc, #268]	@ (8003afc <MX_LWIP_Init+0x248>)
 80039ee:	78c9      	ldrb	r1, [r1, #3]
 80039f0:	430b      	orrs	r3, r1
 80039f2:	0a1b      	lsrs	r3, r3, #8
 80039f4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80039f8:	431a      	orrs	r2, r3
 80039fa:	4b40      	ldr	r3, [pc, #256]	@ (8003afc <MX_LWIP_Init+0x248>)
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	0619      	lsls	r1, r3, #24
 8003a00:	4b3e      	ldr	r3, [pc, #248]	@ (8003afc <MX_LWIP_Init+0x248>)
 8003a02:	785b      	ldrb	r3, [r3, #1]
 8003a04:	041b      	lsls	r3, r3, #16
 8003a06:	4319      	orrs	r1, r3
 8003a08:	4b3c      	ldr	r3, [pc, #240]	@ (8003afc <MX_LWIP_Init+0x248>)
 8003a0a:	789b      	ldrb	r3, [r3, #2]
 8003a0c:	021b      	lsls	r3, r3, #8
 8003a0e:	430b      	orrs	r3, r1
 8003a10:	493a      	ldr	r1, [pc, #232]	@ (8003afc <MX_LWIP_Init+0x248>)
 8003a12:	78c9      	ldrb	r1, [r1, #3]
 8003a14:	430b      	orrs	r3, r1
 8003a16:	0e1b      	lsrs	r3, r3, #24
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	4a3b      	ldr	r2, [pc, #236]	@ (8003b08 <MX_LWIP_Init+0x254>)
 8003a1c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003a1e:	4b38      	ldr	r3, [pc, #224]	@ (8003b00 <MX_LWIP_Init+0x24c>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	061a      	lsls	r2, r3, #24
 8003a24:	4b36      	ldr	r3, [pc, #216]	@ (8003b00 <MX_LWIP_Init+0x24c>)
 8003a26:	785b      	ldrb	r3, [r3, #1]
 8003a28:	041b      	lsls	r3, r3, #16
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	4b34      	ldr	r3, [pc, #208]	@ (8003b00 <MX_LWIP_Init+0x24c>)
 8003a2e:	789b      	ldrb	r3, [r3, #2]
 8003a30:	021b      	lsls	r3, r3, #8
 8003a32:	4313      	orrs	r3, r2
 8003a34:	4a32      	ldr	r2, [pc, #200]	@ (8003b00 <MX_LWIP_Init+0x24c>)
 8003a36:	78d2      	ldrb	r2, [r2, #3]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	061a      	lsls	r2, r3, #24
 8003a3c:	4b30      	ldr	r3, [pc, #192]	@ (8003b00 <MX_LWIP_Init+0x24c>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	0619      	lsls	r1, r3, #24
 8003a42:	4b2f      	ldr	r3, [pc, #188]	@ (8003b00 <MX_LWIP_Init+0x24c>)
 8003a44:	785b      	ldrb	r3, [r3, #1]
 8003a46:	041b      	lsls	r3, r3, #16
 8003a48:	4319      	orrs	r1, r3
 8003a4a:	4b2d      	ldr	r3, [pc, #180]	@ (8003b00 <MX_LWIP_Init+0x24c>)
 8003a4c:	789b      	ldrb	r3, [r3, #2]
 8003a4e:	021b      	lsls	r3, r3, #8
 8003a50:	430b      	orrs	r3, r1
 8003a52:	492b      	ldr	r1, [pc, #172]	@ (8003b00 <MX_LWIP_Init+0x24c>)
 8003a54:	78c9      	ldrb	r1, [r1, #3]
 8003a56:	430b      	orrs	r3, r1
 8003a58:	021b      	lsls	r3, r3, #8
 8003a5a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	4b27      	ldr	r3, [pc, #156]	@ (8003b00 <MX_LWIP_Init+0x24c>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	0619      	lsls	r1, r3, #24
 8003a66:	4b26      	ldr	r3, [pc, #152]	@ (8003b00 <MX_LWIP_Init+0x24c>)
 8003a68:	785b      	ldrb	r3, [r3, #1]
 8003a6a:	041b      	lsls	r3, r3, #16
 8003a6c:	4319      	orrs	r1, r3
 8003a6e:	4b24      	ldr	r3, [pc, #144]	@ (8003b00 <MX_LWIP_Init+0x24c>)
 8003a70:	789b      	ldrb	r3, [r3, #2]
 8003a72:	021b      	lsls	r3, r3, #8
 8003a74:	430b      	orrs	r3, r1
 8003a76:	4922      	ldr	r1, [pc, #136]	@ (8003b00 <MX_LWIP_Init+0x24c>)
 8003a78:	78c9      	ldrb	r1, [r1, #3]
 8003a7a:	430b      	orrs	r3, r1
 8003a7c:	0a1b      	lsrs	r3, r3, #8
 8003a7e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003a82:	431a      	orrs	r2, r3
 8003a84:	4b1e      	ldr	r3, [pc, #120]	@ (8003b00 <MX_LWIP_Init+0x24c>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	0619      	lsls	r1, r3, #24
 8003a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8003b00 <MX_LWIP_Init+0x24c>)
 8003a8c:	785b      	ldrb	r3, [r3, #1]
 8003a8e:	041b      	lsls	r3, r3, #16
 8003a90:	4319      	orrs	r1, r3
 8003a92:	4b1b      	ldr	r3, [pc, #108]	@ (8003b00 <MX_LWIP_Init+0x24c>)
 8003a94:	789b      	ldrb	r3, [r3, #2]
 8003a96:	021b      	lsls	r3, r3, #8
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	4919      	ldr	r1, [pc, #100]	@ (8003b00 <MX_LWIP_Init+0x24c>)
 8003a9c:	78c9      	ldrb	r1, [r1, #3]
 8003a9e:	430b      	orrs	r3, r1
 8003aa0:	0e1b      	lsrs	r3, r3, #24
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	4a19      	ldr	r2, [pc, #100]	@ (8003b0c <MX_LWIP_Init+0x258>)
 8003aa6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003aa8:	4b19      	ldr	r3, [pc, #100]	@ (8003b10 <MX_LWIP_Init+0x25c>)
 8003aaa:	9302      	str	r3, [sp, #8]
 8003aac:	4b19      	ldr	r3, [pc, #100]	@ (8003b14 <MX_LWIP_Init+0x260>)
 8003aae:	9301      	str	r3, [sp, #4]
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	4b15      	ldr	r3, [pc, #84]	@ (8003b0c <MX_LWIP_Init+0x258>)
 8003ab6:	4a14      	ldr	r2, [pc, #80]	@ (8003b08 <MX_LWIP_Init+0x254>)
 8003ab8:	4912      	ldr	r1, [pc, #72]	@ (8003b04 <MX_LWIP_Init+0x250>)
 8003aba:	4817      	ldr	r0, [pc, #92]	@ (8003b18 <MX_LWIP_Init+0x264>)
 8003abc:	f004 fd0c 	bl	80084d8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003ac0:	4815      	ldr	r0, [pc, #84]	@ (8003b18 <MX_LWIP_Init+0x264>)
 8003ac2:	f004 febb 	bl	800883c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8003ac6:	4814      	ldr	r0, [pc, #80]	@ (8003b18 <MX_LWIP_Init+0x264>)
 8003ac8:	f004 fec8 	bl	800885c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003acc:	4913      	ldr	r1, [pc, #76]	@ (8003b1c <MX_LWIP_Init+0x268>)
 8003ace:	4812      	ldr	r0, [pc, #72]	@ (8003b18 <MX_LWIP_Init+0x264>)
 8003ad0:	f004 ffc6 	bl	8008a60 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8003ad4:	4b12      	ldr	r3, [pc, #72]	@ (8003b20 <MX_LWIP_Init+0x26c>)
 8003ad6:	1d3c      	adds	r4, r7, #4
 8003ad8:	461d      	mov	r5, r3
 8003ada:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003adc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ade:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003ae2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8003ae6:	1d3b      	adds	r3, r7, #4
 8003ae8:	490b      	ldr	r1, [pc, #44]	@ (8003b18 <MX_LWIP_Init+0x264>)
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 fdcb 	bl	8004686 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003af0:	bf00      	nop
 8003af2:	3720      	adds	r7, #32
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bdb0      	pop	{r4, r5, r7, pc}
 8003af8:	20000ad4 	.word	0x20000ad4
 8003afc:	20000ad8 	.word	0x20000ad8
 8003b00:	20000adc 	.word	0x20000adc
 8003b04:	20000ac8 	.word	0x20000ac8
 8003b08:	20000acc 	.word	0x20000acc
 8003b0c:	20000ad0 	.word	0x20000ad0
 8003b10:	08007869 	.word	0x08007869
 8003b14:	080040bd 	.word	0x080040bd
 8003b18:	20000a94 	.word	0x20000a94
 8003b1c:	08003b25 	.word	0x08003b25
 8003b20:	08012830 	.word	0x08012830

08003b24 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b087      	sub	sp, #28
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8003b4a:	2320      	movs	r3, #32
 8003b4c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003b4e:	f3bf 8f4f 	dsb	sy
}
 8003b52:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8003b54:	e00b      	b.n	8003b6e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8003b56:	4a0d      	ldr	r2, [pc, #52]	@ (8003b8c <SCB_InvalidateDCache_by_Addr+0x54>)
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	4413      	add	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	dcf0      	bgt.n	8003b56 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003b74:	f3bf 8f4f 	dsb	sy
}
 8003b78:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b7a:	f3bf 8f6f 	isb	sy
}
 8003b7e:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8003b80:	bf00      	nop
 8003b82:	371c      	adds	r7, #28
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	e000ed00 	.word	0xe000ed00

08003b90 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8003b98:	4b04      	ldr	r3, [pc, #16]	@ (8003bac <HAL_ETH_RxCpltCallback+0x1c>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 fefb 	bl	8004998 <osSemaphoreRelease>
}
 8003ba2:	bf00      	nop
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	2000546c 	.word	0x2000546c

08003bb0 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8003bb8:	4b04      	ldr	r3, [pc, #16]	@ (8003bcc <HAL_ETH_TxCpltCallback+0x1c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 feeb 	bl	8004998 <osSemaphoreRelease>
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	20005470 	.word	0x20005470

08003bd0 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7fe f87c 	bl	8001cd6 <HAL_ETH_GetDMAError>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003be4:	2b80      	cmp	r3, #128	@ 0x80
 8003be6:	d104      	bne.n	8003bf2 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8003be8:	4b04      	ldr	r3, [pc, #16]	@ (8003bfc <HAL_ETH_ErrorCallback+0x2c>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 fed3 	bl	8004998 <osSemaphoreRelease>
  }
}
 8003bf2:	bf00      	nop
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	2000546c 	.word	0x2000546c

08003c00 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003c00:	b5b0      	push	{r4, r5, r7, lr}
 8003c02:	b0b4      	sub	sp, #208	@ 0xd0
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
  uint32_t duplex, speed = 0;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  int32_t PHYLinkState = 0;
 8003c14:	2300      	movs	r3, #0
 8003c16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  ETH_MACConfigTypeDef MACConf = {0};
 8003c1a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003c1e:	2264      	movs	r2, #100	@ 0x64
 8003c20:	2100      	movs	r1, #0
 8003c22:	4618      	mov	r0, r3
 8003c24:	f00d ff3b 	bl	8011a9e <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003c28:	4b9f      	ldr	r3, [pc, #636]	@ (8003ea8 <low_level_init+0x2a8>)
 8003c2a:	4aa0      	ldr	r2, [pc, #640]	@ (8003eac <low_level_init+0x2ac>)
 8003c2c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  MACAddr[1] = 0x80;
 8003c34:	2380      	movs	r3, #128	@ 0x80
 8003c36:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
  MACAddr[2] = 0xE1;
 8003c3a:	23e1      	movs	r3, #225	@ 0xe1
 8003c3c:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
  MACAddr[3] = 0x00;
 8003c40:	2300      	movs	r3, #0
 8003c42:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  MACAddr[4] = 0x00;
 8003c46:	2300      	movs	r3, #0
 8003c48:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  MACAddr[5] = 0x00;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
  heth.Init.MACAddr = &MACAddr[0];
 8003c52:	4a95      	ldr	r2, [pc, #596]	@ (8003ea8 <low_level_init+0x2a8>)
 8003c54:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003c58:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003c5a:	4b93      	ldr	r3, [pc, #588]	@ (8003ea8 <low_level_init+0x2a8>)
 8003c5c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003c60:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003c62:	4b91      	ldr	r3, [pc, #580]	@ (8003ea8 <low_level_init+0x2a8>)
 8003c64:	4a92      	ldr	r2, [pc, #584]	@ (8003eb0 <low_level_init+0x2b0>)
 8003c66:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003c68:	4b8f      	ldr	r3, [pc, #572]	@ (8003ea8 <low_level_init+0x2a8>)
 8003c6a:	4a92      	ldr	r2, [pc, #584]	@ (8003eb4 <low_level_init+0x2b4>)
 8003c6c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8003c6e:	4b8e      	ldr	r3, [pc, #568]	@ (8003ea8 <low_level_init+0x2a8>)
 8003c70:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8003c74:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003c76:	488c      	ldr	r0, [pc, #560]	@ (8003ea8 <low_level_init+0x2a8>)
 8003c78:	f7fd f9e4 	bl	8001044 <HAL_ETH_Init>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003c82:	2238      	movs	r2, #56	@ 0x38
 8003c84:	2100      	movs	r1, #0
 8003c86:	488c      	ldr	r0, [pc, #560]	@ (8003eb8 <low_level_init+0x2b8>)
 8003c88:	f00d ff09 	bl	8011a9e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003c8c:	4b8a      	ldr	r3, [pc, #552]	@ (8003eb8 <low_level_init+0x2b8>)
 8003c8e:	2221      	movs	r2, #33	@ 0x21
 8003c90:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003c92:	4b89      	ldr	r3, [pc, #548]	@ (8003eb8 <low_level_init+0x2b8>)
 8003c94:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8003c98:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003c9a:	4b87      	ldr	r3, [pc, #540]	@ (8003eb8 <low_level_init+0x2b8>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003ca0:	4886      	ldr	r0, [pc, #536]	@ (8003ebc <low_level_init+0x2bc>)
 8003ca2:	f004 fad3 	bl	800824c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2206      	movs	r2, #6
 8003caa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003cae:	4b7e      	ldr	r3, [pc, #504]	@ (8003ea8 <low_level_init+0x2a8>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	781a      	ldrb	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003cba:	4b7b      	ldr	r3, [pc, #492]	@ (8003ea8 <low_level_init+0x2a8>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	785a      	ldrb	r2, [r3, #1]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003cc6:	4b78      	ldr	r3, [pc, #480]	@ (8003ea8 <low_level_init+0x2a8>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	789a      	ldrb	r2, [r3, #2]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003cd2:	4b75      	ldr	r3, [pc, #468]	@ (8003ea8 <low_level_init+0x2a8>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	78da      	ldrb	r2, [r3, #3]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003cde:	4b72      	ldr	r3, [pc, #456]	@ (8003ea8 <low_level_init+0x2a8>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	791a      	ldrb	r2, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003cea:	4b6f      	ldr	r3, [pc, #444]	@ (8003ea8 <low_level_init+0x2a8>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	795a      	ldrb	r2, [r3, #5]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003cfc:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003d04:	f043 030a 	orr.w	r3, r3, #10
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 8003d10:	2300      	movs	r3, #0
 8003d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d14:	2300      	movs	r3, #0
 8003d16:	653b      	str	r3, [r7, #80]	@ 0x50
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8003d18:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fdba 	bl	8004898 <osSemaphoreCreate>
 8003d24:	4603      	mov	r3, r0
 8003d26:	4a66      	ldr	r2, [pc, #408]	@ (8003ec0 <low_level_init+0x2c0>)
 8003d28:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d2e:	2300      	movs	r3, #0
 8003d30:	64bb      	str	r3, [r7, #72]	@ 0x48
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 8003d32:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003d36:	2101      	movs	r1, #1
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 fdad 	bl	8004898 <osSemaphoreCreate>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	4a60      	ldr	r2, [pc, #384]	@ (8003ec4 <low_level_init+0x2c4>)
 8003d42:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8003d44:	4b5e      	ldr	r3, [pc, #376]	@ (8003ec0 <low_level_init+0x2c0>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2100      	movs	r1, #0
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 fdd6 	bl	80048fc <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 8003d50:	4b5c      	ldr	r3, [pc, #368]	@ (8003ec4 <low_level_init+0x2c4>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2100      	movs	r1, #0
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 fdd0 	bl	80048fc <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8003d5c:	4b5a      	ldr	r3, [pc, #360]	@ (8003ec8 <low_level_init+0x2c8>)
 8003d5e:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8003d62:	461d      	mov	r5, r3
 8003d64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003d6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8003d70:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fc85 	bl	8004686 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8003d7c:	4953      	ldr	r1, [pc, #332]	@ (8003ecc <low_level_init+0x2cc>)
 8003d7e:	4854      	ldr	r0, [pc, #336]	@ (8003ed0 <low_level_init+0x2d0>)
 8003d80:	f7fc ff1b 	bl	8000bba <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8003d84:	4852      	ldr	r0, [pc, #328]	@ (8003ed0 <low_level_init+0x2d0>)
 8003d86:	f7fc ff4a 	bl	8000c1e <LAN8742_Init>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d006      	beq.n	8003d9e <low_level_init+0x19e>
  {
    netif_set_link_down(netif);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f004 fe35 	bl	8008a00 <netif_set_link_down>
    netif_set_down(netif);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f004 fdcc 	bl	8008934 <netif_set_down>
 8003d9c:	e081      	b.n	8003ea2 <low_level_init+0x2a2>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8003d9e:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d165      	bne.n	8003e72 <low_level_init+0x272>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003da6:	484a      	ldr	r0, [pc, #296]	@ (8003ed0 <low_level_init+0x2d0>)
 8003da8:	f7fc ff86 	bl	8000cb8 <LAN8742_GetLinkState>
 8003dac:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8003db0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	dc06      	bgt.n	8003dc6 <low_level_init+0x1c6>
    {
      netif_set_link_down(netif);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f004 fe21 	bl	8008a00 <netif_set_link_down>
      netif_set_down(netif);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f004 fdb8 	bl	8008934 <netif_set_down>
 8003dc4:	e057      	b.n	8003e76 <low_level_init+0x276>
    }
    else
    {
      switch (PHYLinkState)
 8003dc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003dca:	3b02      	subs	r3, #2
 8003dcc:	2b03      	cmp	r3, #3
 8003dce:	d82b      	bhi.n	8003e28 <low_level_init+0x228>
 8003dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd8 <low_level_init+0x1d8>)
 8003dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd6:	bf00      	nop
 8003dd8:	08003de9 	.word	0x08003de9
 8003ddc:	08003dfb 	.word	0x08003dfb
 8003de0:	08003e0b 	.word	0x08003e0b
 8003de4:	08003e1b 	.word	0x08003e1b
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8003de8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003dec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 8003df0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003df4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8003df8:	e01f      	b.n	8003e3a <low_level_init+0x23a>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 8003e00:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003e04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8003e08:	e017      	b.n	8003e3a <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8003e0a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003e0e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 8003e12:	2300      	movs	r3, #0
 8003e14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8003e18:	e00f      	b.n	8003e3a <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 8003e20:	2300      	movs	r3, #0
 8003e22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8003e26:	e008      	b.n	8003e3a <low_level_init+0x23a>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8003e28:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003e2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 8003e30:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003e34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8003e38:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003e3a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4819      	ldr	r0, [pc, #100]	@ (8003ea8 <low_level_init+0x2a8>)
 8003e42:	f7fd fde7 	bl	8001a14 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8003e46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003e4a:	677b      	str	r3, [r7, #116]	@ 0x74
    MACConf.Speed = speed;
 8003e4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003e50:	673b      	str	r3, [r7, #112]	@ 0x70
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003e52:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003e56:	4619      	mov	r1, r3
 8003e58:	4813      	ldr	r0, [pc, #76]	@ (8003ea8 <low_level_init+0x2a8>)
 8003e5a:	f7fd fed2 	bl	8001c02 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8003e5e:	4812      	ldr	r0, [pc, #72]	@ (8003ea8 <low_level_init+0x2a8>)
 8003e60:	f7fd f98a 	bl	8001178 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f004 fcf9 	bl	800885c <netif_set_up>
    netif_set_link_up(netif);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f004 fd94 	bl	8008998 <netif_set_link_up>
 8003e70:	e001      	b.n	8003e76 <low_level_init+0x276>
    }

  }
  else
  {
    Error_Handler();
 8003e72:	f7fc fcc5 	bl	8000800 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

  if(HAL_GetREVID() == 0x1000)
 8003e76:	f7fc fff7 	bl	8000e68 <HAL_GetREVID>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e80:	d10f      	bne.n	8003ea2 <low_level_init+0x2a2>
  {
    /*
      This thread will keep resetting the RMII interface until good frames are received
    */
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 8003e82:	4b14      	ldr	r3, [pc, #80]	@ (8003ed4 <low_level_init+0x2d4>)
 8003e84:	f107 040c 	add.w	r4, r7, #12
 8003e88:	461d      	mov	r5, r3
 8003e8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003e92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 8003e96:	f107 030c 	add.w	r3, r7, #12
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 fbf2 	bl	8004686 <osThreadCreate>
  }
}
 8003ea2:	37d0      	adds	r7, #208	@ 0xd0
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bdb0      	pop	{r4, r5, r7, pc}
 8003ea8:	20005474 	.word	0x20005474
 8003eac:	40028000 	.word	0x40028000
 8003eb0:	2000012c 	.word	0x2000012c
 8003eb4:	2000008c 	.word	0x2000008c
 8003eb8:	20005524 	.word	0x20005524
 8003ebc:	08015398 	.word	0x08015398
 8003ec0:	2000546c 	.word	0x2000546c
 8003ec4:	20005470 	.word	0x20005470
 8003ec8:	08012854 	.word	0x08012854
 8003ecc:	2000000c 	.word	0x2000000c
 8003ed0:	2000555c 	.word	0x2000555c
 8003ed4:	08012880 	.word	0x08012880

08003ed8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b092      	sub	sp, #72	@ 0x48
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8003ef0:	f107 030c 	add.w	r3, r7, #12
 8003ef4:	2230      	movs	r2, #48	@ 0x30
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f00d fdd0 	bl	8011a9e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8003efe:	f107 030c 	add.w	r3, r7, #12
 8003f02:	2230      	movs	r2, #48	@ 0x30
 8003f04:	2100      	movs	r1, #0
 8003f06:	4618      	mov	r0, r3
 8003f08:	f00d fdc9 	bl	8011a9e <memset>

  for(q = p; q != NULL; q = q->next)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f10:	e045      	b.n	8003f9e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8003f12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f14:	2b03      	cmp	r3, #3
 8003f16:	d902      	bls.n	8003f1e <low_level_output+0x46>
      return ERR_IF;
 8003f18:	f06f 030b 	mvn.w	r3, #11
 8003f1c:	e07f      	b.n	800401e <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 8003f1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f20:	6859      	ldr	r1, [r3, #4]
 8003f22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f24:	4613      	mov	r3, r2
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	4413      	add	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	3348      	adds	r3, #72	@ 0x48
 8003f2e:	443b      	add	r3, r7
 8003f30:	3b3c      	subs	r3, #60	@ 0x3c
 8003f32:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8003f34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f36:	895b      	ldrh	r3, [r3, #10]
 8003f38:	4619      	mov	r1, r3
 8003f3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	4413      	add	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	3348      	adds	r3, #72	@ 0x48
 8003f46:	443b      	add	r3, r7
 8003f48:	3b38      	subs	r3, #56	@ 0x38
 8003f4a:	6019      	str	r1, [r3, #0]

    if(i>0)
 8003f4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d011      	beq.n	8003f76 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8003f52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f54:	1e5a      	subs	r2, r3, #1
 8003f56:	f107 000c 	add.w	r0, r7, #12
 8003f5a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	440b      	add	r3, r1
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	18c1      	adds	r1, r0, r3
 8003f66:	4613      	mov	r3, r2
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	4413      	add	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	3348      	adds	r3, #72	@ 0x48
 8003f70:	443b      	add	r3, r7
 8003f72:	3b34      	subs	r3, #52	@ 0x34
 8003f74:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8003f76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d109      	bne.n	8003f92 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8003f7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f80:	4613      	mov	r3, r2
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	4413      	add	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	3348      	adds	r3, #72	@ 0x48
 8003f8a:	443b      	add	r3, r7
 8003f8c:	3b34      	subs	r3, #52	@ 0x34
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
    }

    i++;
 8003f92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f94:	3301      	adds	r3, #1
 8003f96:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8003f98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1b6      	bne.n	8003f12 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	891b      	ldrh	r3, [r3, #8]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	4b1f      	ldr	r3, [pc, #124]	@ (8004028 <low_level_output+0x150>)
 8003fac:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8003fae:	4a1e      	ldr	r2, [pc, #120]	@ (8004028 <low_level_output+0x150>)
 8003fb0:	f107 030c 	add.w	r3, r7, #12
 8003fb4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8003fb6:	4a1c      	ldr	r2, [pc, #112]	@ (8004028 <low_level_output+0x150>)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8003fbc:	6838      	ldr	r0, [r7, #0]
 8003fbe:	f005 f9a7 	bl	8009310 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 8003fc2:	4919      	ldr	r1, [pc, #100]	@ (8004028 <low_level_output+0x150>)
 8003fc4:	4819      	ldr	r0, [pc, #100]	@ (800402c <low_level_output+0x154>)
 8003fc6:	f7fd f9c7 	bl	8001358 <HAL_ETH_Transmit_IT>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d103      	bne.n	8003fd8 <low_level_output+0x100>
    {
      errval = ERR_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8003fd6:	e01b      	b.n	8004010 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8003fd8:	4814      	ldr	r0, [pc, #80]	@ (800402c <low_level_output+0x154>)
 8003fda:	f7fd fe6f 	bl	8001cbc <HAL_ETH_GetError>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00d      	beq.n	8004004 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8003fe8:	4b11      	ldr	r3, [pc, #68]	@ (8004030 <low_level_output+0x158>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 fc83 	bl	80048fc <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 8003ff6:	480d      	ldr	r0, [pc, #52]	@ (800402c <low_level_output+0x154>)
 8003ff8:	f7fd fb4e 	bl	8001698 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8003ffc:	23fe      	movs	r3, #254	@ 0xfe
 8003ffe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004002:	e005      	b.n	8004010 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8004004:	6838      	ldr	r0, [r7, #0]
 8004006:	f005 f8dd 	bl	80091c4 <pbuf_free>
        errval =  ERR_IF;
 800400a:	23f4      	movs	r3, #244	@ 0xf4
 800400c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8004010:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8004014:	f113 0f02 	cmn.w	r3, #2
 8004018:	d0d3      	beq.n	8003fc2 <low_level_output+0xea>

  return errval;
 800401a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800401e:	4618      	mov	r0, r3
 8004020:	3748      	adds	r7, #72	@ 0x48
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	20005524 	.word	0x20005524
 800402c:	20005474 	.word	0x20005474
 8004030:	20005470 	.word	0x20005470

08004034 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800403c:	2300      	movs	r3, #0
 800403e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004040:	4b07      	ldr	r3, [pc, #28]	@ (8004060 <low_level_input+0x2c>)
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d105      	bne.n	8004054 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004048:	f107 030c 	add.w	r3, r7, #12
 800404c:	4619      	mov	r1, r3
 800404e:	4805      	ldr	r0, [pc, #20]	@ (8004064 <low_level_input+0x30>)
 8004050:	f7fd f9de 	bl	8001410 <HAL_ETH_ReadData>
  }

  return p;
 8004054:	68fb      	ldr	r3, [r7, #12]
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	20005468 	.word	0x20005468
 8004064:	20005474 	.word	0x20005474

08004068 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004070:	2300      	movs	r3, #0
 8004072:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004078:	4b0f      	ldr	r3, [pc, #60]	@ (80040b8 <ethernetif_input+0x50>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004080:	4618      	mov	r0, r3
 8004082:	f000 fc3b 	bl	80048fc <osSemaphoreWait>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1f5      	bne.n	8004078 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800408c:	68b8      	ldr	r0, [r7, #8]
 800408e:	f7ff ffd1 	bl	8004034 <low_level_input>
 8004092:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	68b9      	ldr	r1, [r7, #8]
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	4798      	blx	r3
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f005 f88a 	bl	80091c4 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1ea      	bne.n	800408c <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80040b6:	e7df      	b.n	8004078 <ethernetif_input+0x10>
 80040b8:	2000546c 	.word	0x2000546c

080040bc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d106      	bne.n	80040d8 <ethernetif_init+0x1c>
 80040ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004104 <ethernetif_init+0x48>)
 80040cc:	f240 2217 	movw	r2, #535	@ 0x217
 80040d0:	490d      	ldr	r1, [pc, #52]	@ (8004108 <ethernetif_init+0x4c>)
 80040d2:	480e      	ldr	r0, [pc, #56]	@ (800410c <ethernetif_init+0x50>)
 80040d4:	f00d fc7e 	bl	80119d4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2273      	movs	r2, #115	@ 0x73
 80040dc:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2274      	movs	r2, #116	@ 0x74
 80040e4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a09      	ldr	r2, [pc, #36]	@ (8004110 <ethernetif_init+0x54>)
 80040ec:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a08      	ldr	r2, [pc, #32]	@ (8004114 <ethernetif_init+0x58>)
 80040f2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff fd83 	bl	8003c00 <low_level_init>

  return ERR_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	0801289c 	.word	0x0801289c
 8004108:	080128b8 	.word	0x080128b8
 800410c:	080128c8 	.word	0x080128c8
 8004110:	0800f8b5 	.word	0x0800f8b5
 8004114:	08003ed9 	.word	0x08003ed9

08004118 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004124:	68f9      	ldr	r1, [r7, #12]
 8004126:	4809      	ldr	r0, [pc, #36]	@ (800414c <pbuf_free_custom+0x34>)
 8004128:	f004 f980 	bl	800842c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800412c:	4b08      	ldr	r3, [pc, #32]	@ (8004150 <pbuf_free_custom+0x38>)
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d107      	bne.n	8004144 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004134:	4b06      	ldr	r3, [pc, #24]	@ (8004150 <pbuf_free_custom+0x38>)
 8004136:	2200      	movs	r2, #0
 8004138:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800413a:	4b06      	ldr	r3, [pc, #24]	@ (8004154 <pbuf_free_custom+0x3c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fc2a 	bl	8004998 <osSemaphoreRelease>
  }
}
 8004144:	bf00      	nop
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	08015398 	.word	0x08015398
 8004150:	20005468 	.word	0x20005468
 8004154:	2000546c 	.word	0x2000546c

08004158 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800415c:	f7fc fe54 	bl	8000e08 <HAL_GetTick>
 8004160:	4603      	mov	r3, r0
}
 8004162:	4618      	mov	r0, r3
 8004164:	bd80      	pop	{r7, pc}
	...

08004168 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08e      	sub	sp, #56	@ 0x38
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004170:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	605a      	str	r2, [r3, #4]
 800417a:	609a      	str	r2, [r3, #8]
 800417c:	60da      	str	r2, [r3, #12]
 800417e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a52      	ldr	r2, [pc, #328]	@ (80042d0 <HAL_ETH_MspInit+0x168>)
 8004186:	4293      	cmp	r3, r2
 8004188:	f040 809e 	bne.w	80042c8 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800418c:	4b51      	ldr	r3, [pc, #324]	@ (80042d4 <HAL_ETH_MspInit+0x16c>)
 800418e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004190:	4a50      	ldr	r2, [pc, #320]	@ (80042d4 <HAL_ETH_MspInit+0x16c>)
 8004192:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004196:	6313      	str	r3, [r2, #48]	@ 0x30
 8004198:	4b4e      	ldr	r3, [pc, #312]	@ (80042d4 <HAL_ETH_MspInit+0x16c>)
 800419a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041a0:	623b      	str	r3, [r7, #32]
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	4b4b      	ldr	r3, [pc, #300]	@ (80042d4 <HAL_ETH_MspInit+0x16c>)
 80041a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a8:	4a4a      	ldr	r2, [pc, #296]	@ (80042d4 <HAL_ETH_MspInit+0x16c>)
 80041aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80041ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80041b0:	4b48      	ldr	r3, [pc, #288]	@ (80042d4 <HAL_ETH_MspInit+0x16c>)
 80041b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80041b8:	61fb      	str	r3, [r7, #28]
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	4b45      	ldr	r3, [pc, #276]	@ (80042d4 <HAL_ETH_MspInit+0x16c>)
 80041be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c0:	4a44      	ldr	r2, [pc, #272]	@ (80042d4 <HAL_ETH_MspInit+0x16c>)
 80041c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80041c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80041c8:	4b42      	ldr	r3, [pc, #264]	@ (80042d4 <HAL_ETH_MspInit+0x16c>)
 80041ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041d0:	61bb      	str	r3, [r7, #24]
 80041d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041d4:	4b3f      	ldr	r3, [pc, #252]	@ (80042d4 <HAL_ETH_MspInit+0x16c>)
 80041d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d8:	4a3e      	ldr	r2, [pc, #248]	@ (80042d4 <HAL_ETH_MspInit+0x16c>)
 80041da:	f043 0304 	orr.w	r3, r3, #4
 80041de:	6313      	str	r3, [r2, #48]	@ 0x30
 80041e0:	4b3c      	ldr	r3, [pc, #240]	@ (80042d4 <HAL_ETH_MspInit+0x16c>)
 80041e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	617b      	str	r3, [r7, #20]
 80041ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ec:	4b39      	ldr	r3, [pc, #228]	@ (80042d4 <HAL_ETH_MspInit+0x16c>)
 80041ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f0:	4a38      	ldr	r2, [pc, #224]	@ (80042d4 <HAL_ETH_MspInit+0x16c>)
 80041f2:	f043 0301 	orr.w	r3, r3, #1
 80041f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80041f8:	4b36      	ldr	r3, [pc, #216]	@ (80042d4 <HAL_ETH_MspInit+0x16c>)
 80041fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004204:	4b33      	ldr	r3, [pc, #204]	@ (80042d4 <HAL_ETH_MspInit+0x16c>)
 8004206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004208:	4a32      	ldr	r2, [pc, #200]	@ (80042d4 <HAL_ETH_MspInit+0x16c>)
 800420a:	f043 0302 	orr.w	r3, r3, #2
 800420e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004210:	4b30      	ldr	r3, [pc, #192]	@ (80042d4 <HAL_ETH_MspInit+0x16c>)
 8004212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800421c:	4b2d      	ldr	r3, [pc, #180]	@ (80042d4 <HAL_ETH_MspInit+0x16c>)
 800421e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004220:	4a2c      	ldr	r2, [pc, #176]	@ (80042d4 <HAL_ETH_MspInit+0x16c>)
 8004222:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004226:	6313      	str	r3, [r2, #48]	@ 0x30
 8004228:	4b2a      	ldr	r3, [pc, #168]	@ (80042d4 <HAL_ETH_MspInit+0x16c>)
 800422a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004234:	2332      	movs	r3, #50	@ 0x32
 8004236:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004238:	2302      	movs	r3, #2
 800423a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800423c:	2300      	movs	r3, #0
 800423e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004240:	2303      	movs	r3, #3
 8004242:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004244:	230b      	movs	r3, #11
 8004246:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004248:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800424c:	4619      	mov	r1, r3
 800424e:	4822      	ldr	r0, [pc, #136]	@ (80042d8 <HAL_ETH_MspInit+0x170>)
 8004250:	f7fe f96e 	bl	8002530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004254:	2386      	movs	r3, #134	@ 0x86
 8004256:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004258:	2302      	movs	r3, #2
 800425a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800425c:	2300      	movs	r3, #0
 800425e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004260:	2303      	movs	r3, #3
 8004262:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004264:	230b      	movs	r3, #11
 8004266:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004268:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800426c:	4619      	mov	r1, r3
 800426e:	481b      	ldr	r0, [pc, #108]	@ (80042dc <HAL_ETH_MspInit+0x174>)
 8004270:	f7fe f95e 	bl	8002530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004274:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004278:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800427a:	2302      	movs	r3, #2
 800427c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800427e:	2300      	movs	r3, #0
 8004280:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004282:	2303      	movs	r3, #3
 8004284:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004286:	230b      	movs	r3, #11
 8004288:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800428a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800428e:	4619      	mov	r1, r3
 8004290:	4813      	ldr	r0, [pc, #76]	@ (80042e0 <HAL_ETH_MspInit+0x178>)
 8004292:	f7fe f94d 	bl	8002530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004296:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800429a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800429c:	2302      	movs	r3, #2
 800429e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a0:	2300      	movs	r3, #0
 80042a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042a4:	2303      	movs	r3, #3
 80042a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80042a8:	230b      	movs	r3, #11
 80042aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80042ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042b0:	4619      	mov	r1, r3
 80042b2:	480c      	ldr	r0, [pc, #48]	@ (80042e4 <HAL_ETH_MspInit+0x17c>)
 80042b4:	f7fe f93c 	bl	8002530 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80042b8:	2200      	movs	r2, #0
 80042ba:	2105      	movs	r1, #5
 80042bc:	203d      	movs	r0, #61	@ 0x3d
 80042be:	f7fc fe97 	bl	8000ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80042c2:	203d      	movs	r0, #61	@ 0x3d
 80042c4:	f7fc feb0 	bl	8001028 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80042c8:	bf00      	nop
 80042ca:	3738      	adds	r7, #56	@ 0x38
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	40028000 	.word	0x40028000
 80042d4:	40023800 	.word	0x40023800
 80042d8:	40020800 	.word	0x40020800
 80042dc:	40020000 	.word	0x40020000
 80042e0:	40020400 	.word	0x40020400
 80042e4:	40021800 	.word	0x40021800

080042e8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80042ec:	4802      	ldr	r0, [pc, #8]	@ (80042f8 <ETH_PHY_IO_Init+0x10>)
 80042ee:	f7fd fca3 	bl	8001c38 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	20005474 	.word	0x20005474

080042fc <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  return 0;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	68f9      	ldr	r1, [r7, #12]
 800431e:	4807      	ldr	r0, [pc, #28]	@ (800433c <ETH_PHY_IO_ReadReg+0x30>)
 8004320:	f7fd fae4 	bl	80018ec <HAL_ETH_ReadPHYRegister>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800432a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800432e:	e000      	b.n	8004332 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	20005474 	.word	0x20005474

08004340 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	68f9      	ldr	r1, [r7, #12]
 8004352:	4807      	ldr	r0, [pc, #28]	@ (8004370 <ETH_PHY_IO_WriteReg+0x30>)
 8004354:	f7fd fb15 	bl	8001982 <HAL_ETH_WritePHYRegister>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800435e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004362:	e000      	b.n	8004366 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	20005474 	.word	0x20005474

08004374 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004378:	f7fc fd46 	bl	8000e08 <HAL_GetTick>
 800437c:	4603      	mov	r3, r0
}
 800437e:	4618      	mov	r0, r3
 8004380:	bd80      	pop	{r7, pc}
	...

08004384 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b0a0      	sub	sp, #128	@ 0x80
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800438c:	f107 0308 	add.w	r3, r7, #8
 8004390:	2264      	movs	r2, #100	@ 0x64
 8004392:	2100      	movs	r1, #0
 8004394:	4618      	mov	r0, r3
 8004396:	f00d fb82 	bl	8011a9e <memset>
  int32_t PHYLinkState = 0;
 800439a:	2300      	movs	r3, #0
 800439c:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800439e:	2300      	movs	r3, #0
 80043a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80043a2:	2300      	movs	r3, #0
 80043a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043a6:	2300      	movs	r3, #0
 80043a8:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80043ae:	483a      	ldr	r0, [pc, #232]	@ (8004498 <ethernet_link_thread+0x114>)
 80043b0:	f7fc fc82 	bl	8000cb8 <LAN8742_GetLinkState>
 80043b4:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80043b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043b8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80043bc:	089b      	lsrs	r3, r3, #2
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00c      	beq.n	80043e2 <ethernet_link_thread+0x5e>
 80043c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	dc09      	bgt.n	80043e2 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 80043ce:	4833      	ldr	r0, [pc, #204]	@ (800449c <ethernet_link_thread+0x118>)
 80043d0:	f7fc ff42 	bl	8001258 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80043d4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80043d6:	f004 faad 	bl	8008934 <netif_set_down>
    netif_set_link_down(netif);
 80043da:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80043dc:	f004 fb10 	bl	8008a00 <netif_set_link_down>
 80043e0:	e055      	b.n	800448e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80043e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043e4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d14e      	bne.n	800448e <ethernet_link_thread+0x10a>
 80043f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	dd4b      	ble.n	800448e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 80043f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043f8:	3b02      	subs	r3, #2
 80043fa:	2b03      	cmp	r3, #3
 80043fc:	d82a      	bhi.n	8004454 <ethernet_link_thread+0xd0>
 80043fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004404 <ethernet_link_thread+0x80>)
 8004400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004404:	08004415 	.word	0x08004415
 8004408:	08004427 	.word	0x08004427
 800440c:	08004437 	.word	0x08004437
 8004410:	08004447 	.word	0x08004447
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004414:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004418:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800441a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800441e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004420:	2301      	movs	r3, #1
 8004422:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004424:	e017      	b.n	8004456 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004426:	2300      	movs	r3, #0
 8004428:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800442a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800442e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004430:	2301      	movs	r3, #1
 8004432:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004434:	e00f      	b.n	8004456 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004436:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800443a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800443c:	2300      	movs	r3, #0
 800443e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004440:	2301      	movs	r3, #1
 8004442:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004444:	e007      	b.n	8004456 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004446:	2300      	movs	r3, #0
 8004448:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800444a:	2300      	movs	r3, #0
 800444c:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800444e:	2301      	movs	r3, #1
 8004450:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004452:	e000      	b.n	8004456 <ethernet_link_thread+0xd2>
    default:
      break;
 8004454:	bf00      	nop
    }

    if(linkchanged)
 8004456:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004458:	2b00      	cmp	r3, #0
 800445a:	d018      	beq.n	800448e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800445c:	f107 0308 	add.w	r3, r7, #8
 8004460:	4619      	mov	r1, r3
 8004462:	480e      	ldr	r0, [pc, #56]	@ (800449c <ethernet_link_thread+0x118>)
 8004464:	f7fd fad6 	bl	8001a14 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004468:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800446a:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800446c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800446e:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004470:	f107 0308 	add.w	r3, r7, #8
 8004474:	4619      	mov	r1, r3
 8004476:	4809      	ldr	r0, [pc, #36]	@ (800449c <ethernet_link_thread+0x118>)
 8004478:	f7fd fbc3 	bl	8001c02 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800447c:	4807      	ldr	r0, [pc, #28]	@ (800449c <ethernet_link_thread+0x118>)
 800447e:	f7fc fe7b 	bl	8001178 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8004482:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004484:	f004 f9ea 	bl	800885c <netif_set_up>
      netif_set_link_up(netif);
 8004488:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800448a:	f004 fa85 	bl	8008998 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800448e:	2064      	movs	r0, #100	@ 0x64
 8004490:	f000 f951 	bl	8004736 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004494:	e78b      	b.n	80043ae <ethernet_link_thread+0x2a>
 8004496:	bf00      	nop
 8004498:	2000555c 	.word	0x2000555c
 800449c:	20005474 	.word	0x20005474

080044a0 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80044a8:	4812      	ldr	r0, [pc, #72]	@ (80044f4 <HAL_ETH_RxAllocateCallback+0x54>)
 80044aa:	f003 ff4b 	bl	8008344 <memp_malloc_pool>
 80044ae:	60f8      	str	r0, [r7, #12]
  if (p)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d014      	beq.n	80044e0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f103 0220 	add.w	r2, r3, #32
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4a0d      	ldr	r2, [pc, #52]	@ (80044f8 <HAL_ETH_RxAllocateCallback+0x58>)
 80044c4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80044ce:	9201      	str	r2, [sp, #4]
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2241      	movs	r2, #65	@ 0x41
 80044d6:	2100      	movs	r1, #0
 80044d8:	2000      	movs	r0, #0
 80044da:	f004 fcb9 	bl	8008e50 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80044de:	e005      	b.n	80044ec <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80044e0:	4b06      	ldr	r3, [pc, #24]	@ (80044fc <HAL_ETH_RxAllocateCallback+0x5c>)
 80044e2:	2201      	movs	r2, #1
 80044e4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]
}
 80044ec:	bf00      	nop
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	08015398 	.word	0x08015398
 80044f8:	08004119 	.word	0x08004119
 80044fc:	20005468 	.word	0x20005468

08004500 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b088      	sub	sp, #32
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
 800450c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004516:	2300      	movs	r3, #0
 8004518:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	3b20      	subs	r3, #32
 800451e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	2200      	movs	r2, #0
 800452a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	887a      	ldrh	r2, [r7, #2]
 8004530:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d103      	bne.n	8004542 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	69fa      	ldr	r2, [r7, #28]
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	e003      	b.n	800454a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	69fa      	ldr	r2, [r7, #28]
 8004548:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	69fa      	ldr	r2, [r7, #28]
 800454e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	61fb      	str	r3, [r7, #28]
 8004556:	e009      	b.n	800456c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	891a      	ldrh	r2, [r3, #8]
 800455c:	887b      	ldrh	r3, [r7, #2]
 800455e:	4413      	add	r3, r2
 8004560:	b29a      	uxth	r2, r3
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	61fb      	str	r3, [r7, #28]
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f2      	bne.n	8004558 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8004572:	887b      	ldrh	r3, [r7, #2]
 8004574:	4619      	mov	r1, r3
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7ff fade 	bl	8003b38 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800457c:	bf00      	nop
 800457e:	3720      	adds	r7, #32
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f004 fe19 	bl	80091c4 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8004592:	bf00      	nop
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
	...

0800459c <RMII_Thread>:
/* USER CODE BEGIN 8 */

/* USER CODE END 8 */

void RMII_Thread( void const * argument )
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  (void) argument;

  for(;;)
  {
    /* some unicast good packets are received */
    if(heth.Instance->MMCRGUFCR > 0U)
 80045a4:	4b15      	ldr	r3, [pc, #84]	@ (80045fc <RMII_Thread+0x60>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <RMII_Thread+0x1c>
    {
      /* RMII Init is OK: Delete the Thread */
      osThreadTerminate(NULL);
 80045b0:	2000      	movs	r0, #0
 80045b2:	f000 f8b4 	bl	800471e <osThreadTerminate>
 80045b6:	e7f5      	b.n	80045a4 <RMII_Thread+0x8>
    }
    else if(heth.Instance->MMCRFCECR > 10U)
 80045b8:	4b10      	ldr	r3, [pc, #64]	@ (80045fc <RMII_Thread+0x60>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 80045c0:	2b0a      	cmp	r3, #10
 80045c2:	d916      	bls.n	80045f2 <RMII_Thread+0x56>
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 80045c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004600 <RMII_Thread+0x64>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	4a0d      	ldr	r2, [pc, #52]	@ (8004600 <RMII_Thread+0x64>)
 80045ca:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80045ce:	6053      	str	r3, [r2, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 80045d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004600 <RMII_Thread+0x64>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	4a0a      	ldr	r2, [pc, #40]	@ (8004600 <RMII_Thread+0x64>)
 80045d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80045da:	6053      	str	r3, [r2, #4]

      heth.Instance->MMCCR |= ETH_MMCCR_CR;
 80045dc:	4b07      	ldr	r3, [pc, #28]	@ (80045fc <RMII_Thread+0x60>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80045e4:	4b05      	ldr	r3, [pc, #20]	@ (80045fc <RMII_Thread+0x60>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f042 0201 	orr.w	r2, r2, #1
 80045ec:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80045f0:	e7d8      	b.n	80045a4 <RMII_Thread+0x8>
    }
    else
    {
      /* Delay 200 ms */
      osDelay(200);
 80045f2:	20c8      	movs	r0, #200	@ 0xc8
 80045f4:	f000 f89f 	bl	8004736 <osDelay>
    if(heth.Instance->MMCRGUFCR > 0U)
 80045f8:	e7d4      	b.n	80045a4 <RMII_Thread+0x8>
 80045fa:	bf00      	nop
 80045fc:	20005474 	.word	0x20005474
 8004600:	40013800 	.word	0x40013800

08004604 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	4603      	mov	r3, r0
 800460c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800460e:	2300      	movs	r3, #0
 8004610:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004612:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004616:	2b84      	cmp	r3, #132	@ 0x84
 8004618:	d005      	beq.n	8004626 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800461a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	4413      	add	r3, r2
 8004622:	3303      	adds	r3, #3
 8004624:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004626:	68fb      	ldr	r3, [r7, #12]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800463a:	f3ef 8305 	mrs	r3, IPSR
 800463e:	607b      	str	r3, [r7, #4]
  return(result);
 8004640:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004642:	2b00      	cmp	r3, #0
 8004644:	bf14      	ite	ne
 8004646:	2301      	movne	r3, #1
 8004648:	2300      	moveq	r3, #0
 800464a:	b2db      	uxtb	r3, r3
}
 800464c:	4618      	mov	r0, r3
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800465c:	f001 fd64 	bl	8006128 <vTaskStartScheduler>
  
  return osOK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	bd80      	pop	{r7, pc}

08004666 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800466a:	f7ff ffe3 	bl	8004634 <inHandlerMode>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004674:	f001 fe7c 	bl	8006370 <xTaskGetTickCountFromISR>
 8004678:	4603      	mov	r3, r0
 800467a:	e002      	b.n	8004682 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800467c:	f001 fe68 	bl	8006350 <xTaskGetTickCount>
 8004680:	4603      	mov	r3, r0
  }
}
 8004682:	4618      	mov	r0, r3
 8004684:	bd80      	pop	{r7, pc}

08004686 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004686:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004688:	b089      	sub	sp, #36	@ 0x24
 800468a:	af04      	add	r7, sp, #16
 800468c:	6078      	str	r0, [r7, #4]
 800468e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d020      	beq.n	80046da <osThreadCreate+0x54>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d01c      	beq.n	80046da <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685c      	ldr	r4, [r3, #4]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691e      	ldr	r6, [r3, #16]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff ffa6 	bl	8004604 <makeFreeRtosPriority>
 80046b8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046c2:	9202      	str	r2, [sp, #8]
 80046c4:	9301      	str	r3, [sp, #4]
 80046c6:	9100      	str	r1, [sp, #0]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	4632      	mov	r2, r6
 80046cc:	4629      	mov	r1, r5
 80046ce:	4620      	mov	r0, r4
 80046d0:	f001 fac0 	bl	8005c54 <xTaskCreateStatic>
 80046d4:	4603      	mov	r3, r0
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	e01c      	b.n	8004714 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685c      	ldr	r4, [r3, #4]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046e6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7ff ff88 	bl	8004604 <makeFreeRtosPriority>
 80046f4:	4602      	mov	r2, r0
 80046f6:	f107 030c 	add.w	r3, r7, #12
 80046fa:	9301      	str	r3, [sp, #4]
 80046fc:	9200      	str	r2, [sp, #0]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	4632      	mov	r2, r6
 8004702:	4629      	mov	r1, r5
 8004704:	4620      	mov	r0, r4
 8004706:	f001 fb0b 	bl	8005d20 <xTaskCreate>
 800470a:	4603      	mov	r3, r0
 800470c:	2b01      	cmp	r3, #1
 800470e:	d001      	beq.n	8004714 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004710:	2300      	movs	r3, #0
 8004712:	e000      	b.n	8004716 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004714:	68fb      	ldr	r3, [r7, #12]
}
 8004716:	4618      	mov	r0, r3
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800471e <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b082      	sub	sp, #8
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f001 fc34 	bl	8005f94 <vTaskDelete>
  return osOK;
 800472c:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b084      	sub	sp, #16
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <osDelay+0x16>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	e000      	b.n	800474e <osDelay+0x18>
 800474c:	2301      	movs	r3, #1
 800474e:	4618      	mov	r0, r3
 8004750:	f001 fcb2 	bl	80060b8 <vTaskDelay>
  
  return osOK;
 8004754:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b082      	sub	sp, #8
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d007      	beq.n	800477e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	4619      	mov	r1, r3
 8004774:	2001      	movs	r0, #1
 8004776:	f000 fc5c 	bl	8005032 <xQueueCreateMutexStatic>
 800477a:	4603      	mov	r3, r0
 800477c:	e003      	b.n	8004786 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800477e:	2001      	movs	r0, #1
 8004780:	f000 fc3f 	bl	8005002 <xQueueCreateMutex>
 8004784:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004786:	4618      	mov	r0, r3
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
	...

08004790 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800479a:	2300      	movs	r3, #0
 800479c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <osMutexWait+0x18>
    return osErrorParameter;
 80047a4:	2380      	movs	r3, #128	@ 0x80
 80047a6:	e03a      	b.n	800481e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80047a8:	2300      	movs	r3, #0
 80047aa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047b2:	d103      	bne.n	80047bc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80047b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	e009      	b.n	80047d0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d006      	beq.n	80047d0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <osMutexWait+0x40>
      ticks = 1;
 80047cc:	2301      	movs	r3, #1
 80047ce:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80047d0:	f7ff ff30 	bl	8004634 <inHandlerMode>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d017      	beq.n	800480a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80047da:	f107 0308 	add.w	r3, r7, #8
 80047de:	461a      	mov	r2, r3
 80047e0:	2100      	movs	r1, #0
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f001 f886 	bl	80058f4 <xQueueReceiveFromISR>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d001      	beq.n	80047f2 <osMutexWait+0x62>
      return osErrorOS;
 80047ee:	23ff      	movs	r3, #255	@ 0xff
 80047f0:	e015      	b.n	800481e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d011      	beq.n	800481c <osMutexWait+0x8c>
 80047f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004828 <osMutexWait+0x98>)
 80047fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	f3bf 8f4f 	dsb	sy
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	e008      	b.n	800481c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800480a:	68f9      	ldr	r1, [r7, #12]
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 ff59 	bl	80056c4 <xQueueSemaphoreTake>
 8004812:	4603      	mov	r3, r0
 8004814:	2b01      	cmp	r3, #1
 8004816:	d001      	beq.n	800481c <osMutexWait+0x8c>
    return osErrorOS;
 8004818:	23ff      	movs	r3, #255	@ 0xff
 800481a:	e000      	b.n	800481e <osMutexWait+0x8e>
  }
  
  return osOK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	e000ed04 	.word	0xe000ed04

0800482c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004834:	2300      	movs	r3, #0
 8004836:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004838:	2300      	movs	r3, #0
 800483a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800483c:	f7ff fefa 	bl	8004634 <inHandlerMode>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d016      	beq.n	8004874 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004846:	f107 0308 	add.w	r3, r7, #8
 800484a:	4619      	mov	r1, r3
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 fdb8 	bl	80053c2 <xQueueGiveFromISR>
 8004852:	4603      	mov	r3, r0
 8004854:	2b01      	cmp	r3, #1
 8004856:	d001      	beq.n	800485c <osMutexRelease+0x30>
      return osErrorOS;
 8004858:	23ff      	movs	r3, #255	@ 0xff
 800485a:	e017      	b.n	800488c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d013      	beq.n	800488a <osMutexRelease+0x5e>
 8004862:	4b0c      	ldr	r3, [pc, #48]	@ (8004894 <osMutexRelease+0x68>)
 8004864:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	f3bf 8f4f 	dsb	sy
 800486e:	f3bf 8f6f 	isb	sy
 8004872:	e00a      	b.n	800488a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004874:	2300      	movs	r3, #0
 8004876:	2200      	movs	r2, #0
 8004878:	2100      	movs	r1, #0
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 fbf4 	bl	8005068 <xQueueGenericSend>
 8004880:	4603      	mov	r3, r0
 8004882:	2b01      	cmp	r3, #1
 8004884:	d001      	beq.n	800488a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004886:	23ff      	movs	r3, #255	@ 0xff
 8004888:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800488a:	68fb      	ldr	r3, [r7, #12]
}
 800488c:	4618      	mov	r0, r3
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	e000ed04 	.word	0xe000ed04

08004898 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af02      	add	r7, sp, #8
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00f      	beq.n	80048ca <osSemaphoreCreate+0x32>
    if (count == 1) {
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d10a      	bne.n	80048c6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	2203      	movs	r2, #3
 80048b6:	9200      	str	r2, [sp, #0]
 80048b8:	2200      	movs	r2, #0
 80048ba:	2100      	movs	r1, #0
 80048bc:	2001      	movs	r0, #1
 80048be:	f000 fa9d 	bl	8004dfc <xQueueGenericCreateStatic>
 80048c2:	4603      	mov	r3, r0
 80048c4:	e016      	b.n	80048f4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80048c6:	2300      	movs	r3, #0
 80048c8:	e014      	b.n	80048f4 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d110      	bne.n	80048f2 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80048d0:	2203      	movs	r2, #3
 80048d2:	2100      	movs	r1, #0
 80048d4:	2001      	movs	r0, #1
 80048d6:	f000 fb18 	bl	8004f0a <xQueueGenericCreate>
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d005      	beq.n	80048ee <osSemaphoreCreate+0x56>
 80048e2:	2300      	movs	r3, #0
 80048e4:	2200      	movs	r2, #0
 80048e6:	2100      	movs	r1, #0
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 fbbd 	bl	8005068 <xQueueGenericSend>
      return sema;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	e000      	b.n	80048f4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80048f2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004906:	2300      	movs	r3, #0
 8004908:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004910:	2380      	movs	r3, #128	@ 0x80
 8004912:	e03a      	b.n	800498a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004914:	2300      	movs	r3, #0
 8004916:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800491e:	d103      	bne.n	8004928 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004920:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	e009      	b.n	800493c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d006      	beq.n	800493c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <osSemaphoreWait+0x40>
      ticks = 1;
 8004938:	2301      	movs	r3, #1
 800493a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800493c:	f7ff fe7a 	bl	8004634 <inHandlerMode>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d017      	beq.n	8004976 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004946:	f107 0308 	add.w	r3, r7, #8
 800494a:	461a      	mov	r2, r3
 800494c:	2100      	movs	r1, #0
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 ffd0 	bl	80058f4 <xQueueReceiveFromISR>
 8004954:	4603      	mov	r3, r0
 8004956:	2b01      	cmp	r3, #1
 8004958:	d001      	beq.n	800495e <osSemaphoreWait+0x62>
      return osErrorOS;
 800495a:	23ff      	movs	r3, #255	@ 0xff
 800495c:	e015      	b.n	800498a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d011      	beq.n	8004988 <osSemaphoreWait+0x8c>
 8004964:	4b0b      	ldr	r3, [pc, #44]	@ (8004994 <osSemaphoreWait+0x98>)
 8004966:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	e008      	b.n	8004988 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004976:	68f9      	ldr	r1, [r7, #12]
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 fea3 	bl	80056c4 <xQueueSemaphoreTake>
 800497e:	4603      	mov	r3, r0
 8004980:	2b01      	cmp	r3, #1
 8004982:	d001      	beq.n	8004988 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004984:	23ff      	movs	r3, #255	@ 0xff
 8004986:	e000      	b.n	800498a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	e000ed04 	.word	0xe000ed04

08004998 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80049a0:	2300      	movs	r3, #0
 80049a2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80049a4:	2300      	movs	r3, #0
 80049a6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80049a8:	f7ff fe44 	bl	8004634 <inHandlerMode>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d016      	beq.n	80049e0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80049b2:	f107 0308 	add.w	r3, r7, #8
 80049b6:	4619      	mov	r1, r3
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 fd02 	bl	80053c2 <xQueueGiveFromISR>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d001      	beq.n	80049c8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80049c4:	23ff      	movs	r3, #255	@ 0xff
 80049c6:	e017      	b.n	80049f8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d013      	beq.n	80049f6 <osSemaphoreRelease+0x5e>
 80049ce:	4b0c      	ldr	r3, [pc, #48]	@ (8004a00 <osSemaphoreRelease+0x68>)
 80049d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	e00a      	b.n	80049f6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80049e0:	2300      	movs	r3, #0
 80049e2:	2200      	movs	r2, #0
 80049e4:	2100      	movs	r1, #0
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fb3e 	bl	8005068 <xQueueGenericSend>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d001      	beq.n	80049f6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80049f2:	23ff      	movs	r3, #255	@ 0xff
 80049f4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80049f6:	68fb      	ldr	r3, [r7, #12]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	e000ed04 	.word	0xe000ed04

08004a04 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004a04:	b590      	push	{r4, r7, lr}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af02      	add	r7, sp, #8
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d011      	beq.n	8004a3a <osMessageCreate+0x36>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00d      	beq.n	8004a3a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6818      	ldr	r0, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6859      	ldr	r1, [r3, #4]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689a      	ldr	r2, [r3, #8]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	2400      	movs	r4, #0
 8004a30:	9400      	str	r4, [sp, #0]
 8004a32:	f000 f9e3 	bl	8004dfc <xQueueGenericCreateStatic>
 8004a36:	4603      	mov	r3, r0
 8004a38:	e008      	b.n	8004a4c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6818      	ldr	r0, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	4619      	mov	r1, r3
 8004a46:	f000 fa60 	bl	8004f0a <xQueueGenericCreate>
 8004a4a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd90      	pop	{r4, r7, pc}

08004a54 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004a60:	2300      	movs	r3, #0
 8004a62:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <osMessagePut+0x1e>
    ticks = 1;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004a72:	f7ff fddf 	bl	8004634 <inHandlerMode>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d018      	beq.n	8004aae <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004a7c:	f107 0210 	add.w	r2, r7, #16
 8004a80:	f107 0108 	add.w	r1, r7, #8
 8004a84:	2300      	movs	r3, #0
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 fbf8 	bl	800527c <xQueueGenericSendFromISR>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d001      	beq.n	8004a96 <osMessagePut+0x42>
      return osErrorOS;
 8004a92:	23ff      	movs	r3, #255	@ 0xff
 8004a94:	e018      	b.n	8004ac8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d014      	beq.n	8004ac6 <osMessagePut+0x72>
 8004a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ad0 <osMessagePut+0x7c>)
 8004a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	e00b      	b.n	8004ac6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004aae:	f107 0108 	add.w	r1, r7, #8
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 fad6 	bl	8005068 <xQueueGenericSend>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d001      	beq.n	8004ac6 <osMessagePut+0x72>
      return osErrorOS;
 8004ac2:	23ff      	movs	r3, #255	@ 0xff
 8004ac4:	e000      	b.n	8004ac8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	e000ed04 	.word	0xe000ed04

08004ad4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004ad4:	b590      	push	{r4, r7, lr}
 8004ad6:	b08b      	sub	sp, #44	@ 0x2c
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10a      	bne.n	8004b04 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004aee:	2380      	movs	r3, #128	@ 0x80
 8004af0:	617b      	str	r3, [r7, #20]
    return event;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	461c      	mov	r4, r3
 8004af6:	f107 0314 	add.w	r3, r7, #20
 8004afa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004afe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004b02:	e054      	b.n	8004bae <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004b04:	2300      	movs	r3, #0
 8004b06:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b12:	d103      	bne.n	8004b1c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004b14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004b18:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b1a:	e009      	b.n	8004b30 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d006      	beq.n	8004b30 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8004b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <osMessageGet+0x5c>
      ticks = 1;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004b30:	f7ff fd80 	bl	8004634 <inHandlerMode>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d01c      	beq.n	8004b74 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004b3a:	f107 0220 	add.w	r2, r7, #32
 8004b3e:	f107 0314 	add.w	r3, r7, #20
 8004b42:	3304      	adds	r3, #4
 8004b44:	4619      	mov	r1, r3
 8004b46:	68b8      	ldr	r0, [r7, #8]
 8004b48:	f000 fed4 	bl	80058f4 <xQueueReceiveFromISR>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d102      	bne.n	8004b58 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8004b52:	2310      	movs	r3, #16
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	e001      	b.n	8004b5c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004b5c:	6a3b      	ldr	r3, [r7, #32]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d01d      	beq.n	8004b9e <osMessageGet+0xca>
 8004b62:	4b15      	ldr	r3, [pc, #84]	@ (8004bb8 <osMessageGet+0xe4>)
 8004b64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	e014      	b.n	8004b9e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004b74:	f107 0314 	add.w	r3, r7, #20
 8004b78:	3304      	adds	r3, #4
 8004b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	68b8      	ldr	r0, [r7, #8]
 8004b80:	f000 fcb8 	bl	80054f4 <xQueueReceive>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d102      	bne.n	8004b90 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8004b8a:	2310      	movs	r3, #16
 8004b8c:	617b      	str	r3, [r7, #20]
 8004b8e:	e006      	b.n	8004b9e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <osMessageGet+0xc6>
 8004b96:	2300      	movs	r3, #0
 8004b98:	e000      	b.n	8004b9c <osMessageGet+0xc8>
 8004b9a:	2340      	movs	r3, #64	@ 0x40
 8004b9c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	461c      	mov	r4, r3
 8004ba2:	f107 0314 	add.w	r3, r7, #20
 8004ba6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004baa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	372c      	adds	r7, #44	@ 0x2c
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd90      	pop	{r4, r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	e000ed04 	.word	0xe000ed04

08004bbc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f103 0208 	add.w	r2, r3, #8
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004bd4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f103 0208 	add.w	r2, r3, #8
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f103 0208 	add.w	r2, r3, #8
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c16:	b480      	push	{r7}
 8004c18:	b085      	sub	sp, #20
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	1c5a      	adds	r2, r3, #1
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	601a      	str	r2, [r3, #0]
}
 8004c52:	bf00      	nop
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b085      	sub	sp, #20
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
 8004c66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c74:	d103      	bne.n	8004c7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	e00c      	b.n	8004c98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	3308      	adds	r3, #8
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	e002      	b.n	8004c8c <vListInsert+0x2e>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d2f6      	bcs.n	8004c86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	601a      	str	r2, [r3, #0]
}
 8004cc4:	bf00      	nop
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	6892      	ldr	r2, [r2, #8]
 8004ce6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	6852      	ldr	r2, [r2, #4]
 8004cf0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d103      	bne.n	8004d04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	1e5a      	subs	r2, r3, #1
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3714      	adds	r7, #20
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10d      	bne.n	8004d54 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d3c:	b672      	cpsid	i
 8004d3e:	f383 8811 	msr	BASEPRI, r3
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	b662      	cpsie	i
 8004d4c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d4e:	bf00      	nop
 8004d50:	bf00      	nop
 8004d52:	e7fd      	b.n	8004d50 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004d54:	f002 f97a 	bl	800704c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d60:	68f9      	ldr	r1, [r7, #12]
 8004d62:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d64:	fb01 f303 	mul.w	r3, r1, r3
 8004d68:	441a      	add	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d84:	3b01      	subs	r3, #1
 8004d86:	68f9      	ldr	r1, [r7, #12]
 8004d88:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d8a:	fb01 f303 	mul.w	r3, r1, r3
 8004d8e:	441a      	add	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	22ff      	movs	r2, #255	@ 0xff
 8004d98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	22ff      	movs	r2, #255	@ 0xff
 8004da0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d114      	bne.n	8004dd4 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d01a      	beq.n	8004de8 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	3310      	adds	r3, #16
 8004db6:	4618      	mov	r0, r3
 8004db8:	f001 fc2e 	bl	8006618 <xTaskRemoveFromEventList>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d012      	beq.n	8004de8 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8004df8 <xQueueGenericReset+0xd4>)
 8004dc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	f3bf 8f4f 	dsb	sy
 8004dce:	f3bf 8f6f 	isb	sy
 8004dd2:	e009      	b.n	8004de8 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	3310      	adds	r3, #16
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7ff feef 	bl	8004bbc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	3324      	adds	r3, #36	@ 0x24
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7ff feea 	bl	8004bbc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004de8:	f002 f966 	bl	80070b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004dec:	2301      	movs	r3, #1
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	e000ed04 	.word	0xe000ed04

08004dfc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b08e      	sub	sp, #56	@ 0x38
 8004e00:	af02      	add	r7, sp, #8
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
 8004e08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10d      	bne.n	8004e2c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e14:	b672      	cpsid	i
 8004e16:	f383 8811 	msr	BASEPRI, r3
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	b662      	cpsie	i
 8004e24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004e26:	bf00      	nop
 8004e28:	bf00      	nop
 8004e2a:	e7fd      	b.n	8004e28 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10d      	bne.n	8004e4e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8004e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e36:	b672      	cpsid	i
 8004e38:	f383 8811 	msr	BASEPRI, r3
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	b662      	cpsie	i
 8004e46:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e48:	bf00      	nop
 8004e4a:	bf00      	nop
 8004e4c:	e7fd      	b.n	8004e4a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d002      	beq.n	8004e5a <xQueueGenericCreateStatic+0x5e>
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <xQueueGenericCreateStatic+0x62>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e000      	b.n	8004e60 <xQueueGenericCreateStatic+0x64>
 8004e5e:	2300      	movs	r3, #0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10d      	bne.n	8004e80 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8004e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e68:	b672      	cpsid	i
 8004e6a:	f383 8811 	msr	BASEPRI, r3
 8004e6e:	f3bf 8f6f 	isb	sy
 8004e72:	f3bf 8f4f 	dsb	sy
 8004e76:	b662      	cpsie	i
 8004e78:	623b      	str	r3, [r7, #32]
}
 8004e7a:	bf00      	nop
 8004e7c:	bf00      	nop
 8004e7e:	e7fd      	b.n	8004e7c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d102      	bne.n	8004e8c <xQueueGenericCreateStatic+0x90>
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d101      	bne.n	8004e90 <xQueueGenericCreateStatic+0x94>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e000      	b.n	8004e92 <xQueueGenericCreateStatic+0x96>
 8004e90:	2300      	movs	r3, #0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10d      	bne.n	8004eb2 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8004e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e9a:	b672      	cpsid	i
 8004e9c:	f383 8811 	msr	BASEPRI, r3
 8004ea0:	f3bf 8f6f 	isb	sy
 8004ea4:	f3bf 8f4f 	dsb	sy
 8004ea8:	b662      	cpsie	i
 8004eaa:	61fb      	str	r3, [r7, #28]
}
 8004eac:	bf00      	nop
 8004eae:	bf00      	nop
 8004eb0:	e7fd      	b.n	8004eae <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004eb2:	2348      	movs	r3, #72	@ 0x48
 8004eb4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	2b48      	cmp	r3, #72	@ 0x48
 8004eba:	d00d      	beq.n	8004ed8 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8004ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec0:	b672      	cpsid	i
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	b662      	cpsie	i
 8004ed0:	61bb      	str	r3, [r7, #24]
}
 8004ed2:	bf00      	nop
 8004ed4:	bf00      	nop
 8004ed6:	e7fd      	b.n	8004ed4 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ed8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00d      	beq.n	8004f00 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004eec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	68b9      	ldr	r1, [r7, #8]
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f000 f848 	bl	8004f90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3730      	adds	r7, #48	@ 0x30
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b08a      	sub	sp, #40	@ 0x28
 8004f0e:	af02      	add	r7, sp, #8
 8004f10:	60f8      	str	r0, [r7, #12]
 8004f12:	60b9      	str	r1, [r7, #8]
 8004f14:	4613      	mov	r3, r2
 8004f16:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10d      	bne.n	8004f3a <xQueueGenericCreate+0x30>
	__asm volatile
 8004f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f22:	b672      	cpsid	i
 8004f24:	f383 8811 	msr	BASEPRI, r3
 8004f28:	f3bf 8f6f 	isb	sy
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	b662      	cpsie	i
 8004f32:	613b      	str	r3, [r7, #16]
}
 8004f34:	bf00      	nop
 8004f36:	bf00      	nop
 8004f38:	e7fd      	b.n	8004f36 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d102      	bne.n	8004f46 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004f40:	2300      	movs	r3, #0
 8004f42:	61fb      	str	r3, [r7, #28]
 8004f44:	e004      	b.n	8004f50 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	fb02 f303 	mul.w	r3, r2, r3
 8004f4e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	3348      	adds	r3, #72	@ 0x48
 8004f54:	4618      	mov	r0, r3
 8004f56:	f002 f9a7 	bl	80072a8 <pvPortMalloc>
 8004f5a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d011      	beq.n	8004f86 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	3348      	adds	r3, #72	@ 0x48
 8004f6a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f74:	79fa      	ldrb	r2, [r7, #7]
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	68b9      	ldr	r1, [r7, #8]
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 f805 	bl	8004f90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f86:	69bb      	ldr	r3, [r7, #24]
	}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3720      	adds	r7, #32
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
 8004f9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d103      	bne.n	8004fac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	e002      	b.n	8004fb2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	69b8      	ldr	r0, [r7, #24]
 8004fc2:	f7ff feaf 	bl	8004d24 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004fc6:	bf00      	nop
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b082      	sub	sp, #8
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00e      	beq.n	8004ffa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004fee:	2300      	movs	r3, #0
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f837 	bl	8005068 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004ffa:	bf00      	nop
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005002:	b580      	push	{r7, lr}
 8005004:	b086      	sub	sp, #24
 8005006:	af00      	add	r7, sp, #0
 8005008:	4603      	mov	r3, r0
 800500a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800500c:	2301      	movs	r3, #1
 800500e:	617b      	str	r3, [r7, #20]
 8005010:	2300      	movs	r3, #0
 8005012:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005014:	79fb      	ldrb	r3, [r7, #7]
 8005016:	461a      	mov	r2, r3
 8005018:	6939      	ldr	r1, [r7, #16]
 800501a:	6978      	ldr	r0, [r7, #20]
 800501c:	f7ff ff75 	bl	8004f0a <xQueueGenericCreate>
 8005020:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f7ff ffd3 	bl	8004fce <prvInitialiseMutex>

		return xNewQueue;
 8005028:	68fb      	ldr	r3, [r7, #12]
	}
 800502a:	4618      	mov	r0, r3
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005032:	b580      	push	{r7, lr}
 8005034:	b088      	sub	sp, #32
 8005036:	af02      	add	r7, sp, #8
 8005038:	4603      	mov	r3, r0
 800503a:	6039      	str	r1, [r7, #0]
 800503c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800503e:	2301      	movs	r3, #1
 8005040:	617b      	str	r3, [r7, #20]
 8005042:	2300      	movs	r3, #0
 8005044:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005046:	79fb      	ldrb	r3, [r7, #7]
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2200      	movs	r2, #0
 800504e:	6939      	ldr	r1, [r7, #16]
 8005050:	6978      	ldr	r0, [r7, #20]
 8005052:	f7ff fed3 	bl	8004dfc <xQueueGenericCreateStatic>
 8005056:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f7ff ffb8 	bl	8004fce <prvInitialiseMutex>

		return xNewQueue;
 800505e:	68fb      	ldr	r3, [r7, #12]
	}
 8005060:	4618      	mov	r0, r3
 8005062:	3718      	adds	r7, #24
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b08e      	sub	sp, #56	@ 0x38
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005076:	2300      	movs	r3, #0
 8005078:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800507e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10d      	bne.n	80050a0 <xQueueGenericSend+0x38>
	__asm volatile
 8005084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005088:	b672      	cpsid	i
 800508a:	f383 8811 	msr	BASEPRI, r3
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	f3bf 8f4f 	dsb	sy
 8005096:	b662      	cpsie	i
 8005098:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800509a:	bf00      	nop
 800509c:	bf00      	nop
 800509e:	e7fd      	b.n	800509c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d103      	bne.n	80050ae <xQueueGenericSend+0x46>
 80050a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <xQueueGenericSend+0x4a>
 80050ae:	2301      	movs	r3, #1
 80050b0:	e000      	b.n	80050b4 <xQueueGenericSend+0x4c>
 80050b2:	2300      	movs	r3, #0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10d      	bne.n	80050d4 <xQueueGenericSend+0x6c>
	__asm volatile
 80050b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050bc:	b672      	cpsid	i
 80050be:	f383 8811 	msr	BASEPRI, r3
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	b662      	cpsie	i
 80050cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80050ce:	bf00      	nop
 80050d0:	bf00      	nop
 80050d2:	e7fd      	b.n	80050d0 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d103      	bne.n	80050e2 <xQueueGenericSend+0x7a>
 80050da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d101      	bne.n	80050e6 <xQueueGenericSend+0x7e>
 80050e2:	2301      	movs	r3, #1
 80050e4:	e000      	b.n	80050e8 <xQueueGenericSend+0x80>
 80050e6:	2300      	movs	r3, #0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10d      	bne.n	8005108 <xQueueGenericSend+0xa0>
	__asm volatile
 80050ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f0:	b672      	cpsid	i
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	b662      	cpsie	i
 8005100:	623b      	str	r3, [r7, #32]
}
 8005102:	bf00      	nop
 8005104:	bf00      	nop
 8005106:	e7fd      	b.n	8005104 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005108:	f001 fc4e 	bl	80069a8 <xTaskGetSchedulerState>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d102      	bne.n	8005118 <xQueueGenericSend+0xb0>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <xQueueGenericSend+0xb4>
 8005118:	2301      	movs	r3, #1
 800511a:	e000      	b.n	800511e <xQueueGenericSend+0xb6>
 800511c:	2300      	movs	r3, #0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10d      	bne.n	800513e <xQueueGenericSend+0xd6>
	__asm volatile
 8005122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005126:	b672      	cpsid	i
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	b662      	cpsie	i
 8005136:	61fb      	str	r3, [r7, #28]
}
 8005138:	bf00      	nop
 800513a:	bf00      	nop
 800513c:	e7fd      	b.n	800513a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800513e:	f001 ff85 	bl	800704c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005144:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800514a:	429a      	cmp	r2, r3
 800514c:	d302      	bcc.n	8005154 <xQueueGenericSend+0xec>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b02      	cmp	r3, #2
 8005152:	d129      	bne.n	80051a8 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	68b9      	ldr	r1, [r7, #8]
 8005158:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800515a:	f000 fc6b 	bl	8005a34 <prvCopyDataToQueue>
 800515e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005164:	2b00      	cmp	r3, #0
 8005166:	d010      	beq.n	800518a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800516a:	3324      	adds	r3, #36	@ 0x24
 800516c:	4618      	mov	r0, r3
 800516e:	f001 fa53 	bl	8006618 <xTaskRemoveFromEventList>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d013      	beq.n	80051a0 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005178:	4b3f      	ldr	r3, [pc, #252]	@ (8005278 <xQueueGenericSend+0x210>)
 800517a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	f3bf 8f4f 	dsb	sy
 8005184:	f3bf 8f6f 	isb	sy
 8005188:	e00a      	b.n	80051a0 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800518a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800518c:	2b00      	cmp	r3, #0
 800518e:	d007      	beq.n	80051a0 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005190:	4b39      	ldr	r3, [pc, #228]	@ (8005278 <xQueueGenericSend+0x210>)
 8005192:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005196:	601a      	str	r2, [r3, #0]
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80051a0:	f001 ff8a 	bl	80070b8 <vPortExitCritical>
				return pdPASS;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e063      	b.n	8005270 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d103      	bne.n	80051b6 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051ae:	f001 ff83 	bl	80070b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80051b2:	2300      	movs	r3, #0
 80051b4:	e05c      	b.n	8005270 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d106      	bne.n	80051ca <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051bc:	f107 0314 	add.w	r3, r7, #20
 80051c0:	4618      	mov	r0, r3
 80051c2:	f001 fa8f 	bl	80066e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051c6:	2301      	movs	r3, #1
 80051c8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051ca:	f001 ff75 	bl	80070b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051ce:	f001 f811 	bl	80061f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051d2:	f001 ff3b 	bl	800704c <vPortEnterCritical>
 80051d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80051dc:	b25b      	sxtb	r3, r3
 80051de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051e2:	d103      	bne.n	80051ec <xQueueGenericSend+0x184>
 80051e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051f2:	b25b      	sxtb	r3, r3
 80051f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051f8:	d103      	bne.n	8005202 <xQueueGenericSend+0x19a>
 80051fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005202:	f001 ff59 	bl	80070b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005206:	1d3a      	adds	r2, r7, #4
 8005208:	f107 0314 	add.w	r3, r7, #20
 800520c:	4611      	mov	r1, r2
 800520e:	4618      	mov	r0, r3
 8005210:	f001 fa7e 	bl	8006710 <xTaskCheckForTimeOut>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d124      	bne.n	8005264 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800521a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800521c:	f000 fd02 	bl	8005c24 <prvIsQueueFull>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d018      	beq.n	8005258 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005228:	3310      	adds	r3, #16
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	4611      	mov	r1, r2
 800522e:	4618      	mov	r0, r3
 8005230:	f001 f9ca 	bl	80065c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005234:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005236:	f000 fc8d 	bl	8005b54 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800523a:	f000 ffe9 	bl	8006210 <xTaskResumeAll>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	f47f af7c 	bne.w	800513e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8005246:	4b0c      	ldr	r3, [pc, #48]	@ (8005278 <xQueueGenericSend+0x210>)
 8005248:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800524c:	601a      	str	r2, [r3, #0]
 800524e:	f3bf 8f4f 	dsb	sy
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	e772      	b.n	800513e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005258:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800525a:	f000 fc7b 	bl	8005b54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800525e:	f000 ffd7 	bl	8006210 <xTaskResumeAll>
 8005262:	e76c      	b.n	800513e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005264:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005266:	f000 fc75 	bl	8005b54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800526a:	f000 ffd1 	bl	8006210 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800526e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005270:	4618      	mov	r0, r3
 8005272:	3738      	adds	r7, #56	@ 0x38
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	e000ed04 	.word	0xe000ed04

0800527c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b08e      	sub	sp, #56	@ 0x38
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
 8005288:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800528e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005290:	2b00      	cmp	r3, #0
 8005292:	d10d      	bne.n	80052b0 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8005294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005298:	b672      	cpsid	i
 800529a:	f383 8811 	msr	BASEPRI, r3
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f3bf 8f4f 	dsb	sy
 80052a6:	b662      	cpsie	i
 80052a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80052aa:	bf00      	nop
 80052ac:	bf00      	nop
 80052ae:	e7fd      	b.n	80052ac <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d103      	bne.n	80052be <xQueueGenericSendFromISR+0x42>
 80052b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <xQueueGenericSendFromISR+0x46>
 80052be:	2301      	movs	r3, #1
 80052c0:	e000      	b.n	80052c4 <xQueueGenericSendFromISR+0x48>
 80052c2:	2300      	movs	r3, #0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10d      	bne.n	80052e4 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80052c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052cc:	b672      	cpsid	i
 80052ce:	f383 8811 	msr	BASEPRI, r3
 80052d2:	f3bf 8f6f 	isb	sy
 80052d6:	f3bf 8f4f 	dsb	sy
 80052da:	b662      	cpsie	i
 80052dc:	623b      	str	r3, [r7, #32]
}
 80052de:	bf00      	nop
 80052e0:	bf00      	nop
 80052e2:	e7fd      	b.n	80052e0 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d103      	bne.n	80052f2 <xQueueGenericSendFromISR+0x76>
 80052ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d101      	bne.n	80052f6 <xQueueGenericSendFromISR+0x7a>
 80052f2:	2301      	movs	r3, #1
 80052f4:	e000      	b.n	80052f8 <xQueueGenericSendFromISR+0x7c>
 80052f6:	2300      	movs	r3, #0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10d      	bne.n	8005318 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80052fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005300:	b672      	cpsid	i
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	b662      	cpsie	i
 8005310:	61fb      	str	r3, [r7, #28]
}
 8005312:	bf00      	nop
 8005314:	bf00      	nop
 8005316:	e7fd      	b.n	8005314 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005318:	f001 ff80 	bl	800721c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800531c:	f3ef 8211 	mrs	r2, BASEPRI
 8005320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005324:	b672      	cpsid	i
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	b662      	cpsie	i
 8005334:	61ba      	str	r2, [r7, #24]
 8005336:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005338:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800533a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800533c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800533e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005344:	429a      	cmp	r2, r3
 8005346:	d302      	bcc.n	800534e <xQueueGenericSendFromISR+0xd2>
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	2b02      	cmp	r3, #2
 800534c:	d12c      	bne.n	80053a8 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800534e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005350:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005354:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	68b9      	ldr	r1, [r7, #8]
 800535c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800535e:	f000 fb69 	bl	8005a34 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005362:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005366:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800536a:	d112      	bne.n	8005392 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800536c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005370:	2b00      	cmp	r3, #0
 8005372:	d016      	beq.n	80053a2 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005376:	3324      	adds	r3, #36	@ 0x24
 8005378:	4618      	mov	r0, r3
 800537a:	f001 f94d 	bl	8006618 <xTaskRemoveFromEventList>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00e      	beq.n	80053a2 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00b      	beq.n	80053a2 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	601a      	str	r2, [r3, #0]
 8005390:	e007      	b.n	80053a2 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005392:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005396:	3301      	adds	r3, #1
 8005398:	b2db      	uxtb	r3, r3
 800539a:	b25a      	sxtb	r2, r3
 800539c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800539e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80053a2:	2301      	movs	r3, #1
 80053a4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80053a6:	e001      	b.n	80053ac <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80053a8:	2300      	movs	r3, #0
 80053aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80053ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ae:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80053b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80053b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3738      	adds	r7, #56	@ 0x38
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b08e      	sub	sp, #56	@ 0x38
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80053d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10d      	bne.n	80053f2 <xQueueGiveFromISR+0x30>
	__asm volatile
 80053d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053da:	b672      	cpsid	i
 80053dc:	f383 8811 	msr	BASEPRI, r3
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	b662      	cpsie	i
 80053ea:	623b      	str	r3, [r7, #32]
}
 80053ec:	bf00      	nop
 80053ee:	bf00      	nop
 80053f0:	e7fd      	b.n	80053ee <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80053f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00d      	beq.n	8005416 <xQueueGiveFromISR+0x54>
	__asm volatile
 80053fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053fe:	b672      	cpsid	i
 8005400:	f383 8811 	msr	BASEPRI, r3
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	f3bf 8f4f 	dsb	sy
 800540c:	b662      	cpsie	i
 800540e:	61fb      	str	r3, [r7, #28]
}
 8005410:	bf00      	nop
 8005412:	bf00      	nop
 8005414:	e7fd      	b.n	8005412 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d103      	bne.n	8005426 <xQueueGiveFromISR+0x64>
 800541e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <xQueueGiveFromISR+0x68>
 8005426:	2301      	movs	r3, #1
 8005428:	e000      	b.n	800542c <xQueueGiveFromISR+0x6a>
 800542a:	2300      	movs	r3, #0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10d      	bne.n	800544c <xQueueGiveFromISR+0x8a>
	__asm volatile
 8005430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005434:	b672      	cpsid	i
 8005436:	f383 8811 	msr	BASEPRI, r3
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	b662      	cpsie	i
 8005444:	61bb      	str	r3, [r7, #24]
}
 8005446:	bf00      	nop
 8005448:	bf00      	nop
 800544a:	e7fd      	b.n	8005448 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800544c:	f001 fee6 	bl	800721c <vPortValidateInterruptPriority>
	__asm volatile
 8005450:	f3ef 8211 	mrs	r2, BASEPRI
 8005454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005458:	b672      	cpsid	i
 800545a:	f383 8811 	msr	BASEPRI, r3
 800545e:	f3bf 8f6f 	isb	sy
 8005462:	f3bf 8f4f 	dsb	sy
 8005466:	b662      	cpsie	i
 8005468:	617a      	str	r2, [r7, #20]
 800546a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800546c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800546e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005474:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800547a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800547c:	429a      	cmp	r2, r3
 800547e:	d22b      	bcs.n	80054d8 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005482:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005486:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800548a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548c:	1c5a      	adds	r2, r3, #1
 800548e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005490:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005492:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005496:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800549a:	d112      	bne.n	80054c2 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800549c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d016      	beq.n	80054d2 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a6:	3324      	adds	r3, #36	@ 0x24
 80054a8:	4618      	mov	r0, r3
 80054aa:	f001 f8b5 	bl	8006618 <xTaskRemoveFromEventList>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00e      	beq.n	80054d2 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00b      	beq.n	80054d2 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2201      	movs	r2, #1
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	e007      	b.n	80054d2 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80054c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80054c6:	3301      	adds	r3, #1
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	b25a      	sxtb	r2, r3
 80054cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80054d2:	2301      	movs	r3, #1
 80054d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80054d6:	e001      	b.n	80054dc <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80054d8:	2300      	movs	r3, #0
 80054da:	637b      	str	r3, [r7, #52]	@ 0x34
 80054dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054de:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f383 8811 	msr	BASEPRI, r3
}
 80054e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3738      	adds	r7, #56	@ 0x38
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
	...

080054f4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b08c      	sub	sp, #48	@ 0x30
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005500:	2300      	movs	r3, #0
 8005502:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10d      	bne.n	800552a <xQueueReceive+0x36>
	__asm volatile
 800550e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005512:	b672      	cpsid	i
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	b662      	cpsie	i
 8005522:	623b      	str	r3, [r7, #32]
}
 8005524:	bf00      	nop
 8005526:	bf00      	nop
 8005528:	e7fd      	b.n	8005526 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d103      	bne.n	8005538 <xQueueReceive+0x44>
 8005530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <xQueueReceive+0x48>
 8005538:	2301      	movs	r3, #1
 800553a:	e000      	b.n	800553e <xQueueReceive+0x4a>
 800553c:	2300      	movs	r3, #0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10d      	bne.n	800555e <xQueueReceive+0x6a>
	__asm volatile
 8005542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005546:	b672      	cpsid	i
 8005548:	f383 8811 	msr	BASEPRI, r3
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	b662      	cpsie	i
 8005556:	61fb      	str	r3, [r7, #28]
}
 8005558:	bf00      	nop
 800555a:	bf00      	nop
 800555c:	e7fd      	b.n	800555a <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800555e:	f001 fa23 	bl	80069a8 <xTaskGetSchedulerState>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d102      	bne.n	800556e <xQueueReceive+0x7a>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <xQueueReceive+0x7e>
 800556e:	2301      	movs	r3, #1
 8005570:	e000      	b.n	8005574 <xQueueReceive+0x80>
 8005572:	2300      	movs	r3, #0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10d      	bne.n	8005594 <xQueueReceive+0xa0>
	__asm volatile
 8005578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800557c:	b672      	cpsid	i
 800557e:	f383 8811 	msr	BASEPRI, r3
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	b662      	cpsie	i
 800558c:	61bb      	str	r3, [r7, #24]
}
 800558e:	bf00      	nop
 8005590:	bf00      	nop
 8005592:	e7fd      	b.n	8005590 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005594:	f001 fd5a 	bl	800704c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800559a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800559c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800559e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d01f      	beq.n	80055e4 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80055a4:	68b9      	ldr	r1, [r7, #8]
 80055a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055a8:	f000 faae 	bl	8005b08 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80055ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ae:	1e5a      	subs	r2, r3, #1
 80055b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00f      	beq.n	80055dc <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055be:	3310      	adds	r3, #16
 80055c0:	4618      	mov	r0, r3
 80055c2:	f001 f829 	bl	8006618 <xTaskRemoveFromEventList>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d007      	beq.n	80055dc <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80055cc:	4b3c      	ldr	r3, [pc, #240]	@ (80056c0 <xQueueReceive+0x1cc>)
 80055ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055d2:	601a      	str	r2, [r3, #0]
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80055dc:	f001 fd6c 	bl	80070b8 <vPortExitCritical>
				return pdPASS;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e069      	b.n	80056b8 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d103      	bne.n	80055f2 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055ea:	f001 fd65 	bl	80070b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80055ee:	2300      	movs	r3, #0
 80055f0:	e062      	b.n	80056b8 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d106      	bne.n	8005606 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055f8:	f107 0310 	add.w	r3, r7, #16
 80055fc:	4618      	mov	r0, r3
 80055fe:	f001 f871 	bl	80066e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005602:	2301      	movs	r3, #1
 8005604:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005606:	f001 fd57 	bl	80070b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800560a:	f000 fdf3 	bl	80061f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800560e:	f001 fd1d 	bl	800704c <vPortEnterCritical>
 8005612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005614:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005618:	b25b      	sxtb	r3, r3
 800561a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800561e:	d103      	bne.n	8005628 <xQueueReceive+0x134>
 8005620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005622:	2200      	movs	r2, #0
 8005624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800562a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800562e:	b25b      	sxtb	r3, r3
 8005630:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005634:	d103      	bne.n	800563e <xQueueReceive+0x14a>
 8005636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800563e:	f001 fd3b 	bl	80070b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005642:	1d3a      	adds	r2, r7, #4
 8005644:	f107 0310 	add.w	r3, r7, #16
 8005648:	4611      	mov	r1, r2
 800564a:	4618      	mov	r0, r3
 800564c:	f001 f860 	bl	8006710 <xTaskCheckForTimeOut>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d123      	bne.n	800569e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005656:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005658:	f000 face 	bl	8005bf8 <prvIsQueueEmpty>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d017      	beq.n	8005692 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005664:	3324      	adds	r3, #36	@ 0x24
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	4611      	mov	r1, r2
 800566a:	4618      	mov	r0, r3
 800566c:	f000 ffac 	bl	80065c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005670:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005672:	f000 fa6f 	bl	8005b54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005676:	f000 fdcb 	bl	8006210 <xTaskResumeAll>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d189      	bne.n	8005594 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8005680:	4b0f      	ldr	r3, [pc, #60]	@ (80056c0 <xQueueReceive+0x1cc>)
 8005682:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	e780      	b.n	8005594 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005692:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005694:	f000 fa5e 	bl	8005b54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005698:	f000 fdba 	bl	8006210 <xTaskResumeAll>
 800569c:	e77a      	b.n	8005594 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800569e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056a0:	f000 fa58 	bl	8005b54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056a4:	f000 fdb4 	bl	8006210 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056aa:	f000 faa5 	bl	8005bf8 <prvIsQueueEmpty>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f43f af6f 	beq.w	8005594 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80056b6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3730      	adds	r7, #48	@ 0x30
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	e000ed04 	.word	0xe000ed04

080056c4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b08e      	sub	sp, #56	@ 0x38
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80056ce:	2300      	movs	r3, #0
 80056d0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80056d6:	2300      	movs	r3, #0
 80056d8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80056da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10d      	bne.n	80056fc <xQueueSemaphoreTake+0x38>
	__asm volatile
 80056e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e4:	b672      	cpsid	i
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	b662      	cpsie	i
 80056f4:	623b      	str	r3, [r7, #32]
}
 80056f6:	bf00      	nop
 80056f8:	bf00      	nop
 80056fa:	e7fd      	b.n	80056f8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80056fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00d      	beq.n	8005720 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8005704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005708:	b672      	cpsid	i
 800570a:	f383 8811 	msr	BASEPRI, r3
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	b662      	cpsie	i
 8005718:	61fb      	str	r3, [r7, #28]
}
 800571a:	bf00      	nop
 800571c:	bf00      	nop
 800571e:	e7fd      	b.n	800571c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005720:	f001 f942 	bl	80069a8 <xTaskGetSchedulerState>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d102      	bne.n	8005730 <xQueueSemaphoreTake+0x6c>
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <xQueueSemaphoreTake+0x70>
 8005730:	2301      	movs	r3, #1
 8005732:	e000      	b.n	8005736 <xQueueSemaphoreTake+0x72>
 8005734:	2300      	movs	r3, #0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10d      	bne.n	8005756 <xQueueSemaphoreTake+0x92>
	__asm volatile
 800573a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800573e:	b672      	cpsid	i
 8005740:	f383 8811 	msr	BASEPRI, r3
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	b662      	cpsie	i
 800574e:	61bb      	str	r3, [r7, #24]
}
 8005750:	bf00      	nop
 8005752:	bf00      	nop
 8005754:	e7fd      	b.n	8005752 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005756:	f001 fc79 	bl	800704c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800575a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800575c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800575e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005762:	2b00      	cmp	r3, #0
 8005764:	d024      	beq.n	80057b0 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005768:	1e5a      	subs	r2, r3, #1
 800576a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800576c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800576e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d104      	bne.n	8005780 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005776:	f001 fae1 	bl	8006d3c <pvTaskIncrementMutexHeldCount>
 800577a:	4602      	mov	r2, r0
 800577c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800577e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00f      	beq.n	80057a8 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800578a:	3310      	adds	r3, #16
 800578c:	4618      	mov	r0, r3
 800578e:	f000 ff43 	bl	8006618 <xTaskRemoveFromEventList>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d007      	beq.n	80057a8 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005798:	4b55      	ldr	r3, [pc, #340]	@ (80058f0 <xQueueSemaphoreTake+0x22c>)
 800579a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800579e:	601a      	str	r2, [r3, #0]
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80057a8:	f001 fc86 	bl	80070b8 <vPortExitCritical>
				return pdPASS;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e09a      	b.n	80058e6 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d114      	bne.n	80057e0 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80057b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00d      	beq.n	80057d8 <xQueueSemaphoreTake+0x114>
	__asm volatile
 80057bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c0:	b672      	cpsid	i
 80057c2:	f383 8811 	msr	BASEPRI, r3
 80057c6:	f3bf 8f6f 	isb	sy
 80057ca:	f3bf 8f4f 	dsb	sy
 80057ce:	b662      	cpsie	i
 80057d0:	617b      	str	r3, [r7, #20]
}
 80057d2:	bf00      	nop
 80057d4:	bf00      	nop
 80057d6:	e7fd      	b.n	80057d4 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80057d8:	f001 fc6e 	bl	80070b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80057dc:	2300      	movs	r3, #0
 80057de:	e082      	b.n	80058e6 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d106      	bne.n	80057f4 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057e6:	f107 030c 	add.w	r3, r7, #12
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 ff7a 	bl	80066e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057f0:	2301      	movs	r3, #1
 80057f2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057f4:	f001 fc60 	bl	80070b8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057f8:	f000 fcfc 	bl	80061f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057fc:	f001 fc26 	bl	800704c <vPortEnterCritical>
 8005800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005802:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005806:	b25b      	sxtb	r3, r3
 8005808:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800580c:	d103      	bne.n	8005816 <xQueueSemaphoreTake+0x152>
 800580e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005810:	2200      	movs	r2, #0
 8005812:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005818:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800581c:	b25b      	sxtb	r3, r3
 800581e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005822:	d103      	bne.n	800582c <xQueueSemaphoreTake+0x168>
 8005824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800582c:	f001 fc44 	bl	80070b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005830:	463a      	mov	r2, r7
 8005832:	f107 030c 	add.w	r3, r7, #12
 8005836:	4611      	mov	r1, r2
 8005838:	4618      	mov	r0, r3
 800583a:	f000 ff69 	bl	8006710 <xTaskCheckForTimeOut>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d132      	bne.n	80058aa <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005844:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005846:	f000 f9d7 	bl	8005bf8 <prvIsQueueEmpty>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d026      	beq.n	800589e <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d109      	bne.n	800586c <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8005858:	f001 fbf8 	bl	800704c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800585c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	4618      	mov	r0, r3
 8005862:	f001 f8bf 	bl	80069e4 <xTaskPriorityInherit>
 8005866:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005868:	f001 fc26 	bl	80070b8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800586c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800586e:	3324      	adds	r3, #36	@ 0x24
 8005870:	683a      	ldr	r2, [r7, #0]
 8005872:	4611      	mov	r1, r2
 8005874:	4618      	mov	r0, r3
 8005876:	f000 fea7 	bl	80065c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800587a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800587c:	f000 f96a 	bl	8005b54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005880:	f000 fcc6 	bl	8006210 <xTaskResumeAll>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	f47f af65 	bne.w	8005756 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800588c:	4b18      	ldr	r3, [pc, #96]	@ (80058f0 <xQueueSemaphoreTake+0x22c>)
 800588e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	f3bf 8f4f 	dsb	sy
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	e75b      	b.n	8005756 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800589e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80058a0:	f000 f958 	bl	8005b54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058a4:	f000 fcb4 	bl	8006210 <xTaskResumeAll>
 80058a8:	e755      	b.n	8005756 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80058aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80058ac:	f000 f952 	bl	8005b54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058b0:	f000 fcae 	bl	8006210 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80058b6:	f000 f99f 	bl	8005bf8 <prvIsQueueEmpty>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f43f af4a 	beq.w	8005756 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80058c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00d      	beq.n	80058e4 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 80058c8:	f001 fbc0 	bl	800704c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80058cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80058ce:	f000 f899 	bl	8005a04 <prvGetDisinheritPriorityAfterTimeout>
 80058d2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80058d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80058da:	4618      	mov	r0, r3
 80058dc:	f001 f98e 	bl	8006bfc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80058e0:	f001 fbea 	bl	80070b8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80058e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3738      	adds	r7, #56	@ 0x38
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	e000ed04 	.word	0xe000ed04

080058f4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b08e      	sub	sp, #56	@ 0x38
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10d      	bne.n	8005926 <xQueueReceiveFromISR+0x32>
	__asm volatile
 800590a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590e:	b672      	cpsid	i
 8005910:	f383 8811 	msr	BASEPRI, r3
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	b662      	cpsie	i
 800591e:	623b      	str	r3, [r7, #32]
}
 8005920:	bf00      	nop
 8005922:	bf00      	nop
 8005924:	e7fd      	b.n	8005922 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d103      	bne.n	8005934 <xQueueReceiveFromISR+0x40>
 800592c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005930:	2b00      	cmp	r3, #0
 8005932:	d101      	bne.n	8005938 <xQueueReceiveFromISR+0x44>
 8005934:	2301      	movs	r3, #1
 8005936:	e000      	b.n	800593a <xQueueReceiveFromISR+0x46>
 8005938:	2300      	movs	r3, #0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10d      	bne.n	800595a <xQueueReceiveFromISR+0x66>
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005942:	b672      	cpsid	i
 8005944:	f383 8811 	msr	BASEPRI, r3
 8005948:	f3bf 8f6f 	isb	sy
 800594c:	f3bf 8f4f 	dsb	sy
 8005950:	b662      	cpsie	i
 8005952:	61fb      	str	r3, [r7, #28]
}
 8005954:	bf00      	nop
 8005956:	bf00      	nop
 8005958:	e7fd      	b.n	8005956 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800595a:	f001 fc5f 	bl	800721c <vPortValidateInterruptPriority>
	__asm volatile
 800595e:	f3ef 8211 	mrs	r2, BASEPRI
 8005962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005966:	b672      	cpsid	i
 8005968:	f383 8811 	msr	BASEPRI, r3
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	b662      	cpsie	i
 8005976:	61ba      	str	r2, [r7, #24]
 8005978:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800597a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800597c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800597e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005982:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005986:	2b00      	cmp	r3, #0
 8005988:	d02f      	beq.n	80059ea <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800598a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800598c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005990:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005994:	68b9      	ldr	r1, [r7, #8]
 8005996:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005998:	f000 f8b6 	bl	8005b08 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800599c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800599e:	1e5a      	subs	r2, r3, #1
 80059a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80059a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80059a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059ac:	d112      	bne.n	80059d4 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d016      	beq.n	80059e4 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b8:	3310      	adds	r3, #16
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 fe2c 	bl	8006618 <xTaskRemoveFromEventList>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00e      	beq.n	80059e4 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00b      	beq.n	80059e4 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	e007      	b.n	80059e4 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80059d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80059d8:	3301      	adds	r3, #1
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	b25a      	sxtb	r2, r3
 80059de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80059e4:	2301      	movs	r3, #1
 80059e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80059e8:	e001      	b.n	80059ee <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 80059ea:	2300      	movs	r3, #0
 80059ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80059ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059f0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	f383 8811 	msr	BASEPRI, r3
}
 80059f8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3738      	adds	r7, #56	@ 0x38
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d006      	beq.n	8005a22 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f1c3 0307 	rsb	r3, r3, #7
 8005a1e:	60fb      	str	r3, [r7, #12]
 8005a20:	e001      	b.n	8005a26 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005a22:	2300      	movs	r3, #0
 8005a24:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005a26:	68fb      	ldr	r3, [r7, #12]
	}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3714      	adds	r7, #20
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005a40:	2300      	movs	r3, #0
 8005a42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10d      	bne.n	8005a6e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d14d      	bne.n	8005af6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f001 f840 	bl	8006ae4 <xTaskPriorityDisinherit>
 8005a64:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	609a      	str	r2, [r3, #8]
 8005a6c:	e043      	b.n	8005af6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d119      	bne.n	8005aa8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6858      	ldr	r0, [r3, #4]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	68b9      	ldr	r1, [r7, #8]
 8005a80:	f00c f883 	bl	8011b8a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a8c:	441a      	add	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d32b      	bcc.n	8005af6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	605a      	str	r2, [r3, #4]
 8005aa6:	e026      	b.n	8005af6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	68d8      	ldr	r0, [r3, #12]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	68b9      	ldr	r1, [r7, #8]
 8005ab4:	f00c f869 	bl	8011b8a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	68da      	ldr	r2, [r3, #12]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac0:	425b      	negs	r3, r3
 8005ac2:	441a      	add	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	68da      	ldr	r2, [r3, #12]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d207      	bcs.n	8005ae4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	689a      	ldr	r2, [r3, #8]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005adc:	425b      	negs	r3, r3
 8005ade:	441a      	add	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d105      	bne.n	8005af6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	3b01      	subs	r3, #1
 8005af4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	1c5a      	adds	r2, r3, #1
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005afe:	697b      	ldr	r3, [r7, #20]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d018      	beq.n	8005b4c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68da      	ldr	r2, [r3, #12]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b22:	441a      	add	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	68da      	ldr	r2, [r3, #12]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d303      	bcc.n	8005b3c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68d9      	ldr	r1, [r3, #12]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b44:	461a      	mov	r2, r3
 8005b46:	6838      	ldr	r0, [r7, #0]
 8005b48:	f00c f81f 	bl	8011b8a <memcpy>
	}
}
 8005b4c:	bf00      	nop
 8005b4e:	3708      	adds	r7, #8
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005b5c:	f001 fa76 	bl	800704c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b68:	e011      	b.n	8005b8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d012      	beq.n	8005b98 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	3324      	adds	r3, #36	@ 0x24
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 fd4e 	bl	8006618 <xTaskRemoveFromEventList>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005b82:	f000 fe2d 	bl	80067e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005b86:	7bfb      	ldrb	r3, [r7, #15]
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	dce9      	bgt.n	8005b6a <prvUnlockQueue+0x16>
 8005b96:	e000      	b.n	8005b9a <prvUnlockQueue+0x46>
					break;
 8005b98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	22ff      	movs	r2, #255	@ 0xff
 8005b9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005ba2:	f001 fa89 	bl	80070b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005ba6:	f001 fa51 	bl	800704c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005bb0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bb2:	e011      	b.n	8005bd8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d012      	beq.n	8005be2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	3310      	adds	r3, #16
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f000 fd29 	bl	8006618 <xTaskRemoveFromEventList>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d001      	beq.n	8005bd0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005bcc:	f000 fe08 	bl	80067e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005bd0:	7bbb      	ldrb	r3, [r7, #14]
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	dce9      	bgt.n	8005bb4 <prvUnlockQueue+0x60>
 8005be0:	e000      	b.n	8005be4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005be2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	22ff      	movs	r2, #255	@ 0xff
 8005be8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005bec:	f001 fa64 	bl	80070b8 <vPortExitCritical>
}
 8005bf0:	bf00      	nop
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c00:	f001 fa24 	bl	800704c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d102      	bne.n	8005c12 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	60fb      	str	r3, [r7, #12]
 8005c10:	e001      	b.n	8005c16 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c12:	2300      	movs	r3, #0
 8005c14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c16:	f001 fa4f 	bl	80070b8 <vPortExitCritical>

	return xReturn;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3710      	adds	r7, #16
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c2c:	f001 fa0e 	bl	800704c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d102      	bne.n	8005c42 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	60fb      	str	r3, [r7, #12]
 8005c40:	e001      	b.n	8005c46 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005c42:	2300      	movs	r3, #0
 8005c44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c46:	f001 fa37 	bl	80070b8 <vPortExitCritical>

	return xReturn;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b08e      	sub	sp, #56	@ 0x38
 8005c58:	af04      	add	r7, sp, #16
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
 8005c60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10d      	bne.n	8005c84 <xTaskCreateStatic+0x30>
	__asm volatile
 8005c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c6c:	b672      	cpsid	i
 8005c6e:	f383 8811 	msr	BASEPRI, r3
 8005c72:	f3bf 8f6f 	isb	sy
 8005c76:	f3bf 8f4f 	dsb	sy
 8005c7a:	b662      	cpsie	i
 8005c7c:	623b      	str	r3, [r7, #32]
}
 8005c7e:	bf00      	nop
 8005c80:	bf00      	nop
 8005c82:	e7fd      	b.n	8005c80 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10d      	bne.n	8005ca6 <xTaskCreateStatic+0x52>
	__asm volatile
 8005c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c8e:	b672      	cpsid	i
 8005c90:	f383 8811 	msr	BASEPRI, r3
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	f3bf 8f4f 	dsb	sy
 8005c9c:	b662      	cpsie	i
 8005c9e:	61fb      	str	r3, [r7, #28]
}
 8005ca0:	bf00      	nop
 8005ca2:	bf00      	nop
 8005ca4:	e7fd      	b.n	8005ca2 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ca6:	2354      	movs	r3, #84	@ 0x54
 8005ca8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	2b54      	cmp	r3, #84	@ 0x54
 8005cae:	d00d      	beq.n	8005ccc <xTaskCreateStatic+0x78>
	__asm volatile
 8005cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb4:	b672      	cpsid	i
 8005cb6:	f383 8811 	msr	BASEPRI, r3
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	b662      	cpsie	i
 8005cc4:	61bb      	str	r3, [r7, #24]
}
 8005cc6:	bf00      	nop
 8005cc8:	bf00      	nop
 8005cca:	e7fd      	b.n	8005cc8 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005ccc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d01e      	beq.n	8005d12 <xTaskCreateStatic+0xbe>
 8005cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d01b      	beq.n	8005d12 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cdc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ce2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005cec:	2300      	movs	r3, #0
 8005cee:	9303      	str	r3, [sp, #12]
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf2:	9302      	str	r3, [sp, #8]
 8005cf4:	f107 0314 	add.w	r3, r7, #20
 8005cf8:	9301      	str	r3, [sp, #4]
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	68b9      	ldr	r1, [r7, #8]
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f000 f850 	bl	8005daa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005d0c:	f000 f8d8 	bl	8005ec0 <prvAddNewTaskToReadyList>
 8005d10:	e001      	b.n	8005d16 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8005d12:	2300      	movs	r3, #0
 8005d14:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005d16:	697b      	ldr	r3, [r7, #20]
	}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3728      	adds	r7, #40	@ 0x28
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b08c      	sub	sp, #48	@ 0x30
 8005d24:	af04      	add	r7, sp, #16
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	603b      	str	r3, [r7, #0]
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005d30:	88fb      	ldrh	r3, [r7, #6]
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4618      	mov	r0, r3
 8005d36:	f001 fab7 	bl	80072a8 <pvPortMalloc>
 8005d3a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00e      	beq.n	8005d60 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005d42:	2054      	movs	r0, #84	@ 0x54
 8005d44:	f001 fab0 	bl	80072a8 <pvPortMalloc>
 8005d48:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d003      	beq.n	8005d58 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d56:	e005      	b.n	8005d64 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d58:	6978      	ldr	r0, [r7, #20]
 8005d5a:	f001 fb73 	bl	8007444 <vPortFree>
 8005d5e:	e001      	b.n	8005d64 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d60:	2300      	movs	r3, #0
 8005d62:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d017      	beq.n	8005d9a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d72:	88fa      	ldrh	r2, [r7, #6]
 8005d74:	2300      	movs	r3, #0
 8005d76:	9303      	str	r3, [sp, #12]
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	9302      	str	r3, [sp, #8]
 8005d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d7e:	9301      	str	r3, [sp, #4]
 8005d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	68b9      	ldr	r1, [r7, #8]
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f000 f80e 	bl	8005daa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d8e:	69f8      	ldr	r0, [r7, #28]
 8005d90:	f000 f896 	bl	8005ec0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d94:	2301      	movs	r3, #1
 8005d96:	61bb      	str	r3, [r7, #24]
 8005d98:	e002      	b.n	8005da0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005d9e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005da0:	69bb      	ldr	r3, [r7, #24]
	}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3720      	adds	r7, #32
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b088      	sub	sp, #32
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	60f8      	str	r0, [r7, #12]
 8005db2:	60b9      	str	r1, [r7, #8]
 8005db4:	607a      	str	r2, [r7, #4]
 8005db6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005dbc:	6879      	ldr	r1, [r7, #4]
 8005dbe:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8005dc2:	440b      	add	r3, r1
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	f023 0307 	bic.w	r3, r3, #7
 8005dd0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	f003 0307 	and.w	r3, r3, #7
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00d      	beq.n	8005df8 <prvInitialiseNewTask+0x4e>
	__asm volatile
 8005ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de0:	b672      	cpsid	i
 8005de2:	f383 8811 	msr	BASEPRI, r3
 8005de6:	f3bf 8f6f 	isb	sy
 8005dea:	f3bf 8f4f 	dsb	sy
 8005dee:	b662      	cpsie	i
 8005df0:	617b      	str	r3, [r7, #20]
}
 8005df2:	bf00      	nop
 8005df4:	bf00      	nop
 8005df6:	e7fd      	b.n	8005df4 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d01f      	beq.n	8005e3e <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005dfe:	2300      	movs	r3, #0
 8005e00:	61fb      	str	r3, [r7, #28]
 8005e02:	e012      	b.n	8005e2a <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	4413      	add	r3, r2
 8005e0a:	7819      	ldrb	r1, [r3, #0]
 8005e0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	4413      	add	r3, r2
 8005e12:	3334      	adds	r3, #52	@ 0x34
 8005e14:	460a      	mov	r2, r1
 8005e16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d006      	beq.n	8005e32 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	3301      	adds	r3, #1
 8005e28:	61fb      	str	r3, [r7, #28]
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	2b0f      	cmp	r3, #15
 8005e2e:	d9e9      	bls.n	8005e04 <prvInitialiseNewTask+0x5a>
 8005e30:	e000      	b.n	8005e34 <prvInitialiseNewTask+0x8a>
			{
				break;
 8005e32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e3c:	e003      	b.n	8005e46 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e48:	2b06      	cmp	r3, #6
 8005e4a:	d901      	bls.n	8005e50 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e4c:	2306      	movs	r3, #6
 8005e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e54:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e5a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5e:	2200      	movs	r2, #0
 8005e60:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e64:	3304      	adds	r3, #4
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7fe fec8 	bl	8004bfc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6e:	3318      	adds	r3, #24
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7fe fec3 	bl	8004bfc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e7e:	f1c3 0207 	rsb	r2, r3, #7
 8005e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e8a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e8e:	2200      	movs	r2, #0
 8005e90:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	68f9      	ldr	r1, [r7, #12]
 8005e9e:	69b8      	ldr	r0, [r7, #24]
 8005ea0:	f000 ffc6 	bl	8006e30 <pxPortInitialiseStack>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d002      	beq.n	8005eb6 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005eb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005eb6:	bf00      	nop
 8005eb8:	3720      	adds	r7, #32
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
	...

08005ec0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ec8:	f001 f8c0 	bl	800704c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ecc:	4b2a      	ldr	r3, [pc, #168]	@ (8005f78 <prvAddNewTaskToReadyList+0xb8>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	4a29      	ldr	r2, [pc, #164]	@ (8005f78 <prvAddNewTaskToReadyList+0xb8>)
 8005ed4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ed6:	4b29      	ldr	r3, [pc, #164]	@ (8005f7c <prvAddNewTaskToReadyList+0xbc>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d109      	bne.n	8005ef2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ede:	4a27      	ldr	r2, [pc, #156]	@ (8005f7c <prvAddNewTaskToReadyList+0xbc>)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ee4:	4b24      	ldr	r3, [pc, #144]	@ (8005f78 <prvAddNewTaskToReadyList+0xb8>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d110      	bne.n	8005f0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005eec:	f000 fc9c 	bl	8006828 <prvInitialiseTaskLists>
 8005ef0:	e00d      	b.n	8005f0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005ef2:	4b23      	ldr	r3, [pc, #140]	@ (8005f80 <prvAddNewTaskToReadyList+0xc0>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d109      	bne.n	8005f0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005efa:	4b20      	ldr	r3, [pc, #128]	@ (8005f7c <prvAddNewTaskToReadyList+0xbc>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d802      	bhi.n	8005f0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f08:	4a1c      	ldr	r2, [pc, #112]	@ (8005f7c <prvAddNewTaskToReadyList+0xbc>)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f0e:	4b1d      	ldr	r3, [pc, #116]	@ (8005f84 <prvAddNewTaskToReadyList+0xc4>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	3301      	adds	r3, #1
 8005f14:	4a1b      	ldr	r2, [pc, #108]	@ (8005f84 <prvAddNewTaskToReadyList+0xc4>)
 8005f16:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	409a      	lsls	r2, r3
 8005f20:	4b19      	ldr	r3, [pc, #100]	@ (8005f88 <prvAddNewTaskToReadyList+0xc8>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	4a18      	ldr	r2, [pc, #96]	@ (8005f88 <prvAddNewTaskToReadyList+0xc8>)
 8005f28:	6013      	str	r3, [r2, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f2e:	4613      	mov	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	4413      	add	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4a15      	ldr	r2, [pc, #84]	@ (8005f8c <prvAddNewTaskToReadyList+0xcc>)
 8005f38:	441a      	add	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	3304      	adds	r3, #4
 8005f3e:	4619      	mov	r1, r3
 8005f40:	4610      	mov	r0, r2
 8005f42:	f7fe fe68 	bl	8004c16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f46:	f001 f8b7 	bl	80070b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f80 <prvAddNewTaskToReadyList+0xc0>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00e      	beq.n	8005f70 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f52:	4b0a      	ldr	r3, [pc, #40]	@ (8005f7c <prvAddNewTaskToReadyList+0xbc>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d207      	bcs.n	8005f70 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f60:	4b0b      	ldr	r3, [pc, #44]	@ (8005f90 <prvAddNewTaskToReadyList+0xd0>)
 8005f62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f66:	601a      	str	r2, [r3, #0]
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f70:	bf00      	nop
 8005f72:	3708      	adds	r7, #8
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	2000567c 	.word	0x2000567c
 8005f7c:	2000557c 	.word	0x2000557c
 8005f80:	20005688 	.word	0x20005688
 8005f84:	20005698 	.word	0x20005698
 8005f88:	20005684 	.word	0x20005684
 8005f8c:	20005580 	.word	0x20005580
 8005f90:	e000ed04 	.word	0xe000ed04

08005f94 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005f9c:	f001 f856 	bl	800704c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d102      	bne.n	8005fac <vTaskDelete+0x18>
 8005fa6:	4b3a      	ldr	r3, [pc, #232]	@ (8006090 <vTaskDelete+0xfc>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	e000      	b.n	8005fae <vTaskDelete+0x1a>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	3304      	adds	r3, #4
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7fe fe8b 	bl	8004cd0 <uxListRemove>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d115      	bne.n	8005fec <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fc4:	4933      	ldr	r1, [pc, #204]	@ (8006094 <vTaskDelete+0x100>)
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4413      	add	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	440b      	add	r3, r1
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10a      	bne.n	8005fec <vTaskDelete+0x58>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fda:	2201      	movs	r2, #1
 8005fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe0:	43da      	mvns	r2, r3
 8005fe2:	4b2d      	ldr	r3, [pc, #180]	@ (8006098 <vTaskDelete+0x104>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	4a2b      	ldr	r2, [pc, #172]	@ (8006098 <vTaskDelete+0x104>)
 8005fea:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d004      	beq.n	8005ffe <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	3318      	adds	r3, #24
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7fe fe69 	bl	8004cd0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8005ffe:	4b27      	ldr	r3, [pc, #156]	@ (800609c <vTaskDelete+0x108>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	3301      	adds	r3, #1
 8006004:	4a25      	ldr	r2, [pc, #148]	@ (800609c <vTaskDelete+0x108>)
 8006006:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8006008:	4b21      	ldr	r3, [pc, #132]	@ (8006090 <vTaskDelete+0xfc>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	429a      	cmp	r2, r3
 8006010:	d10b      	bne.n	800602a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	3304      	adds	r3, #4
 8006016:	4619      	mov	r1, r3
 8006018:	4821      	ldr	r0, [pc, #132]	@ (80060a0 <vTaskDelete+0x10c>)
 800601a:	f7fe fdfc 	bl	8004c16 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800601e:	4b21      	ldr	r3, [pc, #132]	@ (80060a4 <vTaskDelete+0x110>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	3301      	adds	r3, #1
 8006024:	4a1f      	ldr	r2, [pc, #124]	@ (80060a4 <vTaskDelete+0x110>)
 8006026:	6013      	str	r3, [r2, #0]
 8006028:	e009      	b.n	800603e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800602a:	4b1f      	ldr	r3, [pc, #124]	@ (80060a8 <vTaskDelete+0x114>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	3b01      	subs	r3, #1
 8006030:	4a1d      	ldr	r2, [pc, #116]	@ (80060a8 <vTaskDelete+0x114>)
 8006032:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 fc65 	bl	8006904 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800603a:	f000 fc95 	bl	8006968 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800603e:	f001 f83b 	bl	80070b8 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8006042:	4b1a      	ldr	r3, [pc, #104]	@ (80060ac <vTaskDelete+0x118>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d01e      	beq.n	8006088 <vTaskDelete+0xf4>
		{
			if( pxTCB == pxCurrentTCB )
 800604a:	4b11      	ldr	r3, [pc, #68]	@ (8006090 <vTaskDelete+0xfc>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	429a      	cmp	r2, r3
 8006052:	d119      	bne.n	8006088 <vTaskDelete+0xf4>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8006054:	4b16      	ldr	r3, [pc, #88]	@ (80060b0 <vTaskDelete+0x11c>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00d      	beq.n	8006078 <vTaskDelete+0xe4>
	__asm volatile
 800605c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006060:	b672      	cpsid	i
 8006062:	f383 8811 	msr	BASEPRI, r3
 8006066:	f3bf 8f6f 	isb	sy
 800606a:	f3bf 8f4f 	dsb	sy
 800606e:	b662      	cpsie	i
 8006070:	60bb      	str	r3, [r7, #8]
}
 8006072:	bf00      	nop
 8006074:	bf00      	nop
 8006076:	e7fd      	b.n	8006074 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 8006078:	4b0e      	ldr	r3, [pc, #56]	@ (80060b4 <vTaskDelete+0x120>)
 800607a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	f3bf 8f4f 	dsb	sy
 8006084:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006088:	bf00      	nop
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	2000557c 	.word	0x2000557c
 8006094:	20005580 	.word	0x20005580
 8006098:	20005684 	.word	0x20005684
 800609c:	20005698 	.word	0x20005698
 80060a0:	20005650 	.word	0x20005650
 80060a4:	20005664 	.word	0x20005664
 80060a8:	2000567c 	.word	0x2000567c
 80060ac:	20005688 	.word	0x20005688
 80060b0:	200056a4 	.word	0x200056a4
 80060b4:	e000ed04 	.word	0xe000ed04

080060b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80060c0:	2300      	movs	r3, #0
 80060c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d01a      	beq.n	8006100 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80060ca:	4b15      	ldr	r3, [pc, #84]	@ (8006120 <vTaskDelay+0x68>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00d      	beq.n	80060ee <vTaskDelay+0x36>
	__asm volatile
 80060d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d6:	b672      	cpsid	i
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	b662      	cpsie	i
 80060e6:	60bb      	str	r3, [r7, #8]
}
 80060e8:	bf00      	nop
 80060ea:	bf00      	nop
 80060ec:	e7fd      	b.n	80060ea <vTaskDelay+0x32>
			vTaskSuspendAll();
 80060ee:	f000 f881 	bl	80061f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80060f2:	2100      	movs	r1, #0
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 fe35 	bl	8006d64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80060fa:	f000 f889 	bl	8006210 <xTaskResumeAll>
 80060fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d107      	bne.n	8006116 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8006106:	4b07      	ldr	r3, [pc, #28]	@ (8006124 <vTaskDelay+0x6c>)
 8006108:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800610c:	601a      	str	r2, [r3, #0]
 800610e:	f3bf 8f4f 	dsb	sy
 8006112:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006116:	bf00      	nop
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	200056a4 	.word	0x200056a4
 8006124:	e000ed04 	.word	0xe000ed04

08006128 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b08a      	sub	sp, #40	@ 0x28
 800612c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800612e:	2300      	movs	r3, #0
 8006130:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006132:	2300      	movs	r3, #0
 8006134:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006136:	463a      	mov	r2, r7
 8006138:	1d39      	adds	r1, r7, #4
 800613a:	f107 0308 	add.w	r3, r7, #8
 800613e:	4618      	mov	r0, r3
 8006140:	f7fa fa46 	bl	80005d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006144:	6839      	ldr	r1, [r7, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	9202      	str	r2, [sp, #8]
 800614c:	9301      	str	r3, [sp, #4]
 800614e:	2300      	movs	r3, #0
 8006150:	9300      	str	r3, [sp, #0]
 8006152:	2300      	movs	r3, #0
 8006154:	460a      	mov	r2, r1
 8006156:	4921      	ldr	r1, [pc, #132]	@ (80061dc <vTaskStartScheduler+0xb4>)
 8006158:	4821      	ldr	r0, [pc, #132]	@ (80061e0 <vTaskStartScheduler+0xb8>)
 800615a:	f7ff fd7b 	bl	8005c54 <xTaskCreateStatic>
 800615e:	4603      	mov	r3, r0
 8006160:	4a20      	ldr	r2, [pc, #128]	@ (80061e4 <vTaskStartScheduler+0xbc>)
 8006162:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006164:	4b1f      	ldr	r3, [pc, #124]	@ (80061e4 <vTaskStartScheduler+0xbc>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d002      	beq.n	8006172 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800616c:	2301      	movs	r3, #1
 800616e:	617b      	str	r3, [r7, #20]
 8006170:	e001      	b.n	8006176 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006172:	2300      	movs	r3, #0
 8006174:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d118      	bne.n	80061ae <vTaskStartScheduler+0x86>
	__asm volatile
 800617c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006180:	b672      	cpsid	i
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	b662      	cpsie	i
 8006190:	613b      	str	r3, [r7, #16]
}
 8006192:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006194:	4b14      	ldr	r3, [pc, #80]	@ (80061e8 <vTaskStartScheduler+0xc0>)
 8006196:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800619a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800619c:	4b13      	ldr	r3, [pc, #76]	@ (80061ec <vTaskStartScheduler+0xc4>)
 800619e:	2201      	movs	r2, #1
 80061a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80061a2:	4b13      	ldr	r3, [pc, #76]	@ (80061f0 <vTaskStartScheduler+0xc8>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80061a8:	f000 fed2 	bl	8006f50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80061ac:	e011      	b.n	80061d2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061b4:	d10d      	bne.n	80061d2 <vTaskStartScheduler+0xaa>
	__asm volatile
 80061b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ba:	b672      	cpsid	i
 80061bc:	f383 8811 	msr	BASEPRI, r3
 80061c0:	f3bf 8f6f 	isb	sy
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	b662      	cpsie	i
 80061ca:	60fb      	str	r3, [r7, #12]
}
 80061cc:	bf00      	nop
 80061ce:	bf00      	nop
 80061d0:	e7fd      	b.n	80061ce <vTaskStartScheduler+0xa6>
}
 80061d2:	bf00      	nop
 80061d4:	3718      	adds	r7, #24
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	080128f0 	.word	0x080128f0
 80061e0:	080067f9 	.word	0x080067f9
 80061e4:	200056a0 	.word	0x200056a0
 80061e8:	2000569c 	.word	0x2000569c
 80061ec:	20005688 	.word	0x20005688
 80061f0:	20005680 	.word	0x20005680

080061f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80061f4:	b480      	push	{r7}
 80061f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80061f8:	4b04      	ldr	r3, [pc, #16]	@ (800620c <vTaskSuspendAll+0x18>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	3301      	adds	r3, #1
 80061fe:	4a03      	ldr	r2, [pc, #12]	@ (800620c <vTaskSuspendAll+0x18>)
 8006200:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006202:	bf00      	nop
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	200056a4 	.word	0x200056a4

08006210 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006216:	2300      	movs	r3, #0
 8006218:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800621a:	2300      	movs	r3, #0
 800621c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800621e:	4b43      	ldr	r3, [pc, #268]	@ (800632c <xTaskResumeAll+0x11c>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10d      	bne.n	8006242 <xTaskResumeAll+0x32>
	__asm volatile
 8006226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800622a:	b672      	cpsid	i
 800622c:	f383 8811 	msr	BASEPRI, r3
 8006230:	f3bf 8f6f 	isb	sy
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	b662      	cpsie	i
 800623a:	603b      	str	r3, [r7, #0]
}
 800623c:	bf00      	nop
 800623e:	bf00      	nop
 8006240:	e7fd      	b.n	800623e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006242:	f000 ff03 	bl	800704c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006246:	4b39      	ldr	r3, [pc, #228]	@ (800632c <xTaskResumeAll+0x11c>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	3b01      	subs	r3, #1
 800624c:	4a37      	ldr	r2, [pc, #220]	@ (800632c <xTaskResumeAll+0x11c>)
 800624e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006250:	4b36      	ldr	r3, [pc, #216]	@ (800632c <xTaskResumeAll+0x11c>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d161      	bne.n	800631c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006258:	4b35      	ldr	r3, [pc, #212]	@ (8006330 <xTaskResumeAll+0x120>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d05d      	beq.n	800631c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006260:	e02e      	b.n	80062c0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006262:	4b34      	ldr	r3, [pc, #208]	@ (8006334 <xTaskResumeAll+0x124>)
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	3318      	adds	r3, #24
 800626e:	4618      	mov	r0, r3
 8006270:	f7fe fd2e 	bl	8004cd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	3304      	adds	r3, #4
 8006278:	4618      	mov	r0, r3
 800627a:	f7fe fd29 	bl	8004cd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006282:	2201      	movs	r2, #1
 8006284:	409a      	lsls	r2, r3
 8006286:	4b2c      	ldr	r3, [pc, #176]	@ (8006338 <xTaskResumeAll+0x128>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4313      	orrs	r3, r2
 800628c:	4a2a      	ldr	r2, [pc, #168]	@ (8006338 <xTaskResumeAll+0x128>)
 800628e:	6013      	str	r3, [r2, #0]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006294:	4613      	mov	r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4413      	add	r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4a27      	ldr	r2, [pc, #156]	@ (800633c <xTaskResumeAll+0x12c>)
 800629e:	441a      	add	r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	3304      	adds	r3, #4
 80062a4:	4619      	mov	r1, r3
 80062a6:	4610      	mov	r0, r2
 80062a8:	f7fe fcb5 	bl	8004c16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062b0:	4b23      	ldr	r3, [pc, #140]	@ (8006340 <xTaskResumeAll+0x130>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d302      	bcc.n	80062c0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80062ba:	4b22      	ldr	r3, [pc, #136]	@ (8006344 <xTaskResumeAll+0x134>)
 80062bc:	2201      	movs	r2, #1
 80062be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062c0:	4b1c      	ldr	r3, [pc, #112]	@ (8006334 <xTaskResumeAll+0x124>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1cc      	bne.n	8006262 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80062ce:	f000 fb4b 	bl	8006968 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80062d2:	4b1d      	ldr	r3, [pc, #116]	@ (8006348 <xTaskResumeAll+0x138>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d010      	beq.n	8006300 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80062de:	f000 f859 	bl	8006394 <xTaskIncrementTick>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d002      	beq.n	80062ee <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80062e8:	4b16      	ldr	r3, [pc, #88]	@ (8006344 <xTaskResumeAll+0x134>)
 80062ea:	2201      	movs	r2, #1
 80062ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1f1      	bne.n	80062de <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80062fa:	4b13      	ldr	r3, [pc, #76]	@ (8006348 <xTaskResumeAll+0x138>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006300:	4b10      	ldr	r3, [pc, #64]	@ (8006344 <xTaskResumeAll+0x134>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d009      	beq.n	800631c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006308:	2301      	movs	r3, #1
 800630a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800630c:	4b0f      	ldr	r3, [pc, #60]	@ (800634c <xTaskResumeAll+0x13c>)
 800630e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	f3bf 8f4f 	dsb	sy
 8006318:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800631c:	f000 fecc 	bl	80070b8 <vPortExitCritical>

	return xAlreadyYielded;
 8006320:	68bb      	ldr	r3, [r7, #8]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	200056a4 	.word	0x200056a4
 8006330:	2000567c 	.word	0x2000567c
 8006334:	2000563c 	.word	0x2000563c
 8006338:	20005684 	.word	0x20005684
 800633c:	20005580 	.word	0x20005580
 8006340:	2000557c 	.word	0x2000557c
 8006344:	20005690 	.word	0x20005690
 8006348:	2000568c 	.word	0x2000568c
 800634c:	e000ed04 	.word	0xe000ed04

08006350 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006356:	4b05      	ldr	r3, [pc, #20]	@ (800636c <xTaskGetTickCount+0x1c>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800635c:	687b      	ldr	r3, [r7, #4]
}
 800635e:	4618      	mov	r0, r3
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	20005680 	.word	0x20005680

08006370 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006376:	f000 ff51 	bl	800721c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800637a:	2300      	movs	r3, #0
 800637c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800637e:	4b04      	ldr	r3, [pc, #16]	@ (8006390 <xTaskGetTickCountFromISR+0x20>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006384:	683b      	ldr	r3, [r7, #0]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3708      	adds	r7, #8
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	20005680 	.word	0x20005680

08006394 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800639a:	2300      	movs	r3, #0
 800639c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800639e:	4b50      	ldr	r3, [pc, #320]	@ (80064e0 <xTaskIncrementTick+0x14c>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f040 808b 	bne.w	80064be <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80063a8:	4b4e      	ldr	r3, [pc, #312]	@ (80064e4 <xTaskIncrementTick+0x150>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3301      	adds	r3, #1
 80063ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80063b0:	4a4c      	ldr	r2, [pc, #304]	@ (80064e4 <xTaskIncrementTick+0x150>)
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d123      	bne.n	8006404 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80063bc:	4b4a      	ldr	r3, [pc, #296]	@ (80064e8 <xTaskIncrementTick+0x154>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00d      	beq.n	80063e2 <xTaskIncrementTick+0x4e>
	__asm volatile
 80063c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ca:	b672      	cpsid	i
 80063cc:	f383 8811 	msr	BASEPRI, r3
 80063d0:	f3bf 8f6f 	isb	sy
 80063d4:	f3bf 8f4f 	dsb	sy
 80063d8:	b662      	cpsie	i
 80063da:	603b      	str	r3, [r7, #0]
}
 80063dc:	bf00      	nop
 80063de:	bf00      	nop
 80063e0:	e7fd      	b.n	80063de <xTaskIncrementTick+0x4a>
 80063e2:	4b41      	ldr	r3, [pc, #260]	@ (80064e8 <xTaskIncrementTick+0x154>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	4b40      	ldr	r3, [pc, #256]	@ (80064ec <xTaskIncrementTick+0x158>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a3e      	ldr	r2, [pc, #248]	@ (80064e8 <xTaskIncrementTick+0x154>)
 80063ee:	6013      	str	r3, [r2, #0]
 80063f0:	4a3e      	ldr	r2, [pc, #248]	@ (80064ec <xTaskIncrementTick+0x158>)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6013      	str	r3, [r2, #0]
 80063f6:	4b3e      	ldr	r3, [pc, #248]	@ (80064f0 <xTaskIncrementTick+0x15c>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	3301      	adds	r3, #1
 80063fc:	4a3c      	ldr	r2, [pc, #240]	@ (80064f0 <xTaskIncrementTick+0x15c>)
 80063fe:	6013      	str	r3, [r2, #0]
 8006400:	f000 fab2 	bl	8006968 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006404:	4b3b      	ldr	r3, [pc, #236]	@ (80064f4 <xTaskIncrementTick+0x160>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	429a      	cmp	r2, r3
 800640c:	d348      	bcc.n	80064a0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800640e:	4b36      	ldr	r3, [pc, #216]	@ (80064e8 <xTaskIncrementTick+0x154>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d104      	bne.n	8006422 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006418:	4b36      	ldr	r3, [pc, #216]	@ (80064f4 <xTaskIncrementTick+0x160>)
 800641a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800641e:	601a      	str	r2, [r3, #0]
					break;
 8006420:	e03e      	b.n	80064a0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006422:	4b31      	ldr	r3, [pc, #196]	@ (80064e8 <xTaskIncrementTick+0x154>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	429a      	cmp	r2, r3
 8006438:	d203      	bcs.n	8006442 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800643a:	4a2e      	ldr	r2, [pc, #184]	@ (80064f4 <xTaskIncrementTick+0x160>)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006440:	e02e      	b.n	80064a0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	3304      	adds	r3, #4
 8006446:	4618      	mov	r0, r3
 8006448:	f7fe fc42 	bl	8004cd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006450:	2b00      	cmp	r3, #0
 8006452:	d004      	beq.n	800645e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	3318      	adds	r3, #24
 8006458:	4618      	mov	r0, r3
 800645a:	f7fe fc39 	bl	8004cd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006462:	2201      	movs	r2, #1
 8006464:	409a      	lsls	r2, r3
 8006466:	4b24      	ldr	r3, [pc, #144]	@ (80064f8 <xTaskIncrementTick+0x164>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4313      	orrs	r3, r2
 800646c:	4a22      	ldr	r2, [pc, #136]	@ (80064f8 <xTaskIncrementTick+0x164>)
 800646e:	6013      	str	r3, [r2, #0]
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006474:	4613      	mov	r3, r2
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	4413      	add	r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	4a1f      	ldr	r2, [pc, #124]	@ (80064fc <xTaskIncrementTick+0x168>)
 800647e:	441a      	add	r2, r3
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	3304      	adds	r3, #4
 8006484:	4619      	mov	r1, r3
 8006486:	4610      	mov	r0, r2
 8006488:	f7fe fbc5 	bl	8004c16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006490:	4b1b      	ldr	r3, [pc, #108]	@ (8006500 <xTaskIncrementTick+0x16c>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006496:	429a      	cmp	r2, r3
 8006498:	d3b9      	bcc.n	800640e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800649a:	2301      	movs	r3, #1
 800649c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800649e:	e7b6      	b.n	800640e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80064a0:	4b17      	ldr	r3, [pc, #92]	@ (8006500 <xTaskIncrementTick+0x16c>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064a6:	4915      	ldr	r1, [pc, #84]	@ (80064fc <xTaskIncrementTick+0x168>)
 80064a8:	4613      	mov	r3, r2
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	440b      	add	r3, r1
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d907      	bls.n	80064c8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80064b8:	2301      	movs	r3, #1
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	e004      	b.n	80064c8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80064be:	4b11      	ldr	r3, [pc, #68]	@ (8006504 <xTaskIncrementTick+0x170>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3301      	adds	r3, #1
 80064c4:	4a0f      	ldr	r2, [pc, #60]	@ (8006504 <xTaskIncrementTick+0x170>)
 80064c6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80064c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006508 <xTaskIncrementTick+0x174>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d001      	beq.n	80064d4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80064d0:	2301      	movs	r3, #1
 80064d2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80064d4:	697b      	ldr	r3, [r7, #20]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	200056a4 	.word	0x200056a4
 80064e4:	20005680 	.word	0x20005680
 80064e8:	20005634 	.word	0x20005634
 80064ec:	20005638 	.word	0x20005638
 80064f0:	20005694 	.word	0x20005694
 80064f4:	2000569c 	.word	0x2000569c
 80064f8:	20005684 	.word	0x20005684
 80064fc:	20005580 	.word	0x20005580
 8006500:	2000557c 	.word	0x2000557c
 8006504:	2000568c 	.word	0x2000568c
 8006508:	20005690 	.word	0x20005690

0800650c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800650c:	b480      	push	{r7}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006512:	4b28      	ldr	r3, [pc, #160]	@ (80065b4 <vTaskSwitchContext+0xa8>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d003      	beq.n	8006522 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800651a:	4b27      	ldr	r3, [pc, #156]	@ (80065b8 <vTaskSwitchContext+0xac>)
 800651c:	2201      	movs	r2, #1
 800651e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006520:	e042      	b.n	80065a8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006522:	4b25      	ldr	r3, [pc, #148]	@ (80065b8 <vTaskSwitchContext+0xac>)
 8006524:	2200      	movs	r2, #0
 8006526:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006528:	4b24      	ldr	r3, [pc, #144]	@ (80065bc <vTaskSwitchContext+0xb0>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	fab3 f383 	clz	r3, r3
 8006534:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006536:	7afb      	ldrb	r3, [r7, #11]
 8006538:	f1c3 031f 	rsb	r3, r3, #31
 800653c:	617b      	str	r3, [r7, #20]
 800653e:	4920      	ldr	r1, [pc, #128]	@ (80065c0 <vTaskSwitchContext+0xb4>)
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	4613      	mov	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	440b      	add	r3, r1
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10d      	bne.n	800656e <vTaskSwitchContext+0x62>
	__asm volatile
 8006552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006556:	b672      	cpsid	i
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	b662      	cpsie	i
 8006566:	607b      	str	r3, [r7, #4]
}
 8006568:	bf00      	nop
 800656a:	bf00      	nop
 800656c:	e7fd      	b.n	800656a <vTaskSwitchContext+0x5e>
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	4613      	mov	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4a11      	ldr	r2, [pc, #68]	@ (80065c0 <vTaskSwitchContext+0xb4>)
 800657a:	4413      	add	r3, r2
 800657c:	613b      	str	r3, [r7, #16]
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	605a      	str	r2, [r3, #4]
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	3308      	adds	r3, #8
 8006590:	429a      	cmp	r2, r3
 8006592:	d104      	bne.n	800659e <vTaskSwitchContext+0x92>
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	605a      	str	r2, [r3, #4]
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	4a07      	ldr	r2, [pc, #28]	@ (80065c4 <vTaskSwitchContext+0xb8>)
 80065a6:	6013      	str	r3, [r2, #0]
}
 80065a8:	bf00      	nop
 80065aa:	371c      	adds	r7, #28
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr
 80065b4:	200056a4 	.word	0x200056a4
 80065b8:	20005690 	.word	0x20005690
 80065bc:	20005684 	.word	0x20005684
 80065c0:	20005580 	.word	0x20005580
 80065c4:	2000557c 	.word	0x2000557c

080065c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10d      	bne.n	80065f4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80065d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065dc:	b672      	cpsid	i
 80065de:	f383 8811 	msr	BASEPRI, r3
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	b662      	cpsie	i
 80065ec:	60fb      	str	r3, [r7, #12]
}
 80065ee:	bf00      	nop
 80065f0:	bf00      	nop
 80065f2:	e7fd      	b.n	80065f0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065f4:	4b07      	ldr	r3, [pc, #28]	@ (8006614 <vTaskPlaceOnEventList+0x4c>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	3318      	adds	r3, #24
 80065fa:	4619      	mov	r1, r3
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f7fe fb2e 	bl	8004c5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006602:	2101      	movs	r1, #1
 8006604:	6838      	ldr	r0, [r7, #0]
 8006606:	f000 fbad 	bl	8006d64 <prvAddCurrentTaskToDelayedList>
}
 800660a:	bf00      	nop
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	2000557c 	.word	0x2000557c

08006618 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10d      	bne.n	800664a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800662e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006632:	b672      	cpsid	i
 8006634:	f383 8811 	msr	BASEPRI, r3
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	b662      	cpsie	i
 8006642:	60fb      	str	r3, [r7, #12]
}
 8006644:	bf00      	nop
 8006646:	bf00      	nop
 8006648:	e7fd      	b.n	8006646 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	3318      	adds	r3, #24
 800664e:	4618      	mov	r0, r3
 8006650:	f7fe fb3e 	bl	8004cd0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006654:	4b1d      	ldr	r3, [pc, #116]	@ (80066cc <xTaskRemoveFromEventList+0xb4>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d11c      	bne.n	8006696 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	3304      	adds	r3, #4
 8006660:	4618      	mov	r0, r3
 8006662:	f7fe fb35 	bl	8004cd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800666a:	2201      	movs	r2, #1
 800666c:	409a      	lsls	r2, r3
 800666e:	4b18      	ldr	r3, [pc, #96]	@ (80066d0 <xTaskRemoveFromEventList+0xb8>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4313      	orrs	r3, r2
 8006674:	4a16      	ldr	r2, [pc, #88]	@ (80066d0 <xTaskRemoveFromEventList+0xb8>)
 8006676:	6013      	str	r3, [r2, #0]
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800667c:	4613      	mov	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4a13      	ldr	r2, [pc, #76]	@ (80066d4 <xTaskRemoveFromEventList+0xbc>)
 8006686:	441a      	add	r2, r3
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	3304      	adds	r3, #4
 800668c:	4619      	mov	r1, r3
 800668e:	4610      	mov	r0, r2
 8006690:	f7fe fac1 	bl	8004c16 <vListInsertEnd>
 8006694:	e005      	b.n	80066a2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	3318      	adds	r3, #24
 800669a:	4619      	mov	r1, r3
 800669c:	480e      	ldr	r0, [pc, #56]	@ (80066d8 <xTaskRemoveFromEventList+0xc0>)
 800669e:	f7fe faba 	bl	8004c16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066a6:	4b0d      	ldr	r3, [pc, #52]	@ (80066dc <xTaskRemoveFromEventList+0xc4>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d905      	bls.n	80066bc <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80066b0:	2301      	movs	r3, #1
 80066b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80066b4:	4b0a      	ldr	r3, [pc, #40]	@ (80066e0 <xTaskRemoveFromEventList+0xc8>)
 80066b6:	2201      	movs	r2, #1
 80066b8:	601a      	str	r2, [r3, #0]
 80066ba:	e001      	b.n	80066c0 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80066bc:	2300      	movs	r3, #0
 80066be:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80066c0:	697b      	ldr	r3, [r7, #20]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3718      	adds	r7, #24
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	200056a4 	.word	0x200056a4
 80066d0:	20005684 	.word	0x20005684
 80066d4:	20005580 	.word	0x20005580
 80066d8:	2000563c 	.word	0x2000563c
 80066dc:	2000557c 	.word	0x2000557c
 80066e0:	20005690 	.word	0x20005690

080066e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80066ec:	4b06      	ldr	r3, [pc, #24]	@ (8006708 <vTaskInternalSetTimeOutState+0x24>)
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80066f4:	4b05      	ldr	r3, [pc, #20]	@ (800670c <vTaskInternalSetTimeOutState+0x28>)
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	605a      	str	r2, [r3, #4]
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	20005694 	.word	0x20005694
 800670c:	20005680 	.word	0x20005680

08006710 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b088      	sub	sp, #32
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10d      	bne.n	800673c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8006720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006724:	b672      	cpsid	i
 8006726:	f383 8811 	msr	BASEPRI, r3
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	b662      	cpsie	i
 8006734:	613b      	str	r3, [r7, #16]
}
 8006736:	bf00      	nop
 8006738:	bf00      	nop
 800673a:	e7fd      	b.n	8006738 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10d      	bne.n	800675e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8006742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006746:	b672      	cpsid	i
 8006748:	f383 8811 	msr	BASEPRI, r3
 800674c:	f3bf 8f6f 	isb	sy
 8006750:	f3bf 8f4f 	dsb	sy
 8006754:	b662      	cpsie	i
 8006756:	60fb      	str	r3, [r7, #12]
}
 8006758:	bf00      	nop
 800675a:	bf00      	nop
 800675c:	e7fd      	b.n	800675a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800675e:	f000 fc75 	bl	800704c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006762:	4b1d      	ldr	r3, [pc, #116]	@ (80067d8 <xTaskCheckForTimeOut+0xc8>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	69ba      	ldr	r2, [r7, #24]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800677a:	d102      	bne.n	8006782 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800677c:	2300      	movs	r3, #0
 800677e:	61fb      	str	r3, [r7, #28]
 8006780:	e023      	b.n	80067ca <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	4b15      	ldr	r3, [pc, #84]	@ (80067dc <xTaskCheckForTimeOut+0xcc>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	429a      	cmp	r2, r3
 800678c:	d007      	beq.n	800679e <xTaskCheckForTimeOut+0x8e>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	69ba      	ldr	r2, [r7, #24]
 8006794:	429a      	cmp	r2, r3
 8006796:	d302      	bcc.n	800679e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006798:	2301      	movs	r3, #1
 800679a:	61fb      	str	r3, [r7, #28]
 800679c:	e015      	b.n	80067ca <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	697a      	ldr	r2, [r7, #20]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d20b      	bcs.n	80067c0 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	1ad2      	subs	r2, r2, r3
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f7ff ff95 	bl	80066e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80067ba:	2300      	movs	r3, #0
 80067bc:	61fb      	str	r3, [r7, #28]
 80067be:	e004      	b.n	80067ca <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	2200      	movs	r2, #0
 80067c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80067c6:	2301      	movs	r3, #1
 80067c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80067ca:	f000 fc75 	bl	80070b8 <vPortExitCritical>

	return xReturn;
 80067ce:	69fb      	ldr	r3, [r7, #28]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3720      	adds	r7, #32
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	20005680 	.word	0x20005680
 80067dc:	20005694 	.word	0x20005694

080067e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80067e0:	b480      	push	{r7}
 80067e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80067e4:	4b03      	ldr	r3, [pc, #12]	@ (80067f4 <vTaskMissedYield+0x14>)
 80067e6:	2201      	movs	r2, #1
 80067e8:	601a      	str	r2, [r3, #0]
}
 80067ea:	bf00      	nop
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr
 80067f4:	20005690 	.word	0x20005690

080067f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006800:	f000 f852 	bl	80068a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006804:	4b06      	ldr	r3, [pc, #24]	@ (8006820 <prvIdleTask+0x28>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d9f9      	bls.n	8006800 <prvIdleTask+0x8>
			{
				taskYIELD();
 800680c:	4b05      	ldr	r3, [pc, #20]	@ (8006824 <prvIdleTask+0x2c>)
 800680e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006812:	601a      	str	r2, [r3, #0]
 8006814:	f3bf 8f4f 	dsb	sy
 8006818:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800681c:	e7f0      	b.n	8006800 <prvIdleTask+0x8>
 800681e:	bf00      	nop
 8006820:	20005580 	.word	0x20005580
 8006824:	e000ed04 	.word	0xe000ed04

08006828 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800682e:	2300      	movs	r3, #0
 8006830:	607b      	str	r3, [r7, #4]
 8006832:	e00c      	b.n	800684e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	4613      	mov	r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4413      	add	r3, r2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	4a12      	ldr	r2, [pc, #72]	@ (8006888 <prvInitialiseTaskLists+0x60>)
 8006840:	4413      	add	r3, r2
 8006842:	4618      	mov	r0, r3
 8006844:	f7fe f9ba 	bl	8004bbc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	3301      	adds	r3, #1
 800684c:	607b      	str	r3, [r7, #4]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2b06      	cmp	r3, #6
 8006852:	d9ef      	bls.n	8006834 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006854:	480d      	ldr	r0, [pc, #52]	@ (800688c <prvInitialiseTaskLists+0x64>)
 8006856:	f7fe f9b1 	bl	8004bbc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800685a:	480d      	ldr	r0, [pc, #52]	@ (8006890 <prvInitialiseTaskLists+0x68>)
 800685c:	f7fe f9ae 	bl	8004bbc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006860:	480c      	ldr	r0, [pc, #48]	@ (8006894 <prvInitialiseTaskLists+0x6c>)
 8006862:	f7fe f9ab 	bl	8004bbc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006866:	480c      	ldr	r0, [pc, #48]	@ (8006898 <prvInitialiseTaskLists+0x70>)
 8006868:	f7fe f9a8 	bl	8004bbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800686c:	480b      	ldr	r0, [pc, #44]	@ (800689c <prvInitialiseTaskLists+0x74>)
 800686e:	f7fe f9a5 	bl	8004bbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006872:	4b0b      	ldr	r3, [pc, #44]	@ (80068a0 <prvInitialiseTaskLists+0x78>)
 8006874:	4a05      	ldr	r2, [pc, #20]	@ (800688c <prvInitialiseTaskLists+0x64>)
 8006876:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006878:	4b0a      	ldr	r3, [pc, #40]	@ (80068a4 <prvInitialiseTaskLists+0x7c>)
 800687a:	4a05      	ldr	r2, [pc, #20]	@ (8006890 <prvInitialiseTaskLists+0x68>)
 800687c:	601a      	str	r2, [r3, #0]
}
 800687e:	bf00      	nop
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	20005580 	.word	0x20005580
 800688c:	2000560c 	.word	0x2000560c
 8006890:	20005620 	.word	0x20005620
 8006894:	2000563c 	.word	0x2000563c
 8006898:	20005650 	.word	0x20005650
 800689c:	20005668 	.word	0x20005668
 80068a0:	20005634 	.word	0x20005634
 80068a4:	20005638 	.word	0x20005638

080068a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068ae:	e019      	b.n	80068e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80068b0:	f000 fbcc 	bl	800704c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068b4:	4b10      	ldr	r3, [pc, #64]	@ (80068f8 <prvCheckTasksWaitingTermination+0x50>)
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	3304      	adds	r3, #4
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7fe fa05 	bl	8004cd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80068c6:	4b0d      	ldr	r3, [pc, #52]	@ (80068fc <prvCheckTasksWaitingTermination+0x54>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	3b01      	subs	r3, #1
 80068cc:	4a0b      	ldr	r2, [pc, #44]	@ (80068fc <prvCheckTasksWaitingTermination+0x54>)
 80068ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80068d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006900 <prvCheckTasksWaitingTermination+0x58>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	3b01      	subs	r3, #1
 80068d6:	4a0a      	ldr	r2, [pc, #40]	@ (8006900 <prvCheckTasksWaitingTermination+0x58>)
 80068d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80068da:	f000 fbed 	bl	80070b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 f810 	bl	8006904 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068e4:	4b06      	ldr	r3, [pc, #24]	@ (8006900 <prvCheckTasksWaitingTermination+0x58>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1e1      	bne.n	80068b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80068ec:	bf00      	nop
 80068ee:	bf00      	nop
 80068f0:	3708      	adds	r7, #8
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	20005650 	.word	0x20005650
 80068fc:	2000567c 	.word	0x2000567c
 8006900:	20005664 	.word	0x20005664

08006904 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006912:	2b00      	cmp	r3, #0
 8006914:	d108      	bne.n	8006928 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800691a:	4618      	mov	r0, r3
 800691c:	f000 fd92 	bl	8007444 <vPortFree>
				vPortFree( pxTCB );
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fd8f 	bl	8007444 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006926:	e01b      	b.n	8006960 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800692e:	2b01      	cmp	r3, #1
 8006930:	d103      	bne.n	800693a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 fd86 	bl	8007444 <vPortFree>
	}
 8006938:	e012      	b.n	8006960 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006940:	2b02      	cmp	r3, #2
 8006942:	d00d      	beq.n	8006960 <prvDeleteTCB+0x5c>
	__asm volatile
 8006944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006948:	b672      	cpsid	i
 800694a:	f383 8811 	msr	BASEPRI, r3
 800694e:	f3bf 8f6f 	isb	sy
 8006952:	f3bf 8f4f 	dsb	sy
 8006956:	b662      	cpsie	i
 8006958:	60fb      	str	r3, [r7, #12]
}
 800695a:	bf00      	nop
 800695c:	bf00      	nop
 800695e:	e7fd      	b.n	800695c <prvDeleteTCB+0x58>
	}
 8006960:	bf00      	nop
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800696e:	4b0c      	ldr	r3, [pc, #48]	@ (80069a0 <prvResetNextTaskUnblockTime+0x38>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d104      	bne.n	8006982 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006978:	4b0a      	ldr	r3, [pc, #40]	@ (80069a4 <prvResetNextTaskUnblockTime+0x3c>)
 800697a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800697e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006980:	e008      	b.n	8006994 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006982:	4b07      	ldr	r3, [pc, #28]	@ (80069a0 <prvResetNextTaskUnblockTime+0x38>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	4a04      	ldr	r2, [pc, #16]	@ (80069a4 <prvResetNextTaskUnblockTime+0x3c>)
 8006992:	6013      	str	r3, [r2, #0]
}
 8006994:	bf00      	nop
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr
 80069a0:	20005634 	.word	0x20005634
 80069a4:	2000569c 	.word	0x2000569c

080069a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80069ae:	4b0b      	ldr	r3, [pc, #44]	@ (80069dc <xTaskGetSchedulerState+0x34>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d102      	bne.n	80069bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80069b6:	2301      	movs	r3, #1
 80069b8:	607b      	str	r3, [r7, #4]
 80069ba:	e008      	b.n	80069ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069bc:	4b08      	ldr	r3, [pc, #32]	@ (80069e0 <xTaskGetSchedulerState+0x38>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d102      	bne.n	80069ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80069c4:	2302      	movs	r3, #2
 80069c6:	607b      	str	r3, [r7, #4]
 80069c8:	e001      	b.n	80069ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80069ca:	2300      	movs	r3, #0
 80069cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80069ce:	687b      	ldr	r3, [r7, #4]
	}
 80069d0:	4618      	mov	r0, r3
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	20005688 	.word	0x20005688
 80069e0:	200056a4 	.word	0x200056a4

080069e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80069f0:	2300      	movs	r3, #0
 80069f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d069      	beq.n	8006ace <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069fe:	4b36      	ldr	r3, [pc, #216]	@ (8006ad8 <xTaskPriorityInherit+0xf4>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d259      	bcs.n	8006abc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	db06      	blt.n	8006a1e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a10:	4b31      	ldr	r3, [pc, #196]	@ (8006ad8 <xTaskPriorityInherit+0xf4>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a16:	f1c3 0207 	rsb	r2, r3, #7
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	6959      	ldr	r1, [r3, #20]
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a26:	4613      	mov	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4a2b      	ldr	r2, [pc, #172]	@ (8006adc <xTaskPriorityInherit+0xf8>)
 8006a30:	4413      	add	r3, r2
 8006a32:	4299      	cmp	r1, r3
 8006a34:	d13a      	bne.n	8006aac <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	3304      	adds	r3, #4
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7fe f948 	bl	8004cd0 <uxListRemove>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d115      	bne.n	8006a72 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a4a:	4924      	ldr	r1, [pc, #144]	@ (8006adc <xTaskPriorityInherit+0xf8>)
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4413      	add	r3, r2
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	440b      	add	r3, r1
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10a      	bne.n	8006a72 <xTaskPriorityInherit+0x8e>
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a60:	2201      	movs	r2, #1
 8006a62:	fa02 f303 	lsl.w	r3, r2, r3
 8006a66:	43da      	mvns	r2, r3
 8006a68:	4b1d      	ldr	r3, [pc, #116]	@ (8006ae0 <xTaskPriorityInherit+0xfc>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	4a1c      	ldr	r2, [pc, #112]	@ (8006ae0 <xTaskPriorityInherit+0xfc>)
 8006a70:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006a72:	4b19      	ldr	r3, [pc, #100]	@ (8006ad8 <xTaskPriorityInherit+0xf4>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a80:	2201      	movs	r2, #1
 8006a82:	409a      	lsls	r2, r3
 8006a84:	4b16      	ldr	r3, [pc, #88]	@ (8006ae0 <xTaskPriorityInherit+0xfc>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	4a15      	ldr	r2, [pc, #84]	@ (8006ae0 <xTaskPriorityInherit+0xfc>)
 8006a8c:	6013      	str	r3, [r2, #0]
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a92:	4613      	mov	r3, r2
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4413      	add	r3, r2
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	4a10      	ldr	r2, [pc, #64]	@ (8006adc <xTaskPriorityInherit+0xf8>)
 8006a9c:	441a      	add	r2, r3
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	3304      	adds	r3, #4
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	4610      	mov	r0, r2
 8006aa6:	f7fe f8b6 	bl	8004c16 <vListInsertEnd>
 8006aaa:	e004      	b.n	8006ab6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006aac:	4b0a      	ldr	r3, [pc, #40]	@ (8006ad8 <xTaskPriorityInherit+0xf4>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	60fb      	str	r3, [r7, #12]
 8006aba:	e008      	b.n	8006ace <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ac0:	4b05      	ldr	r3, [pc, #20]	@ (8006ad8 <xTaskPriorityInherit+0xf4>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d201      	bcs.n	8006ace <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006aca:	2301      	movs	r3, #1
 8006acc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ace:	68fb      	ldr	r3, [r7, #12]
	}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	2000557c 	.word	0x2000557c
 8006adc:	20005580 	.word	0x20005580
 8006ae0:	20005684 	.word	0x20005684

08006ae4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b086      	sub	sp, #24
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006af0:	2300      	movs	r3, #0
 8006af2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d074      	beq.n	8006be4 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006afa:	4b3d      	ldr	r3, [pc, #244]	@ (8006bf0 <xTaskPriorityDisinherit+0x10c>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	693a      	ldr	r2, [r7, #16]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d00d      	beq.n	8006b20 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8006b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b08:	b672      	cpsid	i
 8006b0a:	f383 8811 	msr	BASEPRI, r3
 8006b0e:	f3bf 8f6f 	isb	sy
 8006b12:	f3bf 8f4f 	dsb	sy
 8006b16:	b662      	cpsie	i
 8006b18:	60fb      	str	r3, [r7, #12]
}
 8006b1a:	bf00      	nop
 8006b1c:	bf00      	nop
 8006b1e:	e7fd      	b.n	8006b1c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10d      	bne.n	8006b44 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8006b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b2c:	b672      	cpsid	i
 8006b2e:	f383 8811 	msr	BASEPRI, r3
 8006b32:	f3bf 8f6f 	isb	sy
 8006b36:	f3bf 8f4f 	dsb	sy
 8006b3a:	b662      	cpsie	i
 8006b3c:	60bb      	str	r3, [r7, #8]
}
 8006b3e:	bf00      	nop
 8006b40:	bf00      	nop
 8006b42:	e7fd      	b.n	8006b40 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b48:	1e5a      	subs	r2, r3, #1
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d044      	beq.n	8006be4 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d140      	bne.n	8006be4 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	3304      	adds	r3, #4
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7fe f8b2 	bl	8004cd0 <uxListRemove>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d115      	bne.n	8006b9e <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b76:	491f      	ldr	r1, [pc, #124]	@ (8006bf4 <xTaskPriorityDisinherit+0x110>)
 8006b78:	4613      	mov	r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	4413      	add	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	440b      	add	r3, r1
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d10a      	bne.n	8006b9e <xTaskPriorityDisinherit+0xba>
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b92:	43da      	mvns	r2, r3
 8006b94:	4b18      	ldr	r3, [pc, #96]	@ (8006bf8 <xTaskPriorityDisinherit+0x114>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4013      	ands	r3, r2
 8006b9a:	4a17      	ldr	r2, [pc, #92]	@ (8006bf8 <xTaskPriorityDisinherit+0x114>)
 8006b9c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006baa:	f1c3 0207 	rsb	r2, r3, #7
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	409a      	lsls	r2, r3
 8006bba:	4b0f      	ldr	r3, [pc, #60]	@ (8006bf8 <xTaskPriorityDisinherit+0x114>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8006bf8 <xTaskPriorityDisinherit+0x114>)
 8006bc2:	6013      	str	r3, [r2, #0]
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bc8:	4613      	mov	r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4413      	add	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4a08      	ldr	r2, [pc, #32]	@ (8006bf4 <xTaskPriorityDisinherit+0x110>)
 8006bd2:	441a      	add	r2, r3
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	3304      	adds	r3, #4
 8006bd8:	4619      	mov	r1, r3
 8006bda:	4610      	mov	r0, r2
 8006bdc:	f7fe f81b 	bl	8004c16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006be0:	2301      	movs	r3, #1
 8006be2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006be4:	697b      	ldr	r3, [r7, #20]
	}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3718      	adds	r7, #24
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	2000557c 	.word	0x2000557c
 8006bf4:	20005580 	.word	0x20005580
 8006bf8:	20005684 	.word	0x20005684

08006bfc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b088      	sub	sp, #32
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 8089 	beq.w	8006d28 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10d      	bne.n	8006c3a <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8006c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c22:	b672      	cpsid	i
 8006c24:	f383 8811 	msr	BASEPRI, r3
 8006c28:	f3bf 8f6f 	isb	sy
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	b662      	cpsie	i
 8006c32:	60fb      	str	r3, [r7, #12]
}
 8006c34:	bf00      	nop
 8006c36:	bf00      	nop
 8006c38:	e7fd      	b.n	8006c36 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c3e:	683a      	ldr	r2, [r7, #0]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d902      	bls.n	8006c4a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	61fb      	str	r3, [r7, #28]
 8006c48:	e002      	b.n	8006c50 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c4e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c54:	69fa      	ldr	r2, [r7, #28]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d066      	beq.n	8006d28 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d161      	bne.n	8006d28 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006c64:	4b32      	ldr	r3, [pc, #200]	@ (8006d30 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	69ba      	ldr	r2, [r7, #24]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d10d      	bne.n	8006c8a <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8006c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c72:	b672      	cpsid	i
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	b662      	cpsie	i
 8006c82:	60bb      	str	r3, [r7, #8]
}
 8006c84:	bf00      	nop
 8006c86:	bf00      	nop
 8006c88:	e7fd      	b.n	8006c86 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c8e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	69fa      	ldr	r2, [r7, #28]
 8006c94:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	db04      	blt.n	8006ca8 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	f1c3 0207 	rsb	r2, r3, #7
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	6959      	ldr	r1, [r3, #20]
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4a1f      	ldr	r2, [pc, #124]	@ (8006d34 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006cb8:	4413      	add	r3, r2
 8006cba:	4299      	cmp	r1, r3
 8006cbc:	d134      	bne.n	8006d28 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	3304      	adds	r3, #4
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7fe f804 	bl	8004cd0 <uxListRemove>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d115      	bne.n	8006cfa <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cd2:	4918      	ldr	r1, [pc, #96]	@ (8006d34 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	4413      	add	r3, r2
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	440b      	add	r3, r1
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d10a      	bne.n	8006cfa <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce8:	2201      	movs	r2, #1
 8006cea:	fa02 f303 	lsl.w	r3, r2, r3
 8006cee:	43da      	mvns	r2, r3
 8006cf0:	4b11      	ldr	r3, [pc, #68]	@ (8006d38 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	4a10      	ldr	r2, [pc, #64]	@ (8006d38 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006cf8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cfe:	2201      	movs	r2, #1
 8006d00:	409a      	lsls	r2, r3
 8006d02:	4b0d      	ldr	r3, [pc, #52]	@ (8006d38 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	4a0b      	ldr	r2, [pc, #44]	@ (8006d38 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006d0a:	6013      	str	r3, [r2, #0]
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d10:	4613      	mov	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4a06      	ldr	r2, [pc, #24]	@ (8006d34 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006d1a:	441a      	add	r2, r3
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	3304      	adds	r3, #4
 8006d20:	4619      	mov	r1, r3
 8006d22:	4610      	mov	r0, r2
 8006d24:	f7fd ff77 	bl	8004c16 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d28:	bf00      	nop
 8006d2a:	3720      	adds	r7, #32
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	2000557c 	.word	0x2000557c
 8006d34:	20005580 	.word	0x20005580
 8006d38:	20005684 	.word	0x20005684

08006d3c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006d3c:	b480      	push	{r7}
 8006d3e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006d40:	4b07      	ldr	r3, [pc, #28]	@ (8006d60 <pvTaskIncrementMutexHeldCount+0x24>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d004      	beq.n	8006d52 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006d48:	4b05      	ldr	r3, [pc, #20]	@ (8006d60 <pvTaskIncrementMutexHeldCount+0x24>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006d4e:	3201      	adds	r2, #1
 8006d50:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8006d52:	4b03      	ldr	r3, [pc, #12]	@ (8006d60 <pvTaskIncrementMutexHeldCount+0x24>)
 8006d54:	681b      	ldr	r3, [r3, #0]
	}
 8006d56:	4618      	mov	r0, r3
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	2000557c 	.word	0x2000557c

08006d64 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006d6e:	4b29      	ldr	r3, [pc, #164]	@ (8006e14 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d74:	4b28      	ldr	r3, [pc, #160]	@ (8006e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	3304      	adds	r3, #4
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7fd ffa8 	bl	8004cd0 <uxListRemove>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10b      	bne.n	8006d9e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006d86:	4b24      	ldr	r3, [pc, #144]	@ (8006e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d92:	43da      	mvns	r2, r3
 8006d94:	4b21      	ldr	r3, [pc, #132]	@ (8006e1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4013      	ands	r3, r2
 8006d9a:	4a20      	ldr	r2, [pc, #128]	@ (8006e1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006d9c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006da4:	d10a      	bne.n	8006dbc <prvAddCurrentTaskToDelayedList+0x58>
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d007      	beq.n	8006dbc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006dac:	4b1a      	ldr	r3, [pc, #104]	@ (8006e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	3304      	adds	r3, #4
 8006db2:	4619      	mov	r1, r3
 8006db4:	481a      	ldr	r0, [pc, #104]	@ (8006e20 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006db6:	f7fd ff2e 	bl	8004c16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006dba:	e026      	b.n	8006e0a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006dc4:	4b14      	ldr	r3, [pc, #80]	@ (8006e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006dcc:	68ba      	ldr	r2, [r7, #8]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d209      	bcs.n	8006de8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006dd4:	4b13      	ldr	r3, [pc, #76]	@ (8006e24 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8006e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	3304      	adds	r3, #4
 8006dde:	4619      	mov	r1, r3
 8006de0:	4610      	mov	r0, r2
 8006de2:	f7fd ff3c 	bl	8004c5e <vListInsert>
}
 8006de6:	e010      	b.n	8006e0a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006de8:	4b0f      	ldr	r3, [pc, #60]	@ (8006e28 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	4b0a      	ldr	r3, [pc, #40]	@ (8006e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	3304      	adds	r3, #4
 8006df2:	4619      	mov	r1, r3
 8006df4:	4610      	mov	r0, r2
 8006df6:	f7fd ff32 	bl	8004c5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8006e2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d202      	bcs.n	8006e0a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006e04:	4a09      	ldr	r2, [pc, #36]	@ (8006e2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	6013      	str	r3, [r2, #0]
}
 8006e0a:	bf00      	nop
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	20005680 	.word	0x20005680
 8006e18:	2000557c 	.word	0x2000557c
 8006e1c:	20005684 	.word	0x20005684
 8006e20:	20005668 	.word	0x20005668
 8006e24:	20005638 	.word	0x20005638
 8006e28:	20005634 	.word	0x20005634
 8006e2c:	2000569c 	.word	0x2000569c

08006e30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	3b04      	subs	r3, #4
 8006e40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006e48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	3b04      	subs	r3, #4
 8006e4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	f023 0201 	bic.w	r2, r3, #1
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	3b04      	subs	r3, #4
 8006e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006e60:	4a0c      	ldr	r2, [pc, #48]	@ (8006e94 <pxPortInitialiseStack+0x64>)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	3b14      	subs	r3, #20
 8006e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	3b04      	subs	r3, #4
 8006e76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f06f 0202 	mvn.w	r2, #2
 8006e7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	3b20      	subs	r3, #32
 8006e84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006e86:	68fb      	ldr	r3, [r7, #12]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr
 8006e94:	08006e99 	.word	0x08006e99

08006e98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ea2:	4b15      	ldr	r3, [pc, #84]	@ (8006ef8 <prvTaskExitError+0x60>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006eaa:	d00d      	beq.n	8006ec8 <prvTaskExitError+0x30>
	__asm volatile
 8006eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb0:	b672      	cpsid	i
 8006eb2:	f383 8811 	msr	BASEPRI, r3
 8006eb6:	f3bf 8f6f 	isb	sy
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	b662      	cpsie	i
 8006ec0:	60fb      	str	r3, [r7, #12]
}
 8006ec2:	bf00      	nop
 8006ec4:	bf00      	nop
 8006ec6:	e7fd      	b.n	8006ec4 <prvTaskExitError+0x2c>
	__asm volatile
 8006ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ecc:	b672      	cpsid	i
 8006ece:	f383 8811 	msr	BASEPRI, r3
 8006ed2:	f3bf 8f6f 	isb	sy
 8006ed6:	f3bf 8f4f 	dsb	sy
 8006eda:	b662      	cpsie	i
 8006edc:	60bb      	str	r3, [r7, #8]
}
 8006ede:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006ee0:	bf00      	nop
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d0fc      	beq.n	8006ee2 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006ee8:	bf00      	nop
 8006eea:	bf00      	nop
 8006eec:	3714      	adds	r7, #20
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	20000020 	.word	0x20000020
 8006efc:	00000000 	.word	0x00000000

08006f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f00:	4b07      	ldr	r3, [pc, #28]	@ (8006f20 <pxCurrentTCBConst2>)
 8006f02:	6819      	ldr	r1, [r3, #0]
 8006f04:	6808      	ldr	r0, [r1, #0]
 8006f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f0a:	f380 8809 	msr	PSP, r0
 8006f0e:	f3bf 8f6f 	isb	sy
 8006f12:	f04f 0000 	mov.w	r0, #0
 8006f16:	f380 8811 	msr	BASEPRI, r0
 8006f1a:	4770      	bx	lr
 8006f1c:	f3af 8000 	nop.w

08006f20 <pxCurrentTCBConst2>:
 8006f20:	2000557c 	.word	0x2000557c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f24:	bf00      	nop
 8006f26:	bf00      	nop

08006f28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006f28:	4808      	ldr	r0, [pc, #32]	@ (8006f4c <prvPortStartFirstTask+0x24>)
 8006f2a:	6800      	ldr	r0, [r0, #0]
 8006f2c:	6800      	ldr	r0, [r0, #0]
 8006f2e:	f380 8808 	msr	MSP, r0
 8006f32:	f04f 0000 	mov.w	r0, #0
 8006f36:	f380 8814 	msr	CONTROL, r0
 8006f3a:	b662      	cpsie	i
 8006f3c:	b661      	cpsie	f
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	df00      	svc	0
 8006f48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f4a:	bf00      	nop
 8006f4c:	e000ed08 	.word	0xe000ed08

08006f50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f56:	4b37      	ldr	r3, [pc, #220]	@ (8007034 <xPortStartScheduler+0xe4>)
 8006f58:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	22ff      	movs	r2, #255	@ 0xff
 8006f66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f70:	78fb      	ldrb	r3, [r7, #3]
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006f78:	b2da      	uxtb	r2, r3
 8006f7a:	4b2f      	ldr	r3, [pc, #188]	@ (8007038 <xPortStartScheduler+0xe8>)
 8006f7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f7e:	4b2f      	ldr	r3, [pc, #188]	@ (800703c <xPortStartScheduler+0xec>)
 8006f80:	2207      	movs	r2, #7
 8006f82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f84:	e009      	b.n	8006f9a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006f86:	4b2d      	ldr	r3, [pc, #180]	@ (800703c <xPortStartScheduler+0xec>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	4a2b      	ldr	r2, [pc, #172]	@ (800703c <xPortStartScheduler+0xec>)
 8006f8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f90:	78fb      	ldrb	r3, [r7, #3]
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	005b      	lsls	r3, r3, #1
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f9a:	78fb      	ldrb	r3, [r7, #3]
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fa2:	2b80      	cmp	r3, #128	@ 0x80
 8006fa4:	d0ef      	beq.n	8006f86 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006fa6:	4b25      	ldr	r3, [pc, #148]	@ (800703c <xPortStartScheduler+0xec>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f1c3 0307 	rsb	r3, r3, #7
 8006fae:	2b04      	cmp	r3, #4
 8006fb0:	d00d      	beq.n	8006fce <xPortStartScheduler+0x7e>
	__asm volatile
 8006fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb6:	b672      	cpsid	i
 8006fb8:	f383 8811 	msr	BASEPRI, r3
 8006fbc:	f3bf 8f6f 	isb	sy
 8006fc0:	f3bf 8f4f 	dsb	sy
 8006fc4:	b662      	cpsie	i
 8006fc6:	60bb      	str	r3, [r7, #8]
}
 8006fc8:	bf00      	nop
 8006fca:	bf00      	nop
 8006fcc:	e7fd      	b.n	8006fca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006fce:	4b1b      	ldr	r3, [pc, #108]	@ (800703c <xPortStartScheduler+0xec>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	021b      	lsls	r3, r3, #8
 8006fd4:	4a19      	ldr	r2, [pc, #100]	@ (800703c <xPortStartScheduler+0xec>)
 8006fd6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006fd8:	4b18      	ldr	r3, [pc, #96]	@ (800703c <xPortStartScheduler+0xec>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006fe0:	4a16      	ldr	r2, [pc, #88]	@ (800703c <xPortStartScheduler+0xec>)
 8006fe2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	b2da      	uxtb	r2, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006fec:	4b14      	ldr	r3, [pc, #80]	@ (8007040 <xPortStartScheduler+0xf0>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a13      	ldr	r2, [pc, #76]	@ (8007040 <xPortStartScheduler+0xf0>)
 8006ff2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006ff6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006ff8:	4b11      	ldr	r3, [pc, #68]	@ (8007040 <xPortStartScheduler+0xf0>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a10      	ldr	r2, [pc, #64]	@ (8007040 <xPortStartScheduler+0xf0>)
 8006ffe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007002:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007004:	f000 f8dc 	bl	80071c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007008:	4b0e      	ldr	r3, [pc, #56]	@ (8007044 <xPortStartScheduler+0xf4>)
 800700a:	2200      	movs	r2, #0
 800700c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800700e:	f000 f8fb 	bl	8007208 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007012:	4b0d      	ldr	r3, [pc, #52]	@ (8007048 <xPortStartScheduler+0xf8>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a0c      	ldr	r2, [pc, #48]	@ (8007048 <xPortStartScheduler+0xf8>)
 8007018:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800701c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800701e:	f7ff ff83 	bl	8006f28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007022:	f7ff fa73 	bl	800650c <vTaskSwitchContext>
	prvTaskExitError();
 8007026:	f7ff ff37 	bl	8006e98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	e000e400 	.word	0xe000e400
 8007038:	200056a8 	.word	0x200056a8
 800703c:	200056ac 	.word	0x200056ac
 8007040:	e000ed20 	.word	0xe000ed20
 8007044:	20000020 	.word	0x20000020
 8007048:	e000ef34 	.word	0xe000ef34

0800704c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
	__asm volatile
 8007052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007056:	b672      	cpsid	i
 8007058:	f383 8811 	msr	BASEPRI, r3
 800705c:	f3bf 8f6f 	isb	sy
 8007060:	f3bf 8f4f 	dsb	sy
 8007064:	b662      	cpsie	i
 8007066:	607b      	str	r3, [r7, #4]
}
 8007068:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800706a:	4b11      	ldr	r3, [pc, #68]	@ (80070b0 <vPortEnterCritical+0x64>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	3301      	adds	r3, #1
 8007070:	4a0f      	ldr	r2, [pc, #60]	@ (80070b0 <vPortEnterCritical+0x64>)
 8007072:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007074:	4b0e      	ldr	r3, [pc, #56]	@ (80070b0 <vPortEnterCritical+0x64>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d112      	bne.n	80070a2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800707c:	4b0d      	ldr	r3, [pc, #52]	@ (80070b4 <vPortEnterCritical+0x68>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00d      	beq.n	80070a2 <vPortEnterCritical+0x56>
	__asm volatile
 8007086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800708a:	b672      	cpsid	i
 800708c:	f383 8811 	msr	BASEPRI, r3
 8007090:	f3bf 8f6f 	isb	sy
 8007094:	f3bf 8f4f 	dsb	sy
 8007098:	b662      	cpsie	i
 800709a:	603b      	str	r3, [r7, #0]
}
 800709c:	bf00      	nop
 800709e:	bf00      	nop
 80070a0:	e7fd      	b.n	800709e <vPortEnterCritical+0x52>
	}
}
 80070a2:	bf00      	nop
 80070a4:	370c      	adds	r7, #12
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	20000020 	.word	0x20000020
 80070b4:	e000ed04 	.word	0xe000ed04

080070b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80070be:	4b13      	ldr	r3, [pc, #76]	@ (800710c <vPortExitCritical+0x54>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10d      	bne.n	80070e2 <vPortExitCritical+0x2a>
	__asm volatile
 80070c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ca:	b672      	cpsid	i
 80070cc:	f383 8811 	msr	BASEPRI, r3
 80070d0:	f3bf 8f6f 	isb	sy
 80070d4:	f3bf 8f4f 	dsb	sy
 80070d8:	b662      	cpsie	i
 80070da:	607b      	str	r3, [r7, #4]
}
 80070dc:	bf00      	nop
 80070de:	bf00      	nop
 80070e0:	e7fd      	b.n	80070de <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80070e2:	4b0a      	ldr	r3, [pc, #40]	@ (800710c <vPortExitCritical+0x54>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	3b01      	subs	r3, #1
 80070e8:	4a08      	ldr	r2, [pc, #32]	@ (800710c <vPortExitCritical+0x54>)
 80070ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80070ec:	4b07      	ldr	r3, [pc, #28]	@ (800710c <vPortExitCritical+0x54>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d105      	bne.n	8007100 <vPortExitCritical+0x48>
 80070f4:	2300      	movs	r3, #0
 80070f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	f383 8811 	msr	BASEPRI, r3
}
 80070fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007100:	bf00      	nop
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr
 800710c:	20000020 	.word	0x20000020

08007110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007110:	f3ef 8009 	mrs	r0, PSP
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	4b15      	ldr	r3, [pc, #84]	@ (8007170 <pxCurrentTCBConst>)
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	f01e 0f10 	tst.w	lr, #16
 8007120:	bf08      	it	eq
 8007122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712a:	6010      	str	r0, [r2, #0]
 800712c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007130:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007134:	b672      	cpsid	i
 8007136:	f380 8811 	msr	BASEPRI, r0
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	b662      	cpsie	i
 8007144:	f7ff f9e2 	bl	800650c <vTaskSwitchContext>
 8007148:	f04f 0000 	mov.w	r0, #0
 800714c:	f380 8811 	msr	BASEPRI, r0
 8007150:	bc09      	pop	{r0, r3}
 8007152:	6819      	ldr	r1, [r3, #0]
 8007154:	6808      	ldr	r0, [r1, #0]
 8007156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800715a:	f01e 0f10 	tst.w	lr, #16
 800715e:	bf08      	it	eq
 8007160:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007164:	f380 8809 	msr	PSP, r0
 8007168:	f3bf 8f6f 	isb	sy
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop

08007170 <pxCurrentTCBConst>:
 8007170:	2000557c 	.word	0x2000557c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007174:	bf00      	nop
 8007176:	bf00      	nop

08007178 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
	__asm volatile
 800717e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007182:	b672      	cpsid	i
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	b662      	cpsie	i
 8007192:	607b      	str	r3, [r7, #4]
}
 8007194:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007196:	f7ff f8fd 	bl	8006394 <xTaskIncrementTick>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d003      	beq.n	80071a8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80071a0:	4b06      	ldr	r3, [pc, #24]	@ (80071bc <SysTick_Handler+0x44>)
 80071a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071a6:	601a      	str	r2, [r3, #0]
 80071a8:	2300      	movs	r3, #0
 80071aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	f383 8811 	msr	BASEPRI, r3
}
 80071b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80071b4:	bf00      	nop
 80071b6:	3708      	adds	r7, #8
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	e000ed04 	.word	0xe000ed04

080071c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80071c0:	b480      	push	{r7}
 80071c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80071c4:	4b0b      	ldr	r3, [pc, #44]	@ (80071f4 <vPortSetupTimerInterrupt+0x34>)
 80071c6:	2200      	movs	r2, #0
 80071c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80071ca:	4b0b      	ldr	r3, [pc, #44]	@ (80071f8 <vPortSetupTimerInterrupt+0x38>)
 80071cc:	2200      	movs	r2, #0
 80071ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80071d0:	4b0a      	ldr	r3, [pc, #40]	@ (80071fc <vPortSetupTimerInterrupt+0x3c>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a0a      	ldr	r2, [pc, #40]	@ (8007200 <vPortSetupTimerInterrupt+0x40>)
 80071d6:	fba2 2303 	umull	r2, r3, r2, r3
 80071da:	099b      	lsrs	r3, r3, #6
 80071dc:	4a09      	ldr	r2, [pc, #36]	@ (8007204 <vPortSetupTimerInterrupt+0x44>)
 80071de:	3b01      	subs	r3, #1
 80071e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80071e2:	4b04      	ldr	r3, [pc, #16]	@ (80071f4 <vPortSetupTimerInterrupt+0x34>)
 80071e4:	2207      	movs	r2, #7
 80071e6:	601a      	str	r2, [r3, #0]
}
 80071e8:	bf00      	nop
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	e000e010 	.word	0xe000e010
 80071f8:	e000e018 	.word	0xe000e018
 80071fc:	20000000 	.word	0x20000000
 8007200:	10624dd3 	.word	0x10624dd3
 8007204:	e000e014 	.word	0xe000e014

08007208 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007208:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007218 <vPortEnableVFP+0x10>
 800720c:	6801      	ldr	r1, [r0, #0]
 800720e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007212:	6001      	str	r1, [r0, #0]
 8007214:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007216:	bf00      	nop
 8007218:	e000ed88 	.word	0xe000ed88

0800721c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007222:	f3ef 8305 	mrs	r3, IPSR
 8007226:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2b0f      	cmp	r3, #15
 800722c:	d917      	bls.n	800725e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800722e:	4a1a      	ldr	r2, [pc, #104]	@ (8007298 <vPortValidateInterruptPriority+0x7c>)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	4413      	add	r3, r2
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007238:	4b18      	ldr	r3, [pc, #96]	@ (800729c <vPortValidateInterruptPriority+0x80>)
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	7afa      	ldrb	r2, [r7, #11]
 800723e:	429a      	cmp	r2, r3
 8007240:	d20d      	bcs.n	800725e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8007242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007246:	b672      	cpsid	i
 8007248:	f383 8811 	msr	BASEPRI, r3
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	b662      	cpsie	i
 8007256:	607b      	str	r3, [r7, #4]
}
 8007258:	bf00      	nop
 800725a:	bf00      	nop
 800725c:	e7fd      	b.n	800725a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800725e:	4b10      	ldr	r3, [pc, #64]	@ (80072a0 <vPortValidateInterruptPriority+0x84>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007266:	4b0f      	ldr	r3, [pc, #60]	@ (80072a4 <vPortValidateInterruptPriority+0x88>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	429a      	cmp	r2, r3
 800726c:	d90d      	bls.n	800728a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800726e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007272:	b672      	cpsid	i
 8007274:	f383 8811 	msr	BASEPRI, r3
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	b662      	cpsie	i
 8007282:	603b      	str	r3, [r7, #0]
}
 8007284:	bf00      	nop
 8007286:	bf00      	nop
 8007288:	e7fd      	b.n	8007286 <vPortValidateInterruptPriority+0x6a>
	}
 800728a:	bf00      	nop
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	e000e3f0 	.word	0xe000e3f0
 800729c:	200056a8 	.word	0x200056a8
 80072a0:	e000ed0c 	.word	0xe000ed0c
 80072a4:	200056ac 	.word	0x200056ac

080072a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b08a      	sub	sp, #40	@ 0x28
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80072b0:	2300      	movs	r3, #0
 80072b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80072b4:	f7fe ff9e 	bl	80061f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80072b8:	4b5d      	ldr	r3, [pc, #372]	@ (8007430 <pvPortMalloc+0x188>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d101      	bne.n	80072c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80072c0:	f000 f920 	bl	8007504 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80072c4:	4b5b      	ldr	r3, [pc, #364]	@ (8007434 <pvPortMalloc+0x18c>)
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4013      	ands	r3, r2
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f040 8094 	bne.w	80073fa <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d020      	beq.n	800731a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80072d8:	2208      	movs	r2, #8
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4413      	add	r3, r2
 80072de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f003 0307 	and.w	r3, r3, #7
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d017      	beq.n	800731a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f023 0307 	bic.w	r3, r3, #7
 80072f0:	3308      	adds	r3, #8
 80072f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f003 0307 	and.w	r3, r3, #7
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00d      	beq.n	800731a <pvPortMalloc+0x72>
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007302:	b672      	cpsid	i
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	b662      	cpsie	i
 8007312:	617b      	str	r3, [r7, #20]
}
 8007314:	bf00      	nop
 8007316:	bf00      	nop
 8007318:	e7fd      	b.n	8007316 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d06c      	beq.n	80073fa <pvPortMalloc+0x152>
 8007320:	4b45      	ldr	r3, [pc, #276]	@ (8007438 <pvPortMalloc+0x190>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	429a      	cmp	r2, r3
 8007328:	d867      	bhi.n	80073fa <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800732a:	4b44      	ldr	r3, [pc, #272]	@ (800743c <pvPortMalloc+0x194>)
 800732c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800732e:	4b43      	ldr	r3, [pc, #268]	@ (800743c <pvPortMalloc+0x194>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007334:	e004      	b.n	8007340 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8007336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007338:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800733a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	429a      	cmp	r2, r3
 8007348:	d903      	bls.n	8007352 <pvPortMalloc+0xaa>
 800734a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1f1      	bne.n	8007336 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007352:	4b37      	ldr	r3, [pc, #220]	@ (8007430 <pvPortMalloc+0x188>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007358:	429a      	cmp	r2, r3
 800735a:	d04e      	beq.n	80073fa <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2208      	movs	r2, #8
 8007362:	4413      	add	r3, r2
 8007364:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	6a3b      	ldr	r3, [r7, #32]
 800736c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800736e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007370:	685a      	ldr	r2, [r3, #4]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	1ad2      	subs	r2, r2, r3
 8007376:	2308      	movs	r3, #8
 8007378:	005b      	lsls	r3, r3, #1
 800737a:	429a      	cmp	r2, r3
 800737c:	d922      	bls.n	80073c4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800737e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4413      	add	r3, r2
 8007384:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	f003 0307 	and.w	r3, r3, #7
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00d      	beq.n	80073ac <pvPortMalloc+0x104>
	__asm volatile
 8007390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007394:	b672      	cpsid	i
 8007396:	f383 8811 	msr	BASEPRI, r3
 800739a:	f3bf 8f6f 	isb	sy
 800739e:	f3bf 8f4f 	dsb	sy
 80073a2:	b662      	cpsie	i
 80073a4:	613b      	str	r3, [r7, #16]
}
 80073a6:	bf00      	nop
 80073a8:	bf00      	nop
 80073aa:	e7fd      	b.n	80073a8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80073ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ae:	685a      	ldr	r2, [r3, #4]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	1ad2      	subs	r2, r2, r3
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80073b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80073be:	69b8      	ldr	r0, [r7, #24]
 80073c0:	f000 f902 	bl	80075c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80073c4:	4b1c      	ldr	r3, [pc, #112]	@ (8007438 <pvPortMalloc+0x190>)
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	4a1a      	ldr	r2, [pc, #104]	@ (8007438 <pvPortMalloc+0x190>)
 80073d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80073d2:	4b19      	ldr	r3, [pc, #100]	@ (8007438 <pvPortMalloc+0x190>)
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	4b1a      	ldr	r3, [pc, #104]	@ (8007440 <pvPortMalloc+0x198>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d203      	bcs.n	80073e6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80073de:	4b16      	ldr	r3, [pc, #88]	@ (8007438 <pvPortMalloc+0x190>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a17      	ldr	r2, [pc, #92]	@ (8007440 <pvPortMalloc+0x198>)
 80073e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80073e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e8:	685a      	ldr	r2, [r3, #4]
 80073ea:	4b12      	ldr	r3, [pc, #72]	@ (8007434 <pvPortMalloc+0x18c>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	431a      	orrs	r2, r3
 80073f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80073f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f6:	2200      	movs	r2, #0
 80073f8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80073fa:	f7fe ff09 	bl	8006210 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	f003 0307 	and.w	r3, r3, #7
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00d      	beq.n	8007424 <pvPortMalloc+0x17c>
	__asm volatile
 8007408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800740c:	b672      	cpsid	i
 800740e:	f383 8811 	msr	BASEPRI, r3
 8007412:	f3bf 8f6f 	isb	sy
 8007416:	f3bf 8f4f 	dsb	sy
 800741a:	b662      	cpsie	i
 800741c:	60fb      	str	r3, [r7, #12]
}
 800741e:	bf00      	nop
 8007420:	bf00      	nop
 8007422:	e7fd      	b.n	8007420 <pvPortMalloc+0x178>
	return pvReturn;
 8007424:	69fb      	ldr	r3, [r7, #28]
}
 8007426:	4618      	mov	r0, r3
 8007428:	3728      	adds	r7, #40	@ 0x28
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	200092b8 	.word	0x200092b8
 8007434:	200092c4 	.word	0x200092c4
 8007438:	200092bc 	.word	0x200092bc
 800743c:	200092b0 	.word	0x200092b0
 8007440:	200092c0 	.word	0x200092c0

08007444 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d04e      	beq.n	80074f4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007456:	2308      	movs	r3, #8
 8007458:	425b      	negs	r3, r3
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	4413      	add	r3, r2
 800745e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	685a      	ldr	r2, [r3, #4]
 8007468:	4b24      	ldr	r3, [pc, #144]	@ (80074fc <vPortFree+0xb8>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4013      	ands	r3, r2
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10d      	bne.n	800748e <vPortFree+0x4a>
	__asm volatile
 8007472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007476:	b672      	cpsid	i
 8007478:	f383 8811 	msr	BASEPRI, r3
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	b662      	cpsie	i
 8007486:	60fb      	str	r3, [r7, #12]
}
 8007488:	bf00      	nop
 800748a:	bf00      	nop
 800748c:	e7fd      	b.n	800748a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00d      	beq.n	80074b2 <vPortFree+0x6e>
	__asm volatile
 8007496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800749a:	b672      	cpsid	i
 800749c:	f383 8811 	msr	BASEPRI, r3
 80074a0:	f3bf 8f6f 	isb	sy
 80074a4:	f3bf 8f4f 	dsb	sy
 80074a8:	b662      	cpsie	i
 80074aa:	60bb      	str	r3, [r7, #8]
}
 80074ac:	bf00      	nop
 80074ae:	bf00      	nop
 80074b0:	e7fd      	b.n	80074ae <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	4b11      	ldr	r3, [pc, #68]	@ (80074fc <vPortFree+0xb8>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4013      	ands	r3, r2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d019      	beq.n	80074f4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d115      	bne.n	80074f4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	685a      	ldr	r2, [r3, #4]
 80074cc:	4b0b      	ldr	r3, [pc, #44]	@ (80074fc <vPortFree+0xb8>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	43db      	mvns	r3, r3
 80074d2:	401a      	ands	r2, r3
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80074d8:	f7fe fe8c 	bl	80061f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	685a      	ldr	r2, [r3, #4]
 80074e0:	4b07      	ldr	r3, [pc, #28]	@ (8007500 <vPortFree+0xbc>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4413      	add	r3, r2
 80074e6:	4a06      	ldr	r2, [pc, #24]	@ (8007500 <vPortFree+0xbc>)
 80074e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80074ea:	6938      	ldr	r0, [r7, #16]
 80074ec:	f000 f86c 	bl	80075c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80074f0:	f7fe fe8e 	bl	8006210 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80074f4:	bf00      	nop
 80074f6:	3718      	adds	r7, #24
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	200092c4 	.word	0x200092c4
 8007500:	200092bc 	.word	0x200092bc

08007504 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800750a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800750e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007510:	4b27      	ldr	r3, [pc, #156]	@ (80075b0 <prvHeapInit+0xac>)
 8007512:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f003 0307 	and.w	r3, r3, #7
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00c      	beq.n	8007538 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	3307      	adds	r3, #7
 8007522:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f023 0307 	bic.w	r3, r3, #7
 800752a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	4a1f      	ldr	r2, [pc, #124]	@ (80075b0 <prvHeapInit+0xac>)
 8007534:	4413      	add	r3, r2
 8007536:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800753c:	4a1d      	ldr	r2, [pc, #116]	@ (80075b4 <prvHeapInit+0xb0>)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007542:	4b1c      	ldr	r3, [pc, #112]	@ (80075b4 <prvHeapInit+0xb0>)
 8007544:	2200      	movs	r2, #0
 8007546:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	4413      	add	r3, r2
 800754e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007550:	2208      	movs	r2, #8
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	1a9b      	subs	r3, r3, r2
 8007556:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f023 0307 	bic.w	r3, r3, #7
 800755e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	4a15      	ldr	r2, [pc, #84]	@ (80075b8 <prvHeapInit+0xb4>)
 8007564:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007566:	4b14      	ldr	r3, [pc, #80]	@ (80075b8 <prvHeapInit+0xb4>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2200      	movs	r2, #0
 800756c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800756e:	4b12      	ldr	r3, [pc, #72]	@ (80075b8 <prvHeapInit+0xb4>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2200      	movs	r2, #0
 8007574:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	1ad2      	subs	r2, r2, r3
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007584:	4b0c      	ldr	r3, [pc, #48]	@ (80075b8 <prvHeapInit+0xb4>)
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	4a0a      	ldr	r2, [pc, #40]	@ (80075bc <prvHeapInit+0xb8>)
 8007592:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	4a09      	ldr	r2, [pc, #36]	@ (80075c0 <prvHeapInit+0xbc>)
 800759a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800759c:	4b09      	ldr	r3, [pc, #36]	@ (80075c4 <prvHeapInit+0xc0>)
 800759e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80075a2:	601a      	str	r2, [r3, #0]
}
 80075a4:	bf00      	nop
 80075a6:	3714      	adds	r7, #20
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr
 80075b0:	200056b0 	.word	0x200056b0
 80075b4:	200092b0 	.word	0x200092b0
 80075b8:	200092b8 	.word	0x200092b8
 80075bc:	200092c0 	.word	0x200092c0
 80075c0:	200092bc 	.word	0x200092bc
 80075c4:	200092c4 	.word	0x200092c4

080075c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80075d0:	4b28      	ldr	r3, [pc, #160]	@ (8007674 <prvInsertBlockIntoFreeList+0xac>)
 80075d2:	60fb      	str	r3, [r7, #12]
 80075d4:	e002      	b.n	80075dc <prvInsertBlockIntoFreeList+0x14>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	60fb      	str	r3, [r7, #12]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d8f7      	bhi.n	80075d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	4413      	add	r3, r2
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d108      	bne.n	800760a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	685a      	ldr	r2, [r3, #4]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	441a      	add	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	441a      	add	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	429a      	cmp	r2, r3
 800761c:	d118      	bne.n	8007650 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	4b15      	ldr	r3, [pc, #84]	@ (8007678 <prvInsertBlockIntoFreeList+0xb0>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	429a      	cmp	r2, r3
 8007628:	d00d      	beq.n	8007646 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	685a      	ldr	r2, [r3, #4]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	441a      	add	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	601a      	str	r2, [r3, #0]
 8007644:	e008      	b.n	8007658 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007646:	4b0c      	ldr	r3, [pc, #48]	@ (8007678 <prvInsertBlockIntoFreeList+0xb0>)
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	601a      	str	r2, [r3, #0]
 800764e:	e003      	b.n	8007658 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	429a      	cmp	r2, r3
 800765e:	d002      	beq.n	8007666 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007666:	bf00      	nop
 8007668:	3714      	adds	r7, #20
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	200092b0 	.word	0x200092b0
 8007678:	200092b8 	.word	0x200092b8

0800767c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8007686:	f007 fad7 	bl	800ec38 <sys_timeouts_sleeptime>
 800768a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007692:	d10b      	bne.n	80076ac <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8007694:	4813      	ldr	r0, [pc, #76]	@ (80076e4 <tcpip_timeouts_mbox_fetch+0x68>)
 8007696:	f00a f84c 	bl	8011732 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800769a:	2200      	movs	r2, #0
 800769c:	6839      	ldr	r1, [r7, #0]
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f009 ffbe 	bl	8011620 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80076a4:	480f      	ldr	r0, [pc, #60]	@ (80076e4 <tcpip_timeouts_mbox_fetch+0x68>)
 80076a6:	f00a f835 	bl	8011714 <sys_mutex_lock>
    return;
 80076aa:	e018      	b.n	80076de <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d102      	bne.n	80076b8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80076b2:	f007 fa87 	bl	800ebc4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80076b6:	e7e6      	b.n	8007686 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80076b8:	480a      	ldr	r0, [pc, #40]	@ (80076e4 <tcpip_timeouts_mbox_fetch+0x68>)
 80076ba:	f00a f83a 	bl	8011732 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	6839      	ldr	r1, [r7, #0]
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f009 ffac 	bl	8011620 <sys_arch_mbox_fetch>
 80076c8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80076ca:	4806      	ldr	r0, [pc, #24]	@ (80076e4 <tcpip_timeouts_mbox_fetch+0x68>)
 80076cc:	f00a f822 	bl	8011714 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076d6:	d102      	bne.n	80076de <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80076d8:	f007 fa74 	bl	800ebc4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80076dc:	e7d3      	b.n	8007686 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	200092d4 	.word	0x200092d4

080076e8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80076f0:	4810      	ldr	r0, [pc, #64]	@ (8007734 <tcpip_thread+0x4c>)
 80076f2:	f00a f80f 	bl	8011714 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80076f6:	4b10      	ldr	r3, [pc, #64]	@ (8007738 <tcpip_thread+0x50>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d005      	beq.n	800770a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80076fe:	4b0e      	ldr	r3, [pc, #56]	@ (8007738 <tcpip_thread+0x50>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a0e      	ldr	r2, [pc, #56]	@ (800773c <tcpip_thread+0x54>)
 8007704:	6812      	ldr	r2, [r2, #0]
 8007706:	4610      	mov	r0, r2
 8007708:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800770a:	f107 030c 	add.w	r3, r7, #12
 800770e:	4619      	mov	r1, r3
 8007710:	480b      	ldr	r0, [pc, #44]	@ (8007740 <tcpip_thread+0x58>)
 8007712:	f7ff ffb3 	bl	800767c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d106      	bne.n	800772a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800771c:	4b09      	ldr	r3, [pc, #36]	@ (8007744 <tcpip_thread+0x5c>)
 800771e:	2291      	movs	r2, #145	@ 0x91
 8007720:	4909      	ldr	r1, [pc, #36]	@ (8007748 <tcpip_thread+0x60>)
 8007722:	480a      	ldr	r0, [pc, #40]	@ (800774c <tcpip_thread+0x64>)
 8007724:	f00a f956 	bl	80119d4 <iprintf>
      continue;
 8007728:	e003      	b.n	8007732 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	4618      	mov	r0, r3
 800772e:	f000 f80f 	bl	8007750 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8007732:	e7ea      	b.n	800770a <tcpip_thread+0x22>
 8007734:	200092d4 	.word	0x200092d4
 8007738:	200092c8 	.word	0x200092c8
 800773c:	200092cc 	.word	0x200092cc
 8007740:	200092d0 	.word	0x200092d0
 8007744:	080128f8 	.word	0x080128f8
 8007748:	08012928 	.word	0x08012928
 800774c:	08012948 	.word	0x08012948

08007750 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	2b02      	cmp	r3, #2
 800775e:	d026      	beq.n	80077ae <tcpip_thread_handle_msg+0x5e>
 8007760:	2b02      	cmp	r3, #2
 8007762:	dc2b      	bgt.n	80077bc <tcpip_thread_handle_msg+0x6c>
 8007764:	2b00      	cmp	r3, #0
 8007766:	d002      	beq.n	800776e <tcpip_thread_handle_msg+0x1e>
 8007768:	2b01      	cmp	r3, #1
 800776a:	d015      	beq.n	8007798 <tcpip_thread_handle_msg+0x48>
 800776c:	e026      	b.n	80077bc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	6850      	ldr	r0, [r2, #4]
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	6892      	ldr	r2, [r2, #8]
 800777a:	4611      	mov	r1, r2
 800777c:	4798      	blx	r3
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d004      	beq.n	800778e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	4618      	mov	r0, r3
 800778a:	f001 fd1b 	bl	80091c4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800778e:	6879      	ldr	r1, [r7, #4]
 8007790:	2009      	movs	r0, #9
 8007792:	f000 fe6f 	bl	8008474 <memp_free>
      break;
 8007796:	e018      	b.n	80077ca <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	6892      	ldr	r2, [r2, #8]
 80077a0:	4610      	mov	r0, r2
 80077a2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80077a4:	6879      	ldr	r1, [r7, #4]
 80077a6:	2008      	movs	r0, #8
 80077a8:	f000 fe64 	bl	8008474 <memp_free>
      break;
 80077ac:	e00d      	b.n	80077ca <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	6892      	ldr	r2, [r2, #8]
 80077b6:	4610      	mov	r0, r2
 80077b8:	4798      	blx	r3
      break;
 80077ba:	e006      	b.n	80077ca <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80077bc:	4b05      	ldr	r3, [pc, #20]	@ (80077d4 <tcpip_thread_handle_msg+0x84>)
 80077be:	22cf      	movs	r2, #207	@ 0xcf
 80077c0:	4905      	ldr	r1, [pc, #20]	@ (80077d8 <tcpip_thread_handle_msg+0x88>)
 80077c2:	4806      	ldr	r0, [pc, #24]	@ (80077dc <tcpip_thread_handle_msg+0x8c>)
 80077c4:	f00a f906 	bl	80119d4 <iprintf>
      break;
 80077c8:	bf00      	nop
  }
}
 80077ca:	bf00      	nop
 80077cc:	3708      	adds	r7, #8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	080128f8 	.word	0x080128f8
 80077d8:	08012928 	.word	0x08012928
 80077dc:	08012948 	.word	0x08012948

080077e0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80077ec:	481a      	ldr	r0, [pc, #104]	@ (8007858 <tcpip_inpkt+0x78>)
 80077ee:	f009 ff56 	bl	801169e <sys_mbox_valid>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d105      	bne.n	8007804 <tcpip_inpkt+0x24>
 80077f8:	4b18      	ldr	r3, [pc, #96]	@ (800785c <tcpip_inpkt+0x7c>)
 80077fa:	22fc      	movs	r2, #252	@ 0xfc
 80077fc:	4918      	ldr	r1, [pc, #96]	@ (8007860 <tcpip_inpkt+0x80>)
 80077fe:	4819      	ldr	r0, [pc, #100]	@ (8007864 <tcpip_inpkt+0x84>)
 8007800:	f00a f8e8 	bl	80119d4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8007804:	2009      	movs	r0, #9
 8007806:	f000 fdbf 	bl	8008388 <memp_malloc>
 800780a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d102      	bne.n	8007818 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8007812:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007816:	e01a      	b.n	800784e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	2200      	movs	r2, #0
 800781c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	68ba      	ldr	r2, [r7, #8]
 8007828:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8007830:	6979      	ldr	r1, [r7, #20]
 8007832:	4809      	ldr	r0, [pc, #36]	@ (8007858 <tcpip_inpkt+0x78>)
 8007834:	f009 feda 	bl	80115ec <sys_mbox_trypost>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d006      	beq.n	800784c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800783e:	6979      	ldr	r1, [r7, #20]
 8007840:	2009      	movs	r0, #9
 8007842:	f000 fe17 	bl	8008474 <memp_free>
    return ERR_MEM;
 8007846:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800784a:	e000      	b.n	800784e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800784c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800784e:	4618      	mov	r0, r3
 8007850:	3718      	adds	r7, #24
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	200092d0 	.word	0x200092d0
 800785c:	080128f8 	.word	0x080128f8
 8007860:	08012970 	.word	0x08012970
 8007864:	08012948 	.word	0x08012948

08007868 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007878:	f003 0318 	and.w	r3, r3, #24
 800787c:	2b00      	cmp	r3, #0
 800787e:	d006      	beq.n	800788e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8007880:	4a08      	ldr	r2, [pc, #32]	@ (80078a4 <tcpip_input+0x3c>)
 8007882:	6839      	ldr	r1, [r7, #0]
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f7ff ffab 	bl	80077e0 <tcpip_inpkt>
 800788a:	4603      	mov	r3, r0
 800788c:	e005      	b.n	800789a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800788e:	4a06      	ldr	r2, [pc, #24]	@ (80078a8 <tcpip_input+0x40>)
 8007890:	6839      	ldr	r1, [r7, #0]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f7ff ffa4 	bl	80077e0 <tcpip_inpkt>
 8007898:	4603      	mov	r3, r0
}
 800789a:	4618      	mov	r0, r3
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	080113fd 	.word	0x080113fd
 80078a8:	08010305 	.word	0x08010305

080078ac <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80078b6:	4819      	ldr	r0, [pc, #100]	@ (800791c <tcpip_try_callback+0x70>)
 80078b8:	f009 fef1 	bl	801169e <sys_mbox_valid>
 80078bc:	4603      	mov	r3, r0
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d106      	bne.n	80078d0 <tcpip_try_callback+0x24>
 80078c2:	4b17      	ldr	r3, [pc, #92]	@ (8007920 <tcpip_try_callback+0x74>)
 80078c4:	f240 125d 	movw	r2, #349	@ 0x15d
 80078c8:	4916      	ldr	r1, [pc, #88]	@ (8007924 <tcpip_try_callback+0x78>)
 80078ca:	4817      	ldr	r0, [pc, #92]	@ (8007928 <tcpip_try_callback+0x7c>)
 80078cc:	f00a f882 	bl	80119d4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80078d0:	2008      	movs	r0, #8
 80078d2:	f000 fd59 	bl	8008388 <memp_malloc>
 80078d6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d102      	bne.n	80078e4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80078de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80078e2:	e017      	b.n	8007914 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2201      	movs	r2, #1
 80078e8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80078f6:	68f9      	ldr	r1, [r7, #12]
 80078f8:	4808      	ldr	r0, [pc, #32]	@ (800791c <tcpip_try_callback+0x70>)
 80078fa:	f009 fe77 	bl	80115ec <sys_mbox_trypost>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d006      	beq.n	8007912 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8007904:	68f9      	ldr	r1, [r7, #12]
 8007906:	2008      	movs	r0, #8
 8007908:	f000 fdb4 	bl	8008474 <memp_free>
    return ERR_MEM;
 800790c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007910:	e000      	b.n	8007914 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8007912:	2300      	movs	r3, #0
}
 8007914:	4618      	mov	r0, r3
 8007916:	3710      	adds	r7, #16
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	200092d0 	.word	0x200092d0
 8007920:	080128f8 	.word	0x080128f8
 8007924:	08012970 	.word	0x08012970
 8007928:	08012948 	.word	0x08012948

0800792c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af02      	add	r7, sp, #8
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  lwip_init();
 8007936:	f000 f871 	bl	8007a1c <lwip_init>

  tcpip_init_done = initfunc;
 800793a:	4a17      	ldr	r2, [pc, #92]	@ (8007998 <tcpip_init+0x6c>)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8007940:	4a16      	ldr	r2, [pc, #88]	@ (800799c <tcpip_init+0x70>)
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8007946:	2106      	movs	r1, #6
 8007948:	4815      	ldr	r0, [pc, #84]	@ (80079a0 <tcpip_init+0x74>)
 800794a:	f009 fe2d 	bl	80115a8 <sys_mbox_new>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d006      	beq.n	8007962 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8007954:	4b13      	ldr	r3, [pc, #76]	@ (80079a4 <tcpip_init+0x78>)
 8007956:	f240 2261 	movw	r2, #609	@ 0x261
 800795a:	4913      	ldr	r1, [pc, #76]	@ (80079a8 <tcpip_init+0x7c>)
 800795c:	4813      	ldr	r0, [pc, #76]	@ (80079ac <tcpip_init+0x80>)
 800795e:	f00a f839 	bl	80119d4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8007962:	4813      	ldr	r0, [pc, #76]	@ (80079b0 <tcpip_init+0x84>)
 8007964:	f009 feba 	bl	80116dc <sys_mutex_new>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d006      	beq.n	800797c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800796e:	4b0d      	ldr	r3, [pc, #52]	@ (80079a4 <tcpip_init+0x78>)
 8007970:	f240 2265 	movw	r2, #613	@ 0x265
 8007974:	490f      	ldr	r1, [pc, #60]	@ (80079b4 <tcpip_init+0x88>)
 8007976:	480d      	ldr	r0, [pc, #52]	@ (80079ac <tcpip_init+0x80>)
 8007978:	f00a f82c 	bl	80119d4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800797c:	2300      	movs	r3, #0
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007984:	2200      	movs	r2, #0
 8007986:	490c      	ldr	r1, [pc, #48]	@ (80079b8 <tcpip_init+0x8c>)
 8007988:	480c      	ldr	r0, [pc, #48]	@ (80079bc <tcpip_init+0x90>)
 800798a:	f009 fedf 	bl	801174c <sys_thread_new>
}
 800798e:	bf00      	nop
 8007990:	3708      	adds	r7, #8
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	200092c8 	.word	0x200092c8
 800799c:	200092cc 	.word	0x200092cc
 80079a0:	200092d0 	.word	0x200092d0
 80079a4:	080128f8 	.word	0x080128f8
 80079a8:	08012980 	.word	0x08012980
 80079ac:	08012948 	.word	0x08012948
 80079b0:	200092d4 	.word	0x200092d4
 80079b4:	080129a4 	.word	0x080129a4
 80079b8:	080076e9 	.word	0x080076e9
 80079bc:	080129c8 	.word	0x080129c8

080079c0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	4603      	mov	r3, r0
 80079c8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80079ca:	88fb      	ldrh	r3, [r7, #6]
 80079cc:	021b      	lsls	r3, r3, #8
 80079ce:	b21a      	sxth	r2, r3
 80079d0:	88fb      	ldrh	r3, [r7, #6]
 80079d2:	0a1b      	lsrs	r3, r3, #8
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	b21b      	sxth	r3, r3
 80079d8:	4313      	orrs	r3, r2
 80079da:	b21b      	sxth	r3, r3
 80079dc:	b29b      	uxth	r3, r3
}
 80079de:	4618      	mov	r0, r3
 80079e0:	370c      	adds	r7, #12
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr

080079ea <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80079ea:	b480      	push	{r7}
 80079ec:	b083      	sub	sp, #12
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	061a      	lsls	r2, r3, #24
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	021b      	lsls	r3, r3, #8
 80079fa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80079fe:	431a      	orrs	r2, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	0a1b      	lsrs	r3, r3, #8
 8007a04:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007a08:	431a      	orrs	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	0e1b      	lsrs	r3, r3, #24
 8007a0e:	4313      	orrs	r3, r2
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8007a22:	2300      	movs	r3, #0
 8007a24:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8007a26:	f009 fe4b 	bl	80116c0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8007a2a:	f000 f8d9 	bl	8007be0 <mem_init>
  memp_init();
 8007a2e:	f000 fc3d 	bl	80082ac <memp_init>
  pbuf_init();
  netif_init();
 8007a32:	f000 fd49 	bl	80084c8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8007a36:	f007 f937 	bl	800eca8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007a3a:	f001 fe5d 	bl	80096f8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8007a3e:	f007 f879 	bl	800eb34 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007a42:	bf00      	nop
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
	...

08007a4c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	4603      	mov	r3, r0
 8007a54:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8007a56:	4b05      	ldr	r3, [pc, #20]	@ (8007a6c <ptr_to_mem+0x20>)
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	88fb      	ldrh	r3, [r7, #6]
 8007a5c:	4413      	add	r3, r2
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	370c      	adds	r7, #12
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	200092f0 	.word	0x200092f0

08007a70 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8007a78:	4b05      	ldr	r3, [pc, #20]	@ (8007a90 <mem_to_ptr+0x20>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	b29b      	uxth	r3, r3
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	370c      	adds	r7, #12
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	200092f0 	.word	0x200092f0

08007a94 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8007a94:	b590      	push	{r4, r7, lr}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007a9c:	4b47      	ldr	r3, [pc, #284]	@ (8007bbc <plug_holes+0x128>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d206      	bcs.n	8007ab4 <plug_holes+0x20>
 8007aa6:	4b46      	ldr	r3, [pc, #280]	@ (8007bc0 <plug_holes+0x12c>)
 8007aa8:	f240 12df 	movw	r2, #479	@ 0x1df
 8007aac:	4945      	ldr	r1, [pc, #276]	@ (8007bc4 <plug_holes+0x130>)
 8007aae:	4846      	ldr	r0, [pc, #280]	@ (8007bc8 <plug_holes+0x134>)
 8007ab0:	f009 ff90 	bl	80119d4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007ab4:	4b45      	ldr	r3, [pc, #276]	@ (8007bcc <plug_holes+0x138>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d306      	bcc.n	8007acc <plug_holes+0x38>
 8007abe:	4b40      	ldr	r3, [pc, #256]	@ (8007bc0 <plug_holes+0x12c>)
 8007ac0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8007ac4:	4942      	ldr	r1, [pc, #264]	@ (8007bd0 <plug_holes+0x13c>)
 8007ac6:	4840      	ldr	r0, [pc, #256]	@ (8007bc8 <plug_holes+0x134>)
 8007ac8:	f009 ff84 	bl	80119d4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	791b      	ldrb	r3, [r3, #4]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d006      	beq.n	8007ae2 <plug_holes+0x4e>
 8007ad4:	4b3a      	ldr	r3, [pc, #232]	@ (8007bc0 <plug_holes+0x12c>)
 8007ad6:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8007ada:	493e      	ldr	r1, [pc, #248]	@ (8007bd4 <plug_holes+0x140>)
 8007adc:	483a      	ldr	r0, [pc, #232]	@ (8007bc8 <plug_holes+0x134>)
 8007ade:	f009 ff79 	bl	80119d4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	881b      	ldrh	r3, [r3, #0]
 8007ae6:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d906      	bls.n	8007afc <plug_holes+0x68>
 8007aee:	4b34      	ldr	r3, [pc, #208]	@ (8007bc0 <plug_holes+0x12c>)
 8007af0:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8007af4:	4938      	ldr	r1, [pc, #224]	@ (8007bd8 <plug_holes+0x144>)
 8007af6:	4834      	ldr	r0, [pc, #208]	@ (8007bc8 <plug_holes+0x134>)
 8007af8:	f009 ff6c 	bl	80119d4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	881b      	ldrh	r3, [r3, #0]
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7ff ffa3 	bl	8007a4c <ptr_to_mem>
 8007b06:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d025      	beq.n	8007b5c <plug_holes+0xc8>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	791b      	ldrb	r3, [r3, #4]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d121      	bne.n	8007b5c <plug_holes+0xc8>
 8007b18:	4b2c      	ldr	r3, [pc, #176]	@ (8007bcc <plug_holes+0x138>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d01c      	beq.n	8007b5c <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007b22:	4b2e      	ldr	r3, [pc, #184]	@ (8007bdc <plug_holes+0x148>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d102      	bne.n	8007b32 <plug_holes+0x9e>
      lfree = mem;
 8007b2c:	4a2b      	ldr	r2, [pc, #172]	@ (8007bdc <plug_holes+0x148>)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	881a      	ldrh	r2, [r3, #0]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	881b      	ldrh	r3, [r3, #0]
 8007b3e:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d00a      	beq.n	8007b5c <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	881b      	ldrh	r3, [r3, #0]
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7ff ff7e 	bl	8007a4c <ptr_to_mem>
 8007b50:	4604      	mov	r4, r0
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7ff ff8c 	bl	8007a70 <mem_to_ptr>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	885b      	ldrh	r3, [r3, #2]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7ff ff73 	bl	8007a4c <ptr_to_mem>
 8007b66:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d020      	beq.n	8007bb2 <plug_holes+0x11e>
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	791b      	ldrb	r3, [r3, #4]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d11c      	bne.n	8007bb2 <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8007b78:	4b18      	ldr	r3, [pc, #96]	@ (8007bdc <plug_holes+0x148>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d102      	bne.n	8007b88 <plug_holes+0xf4>
      lfree = pmem;
 8007b82:	4a16      	ldr	r2, [pc, #88]	@ (8007bdc <plug_holes+0x148>)
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	881a      	ldrh	r2, [r3, #0]
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	881b      	ldrh	r3, [r3, #0]
 8007b94:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d00a      	beq.n	8007bb2 <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	881b      	ldrh	r3, [r3, #0]
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7ff ff53 	bl	8007a4c <ptr_to_mem>
 8007ba6:	4604      	mov	r4, r0
 8007ba8:	68b8      	ldr	r0, [r7, #8]
 8007baa:	f7ff ff61 	bl	8007a70 <mem_to_ptr>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8007bb2:	bf00      	nop
 8007bb4:	3714      	adds	r7, #20
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd90      	pop	{r4, r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	200092f0 	.word	0x200092f0
 8007bc0:	080129d8 	.word	0x080129d8
 8007bc4:	08012a08 	.word	0x08012a08
 8007bc8:	08012a20 	.word	0x08012a20
 8007bcc:	200092f4 	.word	0x200092f4
 8007bd0:	08012a48 	.word	0x08012a48
 8007bd4:	08012a64 	.word	0x08012a64
 8007bd8:	08012a80 	.word	0x08012a80
 8007bdc:	200092fc 	.word	0x200092fc

08007be0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007be6:	4b1d      	ldr	r3, [pc, #116]	@ (8007c5c <mem_init+0x7c>)
 8007be8:	4a1d      	ldr	r2, [pc, #116]	@ (8007c60 <mem_init+0x80>)
 8007bea:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007bec:	4b1b      	ldr	r3, [pc, #108]	@ (8007c5c <mem_init+0x7c>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8007bf8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8007c06:	f643 70e8 	movw	r0, #16360	@ 0x3fe8
 8007c0a:	f7ff ff1f 	bl	8007a4c <ptr_to_mem>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	4a14      	ldr	r2, [pc, #80]	@ (8007c64 <mem_init+0x84>)
 8007c12:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007c14:	4b13      	ldr	r3, [pc, #76]	@ (8007c64 <mem_init+0x84>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007c1c:	4b11      	ldr	r3, [pc, #68]	@ (8007c64 <mem_init+0x84>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8007c24:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007c26:	4b0f      	ldr	r3, [pc, #60]	@ (8007c64 <mem_init+0x84>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8007c2e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007c30:	4b0a      	ldr	r3, [pc, #40]	@ (8007c5c <mem_init+0x7c>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a0c      	ldr	r2, [pc, #48]	@ (8007c68 <mem_init+0x88>)
 8007c36:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8007c38:	480c      	ldr	r0, [pc, #48]	@ (8007c6c <mem_init+0x8c>)
 8007c3a:	f009 fd4f 	bl	80116dc <sys_mutex_new>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d006      	beq.n	8007c52 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8007c44:	4b0a      	ldr	r3, [pc, #40]	@ (8007c70 <mem_init+0x90>)
 8007c46:	f240 221f 	movw	r2, #543	@ 0x21f
 8007c4a:	490a      	ldr	r1, [pc, #40]	@ (8007c74 <mem_init+0x94>)
 8007c4c:	480a      	ldr	r0, [pc, #40]	@ (8007c78 <mem_init+0x98>)
 8007c4e:	f009 fec1 	bl	80119d4 <iprintf>
  }
}
 8007c52:	bf00      	nop
 8007c54:	3708      	adds	r7, #8
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	200092f0 	.word	0x200092f0
 8007c60:	20044000 	.word	0x20044000
 8007c64:	200092f4 	.word	0x200092f4
 8007c68:	200092fc 	.word	0x200092fc
 8007c6c:	200092f8 	.word	0x200092f8
 8007c70:	080129d8 	.word	0x080129d8
 8007c74:	08012aac 	.word	0x08012aac
 8007c78:	08012a20 	.word	0x08012a20

08007c7c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b086      	sub	sp, #24
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f7ff fef3 	bl	8007a70 <mem_to_ptr>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	881b      	ldrh	r3, [r3, #0]
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7ff feda 	bl	8007a4c <ptr_to_mem>
 8007c98:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	885b      	ldrh	r3, [r3, #2]
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7ff fed4 	bl	8007a4c <ptr_to_mem>
 8007ca4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	881b      	ldrh	r3, [r3, #0]
 8007caa:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d819      	bhi.n	8007ce6 <mem_link_valid+0x6a>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	885b      	ldrh	r3, [r3, #2]
 8007cb6:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d813      	bhi.n	8007ce6 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007cc2:	8afa      	ldrh	r2, [r7, #22]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d004      	beq.n	8007cd2 <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	881b      	ldrh	r3, [r3, #0]
 8007ccc:	8afa      	ldrh	r2, [r7, #22]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d109      	bne.n	8007ce6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007cd2:	4b08      	ldr	r3, [pc, #32]	@ (8007cf4 <mem_link_valid+0x78>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007cd6:	693a      	ldr	r2, [r7, #16]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d006      	beq.n	8007cea <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	885b      	ldrh	r3, [r3, #2]
 8007ce0:	8afa      	ldrh	r2, [r7, #22]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d001      	beq.n	8007cea <mem_link_valid+0x6e>
    return 0;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	e000      	b.n	8007cec <mem_link_valid+0x70>
  }
  return 1;
 8007cea:	2301      	movs	r3, #1
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3718      	adds	r7, #24
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	200092f4 	.word	0x200092f4

08007cf8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b088      	sub	sp, #32
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d070      	beq.n	8007de8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f003 0303 	and.w	r3, r3, #3
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d00d      	beq.n	8007d2c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007d10:	4b37      	ldr	r3, [pc, #220]	@ (8007df0 <mem_free+0xf8>)
 8007d12:	f240 2273 	movw	r2, #627	@ 0x273
 8007d16:	4937      	ldr	r1, [pc, #220]	@ (8007df4 <mem_free+0xfc>)
 8007d18:	4837      	ldr	r0, [pc, #220]	@ (8007df8 <mem_free+0x100>)
 8007d1a:	f009 fe5b 	bl	80119d4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007d1e:	f009 fd3b 	bl	8011798 <sys_arch_protect>
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	68f8      	ldr	r0, [r7, #12]
 8007d26:	f009 fd45 	bl	80117b4 <sys_arch_unprotect>
    return;
 8007d2a:	e05e      	b.n	8007dea <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	3b08      	subs	r3, #8
 8007d30:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8007d32:	4b32      	ldr	r3, [pc, #200]	@ (8007dfc <mem_free+0x104>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	69fa      	ldr	r2, [r7, #28]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d306      	bcc.n	8007d4a <mem_free+0x52>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f103 020c 	add.w	r2, r3, #12
 8007d42:	4b2f      	ldr	r3, [pc, #188]	@ (8007e00 <mem_free+0x108>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d90d      	bls.n	8007d66 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007d4a:	4b29      	ldr	r3, [pc, #164]	@ (8007df0 <mem_free+0xf8>)
 8007d4c:	f240 227f 	movw	r2, #639	@ 0x27f
 8007d50:	492c      	ldr	r1, [pc, #176]	@ (8007e04 <mem_free+0x10c>)
 8007d52:	4829      	ldr	r0, [pc, #164]	@ (8007df8 <mem_free+0x100>)
 8007d54:	f009 fe3e 	bl	80119d4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007d58:	f009 fd1e 	bl	8011798 <sys_arch_protect>
 8007d5c:	6138      	str	r0, [r7, #16]
 8007d5e:	6938      	ldr	r0, [r7, #16]
 8007d60:	f009 fd28 	bl	80117b4 <sys_arch_unprotect>
    return;
 8007d64:	e041      	b.n	8007dea <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8007d66:	4828      	ldr	r0, [pc, #160]	@ (8007e08 <mem_free+0x110>)
 8007d68:	f009 fcd4 	bl	8011714 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	791b      	ldrb	r3, [r3, #4]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d110      	bne.n	8007d96 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007d74:	4b1e      	ldr	r3, [pc, #120]	@ (8007df0 <mem_free+0xf8>)
 8007d76:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8007d7a:	4924      	ldr	r1, [pc, #144]	@ (8007e0c <mem_free+0x114>)
 8007d7c:	481e      	ldr	r0, [pc, #120]	@ (8007df8 <mem_free+0x100>)
 8007d7e:	f009 fe29 	bl	80119d4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8007d82:	4821      	ldr	r0, [pc, #132]	@ (8007e08 <mem_free+0x110>)
 8007d84:	f009 fcd5 	bl	8011732 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007d88:	f009 fd06 	bl	8011798 <sys_arch_protect>
 8007d8c:	6178      	str	r0, [r7, #20]
 8007d8e:	6978      	ldr	r0, [r7, #20]
 8007d90:	f009 fd10 	bl	80117b4 <sys_arch_unprotect>
    return;
 8007d94:	e029      	b.n	8007dea <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8007d96:	69f8      	ldr	r0, [r7, #28]
 8007d98:	f7ff ff70 	bl	8007c7c <mem_link_valid>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d110      	bne.n	8007dc4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007da2:	4b13      	ldr	r3, [pc, #76]	@ (8007df0 <mem_free+0xf8>)
 8007da4:	f240 2295 	movw	r2, #661	@ 0x295
 8007da8:	4919      	ldr	r1, [pc, #100]	@ (8007e10 <mem_free+0x118>)
 8007daa:	4813      	ldr	r0, [pc, #76]	@ (8007df8 <mem_free+0x100>)
 8007dac:	f009 fe12 	bl	80119d4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8007db0:	4815      	ldr	r0, [pc, #84]	@ (8007e08 <mem_free+0x110>)
 8007db2:	f009 fcbe 	bl	8011732 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007db6:	f009 fcef 	bl	8011798 <sys_arch_protect>
 8007dba:	61b8      	str	r0, [r7, #24]
 8007dbc:	69b8      	ldr	r0, [r7, #24]
 8007dbe:	f009 fcf9 	bl	80117b4 <sys_arch_unprotect>
    return;
 8007dc2:	e012      	b.n	8007dea <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007dca:	4b12      	ldr	r3, [pc, #72]	@ (8007e14 <mem_free+0x11c>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	69fa      	ldr	r2, [r7, #28]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d202      	bcs.n	8007dda <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007dd4:	4a0f      	ldr	r2, [pc, #60]	@ (8007e14 <mem_free+0x11c>)
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007dda:	69f8      	ldr	r0, [r7, #28]
 8007ddc:	f7ff fe5a 	bl	8007a94 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8007de0:	4809      	ldr	r0, [pc, #36]	@ (8007e08 <mem_free+0x110>)
 8007de2:	f009 fca6 	bl	8011732 <sys_mutex_unlock>
 8007de6:	e000      	b.n	8007dea <mem_free+0xf2>
    return;
 8007de8:	bf00      	nop
}
 8007dea:	3720      	adds	r7, #32
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	080129d8 	.word	0x080129d8
 8007df4:	08012ac8 	.word	0x08012ac8
 8007df8:	08012a20 	.word	0x08012a20
 8007dfc:	200092f0 	.word	0x200092f0
 8007e00:	200092f4 	.word	0x200092f4
 8007e04:	08012aec 	.word	0x08012aec
 8007e08:	200092f8 	.word	0x200092f8
 8007e0c:	08012b08 	.word	0x08012b08
 8007e10:	08012b30 	.word	0x08012b30
 8007e14:	200092fc 	.word	0x200092fc

08007e18 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b088      	sub	sp, #32
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	460b      	mov	r3, r1
 8007e22:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007e24:	887b      	ldrh	r3, [r7, #2]
 8007e26:	3303      	adds	r3, #3
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	f023 0303 	bic.w	r3, r3, #3
 8007e2e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8007e30:	8bfb      	ldrh	r3, [r7, #30]
 8007e32:	2b0b      	cmp	r3, #11
 8007e34:	d801      	bhi.n	8007e3a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8007e36:	230c      	movs	r3, #12
 8007e38:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007e3a:	8bfb      	ldrh	r3, [r7, #30]
 8007e3c:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d803      	bhi.n	8007e4c <mem_trim+0x34>
 8007e44:	8bfa      	ldrh	r2, [r7, #30]
 8007e46:	887b      	ldrh	r3, [r7, #2]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d201      	bcs.n	8007e50 <mem_trim+0x38>
    return NULL;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	e0dc      	b.n	800800a <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007e50:	4b70      	ldr	r3, [pc, #448]	@ (8008014 <mem_trim+0x1fc>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d304      	bcc.n	8007e64 <mem_trim+0x4c>
 8007e5a:	4b6f      	ldr	r3, [pc, #444]	@ (8008018 <mem_trim+0x200>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d306      	bcc.n	8007e72 <mem_trim+0x5a>
 8007e64:	4b6d      	ldr	r3, [pc, #436]	@ (800801c <mem_trim+0x204>)
 8007e66:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8007e6a:	496d      	ldr	r1, [pc, #436]	@ (8008020 <mem_trim+0x208>)
 8007e6c:	486d      	ldr	r0, [pc, #436]	@ (8008024 <mem_trim+0x20c>)
 8007e6e:	f009 fdb1 	bl	80119d4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007e72:	4b68      	ldr	r3, [pc, #416]	@ (8008014 <mem_trim+0x1fc>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d304      	bcc.n	8007e86 <mem_trim+0x6e>
 8007e7c:	4b66      	ldr	r3, [pc, #408]	@ (8008018 <mem_trim+0x200>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d307      	bcc.n	8007e96 <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007e86:	f009 fc87 	bl	8011798 <sys_arch_protect>
 8007e8a:	60b8      	str	r0, [r7, #8]
 8007e8c:	68b8      	ldr	r0, [r7, #8]
 8007e8e:	f009 fc91 	bl	80117b4 <sys_arch_unprotect>
    return rmem;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	e0b9      	b.n	800800a <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	3b08      	subs	r3, #8
 8007e9a:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8007e9c:	69b8      	ldr	r0, [r7, #24]
 8007e9e:	f7ff fde7 	bl	8007a70 <mem_to_ptr>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	881a      	ldrh	r2, [r3, #0]
 8007eaa:	8afb      	ldrh	r3, [r7, #22]
 8007eac:	1ad3      	subs	r3, r2, r3
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	3b08      	subs	r3, #8
 8007eb2:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007eb4:	8bfa      	ldrh	r2, [r7, #30]
 8007eb6:	8abb      	ldrh	r3, [r7, #20]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d906      	bls.n	8007eca <mem_trim+0xb2>
 8007ebc:	4b57      	ldr	r3, [pc, #348]	@ (800801c <mem_trim+0x204>)
 8007ebe:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8007ec2:	4959      	ldr	r1, [pc, #356]	@ (8008028 <mem_trim+0x210>)
 8007ec4:	4857      	ldr	r0, [pc, #348]	@ (8008024 <mem_trim+0x20c>)
 8007ec6:	f009 fd85 	bl	80119d4 <iprintf>
  if (newsize > size) {
 8007eca:	8bfa      	ldrh	r2, [r7, #30]
 8007ecc:	8abb      	ldrh	r3, [r7, #20]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d901      	bls.n	8007ed6 <mem_trim+0xbe>
    /* not supported */
    return NULL;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	e099      	b.n	800800a <mem_trim+0x1f2>
  }
  if (newsize == size) {
 8007ed6:	8bfa      	ldrh	r2, [r7, #30]
 8007ed8:	8abb      	ldrh	r3, [r7, #20]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d101      	bne.n	8007ee2 <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	e093      	b.n	800800a <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8007ee2:	4852      	ldr	r0, [pc, #328]	@ (800802c <mem_trim+0x214>)
 8007ee4:	f009 fc16 	bl	8011714 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	881b      	ldrh	r3, [r3, #0]
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7ff fdad 	bl	8007a4c <ptr_to_mem>
 8007ef2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	791b      	ldrb	r3, [r3, #4]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d141      	bne.n	8007f80 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	881b      	ldrh	r3, [r3, #0]
 8007f00:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d106      	bne.n	8007f16 <mem_trim+0xfe>
 8007f08:	4b44      	ldr	r3, [pc, #272]	@ (800801c <mem_trim+0x204>)
 8007f0a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8007f0e:	4948      	ldr	r1, [pc, #288]	@ (8008030 <mem_trim+0x218>)
 8007f10:	4844      	ldr	r0, [pc, #272]	@ (8008024 <mem_trim+0x20c>)
 8007f12:	f009 fd5f 	bl	80119d4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	881b      	ldrh	r3, [r3, #0]
 8007f1a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007f1c:	8afa      	ldrh	r2, [r7, #22]
 8007f1e:	8bfb      	ldrh	r3, [r7, #30]
 8007f20:	4413      	add	r3, r2
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	3308      	adds	r3, #8
 8007f26:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8007f28:	4b42      	ldr	r3, [pc, #264]	@ (8008034 <mem_trim+0x21c>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	693a      	ldr	r2, [r7, #16]
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d106      	bne.n	8007f40 <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 8007f32:	89fb      	ldrh	r3, [r7, #14]
 8007f34:	4618      	mov	r0, r3
 8007f36:	f7ff fd89 	bl	8007a4c <ptr_to_mem>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	4a3d      	ldr	r2, [pc, #244]	@ (8008034 <mem_trim+0x21c>)
 8007f3e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8007f40:	89fb      	ldrh	r3, [r7, #14]
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7ff fd82 	bl	8007a4c <ptr_to_mem>
 8007f48:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	89ba      	ldrh	r2, [r7, #12]
 8007f54:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	8afa      	ldrh	r2, [r7, #22]
 8007f5a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	89fa      	ldrh	r2, [r7, #14]
 8007f60:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	881b      	ldrh	r3, [r3, #0]
 8007f66:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d049      	beq.n	8008002 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	881b      	ldrh	r3, [r3, #0]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7ff fd6a 	bl	8007a4c <ptr_to_mem>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	89fb      	ldrh	r3, [r7, #14]
 8007f7c:	8053      	strh	r3, [r2, #2]
 8007f7e:	e040      	b.n	8008002 <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007f80:	8bfb      	ldrh	r3, [r7, #30]
 8007f82:	f103 0214 	add.w	r2, r3, #20
 8007f86:	8abb      	ldrh	r3, [r7, #20]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d83a      	bhi.n	8008002 <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007f8c:	8afa      	ldrh	r2, [r7, #22]
 8007f8e:	8bfb      	ldrh	r3, [r7, #30]
 8007f90:	4413      	add	r3, r2
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	3308      	adds	r3, #8
 8007f96:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	881b      	ldrh	r3, [r3, #0]
 8007f9c:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d106      	bne.n	8007fb2 <mem_trim+0x19a>
 8007fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800801c <mem_trim+0x204>)
 8007fa6:	f240 3216 	movw	r2, #790	@ 0x316
 8007faa:	4921      	ldr	r1, [pc, #132]	@ (8008030 <mem_trim+0x218>)
 8007fac:	481d      	ldr	r0, [pc, #116]	@ (8008024 <mem_trim+0x20c>)
 8007fae:	f009 fd11 	bl	80119d4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8007fb2:	89fb      	ldrh	r3, [r7, #14]
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7ff fd49 	bl	8007a4c <ptr_to_mem>
 8007fba:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8007fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8008034 <mem_trim+0x21c>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	693a      	ldr	r2, [r7, #16]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d202      	bcs.n	8007fcc <mem_trim+0x1b4>
      lfree = mem2;
 8007fc6:	4a1b      	ldr	r2, [pc, #108]	@ (8008034 <mem_trim+0x21c>)
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	881a      	ldrh	r2, [r3, #0]
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	8afa      	ldrh	r2, [r7, #22]
 8007fde:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	89fa      	ldrh	r2, [r7, #14]
 8007fe4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	881b      	ldrh	r3, [r3, #0]
 8007fea:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d007      	beq.n	8008002 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	881b      	ldrh	r3, [r3, #0]
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7ff fd28 	bl	8007a4c <ptr_to_mem>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	89fb      	ldrh	r3, [r7, #14]
 8008000:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8008002:	480a      	ldr	r0, [pc, #40]	@ (800802c <mem_trim+0x214>)
 8008004:	f009 fb95 	bl	8011732 <sys_mutex_unlock>
  return rmem;
 8008008:	687b      	ldr	r3, [r7, #4]
}
 800800a:	4618      	mov	r0, r3
 800800c:	3720      	adds	r7, #32
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	200092f0 	.word	0x200092f0
 8008018:	200092f4 	.word	0x200092f4
 800801c:	080129d8 	.word	0x080129d8
 8008020:	08012b64 	.word	0x08012b64
 8008024:	08012a20 	.word	0x08012a20
 8008028:	08012b7c 	.word	0x08012b7c
 800802c:	200092f8 	.word	0x200092f8
 8008030:	08012b9c 	.word	0x08012b9c
 8008034:	200092fc 	.word	0x200092fc

08008038 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b088      	sub	sp, #32
 800803c:	af00      	add	r7, sp, #0
 800803e:	4603      	mov	r3, r0
 8008040:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8008042:	88fb      	ldrh	r3, [r7, #6]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d101      	bne.n	800804c <mem_malloc+0x14>
    return NULL;
 8008048:	2300      	movs	r3, #0
 800804a:	e0e6      	b.n	800821a <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800804c:	88fb      	ldrh	r3, [r7, #6]
 800804e:	3303      	adds	r3, #3
 8008050:	b29b      	uxth	r3, r3
 8008052:	f023 0303 	bic.w	r3, r3, #3
 8008056:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8008058:	8bbb      	ldrh	r3, [r7, #28]
 800805a:	2b0b      	cmp	r3, #11
 800805c:	d801      	bhi.n	8008062 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800805e:	230c      	movs	r3, #12
 8008060:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8008062:	8bbb      	ldrh	r3, [r7, #28]
 8008064:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8008068:	4293      	cmp	r3, r2
 800806a:	d803      	bhi.n	8008074 <mem_malloc+0x3c>
 800806c:	8bba      	ldrh	r2, [r7, #28]
 800806e:	88fb      	ldrh	r3, [r7, #6]
 8008070:	429a      	cmp	r2, r3
 8008072:	d201      	bcs.n	8008078 <mem_malloc+0x40>
    return NULL;
 8008074:	2300      	movs	r3, #0
 8008076:	e0d0      	b.n	800821a <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8008078:	486a      	ldr	r0, [pc, #424]	@ (8008224 <mem_malloc+0x1ec>)
 800807a:	f009 fb4b 	bl	8011714 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800807e:	4b6a      	ldr	r3, [pc, #424]	@ (8008228 <mem_malloc+0x1f0>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4618      	mov	r0, r3
 8008084:	f7ff fcf4 	bl	8007a70 <mem_to_ptr>
 8008088:	4603      	mov	r3, r0
 800808a:	83fb      	strh	r3, [r7, #30]
 800808c:	e0b9      	b.n	8008202 <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800808e:	8bfb      	ldrh	r3, [r7, #30]
 8008090:	4618      	mov	r0, r3
 8008092:	f7ff fcdb 	bl	8007a4c <ptr_to_mem>
 8008096:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	791b      	ldrb	r3, [r3, #4]
 800809c:	2b00      	cmp	r3, #0
 800809e:	f040 80a9 	bne.w	80081f4 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	881b      	ldrh	r3, [r3, #0]
 80080a6:	461a      	mov	r2, r3
 80080a8:	8bfb      	ldrh	r3, [r7, #30]
 80080aa:	1ad3      	subs	r3, r2, r3
 80080ac:	f1a3 0208 	sub.w	r2, r3, #8
 80080b0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80080b2:	429a      	cmp	r2, r3
 80080b4:	f0c0 809e 	bcc.w	80081f4 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	881b      	ldrh	r3, [r3, #0]
 80080bc:	461a      	mov	r2, r3
 80080be:	8bfb      	ldrh	r3, [r7, #30]
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	f1a3 0208 	sub.w	r2, r3, #8
 80080c6:	8bbb      	ldrh	r3, [r7, #28]
 80080c8:	3314      	adds	r3, #20
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d335      	bcc.n	800813a <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80080ce:	8bfa      	ldrh	r2, [r7, #30]
 80080d0:	8bbb      	ldrh	r3, [r7, #28]
 80080d2:	4413      	add	r3, r2
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	3308      	adds	r3, #8
 80080d8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80080da:	8a7b      	ldrh	r3, [r7, #18]
 80080dc:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d106      	bne.n	80080f2 <mem_malloc+0xba>
 80080e4:	4b51      	ldr	r3, [pc, #324]	@ (800822c <mem_malloc+0x1f4>)
 80080e6:	f240 3287 	movw	r2, #903	@ 0x387
 80080ea:	4951      	ldr	r1, [pc, #324]	@ (8008230 <mem_malloc+0x1f8>)
 80080ec:	4851      	ldr	r0, [pc, #324]	@ (8008234 <mem_malloc+0x1fc>)
 80080ee:	f009 fc71 	bl	80119d4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80080f2:	8a7b      	ldrh	r3, [r7, #18]
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7ff fca9 	bl	8007a4c <ptr_to_mem>
 80080fa:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	881a      	ldrh	r2, [r3, #0]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	8bfa      	ldrh	r2, [r7, #30]
 800810e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	8a7a      	ldrh	r2, [r7, #18]
 8008114:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	2201      	movs	r2, #1
 800811a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	881b      	ldrh	r3, [r3, #0]
 8008120:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8008124:	4293      	cmp	r3, r2
 8008126:	d00b      	beq.n	8008140 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	881b      	ldrh	r3, [r3, #0]
 800812c:	4618      	mov	r0, r3
 800812e:	f7ff fc8d 	bl	8007a4c <ptr_to_mem>
 8008132:	4602      	mov	r2, r0
 8008134:	8a7b      	ldrh	r3, [r7, #18]
 8008136:	8053      	strh	r3, [r2, #2]
 8008138:	e002      	b.n	8008140 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	2201      	movs	r2, #1
 800813e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8008140:	4b39      	ldr	r3, [pc, #228]	@ (8008228 <mem_malloc+0x1f0>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	697a      	ldr	r2, [r7, #20]
 8008146:	429a      	cmp	r2, r3
 8008148:	d127      	bne.n	800819a <mem_malloc+0x162>
          struct mem *cur = lfree;
 800814a:	4b37      	ldr	r3, [pc, #220]	@ (8008228 <mem_malloc+0x1f0>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8008150:	e005      	b.n	800815e <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	881b      	ldrh	r3, [r3, #0]
 8008156:	4618      	mov	r0, r3
 8008158:	f7ff fc78 	bl	8007a4c <ptr_to_mem>
 800815c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	791b      	ldrb	r3, [r3, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d004      	beq.n	8008170 <mem_malloc+0x138>
 8008166:	4b34      	ldr	r3, [pc, #208]	@ (8008238 <mem_malloc+0x200>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	69ba      	ldr	r2, [r7, #24]
 800816c:	429a      	cmp	r2, r3
 800816e:	d1f0      	bne.n	8008152 <mem_malloc+0x11a>
          }
          lfree = cur;
 8008170:	4a2d      	ldr	r2, [pc, #180]	@ (8008228 <mem_malloc+0x1f0>)
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008176:	4b2c      	ldr	r3, [pc, #176]	@ (8008228 <mem_malloc+0x1f0>)
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	4b2f      	ldr	r3, [pc, #188]	@ (8008238 <mem_malloc+0x200>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	429a      	cmp	r2, r3
 8008180:	d00b      	beq.n	800819a <mem_malloc+0x162>
 8008182:	4b29      	ldr	r3, [pc, #164]	@ (8008228 <mem_malloc+0x1f0>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	791b      	ldrb	r3, [r3, #4]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d006      	beq.n	800819a <mem_malloc+0x162>
 800818c:	4b27      	ldr	r3, [pc, #156]	@ (800822c <mem_malloc+0x1f4>)
 800818e:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8008192:	492a      	ldr	r1, [pc, #168]	@ (800823c <mem_malloc+0x204>)
 8008194:	4827      	ldr	r0, [pc, #156]	@ (8008234 <mem_malloc+0x1fc>)
 8008196:	f009 fc1d 	bl	80119d4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800819a:	4822      	ldr	r0, [pc, #136]	@ (8008224 <mem_malloc+0x1ec>)
 800819c:	f009 fac9 	bl	8011732 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80081a0:	8bba      	ldrh	r2, [r7, #28]
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	4413      	add	r3, r2
 80081a6:	3308      	adds	r3, #8
 80081a8:	4a23      	ldr	r2, [pc, #140]	@ (8008238 <mem_malloc+0x200>)
 80081aa:	6812      	ldr	r2, [r2, #0]
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d906      	bls.n	80081be <mem_malloc+0x186>
 80081b0:	4b1e      	ldr	r3, [pc, #120]	@ (800822c <mem_malloc+0x1f4>)
 80081b2:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80081b6:	4922      	ldr	r1, [pc, #136]	@ (8008240 <mem_malloc+0x208>)
 80081b8:	481e      	ldr	r0, [pc, #120]	@ (8008234 <mem_malloc+0x1fc>)
 80081ba:	f009 fc0b 	bl	80119d4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	f003 0303 	and.w	r3, r3, #3
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d006      	beq.n	80081d6 <mem_malloc+0x19e>
 80081c8:	4b18      	ldr	r3, [pc, #96]	@ (800822c <mem_malloc+0x1f4>)
 80081ca:	f240 32bb 	movw	r2, #955	@ 0x3bb
 80081ce:	491d      	ldr	r1, [pc, #116]	@ (8008244 <mem_malloc+0x20c>)
 80081d0:	4818      	ldr	r0, [pc, #96]	@ (8008234 <mem_malloc+0x1fc>)
 80081d2:	f009 fbff 	bl	80119d4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	f003 0303 	and.w	r3, r3, #3
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d006      	beq.n	80081ee <mem_malloc+0x1b6>
 80081e0:	4b12      	ldr	r3, [pc, #72]	@ (800822c <mem_malloc+0x1f4>)
 80081e2:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80081e6:	4918      	ldr	r1, [pc, #96]	@ (8008248 <mem_malloc+0x210>)
 80081e8:	4812      	ldr	r0, [pc, #72]	@ (8008234 <mem_malloc+0x1fc>)
 80081ea:	f009 fbf3 	bl	80119d4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	3308      	adds	r3, #8
 80081f2:	e012      	b.n	800821a <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 80081f4:	8bfb      	ldrh	r3, [r7, #30]
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7ff fc28 	bl	8007a4c <ptr_to_mem>
 80081fc:	4603      	mov	r3, r0
 80081fe:	881b      	ldrh	r3, [r3, #0]
 8008200:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008202:	8bfa      	ldrh	r2, [r7, #30]
 8008204:	8bb9      	ldrh	r1, [r7, #28]
 8008206:	f643 73e8 	movw	r3, #16360	@ 0x3fe8
 800820a:	1a5b      	subs	r3, r3, r1
 800820c:	429a      	cmp	r2, r3
 800820e:	f4ff af3e 	bcc.w	800808e <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8008212:	4804      	ldr	r0, [pc, #16]	@ (8008224 <mem_malloc+0x1ec>)
 8008214:	f009 fa8d 	bl	8011732 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3720      	adds	r7, #32
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	200092f8 	.word	0x200092f8
 8008228:	200092fc 	.word	0x200092fc
 800822c:	080129d8 	.word	0x080129d8
 8008230:	08012b9c 	.word	0x08012b9c
 8008234:	08012a20 	.word	0x08012a20
 8008238:	200092f4 	.word	0x200092f4
 800823c:	08012bb0 	.word	0x08012bb0
 8008240:	08012bcc 	.word	0x08012bcc
 8008244:	08012bfc 	.word	0x08012bfc
 8008248:	08012c2c 	.word	0x08012c2c

0800824c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	2200      	movs	r2, #0
 800825a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	3303      	adds	r3, #3
 8008262:	f023 0303 	bic.w	r3, r3, #3
 8008266:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8008268:	2300      	movs	r3, #0
 800826a:	60fb      	str	r3, [r7, #12]
 800826c:	e011      	b.n	8008292 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	881b      	ldrh	r3, [r3, #0]
 8008284:	461a      	mov	r2, r3
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	4413      	add	r3, r2
 800828a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	3301      	adds	r3, #1
 8008290:	60fb      	str	r3, [r7, #12]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	885b      	ldrh	r3, [r3, #2]
 8008296:	461a      	mov	r2, r3
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	4293      	cmp	r3, r2
 800829c:	dbe7      	blt.n	800826e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800829e:	bf00      	nop
 80082a0:	bf00      	nop
 80082a2:	3714      	adds	r7, #20
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80082b2:	2300      	movs	r3, #0
 80082b4:	80fb      	strh	r3, [r7, #6]
 80082b6:	e009      	b.n	80082cc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80082b8:	88fb      	ldrh	r3, [r7, #6]
 80082ba:	4a08      	ldr	r2, [pc, #32]	@ (80082dc <memp_init+0x30>)
 80082bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082c0:	4618      	mov	r0, r3
 80082c2:	f7ff ffc3 	bl	800824c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80082c6:	88fb      	ldrh	r3, [r7, #6]
 80082c8:	3301      	adds	r3, #1
 80082ca:	80fb      	strh	r3, [r7, #6]
 80082cc:	88fb      	ldrh	r3, [r7, #6]
 80082ce:	2b0c      	cmp	r3, #12
 80082d0:	d9f2      	bls.n	80082b8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80082d2:	bf00      	nop
 80082d4:	bf00      	nop
 80082d6:	3708      	adds	r7, #8
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	08015440 	.word	0x08015440

080082e0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80082e8:	f009 fa56 	bl	8011798 <sys_arch_protect>
 80082ec:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d015      	beq.n	8008328 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	68ba      	ldr	r2, [r7, #8]
 8008302:	6812      	ldr	r2, [r2, #0]
 8008304:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	f003 0303 	and.w	r3, r3, #3
 800830c:	2b00      	cmp	r3, #0
 800830e:	d006      	beq.n	800831e <do_memp_malloc_pool+0x3e>
 8008310:	4b09      	ldr	r3, [pc, #36]	@ (8008338 <do_memp_malloc_pool+0x58>)
 8008312:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8008316:	4909      	ldr	r1, [pc, #36]	@ (800833c <do_memp_malloc_pool+0x5c>)
 8008318:	4809      	ldr	r0, [pc, #36]	@ (8008340 <do_memp_malloc_pool+0x60>)
 800831a:	f009 fb5b 	bl	80119d4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800831e:	68f8      	ldr	r0, [r7, #12]
 8008320:	f009 fa48 	bl	80117b4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	e003      	b.n	8008330 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f009 fa43 	bl	80117b4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3710      	adds	r7, #16
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	08012c50 	.word	0x08012c50
 800833c:	08012c80 	.word	0x08012c80
 8008340:	08012ca4 	.word	0x08012ca4

08008344 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d106      	bne.n	8008360 <memp_malloc_pool+0x1c>
 8008352:	4b0a      	ldr	r3, [pc, #40]	@ (800837c <memp_malloc_pool+0x38>)
 8008354:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8008358:	4909      	ldr	r1, [pc, #36]	@ (8008380 <memp_malloc_pool+0x3c>)
 800835a:	480a      	ldr	r0, [pc, #40]	@ (8008384 <memp_malloc_pool+0x40>)
 800835c:	f009 fb3a 	bl	80119d4 <iprintf>
  if (desc == NULL) {
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d101      	bne.n	800836a <memp_malloc_pool+0x26>
    return NULL;
 8008366:	2300      	movs	r3, #0
 8008368:	e003      	b.n	8008372 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f7ff ffb8 	bl	80082e0 <do_memp_malloc_pool>
 8008370:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8008372:	4618      	mov	r0, r3
 8008374:	3708      	adds	r7, #8
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	08012c50 	.word	0x08012c50
 8008380:	08012ccc 	.word	0x08012ccc
 8008384:	08012ca4 	.word	0x08012ca4

08008388 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	4603      	mov	r3, r0
 8008390:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008392:	79fb      	ldrb	r3, [r7, #7]
 8008394:	2b0c      	cmp	r3, #12
 8008396:	d908      	bls.n	80083aa <memp_malloc+0x22>
 8008398:	4b0a      	ldr	r3, [pc, #40]	@ (80083c4 <memp_malloc+0x3c>)
 800839a:	f240 1257 	movw	r2, #343	@ 0x157
 800839e:	490a      	ldr	r1, [pc, #40]	@ (80083c8 <memp_malloc+0x40>)
 80083a0:	480a      	ldr	r0, [pc, #40]	@ (80083cc <memp_malloc+0x44>)
 80083a2:	f009 fb17 	bl	80119d4 <iprintf>
 80083a6:	2300      	movs	r3, #0
 80083a8:	e008      	b.n	80083bc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80083aa:	79fb      	ldrb	r3, [r7, #7]
 80083ac:	4a08      	ldr	r2, [pc, #32]	@ (80083d0 <memp_malloc+0x48>)
 80083ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7ff ff94 	bl	80082e0 <do_memp_malloc_pool>
 80083b8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80083ba:	68fb      	ldr	r3, [r7, #12]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3710      	adds	r7, #16
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	08012c50 	.word	0x08012c50
 80083c8:	08012ce0 	.word	0x08012ce0
 80083cc:	08012ca4 	.word	0x08012ca4
 80083d0:	08015440 	.word	0x08015440

080083d4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	f003 0303 	and.w	r3, r3, #3
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d006      	beq.n	80083f6 <do_memp_free_pool+0x22>
 80083e8:	4b0d      	ldr	r3, [pc, #52]	@ (8008420 <do_memp_free_pool+0x4c>)
 80083ea:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80083ee:	490d      	ldr	r1, [pc, #52]	@ (8008424 <do_memp_free_pool+0x50>)
 80083f0:	480d      	ldr	r0, [pc, #52]	@ (8008428 <do_memp_free_pool+0x54>)
 80083f2:	f009 faef 	bl	80119d4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80083fa:	f009 f9cd 	bl	8011798 <sys_arch_protect>
 80083fe:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8008412:	68b8      	ldr	r0, [r7, #8]
 8008414:	f009 f9ce 	bl	80117b4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8008418:	bf00      	nop
 800841a:	3710      	adds	r7, #16
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	08012c50 	.word	0x08012c50
 8008424:	08012d00 	.word	0x08012d00
 8008428:	08012ca4 	.word	0x08012ca4

0800842c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d106      	bne.n	800844a <memp_free_pool+0x1e>
 800843c:	4b0a      	ldr	r3, [pc, #40]	@ (8008468 <memp_free_pool+0x3c>)
 800843e:	f240 1295 	movw	r2, #405	@ 0x195
 8008442:	490a      	ldr	r1, [pc, #40]	@ (800846c <memp_free_pool+0x40>)
 8008444:	480a      	ldr	r0, [pc, #40]	@ (8008470 <memp_free_pool+0x44>)
 8008446:	f009 fac5 	bl	80119d4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d007      	beq.n	8008460 <memp_free_pool+0x34>
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d004      	beq.n	8008460 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f7ff ffbb 	bl	80083d4 <do_memp_free_pool>
 800845e:	e000      	b.n	8008462 <memp_free_pool+0x36>
    return;
 8008460:	bf00      	nop
}
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	08012c50 	.word	0x08012c50
 800846c:	08012ccc 	.word	0x08012ccc
 8008470:	08012ca4 	.word	0x08012ca4

08008474 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	4603      	mov	r3, r0
 800847c:	6039      	str	r1, [r7, #0]
 800847e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008480:	79fb      	ldrb	r3, [r7, #7]
 8008482:	2b0c      	cmp	r3, #12
 8008484:	d907      	bls.n	8008496 <memp_free+0x22>
 8008486:	4b0c      	ldr	r3, [pc, #48]	@ (80084b8 <memp_free+0x44>)
 8008488:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800848c:	490b      	ldr	r1, [pc, #44]	@ (80084bc <memp_free+0x48>)
 800848e:	480c      	ldr	r0, [pc, #48]	@ (80084c0 <memp_free+0x4c>)
 8008490:	f009 faa0 	bl	80119d4 <iprintf>
 8008494:	e00c      	b.n	80084b0 <memp_free+0x3c>

  if (mem == NULL) {
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d008      	beq.n	80084ae <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800849c:	79fb      	ldrb	r3, [r7, #7]
 800849e:	4a09      	ldr	r2, [pc, #36]	@ (80084c4 <memp_free+0x50>)
 80084a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084a4:	6839      	ldr	r1, [r7, #0]
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7ff ff94 	bl	80083d4 <do_memp_free_pool>
 80084ac:	e000      	b.n	80084b0 <memp_free+0x3c>
    return;
 80084ae:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	08012c50 	.word	0x08012c50
 80084bc:	08012d20 	.word	0x08012d20
 80084c0:	08012ca4 	.word	0x08012ca4
 80084c4:	08015440 	.word	0x08015440

080084c8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80084c8:	b480      	push	{r7}
 80084ca:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80084cc:	bf00      	nop
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr
	...

080084d8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b086      	sub	sp, #24
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	607a      	str	r2, [r7, #4]
 80084e4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d108      	bne.n	80084fe <netif_add+0x26>
 80084ec:	4b57      	ldr	r3, [pc, #348]	@ (800864c <netif_add+0x174>)
 80084ee:	f240 1227 	movw	r2, #295	@ 0x127
 80084f2:	4957      	ldr	r1, [pc, #348]	@ (8008650 <netif_add+0x178>)
 80084f4:	4857      	ldr	r0, [pc, #348]	@ (8008654 <netif_add+0x17c>)
 80084f6:	f009 fa6d 	bl	80119d4 <iprintf>
 80084fa:	2300      	movs	r3, #0
 80084fc:	e0a2      	b.n	8008644 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80084fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008500:	2b00      	cmp	r3, #0
 8008502:	d108      	bne.n	8008516 <netif_add+0x3e>
 8008504:	4b51      	ldr	r3, [pc, #324]	@ (800864c <netif_add+0x174>)
 8008506:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800850a:	4953      	ldr	r1, [pc, #332]	@ (8008658 <netif_add+0x180>)
 800850c:	4851      	ldr	r0, [pc, #324]	@ (8008654 <netif_add+0x17c>)
 800850e:	f009 fa61 	bl	80119d4 <iprintf>
 8008512:	2300      	movs	r3, #0
 8008514:	e096      	b.n	8008644 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d101      	bne.n	8008520 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800851c:	4b4f      	ldr	r3, [pc, #316]	@ (800865c <netif_add+0x184>)
 800851e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d101      	bne.n	800852a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8008526:	4b4d      	ldr	r3, [pc, #308]	@ (800865c <netif_add+0x184>)
 8008528:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d101      	bne.n	8008534 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8008530:	4b4a      	ldr	r3, [pc, #296]	@ (800865c <netif_add+0x184>)
 8008532:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2200      	movs	r2, #0
 8008538:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2200      	movs	r2, #0
 8008544:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	4a45      	ldr	r2, [pc, #276]	@ (8008660 <netif_add+0x188>)
 800854a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2200      	movs	r2, #0
 8008550:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2200      	movs	r2, #0
 8008556:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2200      	movs	r2, #0
 800855e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6a3a      	ldr	r2, [r7, #32]
 8008564:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8008566:	4b3f      	ldr	r3, [pc, #252]	@ (8008664 <netif_add+0x18c>)
 8008568:	781a      	ldrb	r2, [r3, #0]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008574:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	68b9      	ldr	r1, [r7, #8]
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f000 f913 	bl	80087a8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8008582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	4798      	blx	r3
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d001      	beq.n	8008592 <netif_add+0xba>
    return NULL;
 800858e:	2300      	movs	r3, #0
 8008590:	e058      	b.n	8008644 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008598:	2bff      	cmp	r3, #255	@ 0xff
 800859a:	d103      	bne.n	80085a4 <netif_add+0xcc>
        netif->num = 0;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 80085a4:	2300      	movs	r3, #0
 80085a6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80085a8:	4b2f      	ldr	r3, [pc, #188]	@ (8008668 <netif_add+0x190>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	617b      	str	r3, [r7, #20]
 80085ae:	e02b      	b.n	8008608 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80085b0:	697a      	ldr	r2, [r7, #20]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d106      	bne.n	80085c6 <netif_add+0xee>
 80085b8:	4b24      	ldr	r3, [pc, #144]	@ (800864c <netif_add+0x174>)
 80085ba:	f240 128b 	movw	r2, #395	@ 0x18b
 80085be:	492b      	ldr	r1, [pc, #172]	@ (800866c <netif_add+0x194>)
 80085c0:	4824      	ldr	r0, [pc, #144]	@ (8008654 <netif_add+0x17c>)
 80085c2:	f009 fa07 	bl	80119d4 <iprintf>
        num_netifs++;
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	3301      	adds	r3, #1
 80085ca:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	2bff      	cmp	r3, #255	@ 0xff
 80085d0:	dd06      	ble.n	80085e0 <netif_add+0x108>
 80085d2:	4b1e      	ldr	r3, [pc, #120]	@ (800864c <netif_add+0x174>)
 80085d4:	f240 128d 	movw	r2, #397	@ 0x18d
 80085d8:	4925      	ldr	r1, [pc, #148]	@ (8008670 <netif_add+0x198>)
 80085da:	481e      	ldr	r0, [pc, #120]	@ (8008654 <netif_add+0x17c>)
 80085dc:	f009 f9fa 	bl	80119d4 <iprintf>
        if (netif2->num == netif->num) {
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d108      	bne.n	8008602 <netif_add+0x12a>
          netif->num++;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80085f6:	3301      	adds	r3, #1
 80085f8:	b2da      	uxtb	r2, r3
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8008600:	e005      	b.n	800860e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	617b      	str	r3, [r7, #20]
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d1d0      	bne.n	80085b0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d1be      	bne.n	8008592 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800861a:	2bfe      	cmp	r3, #254	@ 0xfe
 800861c:	d103      	bne.n	8008626 <netif_add+0x14e>
    netif_num = 0;
 800861e:	4b11      	ldr	r3, [pc, #68]	@ (8008664 <netif_add+0x18c>)
 8008620:	2200      	movs	r2, #0
 8008622:	701a      	strb	r2, [r3, #0]
 8008624:	e006      	b.n	8008634 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800862c:	3301      	adds	r3, #1
 800862e:	b2da      	uxtb	r2, r3
 8008630:	4b0c      	ldr	r3, [pc, #48]	@ (8008664 <netif_add+0x18c>)
 8008632:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8008634:	4b0c      	ldr	r3, [pc, #48]	@ (8008668 <netif_add+0x190>)
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800863c:	4a0a      	ldr	r2, [pc, #40]	@ (8008668 <netif_add+0x190>)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8008642:	68fb      	ldr	r3, [r7, #12]
}
 8008644:	4618      	mov	r0, r3
 8008646:	3718      	adds	r7, #24
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	08012d3c 	.word	0x08012d3c
 8008650:	08012dd0 	.word	0x08012dd0
 8008654:	08012d8c 	.word	0x08012d8c
 8008658:	08012dec 	.word	0x08012dec
 800865c:	080154b4 	.word	0x080154b4
 8008660:	08008a83 	.word	0x08008a83
 8008664:	2000fda4 	.word	0x2000fda4
 8008668:	2000fd9c 	.word	0x2000fd9c
 800866c:	08012e10 	.word	0x08012e10
 8008670:	08012e24 	.word	0x08012e24

08008674 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800867e:	6839      	ldr	r1, [r7, #0]
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f002 fb87 	bl	800ad94 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8008686:	6839      	ldr	r1, [r7, #0]
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f006 fc97 	bl	800efbc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800868e:	bf00      	nop
 8008690:	3708      	adds	r7, #8
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
	...

08008698 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b086      	sub	sp, #24
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d106      	bne.n	80086b8 <netif_do_set_ipaddr+0x20>
 80086aa:	4b1d      	ldr	r3, [pc, #116]	@ (8008720 <netif_do_set_ipaddr+0x88>)
 80086ac:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80086b0:	491c      	ldr	r1, [pc, #112]	@ (8008724 <netif_do_set_ipaddr+0x8c>)
 80086b2:	481d      	ldr	r0, [pc, #116]	@ (8008728 <netif_do_set_ipaddr+0x90>)
 80086b4:	f009 f98e 	bl	80119d4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d106      	bne.n	80086cc <netif_do_set_ipaddr+0x34>
 80086be:	4b18      	ldr	r3, [pc, #96]	@ (8008720 <netif_do_set_ipaddr+0x88>)
 80086c0:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80086c4:	4917      	ldr	r1, [pc, #92]	@ (8008724 <netif_do_set_ipaddr+0x8c>)
 80086c6:	4818      	ldr	r0, [pc, #96]	@ (8008728 <netif_do_set_ipaddr+0x90>)
 80086c8:	f009 f984 	bl	80119d4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	3304      	adds	r3, #4
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d01c      	beq.n	8008714 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	3304      	adds	r3, #4
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80086ea:	f107 0314 	add.w	r3, r7, #20
 80086ee:	4619      	mov	r1, r3
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f7ff ffbf 	bl	8008674 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d002      	beq.n	8008702 <netif_do_set_ipaddr+0x6a>
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	e000      	b.n	8008704 <netif_do_set_ipaddr+0x6c>
 8008702:	2300      	movs	r3, #0
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008708:	2101      	movs	r1, #1
 800870a:	68f8      	ldr	r0, [r7, #12]
 800870c:	f000 f8d2 	bl	80088b4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8008710:	2301      	movs	r3, #1
 8008712:	e000      	b.n	8008716 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3718      	adds	r7, #24
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	08012d3c 	.word	0x08012d3c
 8008724:	08012e54 	.word	0x08012e54
 8008728:	08012d8c 	.word	0x08012d8c

0800872c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	3308      	adds	r3, #8
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	429a      	cmp	r2, r3
 8008744:	d00a      	beq.n	800875c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d002      	beq.n	8008752 <netif_do_set_netmask+0x26>
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	e000      	b.n	8008754 <netif_do_set_netmask+0x28>
 8008752:	2300      	movs	r3, #0
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8008758:	2301      	movs	r3, #1
 800875a:	e000      	b.n	800875e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3714      	adds	r7, #20
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr

0800876a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800876a:	b480      	push	{r7}
 800876c:	b085      	sub	sp, #20
 800876e:	af00      	add	r7, sp, #0
 8008770:	60f8      	str	r0, [r7, #12]
 8008772:	60b9      	str	r1, [r7, #8]
 8008774:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	330c      	adds	r3, #12
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	429a      	cmp	r2, r3
 8008782:	d00a      	beq.n	800879a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d002      	beq.n	8008790 <netif_do_set_gw+0x26>
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	e000      	b.n	8008792 <netif_do_set_gw+0x28>
 8008790:	2300      	movs	r3, #0
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8008796:	2301      	movs	r3, #1
 8008798:	e000      	b.n	800879c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800879a:	2300      	movs	r3, #0
}
 800879c:	4618      	mov	r0, r3
 800879e:	3714      	adds	r7, #20
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b088      	sub	sp, #32
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	607a      	str	r2, [r7, #4]
 80087b4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80087b6:	2300      	movs	r3, #0
 80087b8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80087ba:	2300      	movs	r3, #0
 80087bc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d101      	bne.n	80087c8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80087c4:	4b1c      	ldr	r3, [pc, #112]	@ (8008838 <netif_set_addr+0x90>)
 80087c6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d101      	bne.n	80087d2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80087ce:	4b1a      	ldr	r3, [pc, #104]	@ (8008838 <netif_set_addr+0x90>)
 80087d0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d101      	bne.n	80087dc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80087d8:	4b17      	ldr	r3, [pc, #92]	@ (8008838 <netif_set_addr+0x90>)
 80087da:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d003      	beq.n	80087ea <netif_set_addr+0x42>
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d101      	bne.n	80087ee <netif_set_addr+0x46>
 80087ea:	2301      	movs	r3, #1
 80087ec:	e000      	b.n	80087f0 <netif_set_addr+0x48>
 80087ee:	2300      	movs	r3, #0
 80087f0:	617b      	str	r3, [r7, #20]
  if (remove) {
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d006      	beq.n	8008806 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80087f8:	f107 0310 	add.w	r3, r7, #16
 80087fc:	461a      	mov	r2, r3
 80087fe:	68b9      	ldr	r1, [r7, #8]
 8008800:	68f8      	ldr	r0, [r7, #12]
 8008802:	f7ff ff49 	bl	8008698 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8008806:	69fa      	ldr	r2, [r7, #28]
 8008808:	6879      	ldr	r1, [r7, #4]
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f7ff ff8e 	bl	800872c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8008810:	69ba      	ldr	r2, [r7, #24]
 8008812:	6839      	ldr	r1, [r7, #0]
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	f7ff ffa8 	bl	800876a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d106      	bne.n	800882e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008820:	f107 0310 	add.w	r3, r7, #16
 8008824:	461a      	mov	r2, r3
 8008826:	68b9      	ldr	r1, [r7, #8]
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f7ff ff35 	bl	8008698 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800882e:	bf00      	nop
 8008830:	3720      	adds	r7, #32
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	080154b4 	.word	0x080154b4

0800883c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8008844:	4a04      	ldr	r2, [pc, #16]	@ (8008858 <netif_set_default+0x1c>)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800884a:	bf00      	nop
 800884c:	370c      	adds	r7, #12
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr
 8008856:	bf00      	nop
 8008858:	2000fda0 	.word	0x2000fda0

0800885c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d107      	bne.n	800887a <netif_set_up+0x1e>
 800886a:	4b0f      	ldr	r3, [pc, #60]	@ (80088a8 <netif_set_up+0x4c>)
 800886c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8008870:	490e      	ldr	r1, [pc, #56]	@ (80088ac <netif_set_up+0x50>)
 8008872:	480f      	ldr	r0, [pc, #60]	@ (80088b0 <netif_set_up+0x54>)
 8008874:	f009 f8ae 	bl	80119d4 <iprintf>
 8008878:	e013      	b.n	80088a2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008880:	f003 0301 	and.w	r3, r3, #1
 8008884:	2b00      	cmp	r3, #0
 8008886:	d10c      	bne.n	80088a2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800888e:	f043 0301 	orr.w	r3, r3, #1
 8008892:	b2da      	uxtb	r2, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800889a:	2103      	movs	r1, #3
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 f809 	bl	80088b4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	08012d3c 	.word	0x08012d3c
 80088ac:	08012ec4 	.word	0x08012ec4
 80088b0:	08012d8c 	.word	0x08012d8c

080088b4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	460b      	mov	r3, r1
 80088be:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d106      	bne.n	80088d4 <netif_issue_reports+0x20>
 80088c6:	4b18      	ldr	r3, [pc, #96]	@ (8008928 <netif_issue_reports+0x74>)
 80088c8:	f240 326d 	movw	r2, #877	@ 0x36d
 80088cc:	4917      	ldr	r1, [pc, #92]	@ (800892c <netif_issue_reports+0x78>)
 80088ce:	4818      	ldr	r0, [pc, #96]	@ (8008930 <netif_issue_reports+0x7c>)
 80088d0:	f009 f880 	bl	80119d4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80088da:	f003 0304 	and.w	r3, r3, #4
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d01e      	beq.n	8008920 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80088e8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d017      	beq.n	8008920 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80088f0:	78fb      	ldrb	r3, [r7, #3]
 80088f2:	f003 0301 	and.w	r3, r3, #1
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d013      	beq.n	8008922 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	3304      	adds	r3, #4
 80088fe:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008900:	2b00      	cmp	r3, #0
 8008902:	d00e      	beq.n	8008922 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800890a:	f003 0308 	and.w	r3, r3, #8
 800890e:	2b00      	cmp	r3, #0
 8008910:	d007      	beq.n	8008922 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	3304      	adds	r3, #4
 8008916:	4619      	mov	r1, r3
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f007 fab9 	bl	800fe90 <etharp_request>
 800891e:	e000      	b.n	8008922 <netif_issue_reports+0x6e>
    return;
 8008920:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}
 8008928:	08012d3c 	.word	0x08012d3c
 800892c:	08012ee0 	.word	0x08012ee0
 8008930:	08012d8c 	.word	0x08012d8c

08008934 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d107      	bne.n	8008952 <netif_set_down+0x1e>
 8008942:	4b12      	ldr	r3, [pc, #72]	@ (800898c <netif_set_down+0x58>)
 8008944:	f240 329b 	movw	r2, #923	@ 0x39b
 8008948:	4911      	ldr	r1, [pc, #68]	@ (8008990 <netif_set_down+0x5c>)
 800894a:	4812      	ldr	r0, [pc, #72]	@ (8008994 <netif_set_down+0x60>)
 800894c:	f009 f842 	bl	80119d4 <iprintf>
 8008950:	e019      	b.n	8008986 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008958:	f003 0301 	and.w	r3, r3, #1
 800895c:	2b00      	cmp	r3, #0
 800895e:	d012      	beq.n	8008986 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008966:	f023 0301 	bic.w	r3, r3, #1
 800896a:	b2da      	uxtb	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008978:	f003 0308 	and.w	r3, r3, #8
 800897c:	2b00      	cmp	r3, #0
 800897e:	d002      	beq.n	8008986 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f006 fe43 	bl	800f60c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8008986:	3708      	adds	r7, #8
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	08012d3c 	.word	0x08012d3c
 8008990:	08012f04 	.word	0x08012f04
 8008994:	08012d8c 	.word	0x08012d8c

08008998 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d107      	bne.n	80089b6 <netif_set_link_up+0x1e>
 80089a6:	4b13      	ldr	r3, [pc, #76]	@ (80089f4 <netif_set_link_up+0x5c>)
 80089a8:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80089ac:	4912      	ldr	r1, [pc, #72]	@ (80089f8 <netif_set_link_up+0x60>)
 80089ae:	4813      	ldr	r0, [pc, #76]	@ (80089fc <netif_set_link_up+0x64>)
 80089b0:	f009 f810 	bl	80119d4 <iprintf>
 80089b4:	e01b      	b.n	80089ee <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80089bc:	f003 0304 	and.w	r3, r3, #4
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d114      	bne.n	80089ee <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80089ca:	f043 0304 	orr.w	r3, r3, #4
 80089ce:	b2da      	uxtb	r2, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80089d6:	2103      	movs	r1, #3
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f7ff ff6b 	bl	80088b4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	69db      	ldr	r3, [r3, #28]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d003      	beq.n	80089ee <netif_set_link_up+0x56>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	69db      	ldr	r3, [r3, #28]
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80089ee:	3708      	adds	r7, #8
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	08012d3c 	.word	0x08012d3c
 80089f8:	08012f24 	.word	0x08012f24
 80089fc:	08012d8c 	.word	0x08012d8c

08008a00 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d107      	bne.n	8008a1e <netif_set_link_down+0x1e>
 8008a0e:	4b11      	ldr	r3, [pc, #68]	@ (8008a54 <netif_set_link_down+0x54>)
 8008a10:	f240 4206 	movw	r2, #1030	@ 0x406
 8008a14:	4910      	ldr	r1, [pc, #64]	@ (8008a58 <netif_set_link_down+0x58>)
 8008a16:	4811      	ldr	r0, [pc, #68]	@ (8008a5c <netif_set_link_down+0x5c>)
 8008a18:	f008 ffdc 	bl	80119d4 <iprintf>
 8008a1c:	e017      	b.n	8008a4e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008a24:	f003 0304 	and.w	r3, r3, #4
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d010      	beq.n	8008a4e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008a32:	f023 0304 	bic.w	r3, r3, #4
 8008a36:	b2da      	uxtb	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	69db      	ldr	r3, [r3, #28]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d003      	beq.n	8008a4e <netif_set_link_down+0x4e>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	69db      	ldr	r3, [r3, #28]
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008a4e:	3708      	adds	r7, #8
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}
 8008a54:	08012d3c 	.word	0x08012d3c
 8008a58:	08012f48 	.word	0x08012f48
 8008a5c:	08012d8c 	.word	0x08012d8c

08008a60 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d002      	beq.n	8008a76 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	683a      	ldr	r2, [r7, #0]
 8008a74:	61da      	str	r2, [r3, #28]
  }
}
 8008a76:	bf00      	nop
 8008a78:	370c      	adds	r7, #12
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr

08008a82 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8008a82:	b480      	push	{r7}
 8008a84:	b085      	sub	sp, #20
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	60f8      	str	r0, [r7, #12]
 8008a8a:	60b9      	str	r1, [r7, #8]
 8008a8c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8008a8e:	f06f 030b 	mvn.w	r3, #11
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3714      	adds	r7, #20
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
	...

08008aa0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8008aaa:	79fb      	ldrb	r3, [r7, #7]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d013      	beq.n	8008ad8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8008ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8008ae8 <netif_get_by_index+0x48>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	60fb      	str	r3, [r7, #12]
 8008ab6:	e00c      	b.n	8008ad2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008abe:	3301      	adds	r3, #1
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	79fa      	ldrb	r2, [r7, #7]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d101      	bne.n	8008acc <netif_get_by_index+0x2c>
        return netif; /* found! */
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	e006      	b.n	8008ada <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	60fb      	str	r3, [r7, #12]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d1ef      	bne.n	8008ab8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3714      	adds	r7, #20
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop
 8008ae8:	2000fd9c 	.word	0x2000fd9c

08008aec <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8008af2:	f008 fe51 	bl	8011798 <sys_arch_protect>
 8008af6:	6038      	str	r0, [r7, #0]
 8008af8:	4b0d      	ldr	r3, [pc, #52]	@ (8008b30 <pbuf_free_ooseq+0x44>)
 8008afa:	2200      	movs	r2, #0
 8008afc:	701a      	strb	r2, [r3, #0]
 8008afe:	6838      	ldr	r0, [r7, #0]
 8008b00:	f008 fe58 	bl	80117b4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008b04:	4b0b      	ldr	r3, [pc, #44]	@ (8008b34 <pbuf_free_ooseq+0x48>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	607b      	str	r3, [r7, #4]
 8008b0a:	e00a      	b.n	8008b22 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d003      	beq.n	8008b1c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f002 f97b 	bl	800ae10 <tcp_free_ooseq>
      return;
 8008b1a:	e005      	b.n	8008b28 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	607b      	str	r3, [r7, #4]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d1f1      	bne.n	8008b0c <pbuf_free_ooseq+0x20>
    }
  }
}
 8008b28:	3708      	adds	r7, #8
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	2000fda5 	.word	0x2000fda5
 8008b34:	2000fdb4 	.word	0x2000fdb4

08008b38 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8008b40:	f7ff ffd4 	bl	8008aec <pbuf_free_ooseq>
}
 8008b44:	bf00      	nop
 8008b46:	3708      	adds	r7, #8
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8008b52:	f008 fe21 	bl	8011798 <sys_arch_protect>
 8008b56:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8008b58:	4b0f      	ldr	r3, [pc, #60]	@ (8008b98 <pbuf_pool_is_empty+0x4c>)
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8008b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8008b98 <pbuf_pool_is_empty+0x4c>)
 8008b60:	2201      	movs	r2, #1
 8008b62:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f008 fe25 	bl	80117b4 <sys_arch_unprotect>

  if (!queued) {
 8008b6a:	78fb      	ldrb	r3, [r7, #3]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d10f      	bne.n	8008b90 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8008b70:	2100      	movs	r1, #0
 8008b72:	480a      	ldr	r0, [pc, #40]	@ (8008b9c <pbuf_pool_is_empty+0x50>)
 8008b74:	f7fe fe9a 	bl	80078ac <tcpip_try_callback>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d008      	beq.n	8008b90 <pbuf_pool_is_empty+0x44>
 8008b7e:	f008 fe0b 	bl	8011798 <sys_arch_protect>
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	4b04      	ldr	r3, [pc, #16]	@ (8008b98 <pbuf_pool_is_empty+0x4c>)
 8008b86:	2200      	movs	r2, #0
 8008b88:	701a      	strb	r2, [r3, #0]
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f008 fe12 	bl	80117b4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008b90:	bf00      	nop
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	2000fda5 	.word	0x2000fda5
 8008b9c:	08008b39 	.word	0x08008b39

08008ba0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b085      	sub	sp, #20
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	4611      	mov	r1, r2
 8008bac:	461a      	mov	r2, r3
 8008bae:	460b      	mov	r3, r1
 8008bb0:	80fb      	strh	r3, [r7, #6]
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	68ba      	ldr	r2, [r7, #8]
 8008bc0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	88fa      	ldrh	r2, [r7, #6]
 8008bc6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	88ba      	ldrh	r2, [r7, #4]
 8008bcc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8008bce:	8b3b      	ldrh	r3, [r7, #24]
 8008bd0:	b2da      	uxtb	r2, r3
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	7f3a      	ldrb	r2, [r7, #28]
 8008bda:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2201      	movs	r2, #1
 8008be0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2200      	movs	r2, #0
 8008be6:	73da      	strb	r2, [r3, #15]
}
 8008be8:	bf00      	nop
 8008bea:	3714      	adds	r7, #20
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b08c      	sub	sp, #48	@ 0x30
 8008bf8:	af02      	add	r7, sp, #8
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	71fb      	strb	r3, [r7, #7]
 8008bfe:	460b      	mov	r3, r1
 8008c00:	80bb      	strh	r3, [r7, #4]
 8008c02:	4613      	mov	r3, r2
 8008c04:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8008c06:	79fb      	ldrb	r3, [r7, #7]
 8008c08:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8008c0a:	887b      	ldrh	r3, [r7, #2]
 8008c0c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8008c10:	f000 8082 	beq.w	8008d18 <pbuf_alloc+0x124>
 8008c14:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8008c18:	f300 80ca 	bgt.w	8008db0 <pbuf_alloc+0x1bc>
 8008c1c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8008c20:	d010      	beq.n	8008c44 <pbuf_alloc+0x50>
 8008c22:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8008c26:	f300 80c3 	bgt.w	8008db0 <pbuf_alloc+0x1bc>
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d002      	beq.n	8008c34 <pbuf_alloc+0x40>
 8008c2e:	2b41      	cmp	r3, #65	@ 0x41
 8008c30:	f040 80be 	bne.w	8008db0 <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8008c34:	887a      	ldrh	r2, [r7, #2]
 8008c36:	88bb      	ldrh	r3, [r7, #4]
 8008c38:	4619      	mov	r1, r3
 8008c3a:	2000      	movs	r0, #0
 8008c3c:	f000 f8d4 	bl	8008de8 <pbuf_alloc_reference>
 8008c40:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8008c42:	e0bf      	b.n	8008dc4 <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8008c44:	2300      	movs	r3, #0
 8008c46:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8008c4c:	88bb      	ldrh	r3, [r7, #4]
 8008c4e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008c50:	200c      	movs	r0, #12
 8008c52:	f7ff fb99 	bl	8008388 <memp_malloc>
 8008c56:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d109      	bne.n	8008c72 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 8008c5e:	f7ff ff75 	bl	8008b4c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8008c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d002      	beq.n	8008c6e <pbuf_alloc+0x7a>
            pbuf_free(p);
 8008c68:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008c6a:	f000 faab 	bl	80091c4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	e0a9      	b.n	8008dc6 <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008c72:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008c74:	3303      	adds	r3, #3
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	f023 0303 	bic.w	r3, r3, #3
 8008c7c:	b29a      	uxth	r2, r3
 8008c7e:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 8008c82:	1a9b      	subs	r3, r3, r2
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	8b7a      	ldrh	r2, [r7, #26]
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	bf28      	it	cs
 8008c8c:	4613      	movcs	r3, r2
 8008c8e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008c90:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008c92:	3310      	adds	r3, #16
 8008c94:	693a      	ldr	r2, [r7, #16]
 8008c96:	4413      	add	r3, r2
 8008c98:	3303      	adds	r3, #3
 8008c9a:	f023 0303 	bic.w	r3, r3, #3
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	89f9      	ldrh	r1, [r7, #14]
 8008ca2:	8b7a      	ldrh	r2, [r7, #26]
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	9301      	str	r3, [sp, #4]
 8008ca8:	887b      	ldrh	r3, [r7, #2]
 8008caa:	9300      	str	r3, [sp, #0]
 8008cac:	460b      	mov	r3, r1
 8008cae:	4601      	mov	r1, r0
 8008cb0:	6938      	ldr	r0, [r7, #16]
 8008cb2:	f7ff ff75 	bl	8008ba0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	f003 0303 	and.w	r3, r3, #3
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d006      	beq.n	8008cd0 <pbuf_alloc+0xdc>
 8008cc2:	4b43      	ldr	r3, [pc, #268]	@ (8008dd0 <pbuf_alloc+0x1dc>)
 8008cc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008cc8:	4942      	ldr	r1, [pc, #264]	@ (8008dd4 <pbuf_alloc+0x1e0>)
 8008cca:	4843      	ldr	r0, [pc, #268]	@ (8008dd8 <pbuf_alloc+0x1e4>)
 8008ccc:	f008 fe82 	bl	80119d4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8008cd0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008cd2:	3303      	adds	r3, #3
 8008cd4:	f023 0303 	bic.w	r3, r3, #3
 8008cd8:	f240 52ec 	movw	r2, #1516	@ 0x5ec
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d106      	bne.n	8008cee <pbuf_alloc+0xfa>
 8008ce0:	4b3b      	ldr	r3, [pc, #236]	@ (8008dd0 <pbuf_alloc+0x1dc>)
 8008ce2:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8008ce6:	493d      	ldr	r1, [pc, #244]	@ (8008ddc <pbuf_alloc+0x1e8>)
 8008ce8:	483b      	ldr	r0, [pc, #236]	@ (8008dd8 <pbuf_alloc+0x1e4>)
 8008cea:	f008 fe73 	bl	80119d4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8008cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d102      	bne.n	8008cfa <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cf8:	e002      	b.n	8008d00 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8008d04:	8b7a      	ldrh	r2, [r7, #26]
 8008d06:	89fb      	ldrh	r3, [r7, #14]
 8008d08:	1ad3      	subs	r3, r2, r3
 8008d0a:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8008d10:	8b7b      	ldrh	r3, [r7, #26]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d19c      	bne.n	8008c50 <pbuf_alloc+0x5c>
      break;
 8008d16:	e055      	b.n	8008dc4 <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008d18:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008d1a:	3303      	adds	r3, #3
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	f023 0303 	bic.w	r3, r3, #3
 8008d22:	b29a      	uxth	r2, r3
 8008d24:	88bb      	ldrh	r3, [r7, #4]
 8008d26:	3303      	adds	r3, #3
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	f023 0303 	bic.w	r3, r3, #3
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	4413      	add	r3, r2
 8008d32:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008d34:	8b3b      	ldrh	r3, [r7, #24]
 8008d36:	3310      	adds	r3, #16
 8008d38:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008d3a:	8b3a      	ldrh	r2, [r7, #24]
 8008d3c:	88bb      	ldrh	r3, [r7, #4]
 8008d3e:	3303      	adds	r3, #3
 8008d40:	f023 0303 	bic.w	r3, r3, #3
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d306      	bcc.n	8008d56 <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8008d48:	8afa      	ldrh	r2, [r7, #22]
 8008d4a:	88bb      	ldrh	r3, [r7, #4]
 8008d4c:	3303      	adds	r3, #3
 8008d4e:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d201      	bcs.n	8008d5a <pbuf_alloc+0x166>
        return NULL;
 8008d56:	2300      	movs	r3, #0
 8008d58:	e035      	b.n	8008dc6 <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008d5a:	8afb      	ldrh	r3, [r7, #22]
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7ff f96b 	bl	8008038 <mem_malloc>
 8008d62:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8008d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d101      	bne.n	8008d6e <pbuf_alloc+0x17a>
        return NULL;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	e02b      	b.n	8008dc6 <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008d6e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008d70:	3310      	adds	r3, #16
 8008d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d74:	4413      	add	r3, r2
 8008d76:	3303      	adds	r3, #3
 8008d78:	f023 0303 	bic.w	r3, r3, #3
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	88b9      	ldrh	r1, [r7, #4]
 8008d80:	88ba      	ldrh	r2, [r7, #4]
 8008d82:	2300      	movs	r3, #0
 8008d84:	9301      	str	r3, [sp, #4]
 8008d86:	887b      	ldrh	r3, [r7, #2]
 8008d88:	9300      	str	r3, [sp, #0]
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	4601      	mov	r1, r0
 8008d8e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008d90:	f7ff ff06 	bl	8008ba0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	f003 0303 	and.w	r3, r3, #3
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d010      	beq.n	8008dc2 <pbuf_alloc+0x1ce>
 8008da0:	4b0b      	ldr	r3, [pc, #44]	@ (8008dd0 <pbuf_alloc+0x1dc>)
 8008da2:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8008da6:	490e      	ldr	r1, [pc, #56]	@ (8008de0 <pbuf_alloc+0x1ec>)
 8008da8:	480b      	ldr	r0, [pc, #44]	@ (8008dd8 <pbuf_alloc+0x1e4>)
 8008daa:	f008 fe13 	bl	80119d4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8008dae:	e008      	b.n	8008dc2 <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008db0:	4b07      	ldr	r3, [pc, #28]	@ (8008dd0 <pbuf_alloc+0x1dc>)
 8008db2:	f240 1227 	movw	r2, #295	@ 0x127
 8008db6:	490b      	ldr	r1, [pc, #44]	@ (8008de4 <pbuf_alloc+0x1f0>)
 8008db8:	4807      	ldr	r0, [pc, #28]	@ (8008dd8 <pbuf_alloc+0x1e4>)
 8008dba:	f008 fe0b 	bl	80119d4 <iprintf>
      return NULL;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	e001      	b.n	8008dc6 <pbuf_alloc+0x1d2>
      break;
 8008dc2:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3728      	adds	r7, #40	@ 0x28
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	08012f6c 	.word	0x08012f6c
 8008dd4:	08012f9c 	.word	0x08012f9c
 8008dd8:	08012fcc 	.word	0x08012fcc
 8008ddc:	08012ff4 	.word	0x08012ff4
 8008de0:	08013028 	.word	0x08013028
 8008de4:	08013054 	.word	0x08013054

08008de8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b086      	sub	sp, #24
 8008dec:	af02      	add	r7, sp, #8
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	460b      	mov	r3, r1
 8008df2:	807b      	strh	r3, [r7, #2]
 8008df4:	4613      	mov	r3, r2
 8008df6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008df8:	883b      	ldrh	r3, [r7, #0]
 8008dfa:	2b41      	cmp	r3, #65	@ 0x41
 8008dfc:	d009      	beq.n	8008e12 <pbuf_alloc_reference+0x2a>
 8008dfe:	883b      	ldrh	r3, [r7, #0]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d006      	beq.n	8008e12 <pbuf_alloc_reference+0x2a>
 8008e04:	4b0f      	ldr	r3, [pc, #60]	@ (8008e44 <pbuf_alloc_reference+0x5c>)
 8008e06:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8008e0a:	490f      	ldr	r1, [pc, #60]	@ (8008e48 <pbuf_alloc_reference+0x60>)
 8008e0c:	480f      	ldr	r0, [pc, #60]	@ (8008e4c <pbuf_alloc_reference+0x64>)
 8008e0e:	f008 fde1 	bl	80119d4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008e12:	200b      	movs	r0, #11
 8008e14:	f7ff fab8 	bl	8008388 <memp_malloc>
 8008e18:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d101      	bne.n	8008e24 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8008e20:	2300      	movs	r3, #0
 8008e22:	e00b      	b.n	8008e3c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008e24:	8879      	ldrh	r1, [r7, #2]
 8008e26:	887a      	ldrh	r2, [r7, #2]
 8008e28:	2300      	movs	r3, #0
 8008e2a:	9301      	str	r3, [sp, #4]
 8008e2c:	883b      	ldrh	r3, [r7, #0]
 8008e2e:	9300      	str	r3, [sp, #0]
 8008e30:	460b      	mov	r3, r1
 8008e32:	6879      	ldr	r1, [r7, #4]
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f7ff feb3 	bl	8008ba0 <pbuf_init_alloced_pbuf>
  return p;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3710      	adds	r7, #16
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	08012f6c 	.word	0x08012f6c
 8008e48:	08013070 	.word	0x08013070
 8008e4c:	08012fcc 	.word	0x08012fcc

08008e50 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b088      	sub	sp, #32
 8008e54:	af02      	add	r7, sp, #8
 8008e56:	607b      	str	r3, [r7, #4]
 8008e58:	4603      	mov	r3, r0
 8008e5a:	73fb      	strb	r3, [r7, #15]
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	81bb      	strh	r3, [r7, #12]
 8008e60:	4613      	mov	r3, r2
 8008e62:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8008e64:	7bfb      	ldrb	r3, [r7, #15]
 8008e66:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008e68:	8a7b      	ldrh	r3, [r7, #18]
 8008e6a:	3303      	adds	r3, #3
 8008e6c:	f023 0203 	bic.w	r2, r3, #3
 8008e70:	89bb      	ldrh	r3, [r7, #12]
 8008e72:	441a      	add	r2, r3
 8008e74:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d901      	bls.n	8008e7e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	e018      	b.n	8008eb0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8008e7e:	6a3b      	ldr	r3, [r7, #32]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d007      	beq.n	8008e94 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008e84:	8a7b      	ldrh	r3, [r7, #18]
 8008e86:	3303      	adds	r3, #3
 8008e88:	f023 0303 	bic.w	r3, r3, #3
 8008e8c:	6a3a      	ldr	r2, [r7, #32]
 8008e8e:	4413      	add	r3, r2
 8008e90:	617b      	str	r3, [r7, #20]
 8008e92:	e001      	b.n	8008e98 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8008e94:	2300      	movs	r3, #0
 8008e96:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	89b9      	ldrh	r1, [r7, #12]
 8008e9c:	89ba      	ldrh	r2, [r7, #12]
 8008e9e:	2302      	movs	r3, #2
 8008ea0:	9301      	str	r3, [sp, #4]
 8008ea2:	897b      	ldrh	r3, [r7, #10]
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	6979      	ldr	r1, [r7, #20]
 8008eaa:	f7ff fe79 	bl	8008ba0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8008eae:	687b      	ldr	r3, [r7, #4]
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3718      	adds	r7, #24
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d106      	bne.n	8008ed8 <pbuf_realloc+0x20>
 8008eca:	4b3a      	ldr	r3, [pc, #232]	@ (8008fb4 <pbuf_realloc+0xfc>)
 8008ecc:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8008ed0:	4939      	ldr	r1, [pc, #228]	@ (8008fb8 <pbuf_realloc+0x100>)
 8008ed2:	483a      	ldr	r0, [pc, #232]	@ (8008fbc <pbuf_realloc+0x104>)
 8008ed4:	f008 fd7e 	bl	80119d4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	891b      	ldrh	r3, [r3, #8]
 8008edc:	887a      	ldrh	r2, [r7, #2]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d263      	bcs.n	8008faa <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	891a      	ldrh	r2, [r3, #8]
 8008ee6:	887b      	ldrh	r3, [r7, #2]
 8008ee8:	1ad3      	subs	r3, r2, r3
 8008eea:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008eec:	887b      	ldrh	r3, [r7, #2]
 8008eee:	817b      	strh	r3, [r7, #10]
  q = p;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8008ef4:	e018      	b.n	8008f28 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	895b      	ldrh	r3, [r3, #10]
 8008efa:	897a      	ldrh	r2, [r7, #10]
 8008efc:	1ad3      	subs	r3, r2, r3
 8008efe:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	891a      	ldrh	r2, [r3, #8]
 8008f04:	893b      	ldrh	r3, [r7, #8]
 8008f06:	1ad3      	subs	r3, r2, r3
 8008f08:	b29a      	uxth	r2, r3
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d106      	bne.n	8008f28 <pbuf_realloc+0x70>
 8008f1a:	4b26      	ldr	r3, [pc, #152]	@ (8008fb4 <pbuf_realloc+0xfc>)
 8008f1c:	f240 12af 	movw	r2, #431	@ 0x1af
 8008f20:	4927      	ldr	r1, [pc, #156]	@ (8008fc0 <pbuf_realloc+0x108>)
 8008f22:	4826      	ldr	r0, [pc, #152]	@ (8008fbc <pbuf_realloc+0x104>)
 8008f24:	f008 fd56 	bl	80119d4 <iprintf>
  while (rem_len > q->len) {
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	895b      	ldrh	r3, [r3, #10]
 8008f2c:	897a      	ldrh	r2, [r7, #10]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d8e1      	bhi.n	8008ef6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	7b1b      	ldrb	r3, [r3, #12]
 8008f36:	f003 030f 	and.w	r3, r3, #15
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d121      	bne.n	8008f82 <pbuf_realloc+0xca>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	895b      	ldrh	r3, [r3, #10]
 8008f42:	897a      	ldrh	r2, [r7, #10]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d01c      	beq.n	8008f82 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	7b5b      	ldrb	r3, [r3, #13]
 8008f4c:	f003 0302 	and.w	r3, r3, #2
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d116      	bne.n	8008f82 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	685a      	ldr	r2, [r3, #4]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	1ad3      	subs	r3, r2, r3
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	897b      	ldrh	r3, [r7, #10]
 8008f60:	4413      	add	r3, r2
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	4619      	mov	r1, r3
 8008f66:	68f8      	ldr	r0, [r7, #12]
 8008f68:	f7fe ff56 	bl	8007e18 <mem_trim>
 8008f6c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d106      	bne.n	8008f82 <pbuf_realloc+0xca>
 8008f74:	4b0f      	ldr	r3, [pc, #60]	@ (8008fb4 <pbuf_realloc+0xfc>)
 8008f76:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8008f7a:	4912      	ldr	r1, [pc, #72]	@ (8008fc4 <pbuf_realloc+0x10c>)
 8008f7c:	480f      	ldr	r0, [pc, #60]	@ (8008fbc <pbuf_realloc+0x104>)
 8008f7e:	f008 fd29 	bl	80119d4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	897a      	ldrh	r2, [r7, #10]
 8008f86:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	895a      	ldrh	r2, [r3, #10]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d004      	beq.n	8008fa2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f000 f911 	bl	80091c4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	601a      	str	r2, [r3, #0]
 8008fa8:	e000      	b.n	8008fac <pbuf_realloc+0xf4>
    return;
 8008faa:	bf00      	nop

}
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	08012f6c 	.word	0x08012f6c
 8008fb8:	08013084 	.word	0x08013084
 8008fbc:	08012fcc 	.word	0x08012fcc
 8008fc0:	0801309c 	.word	0x0801309c
 8008fc4:	080130b4 	.word	0x080130b4

08008fc8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b086      	sub	sp, #24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d106      	bne.n	8008fea <pbuf_add_header_impl+0x22>
 8008fdc:	4b2b      	ldr	r3, [pc, #172]	@ (800908c <pbuf_add_header_impl+0xc4>)
 8008fde:	f240 12df 	movw	r2, #479	@ 0x1df
 8008fe2:	492b      	ldr	r1, [pc, #172]	@ (8009090 <pbuf_add_header_impl+0xc8>)
 8008fe4:	482b      	ldr	r0, [pc, #172]	@ (8009094 <pbuf_add_header_impl+0xcc>)
 8008fe6:	f008 fcf5 	bl	80119d4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d003      	beq.n	8008ff8 <pbuf_add_header_impl+0x30>
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ff6:	d301      	bcc.n	8008ffc <pbuf_add_header_impl+0x34>
    return 1;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	e043      	b.n	8009084 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d101      	bne.n	8009006 <pbuf_add_header_impl+0x3e>
    return 0;
 8009002:	2300      	movs	r3, #0
 8009004:	e03e      	b.n	8009084 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	891a      	ldrh	r2, [r3, #8]
 800900e:	8a7b      	ldrh	r3, [r7, #18]
 8009010:	4413      	add	r3, r2
 8009012:	b29b      	uxth	r3, r3
 8009014:	8a7a      	ldrh	r2, [r7, #18]
 8009016:	429a      	cmp	r2, r3
 8009018:	d901      	bls.n	800901e <pbuf_add_header_impl+0x56>
    return 1;
 800901a:	2301      	movs	r3, #1
 800901c:	e032      	b.n	8009084 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	7b1b      	ldrb	r3, [r3, #12]
 8009022:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8009024:	8a3b      	ldrh	r3, [r7, #16]
 8009026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00c      	beq.n	8009048 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	685a      	ldr	r2, [r3, #4]
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	425b      	negs	r3, r3
 8009036:	4413      	add	r3, r2
 8009038:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	3310      	adds	r3, #16
 800903e:	697a      	ldr	r2, [r7, #20]
 8009040:	429a      	cmp	r2, r3
 8009042:	d20d      	bcs.n	8009060 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8009044:	2301      	movs	r3, #1
 8009046:	e01d      	b.n	8009084 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8009048:	79fb      	ldrb	r3, [r7, #7]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d006      	beq.n	800905c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	685a      	ldr	r2, [r3, #4]
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	425b      	negs	r3, r3
 8009056:	4413      	add	r3, r2
 8009058:	617b      	str	r3, [r7, #20]
 800905a:	e001      	b.n	8009060 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800905c:	2301      	movs	r3, #1
 800905e:	e011      	b.n	8009084 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	697a      	ldr	r2, [r7, #20]
 8009064:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	895a      	ldrh	r2, [r3, #10]
 800906a:	8a7b      	ldrh	r3, [r7, #18]
 800906c:	4413      	add	r3, r2
 800906e:	b29a      	uxth	r2, r3
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	891a      	ldrh	r2, [r3, #8]
 8009078:	8a7b      	ldrh	r3, [r7, #18]
 800907a:	4413      	add	r3, r2
 800907c:	b29a      	uxth	r2, r3
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	811a      	strh	r2, [r3, #8]


  return 0;
 8009082:	2300      	movs	r3, #0
}
 8009084:	4618      	mov	r0, r3
 8009086:	3718      	adds	r7, #24
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}
 800908c:	08012f6c 	.word	0x08012f6c
 8009090:	080130d0 	.word	0x080130d0
 8009094:	08012fcc 	.word	0x08012fcc

08009098 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80090a2:	2200      	movs	r2, #0
 80090a4:	6839      	ldr	r1, [r7, #0]
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f7ff ff8e 	bl	8008fc8 <pbuf_add_header_impl>
 80090ac:	4603      	mov	r3, r0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3708      	adds	r7, #8
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
	...

080090b8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d106      	bne.n	80090d6 <pbuf_remove_header+0x1e>
 80090c8:	4b20      	ldr	r3, [pc, #128]	@ (800914c <pbuf_remove_header+0x94>)
 80090ca:	f240 224b 	movw	r2, #587	@ 0x24b
 80090ce:	4920      	ldr	r1, [pc, #128]	@ (8009150 <pbuf_remove_header+0x98>)
 80090d0:	4820      	ldr	r0, [pc, #128]	@ (8009154 <pbuf_remove_header+0x9c>)
 80090d2:	f008 fc7f 	bl	80119d4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d003      	beq.n	80090e4 <pbuf_remove_header+0x2c>
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090e2:	d301      	bcc.n	80090e8 <pbuf_remove_header+0x30>
    return 1;
 80090e4:	2301      	movs	r3, #1
 80090e6:	e02c      	b.n	8009142 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d101      	bne.n	80090f2 <pbuf_remove_header+0x3a>
    return 0;
 80090ee:	2300      	movs	r3, #0
 80090f0:	e027      	b.n	8009142 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	895b      	ldrh	r3, [r3, #10]
 80090fa:	89fa      	ldrh	r2, [r7, #14]
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d908      	bls.n	8009112 <pbuf_remove_header+0x5a>
 8009100:	4b12      	ldr	r3, [pc, #72]	@ (800914c <pbuf_remove_header+0x94>)
 8009102:	f240 2255 	movw	r2, #597	@ 0x255
 8009106:	4914      	ldr	r1, [pc, #80]	@ (8009158 <pbuf_remove_header+0xa0>)
 8009108:	4812      	ldr	r0, [pc, #72]	@ (8009154 <pbuf_remove_header+0x9c>)
 800910a:	f008 fc63 	bl	80119d4 <iprintf>
 800910e:	2301      	movs	r3, #1
 8009110:	e017      	b.n	8009142 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	685a      	ldr	r2, [r3, #4]
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	441a      	add	r2, r3
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	895a      	ldrh	r2, [r3, #10]
 8009128:	89fb      	ldrh	r3, [r7, #14]
 800912a:	1ad3      	subs	r3, r2, r3
 800912c:	b29a      	uxth	r2, r3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	891a      	ldrh	r2, [r3, #8]
 8009136:	89fb      	ldrh	r3, [r7, #14]
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	b29a      	uxth	r2, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8009140:	2300      	movs	r3, #0
}
 8009142:	4618      	mov	r0, r3
 8009144:	3710      	adds	r7, #16
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	08012f6c 	.word	0x08012f6c
 8009150:	080130d0 	.word	0x080130d0
 8009154:	08012fcc 	.word	0x08012fcc
 8009158:	080130dc 	.word	0x080130dc

0800915c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	460b      	mov	r3, r1
 8009166:	807b      	strh	r3, [r7, #2]
 8009168:	4613      	mov	r3, r2
 800916a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800916c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009170:	2b00      	cmp	r3, #0
 8009172:	da08      	bge.n	8009186 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8009174:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009178:	425b      	negs	r3, r3
 800917a:	4619      	mov	r1, r3
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f7ff ff9b 	bl	80090b8 <pbuf_remove_header>
 8009182:	4603      	mov	r3, r0
 8009184:	e007      	b.n	8009196 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8009186:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800918a:	787a      	ldrb	r2, [r7, #1]
 800918c:	4619      	mov	r1, r3
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f7ff ff1a 	bl	8008fc8 <pbuf_add_header_impl>
 8009194:	4603      	mov	r3, r0
  }
}
 8009196:	4618      	mov	r0, r3
 8009198:	3708      	adds	r7, #8
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b082      	sub	sp, #8
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
 80091a6:	460b      	mov	r3, r1
 80091a8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80091aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80091ae:	2201      	movs	r2, #1
 80091b0:	4619      	mov	r1, r3
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f7ff ffd2 	bl	800915c <pbuf_header_impl>
 80091b8:	4603      	mov	r3, r0
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3708      	adds	r7, #8
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
	...

080091c4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b088      	sub	sp, #32
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d10b      	bne.n	80091ea <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d106      	bne.n	80091e6 <pbuf_free+0x22>
 80091d8:	4b3b      	ldr	r3, [pc, #236]	@ (80092c8 <pbuf_free+0x104>)
 80091da:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 80091de:	493b      	ldr	r1, [pc, #236]	@ (80092cc <pbuf_free+0x108>)
 80091e0:	483b      	ldr	r0, [pc, #236]	@ (80092d0 <pbuf_free+0x10c>)
 80091e2:	f008 fbf7 	bl	80119d4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80091e6:	2300      	movs	r3, #0
 80091e8:	e069      	b.n	80092be <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80091ea:	2300      	movs	r3, #0
 80091ec:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80091ee:	e062      	b.n	80092b6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80091f0:	f008 fad2 	bl	8011798 <sys_arch_protect>
 80091f4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	7b9b      	ldrb	r3, [r3, #14]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d106      	bne.n	800920c <pbuf_free+0x48>
 80091fe:	4b32      	ldr	r3, [pc, #200]	@ (80092c8 <pbuf_free+0x104>)
 8009200:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8009204:	4933      	ldr	r1, [pc, #204]	@ (80092d4 <pbuf_free+0x110>)
 8009206:	4832      	ldr	r0, [pc, #200]	@ (80092d0 <pbuf_free+0x10c>)
 8009208:	f008 fbe4 	bl	80119d4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	7b9b      	ldrb	r3, [r3, #14]
 8009210:	3b01      	subs	r3, #1
 8009212:	b2da      	uxtb	r2, r3
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	739a      	strb	r2, [r3, #14]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	7b9b      	ldrb	r3, [r3, #14]
 800921c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800921e:	69b8      	ldr	r0, [r7, #24]
 8009220:	f008 fac8 	bl	80117b4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8009224:	7dfb      	ldrb	r3, [r7, #23]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d143      	bne.n	80092b2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	7b1b      	ldrb	r3, [r3, #12]
 8009234:	f003 030f 	and.w	r3, r3, #15
 8009238:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	7b5b      	ldrb	r3, [r3, #13]
 800923e:	f003 0302 	and.w	r3, r3, #2
 8009242:	2b00      	cmp	r3, #0
 8009244:	d011      	beq.n	800926a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d106      	bne.n	8009260 <pbuf_free+0x9c>
 8009252:	4b1d      	ldr	r3, [pc, #116]	@ (80092c8 <pbuf_free+0x104>)
 8009254:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8009258:	491f      	ldr	r1, [pc, #124]	@ (80092d8 <pbuf_free+0x114>)
 800925a:	481d      	ldr	r0, [pc, #116]	@ (80092d0 <pbuf_free+0x10c>)
 800925c:	f008 fbba 	bl	80119d4 <iprintf>
        pc->custom_free_function(p);
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	691b      	ldr	r3, [r3, #16]
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	4798      	blx	r3
 8009268:	e01d      	b.n	80092a6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800926a:	7bfb      	ldrb	r3, [r7, #15]
 800926c:	2b02      	cmp	r3, #2
 800926e:	d104      	bne.n	800927a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8009270:	6879      	ldr	r1, [r7, #4]
 8009272:	200c      	movs	r0, #12
 8009274:	f7ff f8fe 	bl	8008474 <memp_free>
 8009278:	e015      	b.n	80092a6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800927a:	7bfb      	ldrb	r3, [r7, #15]
 800927c:	2b01      	cmp	r3, #1
 800927e:	d104      	bne.n	800928a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8009280:	6879      	ldr	r1, [r7, #4]
 8009282:	200b      	movs	r0, #11
 8009284:	f7ff f8f6 	bl	8008474 <memp_free>
 8009288:	e00d      	b.n	80092a6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800928a:	7bfb      	ldrb	r3, [r7, #15]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d103      	bne.n	8009298 <pbuf_free+0xd4>
          mem_free(p);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f7fe fd31 	bl	8007cf8 <mem_free>
 8009296:	e006      	b.n	80092a6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8009298:	4b0b      	ldr	r3, [pc, #44]	@ (80092c8 <pbuf_free+0x104>)
 800929a:	f240 320f 	movw	r2, #783	@ 0x30f
 800929e:	490f      	ldr	r1, [pc, #60]	@ (80092dc <pbuf_free+0x118>)
 80092a0:	480b      	ldr	r0, [pc, #44]	@ (80092d0 <pbuf_free+0x10c>)
 80092a2:	f008 fb97 	bl	80119d4 <iprintf>
        }
      }
      count++;
 80092a6:	7ffb      	ldrb	r3, [r7, #31]
 80092a8:	3301      	adds	r3, #1
 80092aa:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	607b      	str	r3, [r7, #4]
 80092b0:	e001      	b.n	80092b6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80092b2:	2300      	movs	r3, #0
 80092b4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d199      	bne.n	80091f0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80092bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3720      	adds	r7, #32
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	08012f6c 	.word	0x08012f6c
 80092cc:	080130d0 	.word	0x080130d0
 80092d0:	08012fcc 	.word	0x08012fcc
 80092d4:	080130fc 	.word	0x080130fc
 80092d8:	08013114 	.word	0x08013114
 80092dc:	08013138 	.word	0x08013138

080092e0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b085      	sub	sp, #20
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80092e8:	2300      	movs	r3, #0
 80092ea:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80092ec:	e005      	b.n	80092fa <pbuf_clen+0x1a>
    ++len;
 80092ee:	89fb      	ldrh	r3, [r7, #14]
 80092f0:	3301      	adds	r3, #1
 80092f2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d1f6      	bne.n	80092ee <pbuf_clen+0xe>
  }
  return len;
 8009300:	89fb      	ldrh	r3, [r7, #14]
}
 8009302:	4618      	mov	r0, r3
 8009304:	3714      	adds	r7, #20
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr
	...

08009310 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d016      	beq.n	800934c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800931e:	f008 fa3b 	bl	8011798 <sys_arch_protect>
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	7b9b      	ldrb	r3, [r3, #14]
 8009328:	3301      	adds	r3, #1
 800932a:	b2da      	uxtb	r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	739a      	strb	r2, [r3, #14]
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	f008 fa3f 	bl	80117b4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	7b9b      	ldrb	r3, [r3, #14]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d106      	bne.n	800934c <pbuf_ref+0x3c>
 800933e:	4b05      	ldr	r3, [pc, #20]	@ (8009354 <pbuf_ref+0x44>)
 8009340:	f240 3242 	movw	r2, #834	@ 0x342
 8009344:	4904      	ldr	r1, [pc, #16]	@ (8009358 <pbuf_ref+0x48>)
 8009346:	4805      	ldr	r0, [pc, #20]	@ (800935c <pbuf_ref+0x4c>)
 8009348:	f008 fb44 	bl	80119d4 <iprintf>
  }
}
 800934c:	bf00      	nop
 800934e:	3710      	adds	r7, #16
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	08012f6c 	.word	0x08012f6c
 8009358:	0801314c 	.word	0x0801314c
 800935c:	08012fcc 	.word	0x08012fcc

08009360 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d002      	beq.n	8009376 <pbuf_cat+0x16>
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d107      	bne.n	8009386 <pbuf_cat+0x26>
 8009376:	4b20      	ldr	r3, [pc, #128]	@ (80093f8 <pbuf_cat+0x98>)
 8009378:	f240 3259 	movw	r2, #857	@ 0x359
 800937c:	491f      	ldr	r1, [pc, #124]	@ (80093fc <pbuf_cat+0x9c>)
 800937e:	4820      	ldr	r0, [pc, #128]	@ (8009400 <pbuf_cat+0xa0>)
 8009380:	f008 fb28 	bl	80119d4 <iprintf>
 8009384:	e034      	b.n	80093f0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	60fb      	str	r3, [r7, #12]
 800938a:	e00a      	b.n	80093a2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	891a      	ldrh	r2, [r3, #8]
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	891b      	ldrh	r3, [r3, #8]
 8009394:	4413      	add	r3, r2
 8009396:	b29a      	uxth	r2, r3
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	60fb      	str	r3, [r7, #12]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d1f0      	bne.n	800938c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	891a      	ldrh	r2, [r3, #8]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	895b      	ldrh	r3, [r3, #10]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d006      	beq.n	80093c4 <pbuf_cat+0x64>
 80093b6:	4b10      	ldr	r3, [pc, #64]	@ (80093f8 <pbuf_cat+0x98>)
 80093b8:	f240 3262 	movw	r2, #866	@ 0x362
 80093bc:	4911      	ldr	r1, [pc, #68]	@ (8009404 <pbuf_cat+0xa4>)
 80093be:	4810      	ldr	r0, [pc, #64]	@ (8009400 <pbuf_cat+0xa0>)
 80093c0:	f008 fb08 	bl	80119d4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d006      	beq.n	80093da <pbuf_cat+0x7a>
 80093cc:	4b0a      	ldr	r3, [pc, #40]	@ (80093f8 <pbuf_cat+0x98>)
 80093ce:	f240 3263 	movw	r2, #867	@ 0x363
 80093d2:	490d      	ldr	r1, [pc, #52]	@ (8009408 <pbuf_cat+0xa8>)
 80093d4:	480a      	ldr	r0, [pc, #40]	@ (8009400 <pbuf_cat+0xa0>)
 80093d6:	f008 fafd 	bl	80119d4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	891a      	ldrh	r2, [r3, #8]
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	891b      	ldrh	r3, [r3, #8]
 80093e2:	4413      	add	r3, r2
 80093e4:	b29a      	uxth	r2, r3
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	683a      	ldr	r2, [r7, #0]
 80093ee:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop
 80093f8:	08012f6c 	.word	0x08012f6c
 80093fc:	08013160 	.word	0x08013160
 8009400:	08012fcc 	.word	0x08012fcc
 8009404:	08013198 	.word	0x08013198
 8009408:	080131c8 	.word	0x080131c8

0800940c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b086      	sub	sp, #24
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8009416:	2300      	movs	r3, #0
 8009418:	617b      	str	r3, [r7, #20]
 800941a:	2300      	movs	r3, #0
 800941c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d008      	beq.n	8009436 <pbuf_copy+0x2a>
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d005      	beq.n	8009436 <pbuf_copy+0x2a>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	891a      	ldrh	r2, [r3, #8]
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	891b      	ldrh	r3, [r3, #8]
 8009432:	429a      	cmp	r2, r3
 8009434:	d209      	bcs.n	800944a <pbuf_copy+0x3e>
 8009436:	4b57      	ldr	r3, [pc, #348]	@ (8009594 <pbuf_copy+0x188>)
 8009438:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800943c:	4956      	ldr	r1, [pc, #344]	@ (8009598 <pbuf_copy+0x18c>)
 800943e:	4857      	ldr	r0, [pc, #348]	@ (800959c <pbuf_copy+0x190>)
 8009440:	f008 fac8 	bl	80119d4 <iprintf>
 8009444:	f06f 030f 	mvn.w	r3, #15
 8009448:	e09f      	b.n	800958a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	895b      	ldrh	r3, [r3, #10]
 800944e:	461a      	mov	r2, r3
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	1ad2      	subs	r2, r2, r3
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	895b      	ldrh	r3, [r3, #10]
 8009458:	4619      	mov	r1, r3
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	1acb      	subs	r3, r1, r3
 800945e:	429a      	cmp	r2, r3
 8009460:	d306      	bcc.n	8009470 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	895b      	ldrh	r3, [r3, #10]
 8009466:	461a      	mov	r2, r3
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	1ad3      	subs	r3, r2, r3
 800946c:	60fb      	str	r3, [r7, #12]
 800946e:	e005      	b.n	800947c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	895b      	ldrh	r3, [r3, #10]
 8009474:	461a      	mov	r2, r3
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	1ad3      	subs	r3, r2, r3
 800947a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	685a      	ldr	r2, [r3, #4]
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	18d0      	adds	r0, r2, r3
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	685a      	ldr	r2, [r3, #4]
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	4413      	add	r3, r2
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	4619      	mov	r1, r3
 8009490:	f008 fb7b 	bl	8011b8a <memcpy>
    offset_to += len;
 8009494:	697a      	ldr	r2, [r7, #20]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	4413      	add	r3, r2
 800949a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800949c:	693a      	ldr	r2, [r7, #16]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	4413      	add	r3, r2
 80094a2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	895b      	ldrh	r3, [r3, #10]
 80094a8:	461a      	mov	r2, r3
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d906      	bls.n	80094be <pbuf_copy+0xb2>
 80094b0:	4b38      	ldr	r3, [pc, #224]	@ (8009594 <pbuf_copy+0x188>)
 80094b2:	f240 32d9 	movw	r2, #985	@ 0x3d9
 80094b6:	493a      	ldr	r1, [pc, #232]	@ (80095a0 <pbuf_copy+0x194>)
 80094b8:	4838      	ldr	r0, [pc, #224]	@ (800959c <pbuf_copy+0x190>)
 80094ba:	f008 fa8b 	bl	80119d4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	895b      	ldrh	r3, [r3, #10]
 80094c2:	461a      	mov	r2, r3
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d906      	bls.n	80094d8 <pbuf_copy+0xcc>
 80094ca:	4b32      	ldr	r3, [pc, #200]	@ (8009594 <pbuf_copy+0x188>)
 80094cc:	f240 32da 	movw	r2, #986	@ 0x3da
 80094d0:	4934      	ldr	r1, [pc, #208]	@ (80095a4 <pbuf_copy+0x198>)
 80094d2:	4832      	ldr	r0, [pc, #200]	@ (800959c <pbuf_copy+0x190>)
 80094d4:	f008 fa7e 	bl	80119d4 <iprintf>
    if (offset_from >= p_from->len) {
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	895b      	ldrh	r3, [r3, #10]
 80094dc:	461a      	mov	r2, r3
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d304      	bcc.n	80094ee <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80094e4:	2300      	movs	r3, #0
 80094e6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	895b      	ldrh	r3, [r3, #10]
 80094f2:	461a      	mov	r2, r3
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d114      	bne.n	8009524 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80094fa:	2300      	movs	r3, #0
 80094fc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d10c      	bne.n	8009524 <pbuf_copy+0x118>
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d009      	beq.n	8009524 <pbuf_copy+0x118>
 8009510:	4b20      	ldr	r3, [pc, #128]	@ (8009594 <pbuf_copy+0x188>)
 8009512:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8009516:	4924      	ldr	r1, [pc, #144]	@ (80095a8 <pbuf_copy+0x19c>)
 8009518:	4820      	ldr	r0, [pc, #128]	@ (800959c <pbuf_copy+0x190>)
 800951a:	f008 fa5b 	bl	80119d4 <iprintf>
 800951e:	f06f 030f 	mvn.w	r3, #15
 8009522:	e032      	b.n	800958a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d013      	beq.n	8009552 <pbuf_copy+0x146>
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	895a      	ldrh	r2, [r3, #10]
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	891b      	ldrh	r3, [r3, #8]
 8009532:	429a      	cmp	r2, r3
 8009534:	d10d      	bne.n	8009552 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d009      	beq.n	8009552 <pbuf_copy+0x146>
 800953e:	4b15      	ldr	r3, [pc, #84]	@ (8009594 <pbuf_copy+0x188>)
 8009540:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8009544:	4919      	ldr	r1, [pc, #100]	@ (80095ac <pbuf_copy+0x1a0>)
 8009546:	4815      	ldr	r0, [pc, #84]	@ (800959c <pbuf_copy+0x190>)
 8009548:	f008 fa44 	bl	80119d4 <iprintf>
 800954c:	f06f 0305 	mvn.w	r3, #5
 8009550:	e01b      	b.n	800958a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d013      	beq.n	8009580 <pbuf_copy+0x174>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	895a      	ldrh	r2, [r3, #10]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	891b      	ldrh	r3, [r3, #8]
 8009560:	429a      	cmp	r2, r3
 8009562:	d10d      	bne.n	8009580 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d009      	beq.n	8009580 <pbuf_copy+0x174>
 800956c:	4b09      	ldr	r3, [pc, #36]	@ (8009594 <pbuf_copy+0x188>)
 800956e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8009572:	490e      	ldr	r1, [pc, #56]	@ (80095ac <pbuf_copy+0x1a0>)
 8009574:	4809      	ldr	r0, [pc, #36]	@ (800959c <pbuf_copy+0x190>)
 8009576:	f008 fa2d 	bl	80119d4 <iprintf>
 800957a:	f06f 0305 	mvn.w	r3, #5
 800957e:	e004      	b.n	800958a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	f47f af61 	bne.w	800944a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8009588:	2300      	movs	r3, #0
}
 800958a:	4618      	mov	r0, r3
 800958c:	3718      	adds	r7, #24
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop
 8009594:	08012f6c 	.word	0x08012f6c
 8009598:	08013214 	.word	0x08013214
 800959c:	08012fcc 	.word	0x08012fcc
 80095a0:	08013244 	.word	0x08013244
 80095a4:	0801325c 	.word	0x0801325c
 80095a8:	08013278 	.word	0x08013278
 80095ac:	08013288 	.word	0x08013288

080095b0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b088      	sub	sp, #32
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	4611      	mov	r1, r2
 80095bc:	461a      	mov	r2, r3
 80095be:	460b      	mov	r3, r1
 80095c0:	80fb      	strh	r3, [r7, #6]
 80095c2:	4613      	mov	r3, r2
 80095c4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80095c6:	2300      	movs	r3, #0
 80095c8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80095ca:	2300      	movs	r3, #0
 80095cc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d108      	bne.n	80095e6 <pbuf_copy_partial+0x36>
 80095d4:	4b2b      	ldr	r3, [pc, #172]	@ (8009684 <pbuf_copy_partial+0xd4>)
 80095d6:	f240 420a 	movw	r2, #1034	@ 0x40a
 80095da:	492b      	ldr	r1, [pc, #172]	@ (8009688 <pbuf_copy_partial+0xd8>)
 80095dc:	482b      	ldr	r0, [pc, #172]	@ (800968c <pbuf_copy_partial+0xdc>)
 80095de:	f008 f9f9 	bl	80119d4 <iprintf>
 80095e2:	2300      	movs	r3, #0
 80095e4:	e04a      	b.n	800967c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d108      	bne.n	80095fe <pbuf_copy_partial+0x4e>
 80095ec:	4b25      	ldr	r3, [pc, #148]	@ (8009684 <pbuf_copy_partial+0xd4>)
 80095ee:	f240 420b 	movw	r2, #1035	@ 0x40b
 80095f2:	4927      	ldr	r1, [pc, #156]	@ (8009690 <pbuf_copy_partial+0xe0>)
 80095f4:	4825      	ldr	r0, [pc, #148]	@ (800968c <pbuf_copy_partial+0xdc>)
 80095f6:	f008 f9ed 	bl	80119d4 <iprintf>
 80095fa:	2300      	movs	r3, #0
 80095fc:	e03e      	b.n	800967c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	61fb      	str	r3, [r7, #28]
 8009602:	e034      	b.n	800966e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8009604:	88bb      	ldrh	r3, [r7, #4]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d00a      	beq.n	8009620 <pbuf_copy_partial+0x70>
 800960a:	69fb      	ldr	r3, [r7, #28]
 800960c:	895b      	ldrh	r3, [r3, #10]
 800960e:	88ba      	ldrh	r2, [r7, #4]
 8009610:	429a      	cmp	r2, r3
 8009612:	d305      	bcc.n	8009620 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	895b      	ldrh	r3, [r3, #10]
 8009618:	88ba      	ldrh	r2, [r7, #4]
 800961a:	1ad3      	subs	r3, r2, r3
 800961c:	80bb      	strh	r3, [r7, #4]
 800961e:	e023      	b.n	8009668 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	895a      	ldrh	r2, [r3, #10]
 8009624:	88bb      	ldrh	r3, [r7, #4]
 8009626:	1ad3      	subs	r3, r2, r3
 8009628:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800962a:	8b3a      	ldrh	r2, [r7, #24]
 800962c:	88fb      	ldrh	r3, [r7, #6]
 800962e:	429a      	cmp	r2, r3
 8009630:	d901      	bls.n	8009636 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8009632:	88fb      	ldrh	r3, [r7, #6]
 8009634:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8009636:	8b7b      	ldrh	r3, [r7, #26]
 8009638:	68ba      	ldr	r2, [r7, #8]
 800963a:	18d0      	adds	r0, r2, r3
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	685a      	ldr	r2, [r3, #4]
 8009640:	88bb      	ldrh	r3, [r7, #4]
 8009642:	4413      	add	r3, r2
 8009644:	8b3a      	ldrh	r2, [r7, #24]
 8009646:	4619      	mov	r1, r3
 8009648:	f008 fa9f 	bl	8011b8a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800964c:	8afa      	ldrh	r2, [r7, #22]
 800964e:	8b3b      	ldrh	r3, [r7, #24]
 8009650:	4413      	add	r3, r2
 8009652:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8009654:	8b7a      	ldrh	r2, [r7, #26]
 8009656:	8b3b      	ldrh	r3, [r7, #24]
 8009658:	4413      	add	r3, r2
 800965a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800965c:	88fa      	ldrh	r2, [r7, #6]
 800965e:	8b3b      	ldrh	r3, [r7, #24]
 8009660:	1ad3      	subs	r3, r2, r3
 8009662:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8009664:	2300      	movs	r3, #0
 8009666:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	61fb      	str	r3, [r7, #28]
 800966e:	88fb      	ldrh	r3, [r7, #6]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d002      	beq.n	800967a <pbuf_copy_partial+0xca>
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d1c4      	bne.n	8009604 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800967a:	8afb      	ldrh	r3, [r7, #22]
}
 800967c:	4618      	mov	r0, r3
 800967e:	3720      	adds	r7, #32
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	08012f6c 	.word	0x08012f6c
 8009688:	080132b4 	.word	0x080132b4
 800968c:	08012fcc 	.word	0x08012fcc
 8009690:	080132d4 	.word	0x080132d4

08009694 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	4603      	mov	r3, r0
 800969c:	603a      	str	r2, [r7, #0]
 800969e:	71fb      	strb	r3, [r7, #7]
 80096a0:	460b      	mov	r3, r1
 80096a2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	8919      	ldrh	r1, [r3, #8]
 80096a8:	88ba      	ldrh	r2, [r7, #4]
 80096aa:	79fb      	ldrb	r3, [r7, #7]
 80096ac:	4618      	mov	r0, r3
 80096ae:	f7ff faa1 	bl	8008bf4 <pbuf_alloc>
 80096b2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d101      	bne.n	80096be <pbuf_clone+0x2a>
    return NULL;
 80096ba:	2300      	movs	r3, #0
 80096bc:	e011      	b.n	80096e2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80096be:	6839      	ldr	r1, [r7, #0]
 80096c0:	68f8      	ldr	r0, [r7, #12]
 80096c2:	f7ff fea3 	bl	800940c <pbuf_copy>
 80096c6:	4603      	mov	r3, r0
 80096c8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80096ca:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d006      	beq.n	80096e0 <pbuf_clone+0x4c>
 80096d2:	4b06      	ldr	r3, [pc, #24]	@ (80096ec <pbuf_clone+0x58>)
 80096d4:	f240 5224 	movw	r2, #1316	@ 0x524
 80096d8:	4905      	ldr	r1, [pc, #20]	@ (80096f0 <pbuf_clone+0x5c>)
 80096da:	4806      	ldr	r0, [pc, #24]	@ (80096f4 <pbuf_clone+0x60>)
 80096dc:	f008 f97a 	bl	80119d4 <iprintf>
  return q;
 80096e0:	68fb      	ldr	r3, [r7, #12]
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3710      	adds	r7, #16
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop
 80096ec:	08012f6c 	.word	0x08012f6c
 80096f0:	080133e0 	.word	0x080133e0
 80096f4:	08012fcc 	.word	0x08012fcc

080096f8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80096fc:	f008 f86a 	bl	80117d4 <rand>
 8009700:	4603      	mov	r3, r0
 8009702:	b29b      	uxth	r3, r3
 8009704:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009708:	b29b      	uxth	r3, r3
 800970a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800970e:	b29a      	uxth	r2, r3
 8009710:	4b01      	ldr	r3, [pc, #4]	@ (8009718 <tcp_init+0x20>)
 8009712:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8009714:	bf00      	nop
 8009716:	bd80      	pop	{r7, pc}
 8009718:	20000024 	.word	0x20000024

0800971c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	7d1b      	ldrb	r3, [r3, #20]
 8009728:	2b01      	cmp	r3, #1
 800972a:	d105      	bne.n	8009738 <tcp_free+0x1c>
 800972c:	4b06      	ldr	r3, [pc, #24]	@ (8009748 <tcp_free+0x2c>)
 800972e:	22d4      	movs	r2, #212	@ 0xd4
 8009730:	4906      	ldr	r1, [pc, #24]	@ (800974c <tcp_free+0x30>)
 8009732:	4807      	ldr	r0, [pc, #28]	@ (8009750 <tcp_free+0x34>)
 8009734:	f008 f94e 	bl	80119d4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8009738:	6879      	ldr	r1, [r7, #4]
 800973a:	2001      	movs	r0, #1
 800973c:	f7fe fe9a 	bl	8008474 <memp_free>
}
 8009740:	bf00      	nop
 8009742:	3708      	adds	r7, #8
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}
 8009748:	0801346c 	.word	0x0801346c
 800974c:	0801349c 	.word	0x0801349c
 8009750:	080134b0 	.word	0x080134b0

08009754 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	7d1b      	ldrb	r3, [r3, #20]
 8009760:	2b01      	cmp	r3, #1
 8009762:	d105      	bne.n	8009770 <tcp_free_listen+0x1c>
 8009764:	4b06      	ldr	r3, [pc, #24]	@ (8009780 <tcp_free_listen+0x2c>)
 8009766:	22df      	movs	r2, #223	@ 0xdf
 8009768:	4906      	ldr	r1, [pc, #24]	@ (8009784 <tcp_free_listen+0x30>)
 800976a:	4807      	ldr	r0, [pc, #28]	@ (8009788 <tcp_free_listen+0x34>)
 800976c:	f008 f932 	bl	80119d4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009770:	6879      	ldr	r1, [r7, #4]
 8009772:	2002      	movs	r0, #2
 8009774:	f7fe fe7e 	bl	8008474 <memp_free>
}
 8009778:	bf00      	nop
 800977a:	3708      	adds	r7, #8
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	0801346c 	.word	0x0801346c
 8009784:	080134d8 	.word	0x080134d8
 8009788:	080134b0 	.word	0x080134b0

0800978c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8009790:	f000 fea6 	bl	800a4e0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8009794:	4b07      	ldr	r3, [pc, #28]	@ (80097b4 <tcp_tmr+0x28>)
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	3301      	adds	r3, #1
 800979a:	b2da      	uxtb	r2, r3
 800979c:	4b05      	ldr	r3, [pc, #20]	@ (80097b4 <tcp_tmr+0x28>)
 800979e:	701a      	strb	r2, [r3, #0]
 80097a0:	4b04      	ldr	r3, [pc, #16]	@ (80097b4 <tcp_tmr+0x28>)
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	f003 0301 	and.w	r3, r3, #1
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d001      	beq.n	80097b0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80097ac:	f000 fb56 	bl	8009e5c <tcp_slowtmr>
  }
}
 80097b0:	bf00      	nop
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	2000fdbd 	.word	0x2000fdbd

080097b8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d105      	bne.n	80097d4 <tcp_remove_listener+0x1c>
 80097c8:	4b0d      	ldr	r3, [pc, #52]	@ (8009800 <tcp_remove_listener+0x48>)
 80097ca:	22ff      	movs	r2, #255	@ 0xff
 80097cc:	490d      	ldr	r1, [pc, #52]	@ (8009804 <tcp_remove_listener+0x4c>)
 80097ce:	480e      	ldr	r0, [pc, #56]	@ (8009808 <tcp_remove_listener+0x50>)
 80097d0:	f008 f900 	bl	80119d4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	60fb      	str	r3, [r7, #12]
 80097d8:	e00a      	b.n	80097f0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097de:	683a      	ldr	r2, [r7, #0]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d102      	bne.n	80097ea <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2200      	movs	r2, #0
 80097e8:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	68db      	ldr	r3, [r3, #12]
 80097ee:	60fb      	str	r3, [r7, #12]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d1f1      	bne.n	80097da <tcp_remove_listener+0x22>
    }
  }
}
 80097f6:	bf00      	nop
 80097f8:	bf00      	nop
 80097fa:	3710      	adds	r7, #16
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	0801346c 	.word	0x0801346c
 8009804:	080134f4 	.word	0x080134f4
 8009808:	080134b0 	.word	0x080134b0

0800980c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d106      	bne.n	8009828 <tcp_listen_closed+0x1c>
 800981a:	4b14      	ldr	r3, [pc, #80]	@ (800986c <tcp_listen_closed+0x60>)
 800981c:	f240 1211 	movw	r2, #273	@ 0x111
 8009820:	4913      	ldr	r1, [pc, #76]	@ (8009870 <tcp_listen_closed+0x64>)
 8009822:	4814      	ldr	r0, [pc, #80]	@ (8009874 <tcp_listen_closed+0x68>)
 8009824:	f008 f8d6 	bl	80119d4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	7d1b      	ldrb	r3, [r3, #20]
 800982c:	2b01      	cmp	r3, #1
 800982e:	d006      	beq.n	800983e <tcp_listen_closed+0x32>
 8009830:	4b0e      	ldr	r3, [pc, #56]	@ (800986c <tcp_listen_closed+0x60>)
 8009832:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8009836:	4910      	ldr	r1, [pc, #64]	@ (8009878 <tcp_listen_closed+0x6c>)
 8009838:	480e      	ldr	r0, [pc, #56]	@ (8009874 <tcp_listen_closed+0x68>)
 800983a:	f008 f8cb 	bl	80119d4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800983e:	2301      	movs	r3, #1
 8009840:	60fb      	str	r3, [r7, #12]
 8009842:	e00b      	b.n	800985c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8009844:	4a0d      	ldr	r2, [pc, #52]	@ (800987c <tcp_listen_closed+0x70>)
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	6879      	ldr	r1, [r7, #4]
 8009850:	4618      	mov	r0, r3
 8009852:	f7ff ffb1 	bl	80097b8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	3301      	adds	r3, #1
 800985a:	60fb      	str	r3, [r7, #12]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2b03      	cmp	r3, #3
 8009860:	d9f0      	bls.n	8009844 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8009862:	bf00      	nop
 8009864:	bf00      	nop
 8009866:	3710      	adds	r7, #16
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}
 800986c:	0801346c 	.word	0x0801346c
 8009870:	0801351c 	.word	0x0801351c
 8009874:	080134b0 	.word	0x080134b0
 8009878:	08013528 	.word	0x08013528
 800987c:	0801548c 	.word	0x0801548c

08009880 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8009880:	b5b0      	push	{r4, r5, r7, lr}
 8009882:	b088      	sub	sp, #32
 8009884:	af04      	add	r7, sp, #16
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	460b      	mov	r3, r1
 800988a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d106      	bne.n	80098a0 <tcp_close_shutdown+0x20>
 8009892:	4b63      	ldr	r3, [pc, #396]	@ (8009a20 <tcp_close_shutdown+0x1a0>)
 8009894:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8009898:	4962      	ldr	r1, [pc, #392]	@ (8009a24 <tcp_close_shutdown+0x1a4>)
 800989a:	4863      	ldr	r0, [pc, #396]	@ (8009a28 <tcp_close_shutdown+0x1a8>)
 800989c:	f008 f89a 	bl	80119d4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80098a0:	78fb      	ldrb	r3, [r7, #3]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d067      	beq.n	8009976 <tcp_close_shutdown+0xf6>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	7d1b      	ldrb	r3, [r3, #20]
 80098aa:	2b04      	cmp	r3, #4
 80098ac:	d003      	beq.n	80098b6 <tcp_close_shutdown+0x36>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	7d1b      	ldrb	r3, [r3, #20]
 80098b2:	2b07      	cmp	r3, #7
 80098b4:	d15f      	bne.n	8009976 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d105      	bne.n	80098ca <tcp_close_shutdown+0x4a>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80098c2:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d055      	beq.n	8009976 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	8b5b      	ldrh	r3, [r3, #26]
 80098ce:	f003 0310 	and.w	r3, r3, #16
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d106      	bne.n	80098e4 <tcp_close_shutdown+0x64>
 80098d6:	4b52      	ldr	r3, [pc, #328]	@ (8009a20 <tcp_close_shutdown+0x1a0>)
 80098d8:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 80098dc:	4953      	ldr	r1, [pc, #332]	@ (8009a2c <tcp_close_shutdown+0x1ac>)
 80098de:	4852      	ldr	r0, [pc, #328]	@ (8009a28 <tcp_close_shutdown+0x1a8>)
 80098e0:	f008 f878 	bl	80119d4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80098ec:	687d      	ldr	r5, [r7, #4]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	3304      	adds	r3, #4
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	8ad2      	ldrh	r2, [r2, #22]
 80098f6:	6879      	ldr	r1, [r7, #4]
 80098f8:	8b09      	ldrh	r1, [r1, #24]
 80098fa:	9102      	str	r1, [sp, #8]
 80098fc:	9201      	str	r2, [sp, #4]
 80098fe:	9300      	str	r3, [sp, #0]
 8009900:	462b      	mov	r3, r5
 8009902:	4622      	mov	r2, r4
 8009904:	4601      	mov	r1, r0
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f004 fe92 	bl	800e630 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f001 f8cb 	bl	800aaa8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009912:	4b47      	ldr	r3, [pc, #284]	@ (8009a30 <tcp_close_shutdown+0x1b0>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	429a      	cmp	r2, r3
 800991a:	d105      	bne.n	8009928 <tcp_close_shutdown+0xa8>
 800991c:	4b44      	ldr	r3, [pc, #272]	@ (8009a30 <tcp_close_shutdown+0x1b0>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	4a43      	ldr	r2, [pc, #268]	@ (8009a30 <tcp_close_shutdown+0x1b0>)
 8009924:	6013      	str	r3, [r2, #0]
 8009926:	e013      	b.n	8009950 <tcp_close_shutdown+0xd0>
 8009928:	4b41      	ldr	r3, [pc, #260]	@ (8009a30 <tcp_close_shutdown+0x1b0>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	60fb      	str	r3, [r7, #12]
 800992e:	e00c      	b.n	800994a <tcp_close_shutdown+0xca>
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	68db      	ldr	r3, [r3, #12]
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	429a      	cmp	r2, r3
 8009938:	d104      	bne.n	8009944 <tcp_close_shutdown+0xc4>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	68da      	ldr	r2, [r3, #12]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	60da      	str	r2, [r3, #12]
 8009942:	e005      	b.n	8009950 <tcp_close_shutdown+0xd0>
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	60fb      	str	r3, [r7, #12]
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d1ef      	bne.n	8009930 <tcp_close_shutdown+0xb0>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2200      	movs	r2, #0
 8009954:	60da      	str	r2, [r3, #12]
 8009956:	4b37      	ldr	r3, [pc, #220]	@ (8009a34 <tcp_close_shutdown+0x1b4>)
 8009958:	2201      	movs	r2, #1
 800995a:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800995c:	4b36      	ldr	r3, [pc, #216]	@ (8009a38 <tcp_close_shutdown+0x1b8>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	429a      	cmp	r2, r3
 8009964:	d102      	bne.n	800996c <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8009966:	f003 fd61 	bl	800d42c <tcp_trigger_input_pcb_close>
 800996a:	e002      	b.n	8009972 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f7ff fed5 	bl	800971c <tcp_free>
      }
      return ERR_OK;
 8009972:	2300      	movs	r3, #0
 8009974:	e050      	b.n	8009a18 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	7d1b      	ldrb	r3, [r3, #20]
 800997a:	2b02      	cmp	r3, #2
 800997c:	d03b      	beq.n	80099f6 <tcp_close_shutdown+0x176>
 800997e:	2b02      	cmp	r3, #2
 8009980:	dc44      	bgt.n	8009a0c <tcp_close_shutdown+0x18c>
 8009982:	2b00      	cmp	r3, #0
 8009984:	d002      	beq.n	800998c <tcp_close_shutdown+0x10c>
 8009986:	2b01      	cmp	r3, #1
 8009988:	d02a      	beq.n	80099e0 <tcp_close_shutdown+0x160>
 800998a:	e03f      	b.n	8009a0c <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	8adb      	ldrh	r3, [r3, #22]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d021      	beq.n	80099d8 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009994:	4b29      	ldr	r3, [pc, #164]	@ (8009a3c <tcp_close_shutdown+0x1bc>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	429a      	cmp	r2, r3
 800999c:	d105      	bne.n	80099aa <tcp_close_shutdown+0x12a>
 800999e:	4b27      	ldr	r3, [pc, #156]	@ (8009a3c <tcp_close_shutdown+0x1bc>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	4a25      	ldr	r2, [pc, #148]	@ (8009a3c <tcp_close_shutdown+0x1bc>)
 80099a6:	6013      	str	r3, [r2, #0]
 80099a8:	e013      	b.n	80099d2 <tcp_close_shutdown+0x152>
 80099aa:	4b24      	ldr	r3, [pc, #144]	@ (8009a3c <tcp_close_shutdown+0x1bc>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	60bb      	str	r3, [r7, #8]
 80099b0:	e00c      	b.n	80099cc <tcp_close_shutdown+0x14c>
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	68db      	ldr	r3, [r3, #12]
 80099b6:	687a      	ldr	r2, [r7, #4]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d104      	bne.n	80099c6 <tcp_close_shutdown+0x146>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	68da      	ldr	r2, [r3, #12]
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	60da      	str	r2, [r3, #12]
 80099c4:	e005      	b.n	80099d2 <tcp_close_shutdown+0x152>
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	60bb      	str	r3, [r7, #8]
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1ef      	bne.n	80099b2 <tcp_close_shutdown+0x132>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2200      	movs	r2, #0
 80099d6:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f7ff fe9f 	bl	800971c <tcp_free>
      break;
 80099de:	e01a      	b.n	8009a16 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f7ff ff13 	bl	800980c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80099e6:	6879      	ldr	r1, [r7, #4]
 80099e8:	4815      	ldr	r0, [pc, #84]	@ (8009a40 <tcp_close_shutdown+0x1c0>)
 80099ea:	f001 f8ad 	bl	800ab48 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f7ff feb0 	bl	8009754 <tcp_free_listen>
      break;
 80099f4:	e00f      	b.n	8009a16 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80099f6:	6879      	ldr	r1, [r7, #4]
 80099f8:	480d      	ldr	r0, [pc, #52]	@ (8009a30 <tcp_close_shutdown+0x1b0>)
 80099fa:	f001 f8a5 	bl	800ab48 <tcp_pcb_remove>
 80099fe:	4b0d      	ldr	r3, [pc, #52]	@ (8009a34 <tcp_close_shutdown+0x1b4>)
 8009a00:	2201      	movs	r2, #1
 8009a02:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f7ff fe89 	bl	800971c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8009a0a:	e004      	b.n	8009a16 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 f819 	bl	8009a44 <tcp_close_shutdown_fin>
 8009a12:	4603      	mov	r3, r0
 8009a14:	e000      	b.n	8009a18 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 8009a16:	2300      	movs	r3, #0
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3710      	adds	r7, #16
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bdb0      	pop	{r4, r5, r7, pc}
 8009a20:	0801346c 	.word	0x0801346c
 8009a24:	08013540 	.word	0x08013540
 8009a28:	080134b0 	.word	0x080134b0
 8009a2c:	08013560 	.word	0x08013560
 8009a30:	2000fdb4 	.word	0x2000fdb4
 8009a34:	2000fdbc 	.word	0x2000fdbc
 8009a38:	2000fdf4 	.word	0x2000fdf4
 8009a3c:	2000fdac 	.word	0x2000fdac
 8009a40:	2000fdb0 	.word	0x2000fdb0

08009a44 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d106      	bne.n	8009a60 <tcp_close_shutdown_fin+0x1c>
 8009a52:	4b2e      	ldr	r3, [pc, #184]	@ (8009b0c <tcp_close_shutdown_fin+0xc8>)
 8009a54:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8009a58:	492d      	ldr	r1, [pc, #180]	@ (8009b10 <tcp_close_shutdown_fin+0xcc>)
 8009a5a:	482e      	ldr	r0, [pc, #184]	@ (8009b14 <tcp_close_shutdown_fin+0xd0>)
 8009a5c:	f007 ffba 	bl	80119d4 <iprintf>

  switch (pcb->state) {
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	7d1b      	ldrb	r3, [r3, #20]
 8009a64:	2b07      	cmp	r3, #7
 8009a66:	d020      	beq.n	8009aaa <tcp_close_shutdown_fin+0x66>
 8009a68:	2b07      	cmp	r3, #7
 8009a6a:	dc2b      	bgt.n	8009ac4 <tcp_close_shutdown_fin+0x80>
 8009a6c:	2b03      	cmp	r3, #3
 8009a6e:	d002      	beq.n	8009a76 <tcp_close_shutdown_fin+0x32>
 8009a70:	2b04      	cmp	r3, #4
 8009a72:	d00d      	beq.n	8009a90 <tcp_close_shutdown_fin+0x4c>
 8009a74:	e026      	b.n	8009ac4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f003 fee8 	bl	800d84c <tcp_send_fin>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d11f      	bne.n	8009ac8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2205      	movs	r2, #5
 8009a8c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009a8e:	e01b      	b.n	8009ac8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f003 fedb 	bl	800d84c <tcp_send_fin>
 8009a96:	4603      	mov	r3, r0
 8009a98:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d114      	bne.n	8009acc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2205      	movs	r2, #5
 8009aa6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009aa8:	e010      	b.n	8009acc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f003 fece 	bl	800d84c <tcp_send_fin>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009ab4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d109      	bne.n	8009ad0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2209      	movs	r2, #9
 8009ac0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009ac2:	e005      	b.n	8009ad0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	e01c      	b.n	8009b02 <tcp_close_shutdown_fin+0xbe>
      break;
 8009ac8:	bf00      	nop
 8009aca:	e002      	b.n	8009ad2 <tcp_close_shutdown_fin+0x8e>
      break;
 8009acc:	bf00      	nop
 8009ace:	e000      	b.n	8009ad2 <tcp_close_shutdown_fin+0x8e>
      break;
 8009ad0:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d103      	bne.n	8009ae2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f003 fff4 	bl	800dac8 <tcp_output>
 8009ae0:	e00d      	b.n	8009afe <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8009ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ae6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009aea:	d108      	bne.n	8009afe <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	8b5b      	ldrh	r3, [r3, #26]
 8009af0:	f043 0308 	orr.w	r3, r3, #8
 8009af4:	b29a      	uxth	r2, r3
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8009afa:	2300      	movs	r3, #0
 8009afc:	e001      	b.n	8009b02 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8009afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	0801346c 	.word	0x0801346c
 8009b10:	0801351c 	.word	0x0801351c
 8009b14:	080134b0 	.word	0x080134b0

08009b18 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d109      	bne.n	8009b3a <tcp_close+0x22>
 8009b26:	4b0f      	ldr	r3, [pc, #60]	@ (8009b64 <tcp_close+0x4c>)
 8009b28:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8009b2c:	490e      	ldr	r1, [pc, #56]	@ (8009b68 <tcp_close+0x50>)
 8009b2e:	480f      	ldr	r0, [pc, #60]	@ (8009b6c <tcp_close+0x54>)
 8009b30:	f007 ff50 	bl	80119d4 <iprintf>
 8009b34:	f06f 030f 	mvn.w	r3, #15
 8009b38:	e00f      	b.n	8009b5a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	7d1b      	ldrb	r3, [r3, #20]
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d006      	beq.n	8009b50 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	8b5b      	ldrh	r3, [r3, #26]
 8009b46:	f043 0310 	orr.w	r3, r3, #16
 8009b4a:	b29a      	uxth	r2, r3
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009b50:	2101      	movs	r1, #1
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f7ff fe94 	bl	8009880 <tcp_close_shutdown>
 8009b58:	4603      	mov	r3, r0
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3708      	adds	r7, #8
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	0801346c 	.word	0x0801346c
 8009b68:	0801357c 	.word	0x0801357c
 8009b6c:	080134b0 	.word	0x080134b0

08009b70 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b08e      	sub	sp, #56	@ 0x38
 8009b74:	af04      	add	r7, sp, #16
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d107      	bne.n	8009b90 <tcp_abandon+0x20>
 8009b80:	4b52      	ldr	r3, [pc, #328]	@ (8009ccc <tcp_abandon+0x15c>)
 8009b82:	f240 223d 	movw	r2, #573	@ 0x23d
 8009b86:	4952      	ldr	r1, [pc, #328]	@ (8009cd0 <tcp_abandon+0x160>)
 8009b88:	4852      	ldr	r0, [pc, #328]	@ (8009cd4 <tcp_abandon+0x164>)
 8009b8a:	f007 ff23 	bl	80119d4 <iprintf>
 8009b8e:	e099      	b.n	8009cc4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	7d1b      	ldrb	r3, [r3, #20]
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d106      	bne.n	8009ba6 <tcp_abandon+0x36>
 8009b98:	4b4c      	ldr	r3, [pc, #304]	@ (8009ccc <tcp_abandon+0x15c>)
 8009b9a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8009b9e:	494e      	ldr	r1, [pc, #312]	@ (8009cd8 <tcp_abandon+0x168>)
 8009ba0:	484c      	ldr	r0, [pc, #304]	@ (8009cd4 <tcp_abandon+0x164>)
 8009ba2:	f007 ff17 	bl	80119d4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	7d1b      	ldrb	r3, [r3, #20]
 8009baa:	2b0a      	cmp	r3, #10
 8009bac:	d107      	bne.n	8009bbe <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009bae:	6879      	ldr	r1, [r7, #4]
 8009bb0:	484a      	ldr	r0, [pc, #296]	@ (8009cdc <tcp_abandon+0x16c>)
 8009bb2:	f000 ffc9 	bl	800ab48 <tcp_pcb_remove>
    tcp_free(pcb);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f7ff fdb0 	bl	800971c <tcp_free>
 8009bbc:	e082      	b.n	8009cc4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bca:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bd0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bd8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	691b      	ldr	r3, [r3, #16]
 8009bde:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	7d1b      	ldrb	r3, [r3, #20]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d126      	bne.n	8009c36 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	8adb      	ldrh	r3, [r3, #22]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d02e      	beq.n	8009c4e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009bf0:	4b3b      	ldr	r3, [pc, #236]	@ (8009ce0 <tcp_abandon+0x170>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d105      	bne.n	8009c06 <tcp_abandon+0x96>
 8009bfa:	4b39      	ldr	r3, [pc, #228]	@ (8009ce0 <tcp_abandon+0x170>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	4a37      	ldr	r2, [pc, #220]	@ (8009ce0 <tcp_abandon+0x170>)
 8009c02:	6013      	str	r3, [r2, #0]
 8009c04:	e013      	b.n	8009c2e <tcp_abandon+0xbe>
 8009c06:	4b36      	ldr	r3, [pc, #216]	@ (8009ce0 <tcp_abandon+0x170>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	61fb      	str	r3, [r7, #28]
 8009c0c:	e00c      	b.n	8009c28 <tcp_abandon+0xb8>
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d104      	bne.n	8009c22 <tcp_abandon+0xb2>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	68da      	ldr	r2, [r3, #12]
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	60da      	str	r2, [r3, #12]
 8009c20:	e005      	b.n	8009c2e <tcp_abandon+0xbe>
 8009c22:	69fb      	ldr	r3, [r7, #28]
 8009c24:	68db      	ldr	r3, [r3, #12]
 8009c26:	61fb      	str	r3, [r7, #28]
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d1ef      	bne.n	8009c0e <tcp_abandon+0x9e>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	60da      	str	r2, [r3, #12]
 8009c34:	e00b      	b.n	8009c4e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	8adb      	ldrh	r3, [r3, #22]
 8009c3e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009c40:	6879      	ldr	r1, [r7, #4]
 8009c42:	4828      	ldr	r0, [pc, #160]	@ (8009ce4 <tcp_abandon+0x174>)
 8009c44:	f000 ff80 	bl	800ab48 <tcp_pcb_remove>
 8009c48:	4b27      	ldr	r3, [pc, #156]	@ (8009ce8 <tcp_abandon+0x178>)
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d004      	beq.n	8009c60 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f000 fd22 	bl	800a6a4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d004      	beq.n	8009c72 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f000 fd19 	bl	800a6a4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d004      	beq.n	8009c84 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f000 fd10 	bl	800a6a4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8009c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d00e      	beq.n	8009ca8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009c8a:	6879      	ldr	r1, [r7, #4]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	3304      	adds	r3, #4
 8009c90:	687a      	ldr	r2, [r7, #4]
 8009c92:	8b12      	ldrh	r2, [r2, #24]
 8009c94:	9202      	str	r2, [sp, #8]
 8009c96:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8009c98:	9201      	str	r2, [sp, #4]
 8009c9a:	9300      	str	r3, [sp, #0]
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	697a      	ldr	r2, [r7, #20]
 8009ca0:	69b9      	ldr	r1, [r7, #24]
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f004 fcc4 	bl	800e630 <tcp_rst>
    }
    last_state = pcb->state;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	7d1b      	ldrb	r3, [r3, #20]
 8009cac:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f7ff fd34 	bl	800971c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d004      	beq.n	8009cc4 <tcp_abandon+0x154>
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	f06f 010c 	mvn.w	r1, #12
 8009cc0:	68f8      	ldr	r0, [r7, #12]
 8009cc2:	4798      	blx	r3
  }
}
 8009cc4:	3728      	adds	r7, #40	@ 0x28
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	0801346c 	.word	0x0801346c
 8009cd0:	080135b0 	.word	0x080135b0
 8009cd4:	080134b0 	.word	0x080134b0
 8009cd8:	080135cc 	.word	0x080135cc
 8009cdc:	2000fdb8 	.word	0x2000fdb8
 8009ce0:	2000fdac 	.word	0x2000fdac
 8009ce4:	2000fdb4 	.word	0x2000fdb4
 8009ce8:	2000fdbc 	.word	0x2000fdbc

08009cec <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009cf4:	2101      	movs	r1, #1
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f7ff ff3a 	bl	8009b70 <tcp_abandon>
}
 8009cfc:	bf00      	nop
 8009cfe:	3708      	adds	r7, #8
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d106      	bne.n	8009d20 <tcp_update_rcv_ann_wnd+0x1c>
 8009d12:	4b25      	ldr	r3, [pc, #148]	@ (8009da8 <tcp_update_rcv_ann_wnd+0xa4>)
 8009d14:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8009d18:	4924      	ldr	r1, [pc, #144]	@ (8009dac <tcp_update_rcv_ann_wnd+0xa8>)
 8009d1a:	4825      	ldr	r0, [pc, #148]	@ (8009db0 <tcp_update_rcv_ann_wnd+0xac>)
 8009d1c:	f007 fe5a 	bl	80119d4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8009d28:	4413      	add	r3, r2
 8009d2a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8009d34:	f640 3168 	movw	r1, #2920	@ 0xb68
 8009d38:	428a      	cmp	r2, r1
 8009d3a:	bf28      	it	cs
 8009d3c:	460a      	movcs	r2, r1
 8009d3e:	b292      	uxth	r2, r2
 8009d40:	4413      	add	r3, r2
 8009d42:	68fa      	ldr	r2, [r7, #12]
 8009d44:	1ad3      	subs	r3, r2, r3
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	db08      	blt.n	8009d5c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d56:	68fa      	ldr	r2, [r7, #12]
 8009d58:	1ad3      	subs	r3, r2, r3
 8009d5a:	e020      	b.n	8009d9e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d64:	1ad3      	subs	r3, r2, r3
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	dd03      	ble.n	8009d72 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009d70:	e014      	b.n	8009d9c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d7a:	1ad3      	subs	r3, r2, r3
 8009d7c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d84:	d306      	bcc.n	8009d94 <tcp_update_rcv_ann_wnd+0x90>
 8009d86:	4b08      	ldr	r3, [pc, #32]	@ (8009da8 <tcp_update_rcv_ann_wnd+0xa4>)
 8009d88:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8009d8c:	4909      	ldr	r1, [pc, #36]	@ (8009db4 <tcp_update_rcv_ann_wnd+0xb0>)
 8009d8e:	4808      	ldr	r0, [pc, #32]	@ (8009db0 <tcp_update_rcv_ann_wnd+0xac>)
 8009d90:	f007 fe20 	bl	80119d4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	b29a      	uxth	r2, r3
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8009d9c:	2300      	movs	r3, #0
  }
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	0801346c 	.word	0x0801346c
 8009dac:	080136c8 	.word	0x080136c8
 8009db0:	080134b0 	.word	0x080134b0
 8009db4:	080136ec 	.word	0x080136ec

08009db8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d107      	bne.n	8009dda <tcp_recved+0x22>
 8009dca:	4b20      	ldr	r3, [pc, #128]	@ (8009e4c <tcp_recved+0x94>)
 8009dcc:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8009dd0:	491f      	ldr	r1, [pc, #124]	@ (8009e50 <tcp_recved+0x98>)
 8009dd2:	4820      	ldr	r0, [pc, #128]	@ (8009e54 <tcp_recved+0x9c>)
 8009dd4:	f007 fdfe 	bl	80119d4 <iprintf>
 8009dd8:	e034      	b.n	8009e44 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	7d1b      	ldrb	r3, [r3, #20]
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	d106      	bne.n	8009df0 <tcp_recved+0x38>
 8009de2:	4b1a      	ldr	r3, [pc, #104]	@ (8009e4c <tcp_recved+0x94>)
 8009de4:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8009de8:	491b      	ldr	r1, [pc, #108]	@ (8009e58 <tcp_recved+0xa0>)
 8009dea:	481a      	ldr	r0, [pc, #104]	@ (8009e54 <tcp_recved+0x9c>)
 8009dec:	f007 fdf2 	bl	80119d4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009df4:	887b      	ldrh	r3, [r7, #2]
 8009df6:	4413      	add	r3, r2
 8009df8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009dfa:	89fb      	ldrh	r3, [r7, #14]
 8009dfc:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d804      	bhi.n	8009e0e <tcp_recved+0x56>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e08:	89fa      	ldrh	r2, [r7, #14]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d204      	bcs.n	8009e18 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8009e14:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009e16:	e002      	b.n	8009e1e <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	89fa      	ldrh	r2, [r7, #14]
 8009e1c:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f7ff ff70 	bl	8009d04 <tcp_update_rcv_ann_wnd>
 8009e24:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d909      	bls.n	8009e44 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	8b5b      	ldrh	r3, [r3, #26]
 8009e34:	f043 0302 	orr.w	r3, r3, #2
 8009e38:	b29a      	uxth	r2, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f003 fe42 	bl	800dac8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8009e44:	3710      	adds	r7, #16
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	0801346c 	.word	0x0801346c
 8009e50:	08013708 	.word	0x08013708
 8009e54:	080134b0 	.word	0x080134b0
 8009e58:	08013720 	.word	0x08013720

08009e5c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009e5c:	b5b0      	push	{r4, r5, r7, lr}
 8009e5e:	b090      	sub	sp, #64	@ 0x40
 8009e60:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8009e62:	2300      	movs	r3, #0
 8009e64:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8009e68:	4b95      	ldr	r3, [pc, #596]	@ (800a0c0 <tcp_slowtmr+0x264>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	4a94      	ldr	r2, [pc, #592]	@ (800a0c0 <tcp_slowtmr+0x264>)
 8009e70:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009e72:	4b94      	ldr	r3, [pc, #592]	@ (800a0c4 <tcp_slowtmr+0x268>)
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	3301      	adds	r3, #1
 8009e78:	b2da      	uxtb	r2, r3
 8009e7a:	4b92      	ldr	r3, [pc, #584]	@ (800a0c4 <tcp_slowtmr+0x268>)
 8009e7c:	701a      	strb	r2, [r3, #0]
 8009e7e:	e000      	b.n	8009e82 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8009e80:	bf00      	nop
  prev = NULL;
 8009e82:	2300      	movs	r3, #0
 8009e84:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8009e86:	4b90      	ldr	r3, [pc, #576]	@ (800a0c8 <tcp_slowtmr+0x26c>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8009e8c:	e29d      	b.n	800a3ca <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e90:	7d1b      	ldrb	r3, [r3, #20]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d106      	bne.n	8009ea4 <tcp_slowtmr+0x48>
 8009e96:	4b8d      	ldr	r3, [pc, #564]	@ (800a0cc <tcp_slowtmr+0x270>)
 8009e98:	f240 42be 	movw	r2, #1214	@ 0x4be
 8009e9c:	498c      	ldr	r1, [pc, #560]	@ (800a0d0 <tcp_slowtmr+0x274>)
 8009e9e:	488d      	ldr	r0, [pc, #564]	@ (800a0d4 <tcp_slowtmr+0x278>)
 8009ea0:	f007 fd98 	bl	80119d4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ea6:	7d1b      	ldrb	r3, [r3, #20]
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d106      	bne.n	8009eba <tcp_slowtmr+0x5e>
 8009eac:	4b87      	ldr	r3, [pc, #540]	@ (800a0cc <tcp_slowtmr+0x270>)
 8009eae:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8009eb2:	4989      	ldr	r1, [pc, #548]	@ (800a0d8 <tcp_slowtmr+0x27c>)
 8009eb4:	4887      	ldr	r0, [pc, #540]	@ (800a0d4 <tcp_slowtmr+0x278>)
 8009eb6:	f007 fd8d 	bl	80119d4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ebc:	7d1b      	ldrb	r3, [r3, #20]
 8009ebe:	2b0a      	cmp	r3, #10
 8009ec0:	d106      	bne.n	8009ed0 <tcp_slowtmr+0x74>
 8009ec2:	4b82      	ldr	r3, [pc, #520]	@ (800a0cc <tcp_slowtmr+0x270>)
 8009ec4:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8009ec8:	4984      	ldr	r1, [pc, #528]	@ (800a0dc <tcp_slowtmr+0x280>)
 8009eca:	4882      	ldr	r0, [pc, #520]	@ (800a0d4 <tcp_slowtmr+0x278>)
 8009ecc:	f007 fd82 	bl	80119d4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ed2:	7f9a      	ldrb	r2, [r3, #30]
 8009ed4:	4b7b      	ldr	r3, [pc, #492]	@ (800a0c4 <tcp_slowtmr+0x268>)
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d105      	bne.n	8009ee8 <tcp_slowtmr+0x8c>
      prev = pcb;
 8009edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ede:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8009ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ee2:	68db      	ldr	r3, [r3, #12]
 8009ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8009ee6:	e270      	b.n	800a3ca <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8009ee8:	4b76      	ldr	r3, [pc, #472]	@ (800a0c4 <tcp_slowtmr+0x268>)
 8009eea:	781a      	ldrb	r2, [r3, #0]
 8009eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eee:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009efe:	7d1b      	ldrb	r3, [r3, #20]
 8009f00:	2b02      	cmp	r3, #2
 8009f02:	d10a      	bne.n	8009f1a <tcp_slowtmr+0xbe>
 8009f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009f0a:	2b05      	cmp	r3, #5
 8009f0c:	d905      	bls.n	8009f1a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8009f0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f12:	3301      	adds	r3, #1
 8009f14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009f18:	e11e      	b.n	800a158 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8009f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f1c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009f20:	2b0b      	cmp	r3, #11
 8009f22:	d905      	bls.n	8009f30 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8009f24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f28:	3301      	adds	r3, #1
 8009f2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009f2e:	e113      	b.n	800a158 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8009f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f32:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d075      	beq.n	800a026 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8009f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d006      	beq.n	8009f50 <tcp_slowtmr+0xf4>
 8009f42:	4b62      	ldr	r3, [pc, #392]	@ (800a0cc <tcp_slowtmr+0x270>)
 8009f44:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8009f48:	4965      	ldr	r1, [pc, #404]	@ (800a0e0 <tcp_slowtmr+0x284>)
 8009f4a:	4862      	ldr	r0, [pc, #392]	@ (800a0d4 <tcp_slowtmr+0x278>)
 8009f4c:	f007 fd42 	bl	80119d4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d106      	bne.n	8009f66 <tcp_slowtmr+0x10a>
 8009f58:	4b5c      	ldr	r3, [pc, #368]	@ (800a0cc <tcp_slowtmr+0x270>)
 8009f5a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8009f5e:	4961      	ldr	r1, [pc, #388]	@ (800a0e4 <tcp_slowtmr+0x288>)
 8009f60:	485c      	ldr	r0, [pc, #368]	@ (800a0d4 <tcp_slowtmr+0x278>)
 8009f62:	f007 fd37 	bl	80119d4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f68:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8009f6c:	2b0b      	cmp	r3, #11
 8009f6e:	d905      	bls.n	8009f7c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8009f70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f74:	3301      	adds	r3, #1
 8009f76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009f7a:	e0ed      	b.n	800a158 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f7e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8009f82:	3b01      	subs	r3, #1
 8009f84:	4a58      	ldr	r2, [pc, #352]	@ (800a0e8 <tcp_slowtmr+0x28c>)
 8009f86:	5cd3      	ldrb	r3, [r2, r3]
 8009f88:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8009f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f8c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009f90:	7c7a      	ldrb	r2, [r7, #17]
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d907      	bls.n	8009fa6 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8009f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f98:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	b2da      	uxtb	r2, r3
 8009fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fa2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8009fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fa8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009fac:	7c7a      	ldrb	r2, [r7, #17]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	f200 80d2 	bhi.w	800a158 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8009fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d108      	bne.n	8009fd4 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009fc2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009fc4:	f004 fc28 	bl	800e818 <tcp_zero_window_probe>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d014      	beq.n	8009ff8 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8009fce:	2300      	movs	r3, #0
 8009fd0:	623b      	str	r3, [r7, #32]
 8009fd2:	e011      	b.n	8009ff8 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009fda:	4619      	mov	r1, r3
 8009fdc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009fde:	f003 faed 	bl	800d5bc <tcp_split_unsent_seg>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d107      	bne.n	8009ff8 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8009fe8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009fea:	f003 fd6d 	bl	800dac8 <tcp_output>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d101      	bne.n	8009ff8 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8009ff8:	6a3b      	ldr	r3, [r7, #32]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	f000 80ac 	beq.w	800a158 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800a000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a002:	2200      	movs	r2, #0
 800a004:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a00a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800a00e:	2b06      	cmp	r3, #6
 800a010:	f200 80a2 	bhi.w	800a158 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800a014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a016:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800a01a:	3301      	adds	r3, #1
 800a01c:	b2da      	uxtb	r2, r3
 800a01e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a020:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800a024:	e098      	b.n	800a158 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a028:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	db0f      	blt.n	800a050 <tcp_slowtmr+0x1f4>
 800a030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a032:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800a036:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d008      	beq.n	800a050 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800a03e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a040:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800a044:	b29b      	uxth	r3, r3
 800a046:	3301      	adds	r3, #1
 800a048:	b29b      	uxth	r3, r3
 800a04a:	b21a      	sxth	r2, r3
 800a04c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a04e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800a050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a052:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800a056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a058:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800a05c:	429a      	cmp	r2, r3
 800a05e:	db7b      	blt.n	800a158 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a060:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a062:	f004 f825 	bl	800e0b0 <tcp_rexmit_rto_prepare>
 800a066:	4603      	mov	r3, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d007      	beq.n	800a07c <tcp_slowtmr+0x220>
 800a06c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a06e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a070:	2b00      	cmp	r3, #0
 800a072:	d171      	bne.n	800a158 <tcp_slowtmr+0x2fc>
 800a074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a076:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d06d      	beq.n	800a158 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800a07c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a07e:	7d1b      	ldrb	r3, [r3, #20]
 800a080:	2b02      	cmp	r3, #2
 800a082:	d03a      	beq.n	800a0fa <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800a084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a086:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a08a:	2b0c      	cmp	r3, #12
 800a08c:	bf28      	it	cs
 800a08e:	230c      	movcs	r3, #12
 800a090:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a094:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800a098:	10db      	asrs	r3, r3, #3
 800a09a:	b21b      	sxth	r3, r3
 800a09c:	461a      	mov	r2, r3
 800a09e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0a0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800a0a4:	4413      	add	r3, r2
 800a0a6:	7efa      	ldrb	r2, [r7, #27]
 800a0a8:	4910      	ldr	r1, [pc, #64]	@ (800a0ec <tcp_slowtmr+0x290>)
 800a0aa:	5c8a      	ldrb	r2, [r1, r2]
 800a0ac:	4093      	lsls	r3, r2
 800a0ae:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	dc1a      	bgt.n	800a0f0 <tcp_slowtmr+0x294>
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	b21a      	sxth	r2, r3
 800a0be:	e019      	b.n	800a0f4 <tcp_slowtmr+0x298>
 800a0c0:	2000fda8 	.word	0x2000fda8
 800a0c4:	2000fdbe 	.word	0x2000fdbe
 800a0c8:	2000fdb4 	.word	0x2000fdb4
 800a0cc:	0801346c 	.word	0x0801346c
 800a0d0:	080137b0 	.word	0x080137b0
 800a0d4:	080134b0 	.word	0x080134b0
 800a0d8:	080137dc 	.word	0x080137dc
 800a0dc:	08013808 	.word	0x08013808
 800a0e0:	08013838 	.word	0x08013838
 800a0e4:	0801386c 	.word	0x0801386c
 800a0e8:	08015484 	.word	0x08015484
 800a0ec:	08015474 	.word	0x08015474
 800a0f0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800a0f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800a0fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a102:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a108:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a10c:	4293      	cmp	r3, r2
 800a10e:	bf28      	it	cs
 800a110:	4613      	movcs	r3, r2
 800a112:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800a114:	8a7b      	ldrh	r3, [r7, #18]
 800a116:	085b      	lsrs	r3, r3, #1
 800a118:	b29a      	uxth	r2, r3
 800a11a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a11c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a122:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800a126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a128:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a12a:	005b      	lsls	r3, r3, #1
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	429a      	cmp	r2, r3
 800a130:	d206      	bcs.n	800a140 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800a132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a134:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a136:	005b      	lsls	r3, r3, #1
 800a138:	b29a      	uxth	r2, r3
 800a13a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a13c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800a140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a142:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800a144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a146:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800a14a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a14c:	2200      	movs	r2, #0
 800a14e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800a152:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a154:	f004 f81c 	bl	800e190 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800a158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a15a:	7d1b      	ldrb	r3, [r3, #20]
 800a15c:	2b06      	cmp	r3, #6
 800a15e:	d111      	bne.n	800a184 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800a160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a162:	8b5b      	ldrh	r3, [r3, #26]
 800a164:	f003 0310 	and.w	r3, r3, #16
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d00b      	beq.n	800a184 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a16c:	4b9c      	ldr	r3, [pc, #624]	@ (800a3e0 <tcp_slowtmr+0x584>)
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a172:	6a1b      	ldr	r3, [r3, #32]
 800a174:	1ad3      	subs	r3, r2, r3
 800a176:	2b28      	cmp	r3, #40	@ 0x28
 800a178:	d904      	bls.n	800a184 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800a17a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a17e:	3301      	adds	r3, #1
 800a180:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a186:	7a5b      	ldrb	r3, [r3, #9]
 800a188:	f003 0308 	and.w	r3, r3, #8
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d04a      	beq.n	800a226 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800a190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a192:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a194:	2b04      	cmp	r3, #4
 800a196:	d003      	beq.n	800a1a0 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800a198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a19a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800a19c:	2b07      	cmp	r3, #7
 800a19e:	d142      	bne.n	800a226 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a1a0:	4b8f      	ldr	r3, [pc, #572]	@ (800a3e0 <tcp_slowtmr+0x584>)
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1a6:	6a1b      	ldr	r3, [r3, #32]
 800a1a8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a1aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1ac:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800a1b0:	4b8c      	ldr	r3, [pc, #560]	@ (800a3e4 <tcp_slowtmr+0x588>)
 800a1b2:	440b      	add	r3, r1
 800a1b4:	498c      	ldr	r1, [pc, #560]	@ (800a3e8 <tcp_slowtmr+0x58c>)
 800a1b6:	fba1 1303 	umull	r1, r3, r1, r3
 800a1ba:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d90a      	bls.n	800a1d6 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800a1c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800a1ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a1d4:	e027      	b.n	800a226 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a1d6:	4b82      	ldr	r3, [pc, #520]	@ (800a3e0 <tcp_slowtmr+0x584>)
 800a1d8:	681a      	ldr	r2, [r3, #0]
 800a1da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1dc:	6a1b      	ldr	r3, [r3, #32]
 800a1de:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1e2:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800a1e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1e8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	4b7f      	ldr	r3, [pc, #508]	@ (800a3ec <tcp_slowtmr+0x590>)
 800a1f0:	fb00 f303 	mul.w	r3, r0, r3
 800a1f4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800a1f6:	497c      	ldr	r1, [pc, #496]	@ (800a3e8 <tcp_slowtmr+0x58c>)
 800a1f8:	fba1 1303 	umull	r1, r3, r1, r3
 800a1fc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d911      	bls.n	800a226 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800a202:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a204:	f004 fac8 	bl	800e798 <tcp_keepalive>
 800a208:	4603      	mov	r3, r0
 800a20a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800a20e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800a212:	2b00      	cmp	r3, #0
 800a214:	d107      	bne.n	800a226 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800a216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a218:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800a21c:	3301      	adds	r3, #1
 800a21e:	b2da      	uxtb	r2, r3
 800a220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a222:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800a226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d011      	beq.n	800a252 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800a22e:	4b6c      	ldr	r3, [pc, #432]	@ (800a3e0 <tcp_slowtmr+0x584>)
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a234:	6a1b      	ldr	r3, [r3, #32]
 800a236:	1ad2      	subs	r2, r2, r3
 800a238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a23a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800a23e:	4619      	mov	r1, r3
 800a240:	460b      	mov	r3, r1
 800a242:	005b      	lsls	r3, r3, #1
 800a244:	440b      	add	r3, r1
 800a246:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800a248:	429a      	cmp	r2, r3
 800a24a:	d302      	bcc.n	800a252 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800a24c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a24e:	f000 fddf 	bl	800ae10 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800a252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a254:	7d1b      	ldrb	r3, [r3, #20]
 800a256:	2b03      	cmp	r3, #3
 800a258:	d10b      	bne.n	800a272 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a25a:	4b61      	ldr	r3, [pc, #388]	@ (800a3e0 <tcp_slowtmr+0x584>)
 800a25c:	681a      	ldr	r2, [r3, #0]
 800a25e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a260:	6a1b      	ldr	r3, [r3, #32]
 800a262:	1ad3      	subs	r3, r2, r3
 800a264:	2b28      	cmp	r3, #40	@ 0x28
 800a266:	d904      	bls.n	800a272 <tcp_slowtmr+0x416>
        ++pcb_remove;
 800a268:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a26c:	3301      	adds	r3, #1
 800a26e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800a272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a274:	7d1b      	ldrb	r3, [r3, #20]
 800a276:	2b09      	cmp	r3, #9
 800a278:	d10b      	bne.n	800a292 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a27a:	4b59      	ldr	r3, [pc, #356]	@ (800a3e0 <tcp_slowtmr+0x584>)
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a280:	6a1b      	ldr	r3, [r3, #32]
 800a282:	1ad3      	subs	r3, r2, r3
 800a284:	2bf0      	cmp	r3, #240	@ 0xf0
 800a286:	d904      	bls.n	800a292 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800a288:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a28c:	3301      	adds	r3, #1
 800a28e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800a292:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a296:	2b00      	cmp	r3, #0
 800a298:	d060      	beq.n	800a35c <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800a29a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a29c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2a0:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800a2a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a2a4:	f000 fc00 	bl	800aaa8 <tcp_pcb_purge>
      if (prev != NULL) {
 800a2a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d010      	beq.n	800a2d0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a2ae:	4b50      	ldr	r3, [pc, #320]	@ (800a3f0 <tcp_slowtmr+0x594>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d106      	bne.n	800a2c6 <tcp_slowtmr+0x46a>
 800a2b8:	4b4e      	ldr	r3, [pc, #312]	@ (800a3f4 <tcp_slowtmr+0x598>)
 800a2ba:	f240 526d 	movw	r2, #1389	@ 0x56d
 800a2be:	494e      	ldr	r1, [pc, #312]	@ (800a3f8 <tcp_slowtmr+0x59c>)
 800a2c0:	484e      	ldr	r0, [pc, #312]	@ (800a3fc <tcp_slowtmr+0x5a0>)
 800a2c2:	f007 fb87 	bl	80119d4 <iprintf>
        prev->next = pcb->next;
 800a2c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2c8:	68da      	ldr	r2, [r3, #12]
 800a2ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2cc:	60da      	str	r2, [r3, #12]
 800a2ce:	e00f      	b.n	800a2f0 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a2d0:	4b47      	ldr	r3, [pc, #284]	@ (800a3f0 <tcp_slowtmr+0x594>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d006      	beq.n	800a2e8 <tcp_slowtmr+0x48c>
 800a2da:	4b46      	ldr	r3, [pc, #280]	@ (800a3f4 <tcp_slowtmr+0x598>)
 800a2dc:	f240 5271 	movw	r2, #1393	@ 0x571
 800a2e0:	4947      	ldr	r1, [pc, #284]	@ (800a400 <tcp_slowtmr+0x5a4>)
 800a2e2:	4846      	ldr	r0, [pc, #280]	@ (800a3fc <tcp_slowtmr+0x5a0>)
 800a2e4:	f007 fb76 	bl	80119d4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800a2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	4a40      	ldr	r2, [pc, #256]	@ (800a3f0 <tcp_slowtmr+0x594>)
 800a2ee:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800a2f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d013      	beq.n	800a320 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a2f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2fa:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800a2fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2fe:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800a300:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800a302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a304:	3304      	adds	r3, #4
 800a306:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a308:	8ad2      	ldrh	r2, [r2, #22]
 800a30a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a30c:	8b09      	ldrh	r1, [r1, #24]
 800a30e:	9102      	str	r1, [sp, #8]
 800a310:	9201      	str	r2, [sp, #4]
 800a312:	9300      	str	r3, [sp, #0]
 800a314:	462b      	mov	r3, r5
 800a316:	4622      	mov	r2, r4
 800a318:	4601      	mov	r1, r0
 800a31a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a31c:	f004 f988 	bl	800e630 <tcp_rst>
      err_arg = pcb->callback_arg;
 800a320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a322:	691b      	ldr	r3, [r3, #16]
 800a324:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800a326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a328:	7d1b      	ldrb	r3, [r3, #20]
 800a32a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800a32c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a32e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800a330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800a336:	6838      	ldr	r0, [r7, #0]
 800a338:	f7ff f9f0 	bl	800971c <tcp_free>
      tcp_active_pcbs_changed = 0;
 800a33c:	4b31      	ldr	r3, [pc, #196]	@ (800a404 <tcp_slowtmr+0x5a8>)
 800a33e:	2200      	movs	r2, #0
 800a340:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d004      	beq.n	800a352 <tcp_slowtmr+0x4f6>
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f06f 010c 	mvn.w	r1, #12
 800a34e:	68b8      	ldr	r0, [r7, #8]
 800a350:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800a352:	4b2c      	ldr	r3, [pc, #176]	@ (800a404 <tcp_slowtmr+0x5a8>)
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d037      	beq.n	800a3ca <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800a35a:	e592      	b.n	8009e82 <tcp_slowtmr+0x26>
      prev = pcb;
 800a35c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a35e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800a360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a362:	68db      	ldr	r3, [r3, #12]
 800a364:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800a366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a368:	7f1b      	ldrb	r3, [r3, #28]
 800a36a:	3301      	adds	r3, #1
 800a36c:	b2da      	uxtb	r2, r3
 800a36e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a370:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a374:	7f1a      	ldrb	r2, [r3, #28]
 800a376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a378:	7f5b      	ldrb	r3, [r3, #29]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d325      	bcc.n	800a3ca <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800a37e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a380:	2200      	movs	r2, #0
 800a382:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800a384:	4b1f      	ldr	r3, [pc, #124]	@ (800a404 <tcp_slowtmr+0x5a8>)
 800a386:	2200      	movs	r2, #0
 800a388:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800a38a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a38c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a390:	2b00      	cmp	r3, #0
 800a392:	d00b      	beq.n	800a3ac <tcp_slowtmr+0x550>
 800a394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a396:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a39a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a39c:	6912      	ldr	r2, [r2, #16]
 800a39e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3a0:	4610      	mov	r0, r2
 800a3a2:	4798      	blx	r3
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800a3aa:	e002      	b.n	800a3b2 <tcp_slowtmr+0x556>
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800a3b2:	4b14      	ldr	r3, [pc, #80]	@ (800a404 <tcp_slowtmr+0x5a8>)
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	f47f ad62 	bne.w	8009e80 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800a3bc:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d102      	bne.n	800a3ca <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800a3c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3c6:	f003 fb7f 	bl	800dac8 <tcp_output>
  while (pcb != NULL) {
 800a3ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	f47f ad5e 	bne.w	8009e8e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800a3d6:	4b0c      	ldr	r3, [pc, #48]	@ (800a408 <tcp_slowtmr+0x5ac>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800a3dc:	e069      	b.n	800a4b2 <tcp_slowtmr+0x656>
 800a3de:	bf00      	nop
 800a3e0:	2000fda8 	.word	0x2000fda8
 800a3e4:	000a4cb8 	.word	0x000a4cb8
 800a3e8:	10624dd3 	.word	0x10624dd3
 800a3ec:	000124f8 	.word	0x000124f8
 800a3f0:	2000fdb4 	.word	0x2000fdb4
 800a3f4:	0801346c 	.word	0x0801346c
 800a3f8:	080138a4 	.word	0x080138a4
 800a3fc:	080134b0 	.word	0x080134b0
 800a400:	080138d0 	.word	0x080138d0
 800a404:	2000fdbc 	.word	0x2000fdbc
 800a408:	2000fdb8 	.word	0x2000fdb8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a40c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a40e:	7d1b      	ldrb	r3, [r3, #20]
 800a410:	2b0a      	cmp	r3, #10
 800a412:	d006      	beq.n	800a422 <tcp_slowtmr+0x5c6>
 800a414:	4b2b      	ldr	r3, [pc, #172]	@ (800a4c4 <tcp_slowtmr+0x668>)
 800a416:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800a41a:	492b      	ldr	r1, [pc, #172]	@ (800a4c8 <tcp_slowtmr+0x66c>)
 800a41c:	482b      	ldr	r0, [pc, #172]	@ (800a4cc <tcp_slowtmr+0x670>)
 800a41e:	f007 fad9 	bl	80119d4 <iprintf>
    pcb_remove = 0;
 800a422:	2300      	movs	r3, #0
 800a424:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a428:	4b29      	ldr	r3, [pc, #164]	@ (800a4d0 <tcp_slowtmr+0x674>)
 800a42a:	681a      	ldr	r2, [r3, #0]
 800a42c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a42e:	6a1b      	ldr	r3, [r3, #32]
 800a430:	1ad3      	subs	r3, r2, r3
 800a432:	2bf0      	cmp	r3, #240	@ 0xf0
 800a434:	d904      	bls.n	800a440 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800a436:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a43a:	3301      	adds	r3, #1
 800a43c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a440:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a444:	2b00      	cmp	r3, #0
 800a446:	d02f      	beq.n	800a4a8 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800a448:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a44a:	f000 fb2d 	bl	800aaa8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800a44e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a450:	2b00      	cmp	r3, #0
 800a452:	d010      	beq.n	800a476 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a454:	4b1f      	ldr	r3, [pc, #124]	@ (800a4d4 <tcp_slowtmr+0x678>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d106      	bne.n	800a46c <tcp_slowtmr+0x610>
 800a45e:	4b19      	ldr	r3, [pc, #100]	@ (800a4c4 <tcp_slowtmr+0x668>)
 800a460:	f240 52af 	movw	r2, #1455	@ 0x5af
 800a464:	491c      	ldr	r1, [pc, #112]	@ (800a4d8 <tcp_slowtmr+0x67c>)
 800a466:	4819      	ldr	r0, [pc, #100]	@ (800a4cc <tcp_slowtmr+0x670>)
 800a468:	f007 fab4 	bl	80119d4 <iprintf>
        prev->next = pcb->next;
 800a46c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a46e:	68da      	ldr	r2, [r3, #12]
 800a470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a472:	60da      	str	r2, [r3, #12]
 800a474:	e00f      	b.n	800a496 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a476:	4b17      	ldr	r3, [pc, #92]	@ (800a4d4 <tcp_slowtmr+0x678>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d006      	beq.n	800a48e <tcp_slowtmr+0x632>
 800a480:	4b10      	ldr	r3, [pc, #64]	@ (800a4c4 <tcp_slowtmr+0x668>)
 800a482:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800a486:	4915      	ldr	r1, [pc, #84]	@ (800a4dc <tcp_slowtmr+0x680>)
 800a488:	4810      	ldr	r0, [pc, #64]	@ (800a4cc <tcp_slowtmr+0x670>)
 800a48a:	f007 faa3 	bl	80119d4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a48e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a490:	68db      	ldr	r3, [r3, #12]
 800a492:	4a10      	ldr	r2, [pc, #64]	@ (800a4d4 <tcp_slowtmr+0x678>)
 800a494:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800a496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a498:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800a49a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a49c:	68db      	ldr	r3, [r3, #12]
 800a49e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800a4a0:	69f8      	ldr	r0, [r7, #28]
 800a4a2:	f7ff f93b 	bl	800971c <tcp_free>
 800a4a6:	e004      	b.n	800a4b2 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800a4a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800a4ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800a4b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d1a9      	bne.n	800a40c <tcp_slowtmr+0x5b0>
    }
  }
}
 800a4b8:	bf00      	nop
 800a4ba:	bf00      	nop
 800a4bc:	3730      	adds	r7, #48	@ 0x30
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bdb0      	pop	{r4, r5, r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	0801346c 	.word	0x0801346c
 800a4c8:	080138fc 	.word	0x080138fc
 800a4cc:	080134b0 	.word	0x080134b0
 800a4d0:	2000fda8 	.word	0x2000fda8
 800a4d4:	2000fdb8 	.word	0x2000fdb8
 800a4d8:	0801392c 	.word	0x0801392c
 800a4dc:	08013954 	.word	0x08013954

0800a4e0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b082      	sub	sp, #8
 800a4e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800a4e6:	4b2d      	ldr	r3, [pc, #180]	@ (800a59c <tcp_fasttmr+0xbc>)
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	b2da      	uxtb	r2, r3
 800a4ee:	4b2b      	ldr	r3, [pc, #172]	@ (800a59c <tcp_fasttmr+0xbc>)
 800a4f0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800a4f2:	4b2b      	ldr	r3, [pc, #172]	@ (800a5a0 <tcp_fasttmr+0xc0>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a4f8:	e048      	b.n	800a58c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	7f9a      	ldrb	r2, [r3, #30]
 800a4fe:	4b27      	ldr	r3, [pc, #156]	@ (800a59c <tcp_fasttmr+0xbc>)
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	429a      	cmp	r2, r3
 800a504:	d03f      	beq.n	800a586 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800a506:	4b25      	ldr	r3, [pc, #148]	@ (800a59c <tcp_fasttmr+0xbc>)
 800a508:	781a      	ldrb	r2, [r3, #0]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	8b5b      	ldrh	r3, [r3, #26]
 800a512:	f003 0301 	and.w	r3, r3, #1
 800a516:	2b00      	cmp	r3, #0
 800a518:	d010      	beq.n	800a53c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	8b5b      	ldrh	r3, [r3, #26]
 800a51e:	f043 0302 	orr.w	r3, r3, #2
 800a522:	b29a      	uxth	r2, r3
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f003 facd 	bl	800dac8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	8b5b      	ldrh	r3, [r3, #26]
 800a532:	f023 0303 	bic.w	r3, r3, #3
 800a536:	b29a      	uxth	r2, r3
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	8b5b      	ldrh	r3, [r3, #26]
 800a540:	f003 0308 	and.w	r3, r3, #8
 800a544:	2b00      	cmp	r3, #0
 800a546:	d009      	beq.n	800a55c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	8b5b      	ldrh	r3, [r3, #26]
 800a54c:	f023 0308 	bic.w	r3, r3, #8
 800a550:	b29a      	uxth	r2, r3
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f7ff fa74 	bl	8009a44 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a566:	2b00      	cmp	r3, #0
 800a568:	d00a      	beq.n	800a580 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800a56a:	4b0e      	ldr	r3, [pc, #56]	@ (800a5a4 <tcp_fasttmr+0xc4>)
 800a56c:	2200      	movs	r2, #0
 800a56e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f000 f819 	bl	800a5a8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a576:	4b0b      	ldr	r3, [pc, #44]	@ (800a5a4 <tcp_fasttmr+0xc4>)
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d000      	beq.n	800a580 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800a57e:	e7b8      	b.n	800a4f2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	607b      	str	r3, [r7, #4]
 800a584:	e002      	b.n	800a58c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	68db      	ldr	r3, [r3, #12]
 800a58a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d1b3      	bne.n	800a4fa <tcp_fasttmr+0x1a>
    }
  }
}
 800a592:	bf00      	nop
 800a594:	bf00      	nop
 800a596:	3708      	adds	r7, #8
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}
 800a59c:	2000fdbe 	.word	0x2000fdbe
 800a5a0:	2000fdb4 	.word	0x2000fdb4
 800a5a4:	2000fdbc 	.word	0x2000fdbc

0800a5a8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800a5a8:	b590      	push	{r4, r7, lr}
 800a5aa:	b085      	sub	sp, #20
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d109      	bne.n	800a5ca <tcp_process_refused_data+0x22>
 800a5b6:	4b38      	ldr	r3, [pc, #224]	@ (800a698 <tcp_process_refused_data+0xf0>)
 800a5b8:	f240 6209 	movw	r2, #1545	@ 0x609
 800a5bc:	4937      	ldr	r1, [pc, #220]	@ (800a69c <tcp_process_refused_data+0xf4>)
 800a5be:	4838      	ldr	r0, [pc, #224]	@ (800a6a0 <tcp_process_refused_data+0xf8>)
 800a5c0:	f007 fa08 	bl	80119d4 <iprintf>
 800a5c4:	f06f 030f 	mvn.w	r3, #15
 800a5c8:	e061      	b.n	800a68e <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5ce:	7b5b      	ldrb	r3, [r3, #13]
 800a5d0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5d6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d00b      	beq.n	800a600 <tcp_process_refused_data+0x58>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6918      	ldr	r0, [r3, #16]
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	68ba      	ldr	r2, [r7, #8]
 800a5f6:	6879      	ldr	r1, [r7, #4]
 800a5f8:	47a0      	blx	r4
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	73fb      	strb	r3, [r7, #15]
 800a5fe:	e007      	b.n	800a610 <tcp_process_refused_data+0x68>
 800a600:	2300      	movs	r3, #0
 800a602:	68ba      	ldr	r2, [r7, #8]
 800a604:	6879      	ldr	r1, [r7, #4]
 800a606:	2000      	movs	r0, #0
 800a608:	f000 f8a6 	bl	800a758 <tcp_recv_null>
 800a60c:	4603      	mov	r3, r0
 800a60e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d12b      	bne.n	800a670 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800a618:	7bbb      	ldrb	r3, [r7, #14]
 800a61a:	f003 0320 	and.w	r3, r3, #32
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d034      	beq.n	800a68c <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a626:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d005      	beq.n	800a63a <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a632:	3301      	adds	r3, #1
 800a634:	b29a      	uxth	r2, r3
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a640:	2b00      	cmp	r3, #0
 800a642:	d00b      	beq.n	800a65c <tcp_process_refused_data+0xb4>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6918      	ldr	r0, [r3, #16]
 800a64e:	2300      	movs	r3, #0
 800a650:	2200      	movs	r2, #0
 800a652:	6879      	ldr	r1, [r7, #4]
 800a654:	47a0      	blx	r4
 800a656:	4603      	mov	r3, r0
 800a658:	73fb      	strb	r3, [r7, #15]
 800a65a:	e001      	b.n	800a660 <tcp_process_refused_data+0xb8>
 800a65c:	2300      	movs	r3, #0
 800a65e:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800a660:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a664:	f113 0f0d 	cmn.w	r3, #13
 800a668:	d110      	bne.n	800a68c <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 800a66a:	f06f 030c 	mvn.w	r3, #12
 800a66e:	e00e      	b.n	800a68e <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 800a670:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a674:	f113 0f0d 	cmn.w	r3, #13
 800a678:	d102      	bne.n	800a680 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800a67a:	f06f 030c 	mvn.w	r3, #12
 800a67e:	e006      	b.n	800a68e <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	68ba      	ldr	r2, [r7, #8]
 800a684:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800a686:	f06f 0304 	mvn.w	r3, #4
 800a68a:	e000      	b.n	800a68e <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 800a68c:	2300      	movs	r3, #0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3714      	adds	r7, #20
 800a692:	46bd      	mov	sp, r7
 800a694:	bd90      	pop	{r4, r7, pc}
 800a696:	bf00      	nop
 800a698:	0801346c 	.word	0x0801346c
 800a69c:	0801397c 	.word	0x0801397c
 800a6a0:	080134b0 	.word	0x080134b0

0800a6a4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800a6ac:	e007      	b.n	800a6be <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 f80a 	bl	800a6ce <tcp_seg_free>
    seg = next;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d1f4      	bne.n	800a6ae <tcp_segs_free+0xa>
  }
}
 800a6c4:	bf00      	nop
 800a6c6:	bf00      	nop
 800a6c8:	3710      	adds	r7, #16
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b082      	sub	sp, #8
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d00c      	beq.n	800a6f6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d004      	beq.n	800a6ee <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f7fe fd6b 	bl	80091c4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800a6ee:	6879      	ldr	r1, [r7, #4]
 800a6f0:	2003      	movs	r0, #3
 800a6f2:	f7fd febf 	bl	8008474 <memp_free>
  }
}
 800a6f6:	bf00      	nop
 800a6f8:	3708      	adds	r7, #8
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
	...

0800a700 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d106      	bne.n	800a71c <tcp_seg_copy+0x1c>
 800a70e:	4b0f      	ldr	r3, [pc, #60]	@ (800a74c <tcp_seg_copy+0x4c>)
 800a710:	f240 6282 	movw	r2, #1666	@ 0x682
 800a714:	490e      	ldr	r1, [pc, #56]	@ (800a750 <tcp_seg_copy+0x50>)
 800a716:	480f      	ldr	r0, [pc, #60]	@ (800a754 <tcp_seg_copy+0x54>)
 800a718:	f007 f95c 	bl	80119d4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800a71c:	2003      	movs	r0, #3
 800a71e:	f7fd fe33 	bl	8008388 <memp_malloc>
 800a722:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d101      	bne.n	800a72e <tcp_seg_copy+0x2e>
    return NULL;
 800a72a:	2300      	movs	r3, #0
 800a72c:	e00a      	b.n	800a744 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800a72e:	2210      	movs	r2, #16
 800a730:	6879      	ldr	r1, [r7, #4]
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f007 fa29 	bl	8011b8a <memcpy>
  pbuf_ref(cseg->p);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	4618      	mov	r0, r3
 800a73e:	f7fe fde7 	bl	8009310 <pbuf_ref>
  return cseg;
 800a742:	68fb      	ldr	r3, [r7, #12]
}
 800a744:	4618      	mov	r0, r3
 800a746:	3710      	adds	r7, #16
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}
 800a74c:	0801346c 	.word	0x0801346c
 800a750:	080139c0 	.word	0x080139c0
 800a754:	080134b0 	.word	0x080134b0

0800a758 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	60f8      	str	r0, [r7, #12]
 800a760:	60b9      	str	r1, [r7, #8]
 800a762:	607a      	str	r2, [r7, #4]
 800a764:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d109      	bne.n	800a780 <tcp_recv_null+0x28>
 800a76c:	4b12      	ldr	r3, [pc, #72]	@ (800a7b8 <tcp_recv_null+0x60>)
 800a76e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800a772:	4912      	ldr	r1, [pc, #72]	@ (800a7bc <tcp_recv_null+0x64>)
 800a774:	4812      	ldr	r0, [pc, #72]	@ (800a7c0 <tcp_recv_null+0x68>)
 800a776:	f007 f92d 	bl	80119d4 <iprintf>
 800a77a:	f06f 030f 	mvn.w	r3, #15
 800a77e:	e016      	b.n	800a7ae <tcp_recv_null+0x56>

  if (p != NULL) {
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d009      	beq.n	800a79a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	891b      	ldrh	r3, [r3, #8]
 800a78a:	4619      	mov	r1, r3
 800a78c:	68b8      	ldr	r0, [r7, #8]
 800a78e:	f7ff fb13 	bl	8009db8 <tcp_recved>
    pbuf_free(p);
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f7fe fd16 	bl	80091c4 <pbuf_free>
 800a798:	e008      	b.n	800a7ac <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800a79a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d104      	bne.n	800a7ac <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800a7a2:	68b8      	ldr	r0, [r7, #8]
 800a7a4:	f7ff f9b8 	bl	8009b18 <tcp_close>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	e000      	b.n	800a7ae <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800a7ac:	2300      	movs	r3, #0
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3710      	adds	r7, #16
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	bf00      	nop
 800a7b8:	0801346c 	.word	0x0801346c
 800a7bc:	080139dc 	.word	0x080139dc
 800a7c0:	080134b0 	.word	0x080134b0

0800a7c4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b086      	sub	sp, #24
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a7ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	db01      	blt.n	800a7da <tcp_kill_prio+0x16>
 800a7d6:	79fb      	ldrb	r3, [r7, #7]
 800a7d8:	e000      	b.n	800a7dc <tcp_kill_prio+0x18>
 800a7da:	237f      	movs	r3, #127	@ 0x7f
 800a7dc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800a7de:	7afb      	ldrb	r3, [r7, #11]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d034      	beq.n	800a84e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800a7e4:	7afb      	ldrb	r3, [r7, #11]
 800a7e6:	3b01      	subs	r3, #1
 800a7e8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a7f2:	4b19      	ldr	r3, [pc, #100]	@ (800a858 <tcp_kill_prio+0x94>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	617b      	str	r3, [r7, #20]
 800a7f8:	e01f      	b.n	800a83a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	7d5b      	ldrb	r3, [r3, #21]
 800a7fe:	7afa      	ldrb	r2, [r7, #11]
 800a800:	429a      	cmp	r2, r3
 800a802:	d80c      	bhi.n	800a81e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800a808:	7afa      	ldrb	r2, [r7, #11]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d112      	bne.n	800a834 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a80e:	4b13      	ldr	r3, [pc, #76]	@ (800a85c <tcp_kill_prio+0x98>)
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	6a1b      	ldr	r3, [r3, #32]
 800a816:	1ad3      	subs	r3, r2, r3
 800a818:	68fa      	ldr	r2, [r7, #12]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d80a      	bhi.n	800a834 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800a81e:	4b0f      	ldr	r3, [pc, #60]	@ (800a85c <tcp_kill_prio+0x98>)
 800a820:	681a      	ldr	r2, [r3, #0]
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	6a1b      	ldr	r3, [r3, #32]
 800a826:	1ad3      	subs	r3, r2, r3
 800a828:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	7d5b      	ldrb	r3, [r3, #21]
 800a832:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	68db      	ldr	r3, [r3, #12]
 800a838:	617b      	str	r3, [r7, #20]
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d1dc      	bne.n	800a7fa <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d004      	beq.n	800a850 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a846:	6938      	ldr	r0, [r7, #16]
 800a848:	f7ff fa50 	bl	8009cec <tcp_abort>
 800a84c:	e000      	b.n	800a850 <tcp_kill_prio+0x8c>
    return;
 800a84e:	bf00      	nop
  }
}
 800a850:	3718      	adds	r7, #24
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	2000fdb4 	.word	0x2000fdb4
 800a85c:	2000fda8 	.word	0x2000fda8

0800a860 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b086      	sub	sp, #24
 800a864:	af00      	add	r7, sp, #0
 800a866:	4603      	mov	r3, r0
 800a868:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800a86a:	79fb      	ldrb	r3, [r7, #7]
 800a86c:	2b08      	cmp	r3, #8
 800a86e:	d009      	beq.n	800a884 <tcp_kill_state+0x24>
 800a870:	79fb      	ldrb	r3, [r7, #7]
 800a872:	2b09      	cmp	r3, #9
 800a874:	d006      	beq.n	800a884 <tcp_kill_state+0x24>
 800a876:	4b1a      	ldr	r3, [pc, #104]	@ (800a8e0 <tcp_kill_state+0x80>)
 800a878:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800a87c:	4919      	ldr	r1, [pc, #100]	@ (800a8e4 <tcp_kill_state+0x84>)
 800a87e:	481a      	ldr	r0, [pc, #104]	@ (800a8e8 <tcp_kill_state+0x88>)
 800a880:	f007 f8a8 	bl	80119d4 <iprintf>

  inactivity = 0;
 800a884:	2300      	movs	r3, #0
 800a886:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a888:	2300      	movs	r3, #0
 800a88a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a88c:	4b17      	ldr	r3, [pc, #92]	@ (800a8ec <tcp_kill_state+0x8c>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	617b      	str	r3, [r7, #20]
 800a892:	e017      	b.n	800a8c4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	7d1b      	ldrb	r3, [r3, #20]
 800a898:	79fa      	ldrb	r2, [r7, #7]
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d10f      	bne.n	800a8be <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a89e:	4b14      	ldr	r3, [pc, #80]	@ (800a8f0 <tcp_kill_state+0x90>)
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	6a1b      	ldr	r3, [r3, #32]
 800a8a6:	1ad3      	subs	r3, r2, r3
 800a8a8:	68fa      	ldr	r2, [r7, #12]
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d807      	bhi.n	800a8be <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800a8ae:	4b10      	ldr	r3, [pc, #64]	@ (800a8f0 <tcp_kill_state+0x90>)
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	6a1b      	ldr	r3, [r3, #32]
 800a8b6:	1ad3      	subs	r3, r2, r3
 800a8b8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	68db      	ldr	r3, [r3, #12]
 800a8c2:	617b      	str	r3, [r7, #20]
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d1e4      	bne.n	800a894 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d003      	beq.n	800a8d8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	6938      	ldr	r0, [r7, #16]
 800a8d4:	f7ff f94c 	bl	8009b70 <tcp_abandon>
  }
}
 800a8d8:	bf00      	nop
 800a8da:	3718      	adds	r7, #24
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}
 800a8e0:	0801346c 	.word	0x0801346c
 800a8e4:	080139f8 	.word	0x080139f8
 800a8e8:	080134b0 	.word	0x080134b0
 800a8ec:	2000fdb4 	.word	0x2000fdb4
 800a8f0:	2000fda8 	.word	0x2000fda8

0800a8f4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800a8fe:	2300      	movs	r3, #0
 800a900:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a902:	4b12      	ldr	r3, [pc, #72]	@ (800a94c <tcp_kill_timewait+0x58>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	60fb      	str	r3, [r7, #12]
 800a908:	e012      	b.n	800a930 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a90a:	4b11      	ldr	r3, [pc, #68]	@ (800a950 <tcp_kill_timewait+0x5c>)
 800a90c:	681a      	ldr	r2, [r3, #0]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	6a1b      	ldr	r3, [r3, #32]
 800a912:	1ad3      	subs	r3, r2, r3
 800a914:	687a      	ldr	r2, [r7, #4]
 800a916:	429a      	cmp	r2, r3
 800a918:	d807      	bhi.n	800a92a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800a91a:	4b0d      	ldr	r3, [pc, #52]	@ (800a950 <tcp_kill_timewait+0x5c>)
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	6a1b      	ldr	r3, [r3, #32]
 800a922:	1ad3      	subs	r3, r2, r3
 800a924:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	68db      	ldr	r3, [r3, #12]
 800a92e:	60fb      	str	r3, [r7, #12]
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d1e9      	bne.n	800a90a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d002      	beq.n	800a942 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a93c:	68b8      	ldr	r0, [r7, #8]
 800a93e:	f7ff f9d5 	bl	8009cec <tcp_abort>
  }
}
 800a942:	bf00      	nop
 800a944:	3710      	adds	r7, #16
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}
 800a94a:	bf00      	nop
 800a94c:	2000fdb8 	.word	0x2000fdb8
 800a950:	2000fda8 	.word	0x2000fda8

0800a954 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800a95a:	4b10      	ldr	r3, [pc, #64]	@ (800a99c <tcp_handle_closepend+0x48>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a960:	e014      	b.n	800a98c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	68db      	ldr	r3, [r3, #12]
 800a966:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	8b5b      	ldrh	r3, [r3, #26]
 800a96c:	f003 0308 	and.w	r3, r3, #8
 800a970:	2b00      	cmp	r3, #0
 800a972:	d009      	beq.n	800a988 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	8b5b      	ldrh	r3, [r3, #26]
 800a978:	f023 0308 	bic.w	r3, r3, #8
 800a97c:	b29a      	uxth	r2, r3
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f7ff f85e 	bl	8009a44 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d1e7      	bne.n	800a962 <tcp_handle_closepend+0xe>
  }
}
 800a992:	bf00      	nop
 800a994:	bf00      	nop
 800a996:	3708      	adds	r7, #8
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}
 800a99c:	2000fdb4 	.word	0x2000fdb4

0800a9a0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b084      	sub	sp, #16
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a9aa:	2001      	movs	r0, #1
 800a9ac:	f7fd fcec 	bl	8008388 <memp_malloc>
 800a9b0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d126      	bne.n	800aa06 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800a9b8:	f7ff ffcc 	bl	800a954 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800a9bc:	f7ff ff9a 	bl	800a8f4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a9c0:	2001      	movs	r0, #1
 800a9c2:	f7fd fce1 	bl	8008388 <memp_malloc>
 800a9c6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d11b      	bne.n	800aa06 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800a9ce:	2009      	movs	r0, #9
 800a9d0:	f7ff ff46 	bl	800a860 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a9d4:	2001      	movs	r0, #1
 800a9d6:	f7fd fcd7 	bl	8008388 <memp_malloc>
 800a9da:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d111      	bne.n	800aa06 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800a9e2:	2008      	movs	r0, #8
 800a9e4:	f7ff ff3c 	bl	800a860 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a9e8:	2001      	movs	r0, #1
 800a9ea:	f7fd fccd 	bl	8008388 <memp_malloc>
 800a9ee:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d107      	bne.n	800aa06 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800a9f6:	79fb      	ldrb	r3, [r7, #7]
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7ff fee3 	bl	800a7c4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a9fe:	2001      	movs	r0, #1
 800aa00:	f7fd fcc2 	bl	8008388 <memp_malloc>
 800aa04:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d03f      	beq.n	800aa8c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800aa0c:	229c      	movs	r2, #156	@ 0x9c
 800aa0e:	2100      	movs	r1, #0
 800aa10:	68f8      	ldr	r0, [r7, #12]
 800aa12:	f007 f844 	bl	8011a9e <memset>
    pcb->prio = prio;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	79fa      	ldrb	r2, [r7, #7]
 800aa1a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800aa22:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800aa2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	22ff      	movs	r2, #255	@ 0xff
 800aa3a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800aa42:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2206      	movs	r2, #6
 800aa48:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2206      	movs	r2, #6
 800aa50:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aa58:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800aa62:	4b0d      	ldr	r3, [pc, #52]	@ (800aa98 <tcp_alloc+0xf8>)
 800aa64:	681a      	ldr	r2, [r3, #0]
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800aa6a:	4b0c      	ldr	r3, [pc, #48]	@ (800aa9c <tcp_alloc+0xfc>)
 800aa6c:	781a      	ldrb	r2, [r3, #0]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800aa78:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	4a08      	ldr	r2, [pc, #32]	@ (800aaa0 <tcp_alloc+0x100>)
 800aa80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	4a07      	ldr	r2, [pc, #28]	@ (800aaa4 <tcp_alloc+0x104>)
 800aa88:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	2000fda8 	.word	0x2000fda8
 800aa9c:	2000fdbe 	.word	0x2000fdbe
 800aaa0:	0800a759 	.word	0x0800a759
 800aaa4:	006ddd00 	.word	0x006ddd00

0800aaa8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d107      	bne.n	800aac6 <tcp_pcb_purge+0x1e>
 800aab6:	4b21      	ldr	r3, [pc, #132]	@ (800ab3c <tcp_pcb_purge+0x94>)
 800aab8:	f640 0251 	movw	r2, #2129	@ 0x851
 800aabc:	4920      	ldr	r1, [pc, #128]	@ (800ab40 <tcp_pcb_purge+0x98>)
 800aabe:	4821      	ldr	r0, [pc, #132]	@ (800ab44 <tcp_pcb_purge+0x9c>)
 800aac0:	f006 ff88 	bl	80119d4 <iprintf>
 800aac4:	e037      	b.n	800ab36 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	7d1b      	ldrb	r3, [r3, #20]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d033      	beq.n	800ab36 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800aad2:	2b0a      	cmp	r3, #10
 800aad4:	d02f      	beq.n	800ab36 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800aada:	2b01      	cmp	r3, #1
 800aadc:	d02b      	beq.n	800ab36 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d007      	beq.n	800aaf6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7fe fb6a 	bl	80091c4 <pbuf_free>
      pcb->refused_data = NULL;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d002      	beq.n	800ab04 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f000 f986 	bl	800ae10 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ab0a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab10:	4618      	mov	r0, r3
 800ab12:	f7ff fdc7 	bl	800a6a4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7ff fdc2 	bl	800a6a4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2200      	movs	r2, #0
 800ab24:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2200      	movs	r2, #0
 800ab32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	0801346c 	.word	0x0801346c
 800ab40:	08013ab8 	.word	0x08013ab8
 800ab44:	080134b0 	.word	0x080134b0

0800ab48 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d106      	bne.n	800ab66 <tcp_pcb_remove+0x1e>
 800ab58:	4b3e      	ldr	r3, [pc, #248]	@ (800ac54 <tcp_pcb_remove+0x10c>)
 800ab5a:	f640 0283 	movw	r2, #2179	@ 0x883
 800ab5e:	493e      	ldr	r1, [pc, #248]	@ (800ac58 <tcp_pcb_remove+0x110>)
 800ab60:	483e      	ldr	r0, [pc, #248]	@ (800ac5c <tcp_pcb_remove+0x114>)
 800ab62:	f006 ff37 	bl	80119d4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d106      	bne.n	800ab7a <tcp_pcb_remove+0x32>
 800ab6c:	4b39      	ldr	r3, [pc, #228]	@ (800ac54 <tcp_pcb_remove+0x10c>)
 800ab6e:	f640 0284 	movw	r2, #2180	@ 0x884
 800ab72:	493b      	ldr	r1, [pc, #236]	@ (800ac60 <tcp_pcb_remove+0x118>)
 800ab74:	4839      	ldr	r0, [pc, #228]	@ (800ac5c <tcp_pcb_remove+0x114>)
 800ab76:	f006 ff2d 	bl	80119d4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	683a      	ldr	r2, [r7, #0]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d105      	bne.n	800ab90 <tcp_pcb_remove+0x48>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	68da      	ldr	r2, [r3, #12]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	601a      	str	r2, [r3, #0]
 800ab8e:	e013      	b.n	800abb8 <tcp_pcb_remove+0x70>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	60fb      	str	r3, [r7, #12]
 800ab96:	e00c      	b.n	800abb2 <tcp_pcb_remove+0x6a>
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	683a      	ldr	r2, [r7, #0]
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d104      	bne.n	800abac <tcp_pcb_remove+0x64>
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	68da      	ldr	r2, [r3, #12]
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	60da      	str	r2, [r3, #12]
 800abaa:	e005      	b.n	800abb8 <tcp_pcb_remove+0x70>
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	68db      	ldr	r3, [r3, #12]
 800abb0:	60fb      	str	r3, [r7, #12]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d1ef      	bne.n	800ab98 <tcp_pcb_remove+0x50>
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	2200      	movs	r2, #0
 800abbc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800abbe:	6838      	ldr	r0, [r7, #0]
 800abc0:	f7ff ff72 	bl	800aaa8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	7d1b      	ldrb	r3, [r3, #20]
 800abc8:	2b0a      	cmp	r3, #10
 800abca:	d013      	beq.n	800abf4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d00f      	beq.n	800abf4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	8b5b      	ldrh	r3, [r3, #26]
 800abd8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d009      	beq.n	800abf4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	8b5b      	ldrh	r3, [r3, #26]
 800abe4:	f043 0302 	orr.w	r3, r3, #2
 800abe8:	b29a      	uxth	r2, r3
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800abee:	6838      	ldr	r0, [r7, #0]
 800abf0:	f002 ff6a 	bl	800dac8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	7d1b      	ldrb	r3, [r3, #20]
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d020      	beq.n	800ac3e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d006      	beq.n	800ac12 <tcp_pcb_remove+0xca>
 800ac04:	4b13      	ldr	r3, [pc, #76]	@ (800ac54 <tcp_pcb_remove+0x10c>)
 800ac06:	f640 0293 	movw	r2, #2195	@ 0x893
 800ac0a:	4916      	ldr	r1, [pc, #88]	@ (800ac64 <tcp_pcb_remove+0x11c>)
 800ac0c:	4813      	ldr	r0, [pc, #76]	@ (800ac5c <tcp_pcb_remove+0x114>)
 800ac0e:	f006 fee1 	bl	80119d4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d006      	beq.n	800ac28 <tcp_pcb_remove+0xe0>
 800ac1a:	4b0e      	ldr	r3, [pc, #56]	@ (800ac54 <tcp_pcb_remove+0x10c>)
 800ac1c:	f640 0294 	movw	r2, #2196	@ 0x894
 800ac20:	4911      	ldr	r1, [pc, #68]	@ (800ac68 <tcp_pcb_remove+0x120>)
 800ac22:	480e      	ldr	r0, [pc, #56]	@ (800ac5c <tcp_pcb_remove+0x114>)
 800ac24:	f006 fed6 	bl	80119d4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d006      	beq.n	800ac3e <tcp_pcb_remove+0xf6>
 800ac30:	4b08      	ldr	r3, [pc, #32]	@ (800ac54 <tcp_pcb_remove+0x10c>)
 800ac32:	f640 0296 	movw	r2, #2198	@ 0x896
 800ac36:	490d      	ldr	r1, [pc, #52]	@ (800ac6c <tcp_pcb_remove+0x124>)
 800ac38:	4808      	ldr	r0, [pc, #32]	@ (800ac5c <tcp_pcb_remove+0x114>)
 800ac3a:	f006 fecb 	bl	80119d4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	2200      	movs	r2, #0
 800ac42:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	2200      	movs	r2, #0
 800ac48:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ac4a:	bf00      	nop
 800ac4c:	3710      	adds	r7, #16
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	bf00      	nop
 800ac54:	0801346c 	.word	0x0801346c
 800ac58:	08013ad4 	.word	0x08013ad4
 800ac5c:	080134b0 	.word	0x080134b0
 800ac60:	08013af0 	.word	0x08013af0
 800ac64:	08013b10 	.word	0x08013b10
 800ac68:	08013b28 	.word	0x08013b28
 800ac6c:	08013b44 	.word	0x08013b44

0800ac70 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b082      	sub	sp, #8
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d106      	bne.n	800ac8c <tcp_next_iss+0x1c>
 800ac7e:	4b0a      	ldr	r3, [pc, #40]	@ (800aca8 <tcp_next_iss+0x38>)
 800ac80:	f640 02af 	movw	r2, #2223	@ 0x8af
 800ac84:	4909      	ldr	r1, [pc, #36]	@ (800acac <tcp_next_iss+0x3c>)
 800ac86:	480a      	ldr	r0, [pc, #40]	@ (800acb0 <tcp_next_iss+0x40>)
 800ac88:	f006 fea4 	bl	80119d4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ac8c:	4b09      	ldr	r3, [pc, #36]	@ (800acb4 <tcp_next_iss+0x44>)
 800ac8e:	681a      	ldr	r2, [r3, #0]
 800ac90:	4b09      	ldr	r3, [pc, #36]	@ (800acb8 <tcp_next_iss+0x48>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4413      	add	r3, r2
 800ac96:	4a07      	ldr	r2, [pc, #28]	@ (800acb4 <tcp_next_iss+0x44>)
 800ac98:	6013      	str	r3, [r2, #0]
  return iss;
 800ac9a:	4b06      	ldr	r3, [pc, #24]	@ (800acb4 <tcp_next_iss+0x44>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3708      	adds	r7, #8
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
 800aca6:	bf00      	nop
 800aca8:	0801346c 	.word	0x0801346c
 800acac:	08013b5c 	.word	0x08013b5c
 800acb0:	080134b0 	.word	0x080134b0
 800acb4:	20000028 	.word	0x20000028
 800acb8:	2000fda8 	.word	0x2000fda8

0800acbc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b086      	sub	sp, #24
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	4603      	mov	r3, r0
 800acc4:	60b9      	str	r1, [r7, #8]
 800acc6:	607a      	str	r2, [r7, #4]
 800acc8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d106      	bne.n	800acde <tcp_eff_send_mss_netif+0x22>
 800acd0:	4b14      	ldr	r3, [pc, #80]	@ (800ad24 <tcp_eff_send_mss_netif+0x68>)
 800acd2:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800acd6:	4914      	ldr	r1, [pc, #80]	@ (800ad28 <tcp_eff_send_mss_netif+0x6c>)
 800acd8:	4814      	ldr	r0, [pc, #80]	@ (800ad2c <tcp_eff_send_mss_netif+0x70>)
 800acda:	f006 fe7b 	bl	80119d4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d101      	bne.n	800ace8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ace4:	89fb      	ldrh	r3, [r7, #14]
 800ace6:	e019      	b.n	800ad1c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800acec:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800acee:	8afb      	ldrh	r3, [r7, #22]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d012      	beq.n	800ad1a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800acf4:	2328      	movs	r3, #40	@ 0x28
 800acf6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800acf8:	8afa      	ldrh	r2, [r7, #22]
 800acfa:	8abb      	ldrh	r3, [r7, #20]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d904      	bls.n	800ad0a <tcp_eff_send_mss_netif+0x4e>
 800ad00:	8afa      	ldrh	r2, [r7, #22]
 800ad02:	8abb      	ldrh	r3, [r7, #20]
 800ad04:	1ad3      	subs	r3, r2, r3
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	e000      	b.n	800ad0c <tcp_eff_send_mss_netif+0x50>
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ad0e:	8a7a      	ldrh	r2, [r7, #18]
 800ad10:	89fb      	ldrh	r3, [r7, #14]
 800ad12:	4293      	cmp	r3, r2
 800ad14:	bf28      	it	cs
 800ad16:	4613      	movcs	r3, r2
 800ad18:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ad1a:	89fb      	ldrh	r3, [r7, #14]
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3718      	adds	r7, #24
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}
 800ad24:	0801346c 	.word	0x0801346c
 800ad28:	08013b78 	.word	0x08013b78
 800ad2c:	080134b0 	.word	0x080134b0

0800ad30 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b084      	sub	sp, #16
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d119      	bne.n	800ad78 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ad44:	4b10      	ldr	r3, [pc, #64]	@ (800ad88 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ad46:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800ad4a:	4910      	ldr	r1, [pc, #64]	@ (800ad8c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ad4c:	4810      	ldr	r0, [pc, #64]	@ (800ad90 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ad4e:	f006 fe41 	bl	80119d4 <iprintf>

  while (pcb != NULL) {
 800ad52:	e011      	b.n	800ad78 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681a      	ldr	r2, [r3, #0]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d108      	bne.n	800ad72 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	68db      	ldr	r3, [r3, #12]
 800ad64:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ad66:	68f8      	ldr	r0, [r7, #12]
 800ad68:	f7fe ffc0 	bl	8009cec <tcp_abort>
      pcb = next;
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	60fb      	str	r3, [r7, #12]
 800ad70:	e002      	b.n	800ad78 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	68db      	ldr	r3, [r3, #12]
 800ad76:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d1ea      	bne.n	800ad54 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ad7e:	bf00      	nop
 800ad80:	bf00      	nop
 800ad82:	3710      	adds	r7, #16
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	0801346c 	.word	0x0801346c
 800ad8c:	08013ba0 	.word	0x08013ba0
 800ad90:	080134b0 	.word	0x080134b0

0800ad94 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b084      	sub	sp, #16
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d02a      	beq.n	800adfa <tcp_netif_ip_addr_changed+0x66>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d026      	beq.n	800adfa <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800adac:	4b15      	ldr	r3, [pc, #84]	@ (800ae04 <tcp_netif_ip_addr_changed+0x70>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4619      	mov	r1, r3
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f7ff ffbc 	bl	800ad30 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800adb8:	4b13      	ldr	r3, [pc, #76]	@ (800ae08 <tcp_netif_ip_addr_changed+0x74>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4619      	mov	r1, r3
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f7ff ffb6 	bl	800ad30 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d017      	beq.n	800adfa <tcp_netif_ip_addr_changed+0x66>
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d013      	beq.n	800adfa <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800add2:	4b0e      	ldr	r3, [pc, #56]	@ (800ae0c <tcp_netif_ip_addr_changed+0x78>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	60fb      	str	r3, [r7, #12]
 800add8:	e00c      	b.n	800adf4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d103      	bne.n	800adee <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	681a      	ldr	r2, [r3, #0]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	68db      	ldr	r3, [r3, #12]
 800adf2:	60fb      	str	r3, [r7, #12]
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d1ef      	bne.n	800adda <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800adfa:	bf00      	nop
 800adfc:	3710      	adds	r7, #16
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop
 800ae04:	2000fdb4 	.word	0x2000fdb4
 800ae08:	2000fdac 	.word	0x2000fdac
 800ae0c:	2000fdb0 	.word	0x2000fdb0

0800ae10 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d007      	beq.n	800ae30 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae24:	4618      	mov	r0, r3
 800ae26:	f7ff fc3d 	bl	800a6a4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800ae30:	bf00      	nop
 800ae32:	3708      	adds	r7, #8
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ae38:	b590      	push	{r4, r7, lr}
 800ae3a:	b08d      	sub	sp, #52	@ 0x34
 800ae3c:	af04      	add	r7, sp, #16
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d105      	bne.n	800ae54 <tcp_input+0x1c>
 800ae48:	4b9b      	ldr	r3, [pc, #620]	@ (800b0b8 <tcp_input+0x280>)
 800ae4a:	2283      	movs	r2, #131	@ 0x83
 800ae4c:	499b      	ldr	r1, [pc, #620]	@ (800b0bc <tcp_input+0x284>)
 800ae4e:	489c      	ldr	r0, [pc, #624]	@ (800b0c0 <tcp_input+0x288>)
 800ae50:	f006 fdc0 	bl	80119d4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	4a9a      	ldr	r2, [pc, #616]	@ (800b0c4 <tcp_input+0x28c>)
 800ae5a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	895b      	ldrh	r3, [r3, #10]
 800ae60:	2b13      	cmp	r3, #19
 800ae62:	f240 83d1 	bls.w	800b608 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ae66:	4b98      	ldr	r3, [pc, #608]	@ (800b0c8 <tcp_input+0x290>)
 800ae68:	695b      	ldr	r3, [r3, #20]
 800ae6a:	4a97      	ldr	r2, [pc, #604]	@ (800b0c8 <tcp_input+0x290>)
 800ae6c:	6812      	ldr	r2, [r2, #0]
 800ae6e:	4611      	mov	r1, r2
 800ae70:	4618      	mov	r0, r3
 800ae72:	f005 fc43 	bl	80106fc <ip4_addr_isbroadcast_u32>
 800ae76:	4603      	mov	r3, r0
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	f040 83c7 	bne.w	800b60c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ae7e:	4b92      	ldr	r3, [pc, #584]	@ (800b0c8 <tcp_input+0x290>)
 800ae80:	695b      	ldr	r3, [r3, #20]
 800ae82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ae86:	2be0      	cmp	r3, #224	@ 0xe0
 800ae88:	f000 83c0 	beq.w	800b60c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ae8c:	4b8d      	ldr	r3, [pc, #564]	@ (800b0c4 <tcp_input+0x28c>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	899b      	ldrh	r3, [r3, #12]
 800ae92:	b29b      	uxth	r3, r3
 800ae94:	4618      	mov	r0, r3
 800ae96:	f7fc fd93 	bl	80079c0 <lwip_htons>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	0b1b      	lsrs	r3, r3, #12
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	b2db      	uxtb	r3, r3
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800aea6:	7cbb      	ldrb	r3, [r7, #18]
 800aea8:	2b13      	cmp	r3, #19
 800aeaa:	f240 83b1 	bls.w	800b610 <tcp_input+0x7d8>
 800aeae:	7cbb      	ldrb	r3, [r7, #18]
 800aeb0:	b29a      	uxth	r2, r3
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	891b      	ldrh	r3, [r3, #8]
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	f200 83aa 	bhi.w	800b610 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800aebc:	7cbb      	ldrb	r3, [r7, #18]
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	3b14      	subs	r3, #20
 800aec2:	b29a      	uxth	r2, r3
 800aec4:	4b81      	ldr	r3, [pc, #516]	@ (800b0cc <tcp_input+0x294>)
 800aec6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800aec8:	4b81      	ldr	r3, [pc, #516]	@ (800b0d0 <tcp_input+0x298>)
 800aeca:	2200      	movs	r2, #0
 800aecc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	895a      	ldrh	r2, [r3, #10]
 800aed2:	7cbb      	ldrb	r3, [r7, #18]
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d309      	bcc.n	800aeee <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800aeda:	4b7c      	ldr	r3, [pc, #496]	@ (800b0cc <tcp_input+0x294>)
 800aedc:	881a      	ldrh	r2, [r3, #0]
 800aede:	4b7d      	ldr	r3, [pc, #500]	@ (800b0d4 <tcp_input+0x29c>)
 800aee0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800aee2:	7cbb      	ldrb	r3, [r7, #18]
 800aee4:	4619      	mov	r1, r3
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f7fe f8e6 	bl	80090b8 <pbuf_remove_header>
 800aeec:	e04e      	b.n	800af8c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d105      	bne.n	800af02 <tcp_input+0xca>
 800aef6:	4b70      	ldr	r3, [pc, #448]	@ (800b0b8 <tcp_input+0x280>)
 800aef8:	22c2      	movs	r2, #194	@ 0xc2
 800aefa:	4977      	ldr	r1, [pc, #476]	@ (800b0d8 <tcp_input+0x2a0>)
 800aefc:	4870      	ldr	r0, [pc, #448]	@ (800b0c0 <tcp_input+0x288>)
 800aefe:	f006 fd69 	bl	80119d4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800af02:	2114      	movs	r1, #20
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f7fe f8d7 	bl	80090b8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	895a      	ldrh	r2, [r3, #10]
 800af0e:	4b71      	ldr	r3, [pc, #452]	@ (800b0d4 <tcp_input+0x29c>)
 800af10:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800af12:	4b6e      	ldr	r3, [pc, #440]	@ (800b0cc <tcp_input+0x294>)
 800af14:	881a      	ldrh	r2, [r3, #0]
 800af16:	4b6f      	ldr	r3, [pc, #444]	@ (800b0d4 <tcp_input+0x29c>)
 800af18:	881b      	ldrh	r3, [r3, #0]
 800af1a:	1ad3      	subs	r3, r2, r3
 800af1c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800af1e:	4b6d      	ldr	r3, [pc, #436]	@ (800b0d4 <tcp_input+0x29c>)
 800af20:	881b      	ldrh	r3, [r3, #0]
 800af22:	4619      	mov	r1, r3
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f7fe f8c7 	bl	80090b8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	895b      	ldrh	r3, [r3, #10]
 800af30:	8a3a      	ldrh	r2, [r7, #16]
 800af32:	429a      	cmp	r2, r3
 800af34:	f200 836e 	bhi.w	800b614 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	685b      	ldr	r3, [r3, #4]
 800af3e:	4a64      	ldr	r2, [pc, #400]	@ (800b0d0 <tcp_input+0x298>)
 800af40:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	8a3a      	ldrh	r2, [r7, #16]
 800af48:	4611      	mov	r1, r2
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7fe f8b4 	bl	80090b8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	891a      	ldrh	r2, [r3, #8]
 800af54:	8a3b      	ldrh	r3, [r7, #16]
 800af56:	1ad3      	subs	r3, r2, r3
 800af58:	b29a      	uxth	r2, r3
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	895b      	ldrh	r3, [r3, #10]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d005      	beq.n	800af72 <tcp_input+0x13a>
 800af66:	4b54      	ldr	r3, [pc, #336]	@ (800b0b8 <tcp_input+0x280>)
 800af68:	22df      	movs	r2, #223	@ 0xdf
 800af6a:	495c      	ldr	r1, [pc, #368]	@ (800b0dc <tcp_input+0x2a4>)
 800af6c:	4854      	ldr	r0, [pc, #336]	@ (800b0c0 <tcp_input+0x288>)
 800af6e:	f006 fd31 	bl	80119d4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	891a      	ldrh	r2, [r3, #8]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	891b      	ldrh	r3, [r3, #8]
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d005      	beq.n	800af8c <tcp_input+0x154>
 800af80:	4b4d      	ldr	r3, [pc, #308]	@ (800b0b8 <tcp_input+0x280>)
 800af82:	22e0      	movs	r2, #224	@ 0xe0
 800af84:	4956      	ldr	r1, [pc, #344]	@ (800b0e0 <tcp_input+0x2a8>)
 800af86:	484e      	ldr	r0, [pc, #312]	@ (800b0c0 <tcp_input+0x288>)
 800af88:	f006 fd24 	bl	80119d4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800af8c:	4b4d      	ldr	r3, [pc, #308]	@ (800b0c4 <tcp_input+0x28c>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	881b      	ldrh	r3, [r3, #0]
 800af92:	b29b      	uxth	r3, r3
 800af94:	4a4b      	ldr	r2, [pc, #300]	@ (800b0c4 <tcp_input+0x28c>)
 800af96:	6814      	ldr	r4, [r2, #0]
 800af98:	4618      	mov	r0, r3
 800af9a:	f7fc fd11 	bl	80079c0 <lwip_htons>
 800af9e:	4603      	mov	r3, r0
 800afa0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800afa2:	4b48      	ldr	r3, [pc, #288]	@ (800b0c4 <tcp_input+0x28c>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	885b      	ldrh	r3, [r3, #2]
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	4a46      	ldr	r2, [pc, #280]	@ (800b0c4 <tcp_input+0x28c>)
 800afac:	6814      	ldr	r4, [r2, #0]
 800afae:	4618      	mov	r0, r3
 800afb0:	f7fc fd06 	bl	80079c0 <lwip_htons>
 800afb4:	4603      	mov	r3, r0
 800afb6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800afb8:	4b42      	ldr	r3, [pc, #264]	@ (800b0c4 <tcp_input+0x28c>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	4a41      	ldr	r2, [pc, #260]	@ (800b0c4 <tcp_input+0x28c>)
 800afc0:	6814      	ldr	r4, [r2, #0]
 800afc2:	4618      	mov	r0, r3
 800afc4:	f7fc fd11 	bl	80079ea <lwip_htonl>
 800afc8:	4603      	mov	r3, r0
 800afca:	6063      	str	r3, [r4, #4]
 800afcc:	6863      	ldr	r3, [r4, #4]
 800afce:	4a45      	ldr	r2, [pc, #276]	@ (800b0e4 <tcp_input+0x2ac>)
 800afd0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800afd2:	4b3c      	ldr	r3, [pc, #240]	@ (800b0c4 <tcp_input+0x28c>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	689b      	ldr	r3, [r3, #8]
 800afd8:	4a3a      	ldr	r2, [pc, #232]	@ (800b0c4 <tcp_input+0x28c>)
 800afda:	6814      	ldr	r4, [r2, #0]
 800afdc:	4618      	mov	r0, r3
 800afde:	f7fc fd04 	bl	80079ea <lwip_htonl>
 800afe2:	4603      	mov	r3, r0
 800afe4:	60a3      	str	r3, [r4, #8]
 800afe6:	68a3      	ldr	r3, [r4, #8]
 800afe8:	4a3f      	ldr	r2, [pc, #252]	@ (800b0e8 <tcp_input+0x2b0>)
 800afea:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800afec:	4b35      	ldr	r3, [pc, #212]	@ (800b0c4 <tcp_input+0x28c>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	89db      	ldrh	r3, [r3, #14]
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	4a33      	ldr	r2, [pc, #204]	@ (800b0c4 <tcp_input+0x28c>)
 800aff6:	6814      	ldr	r4, [r2, #0]
 800aff8:	4618      	mov	r0, r3
 800affa:	f7fc fce1 	bl	80079c0 <lwip_htons>
 800affe:	4603      	mov	r3, r0
 800b000:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800b002:	4b30      	ldr	r3, [pc, #192]	@ (800b0c4 <tcp_input+0x28c>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	899b      	ldrh	r3, [r3, #12]
 800b008:	b29b      	uxth	r3, r3
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7fc fcd8 	bl	80079c0 <lwip_htons>
 800b010:	4603      	mov	r3, r0
 800b012:	b2db      	uxtb	r3, r3
 800b014:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b018:	b2da      	uxtb	r2, r3
 800b01a:	4b34      	ldr	r3, [pc, #208]	@ (800b0ec <tcp_input+0x2b4>)
 800b01c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	891a      	ldrh	r2, [r3, #8]
 800b022:	4b33      	ldr	r3, [pc, #204]	@ (800b0f0 <tcp_input+0x2b8>)
 800b024:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b026:	4b31      	ldr	r3, [pc, #196]	@ (800b0ec <tcp_input+0x2b4>)
 800b028:	781b      	ldrb	r3, [r3, #0]
 800b02a:	f003 0303 	and.w	r3, r3, #3
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d00c      	beq.n	800b04c <tcp_input+0x214>
    tcplen++;
 800b032:	4b2f      	ldr	r3, [pc, #188]	@ (800b0f0 <tcp_input+0x2b8>)
 800b034:	881b      	ldrh	r3, [r3, #0]
 800b036:	3301      	adds	r3, #1
 800b038:	b29a      	uxth	r2, r3
 800b03a:	4b2d      	ldr	r3, [pc, #180]	@ (800b0f0 <tcp_input+0x2b8>)
 800b03c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	891a      	ldrh	r2, [r3, #8]
 800b042:	4b2b      	ldr	r3, [pc, #172]	@ (800b0f0 <tcp_input+0x2b8>)
 800b044:	881b      	ldrh	r3, [r3, #0]
 800b046:	429a      	cmp	r2, r3
 800b048:	f200 82e6 	bhi.w	800b618 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800b04c:	2300      	movs	r3, #0
 800b04e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b050:	4b28      	ldr	r3, [pc, #160]	@ (800b0f4 <tcp_input+0x2bc>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	61fb      	str	r3, [r7, #28]
 800b056:	e09d      	b.n	800b194 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b058:	69fb      	ldr	r3, [r7, #28]
 800b05a:	7d1b      	ldrb	r3, [r3, #20]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d105      	bne.n	800b06c <tcp_input+0x234>
 800b060:	4b15      	ldr	r3, [pc, #84]	@ (800b0b8 <tcp_input+0x280>)
 800b062:	22fb      	movs	r2, #251	@ 0xfb
 800b064:	4924      	ldr	r1, [pc, #144]	@ (800b0f8 <tcp_input+0x2c0>)
 800b066:	4816      	ldr	r0, [pc, #88]	@ (800b0c0 <tcp_input+0x288>)
 800b068:	f006 fcb4 	bl	80119d4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b06c:	69fb      	ldr	r3, [r7, #28]
 800b06e:	7d1b      	ldrb	r3, [r3, #20]
 800b070:	2b0a      	cmp	r3, #10
 800b072:	d105      	bne.n	800b080 <tcp_input+0x248>
 800b074:	4b10      	ldr	r3, [pc, #64]	@ (800b0b8 <tcp_input+0x280>)
 800b076:	22fc      	movs	r2, #252	@ 0xfc
 800b078:	4920      	ldr	r1, [pc, #128]	@ (800b0fc <tcp_input+0x2c4>)
 800b07a:	4811      	ldr	r0, [pc, #68]	@ (800b0c0 <tcp_input+0x288>)
 800b07c:	f006 fcaa 	bl	80119d4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	7d1b      	ldrb	r3, [r3, #20]
 800b084:	2b01      	cmp	r3, #1
 800b086:	d105      	bne.n	800b094 <tcp_input+0x25c>
 800b088:	4b0b      	ldr	r3, [pc, #44]	@ (800b0b8 <tcp_input+0x280>)
 800b08a:	22fd      	movs	r2, #253	@ 0xfd
 800b08c:	491c      	ldr	r1, [pc, #112]	@ (800b100 <tcp_input+0x2c8>)
 800b08e:	480c      	ldr	r0, [pc, #48]	@ (800b0c0 <tcp_input+0x288>)
 800b090:	f006 fca0 	bl	80119d4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b094:	69fb      	ldr	r3, [r7, #28]
 800b096:	7a1b      	ldrb	r3, [r3, #8]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d033      	beq.n	800b104 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b09c:	69fb      	ldr	r3, [r7, #28]
 800b09e:	7a1a      	ldrb	r2, [r3, #8]
 800b0a0:	4b09      	ldr	r3, [pc, #36]	@ (800b0c8 <tcp_input+0x290>)
 800b0a2:	685b      	ldr	r3, [r3, #4]
 800b0a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d029      	beq.n	800b104 <tcp_input+0x2cc>
      prev = pcb;
 800b0b0:	69fb      	ldr	r3, [r7, #28]
 800b0b2:	61bb      	str	r3, [r7, #24]
      continue;
 800b0b4:	e06b      	b.n	800b18e <tcp_input+0x356>
 800b0b6:	bf00      	nop
 800b0b8:	08013bd4 	.word	0x08013bd4
 800b0bc:	08013c08 	.word	0x08013c08
 800b0c0:	08013c20 	.word	0x08013c20
 800b0c4:	2000fdd0 	.word	0x2000fdd0
 800b0c8:	200092d8 	.word	0x200092d8
 800b0cc:	2000fdd4 	.word	0x2000fdd4
 800b0d0:	2000fdd8 	.word	0x2000fdd8
 800b0d4:	2000fdd6 	.word	0x2000fdd6
 800b0d8:	08013c48 	.word	0x08013c48
 800b0dc:	08013c58 	.word	0x08013c58
 800b0e0:	08013c64 	.word	0x08013c64
 800b0e4:	2000fde0 	.word	0x2000fde0
 800b0e8:	2000fde4 	.word	0x2000fde4
 800b0ec:	2000fdec 	.word	0x2000fdec
 800b0f0:	2000fdea 	.word	0x2000fdea
 800b0f4:	2000fdb4 	.word	0x2000fdb4
 800b0f8:	08013c84 	.word	0x08013c84
 800b0fc:	08013cac 	.word	0x08013cac
 800b100:	08013cd8 	.word	0x08013cd8
    }

    if (pcb->remote_port == tcphdr->src &&
 800b104:	69fb      	ldr	r3, [r7, #28]
 800b106:	8b1a      	ldrh	r2, [r3, #24]
 800b108:	4b72      	ldr	r3, [pc, #456]	@ (800b2d4 <tcp_input+0x49c>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	881b      	ldrh	r3, [r3, #0]
 800b10e:	b29b      	uxth	r3, r3
 800b110:	429a      	cmp	r2, r3
 800b112:	d13a      	bne.n	800b18a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	8ada      	ldrh	r2, [r3, #22]
 800b118:	4b6e      	ldr	r3, [pc, #440]	@ (800b2d4 <tcp_input+0x49c>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	885b      	ldrh	r3, [r3, #2]
 800b11e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800b120:	429a      	cmp	r2, r3
 800b122:	d132      	bne.n	800b18a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b124:	69fb      	ldr	r3, [r7, #28]
 800b126:	685a      	ldr	r2, [r3, #4]
 800b128:	4b6b      	ldr	r3, [pc, #428]	@ (800b2d8 <tcp_input+0x4a0>)
 800b12a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d12c      	bne.n	800b18a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b130:	69fb      	ldr	r3, [r7, #28]
 800b132:	681a      	ldr	r2, [r3, #0]
 800b134:	4b68      	ldr	r3, [pc, #416]	@ (800b2d8 <tcp_input+0x4a0>)
 800b136:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b138:	429a      	cmp	r2, r3
 800b13a:	d126      	bne.n	800b18a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b13c:	69fb      	ldr	r3, [r7, #28]
 800b13e:	68db      	ldr	r3, [r3, #12]
 800b140:	69fa      	ldr	r2, [r7, #28]
 800b142:	429a      	cmp	r2, r3
 800b144:	d106      	bne.n	800b154 <tcp_input+0x31c>
 800b146:	4b65      	ldr	r3, [pc, #404]	@ (800b2dc <tcp_input+0x4a4>)
 800b148:	f240 120d 	movw	r2, #269	@ 0x10d
 800b14c:	4964      	ldr	r1, [pc, #400]	@ (800b2e0 <tcp_input+0x4a8>)
 800b14e:	4865      	ldr	r0, [pc, #404]	@ (800b2e4 <tcp_input+0x4ac>)
 800b150:	f006 fc40 	bl	80119d4 <iprintf>
      if (prev != NULL) {
 800b154:	69bb      	ldr	r3, [r7, #24]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d00a      	beq.n	800b170 <tcp_input+0x338>
        prev->next = pcb->next;
 800b15a:	69fb      	ldr	r3, [r7, #28]
 800b15c:	68da      	ldr	r2, [r3, #12]
 800b15e:	69bb      	ldr	r3, [r7, #24]
 800b160:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800b162:	4b61      	ldr	r3, [pc, #388]	@ (800b2e8 <tcp_input+0x4b0>)
 800b164:	681a      	ldr	r2, [r3, #0]
 800b166:	69fb      	ldr	r3, [r7, #28]
 800b168:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800b16a:	4a5f      	ldr	r2, [pc, #380]	@ (800b2e8 <tcp_input+0x4b0>)
 800b16c:	69fb      	ldr	r3, [r7, #28]
 800b16e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b170:	69fb      	ldr	r3, [r7, #28]
 800b172:	68db      	ldr	r3, [r3, #12]
 800b174:	69fa      	ldr	r2, [r7, #28]
 800b176:	429a      	cmp	r2, r3
 800b178:	d111      	bne.n	800b19e <tcp_input+0x366>
 800b17a:	4b58      	ldr	r3, [pc, #352]	@ (800b2dc <tcp_input+0x4a4>)
 800b17c:	f240 1215 	movw	r2, #277	@ 0x115
 800b180:	495a      	ldr	r1, [pc, #360]	@ (800b2ec <tcp_input+0x4b4>)
 800b182:	4858      	ldr	r0, [pc, #352]	@ (800b2e4 <tcp_input+0x4ac>)
 800b184:	f006 fc26 	bl	80119d4 <iprintf>
      break;
 800b188:	e009      	b.n	800b19e <tcp_input+0x366>
    }
    prev = pcb;
 800b18a:	69fb      	ldr	r3, [r7, #28]
 800b18c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b18e:	69fb      	ldr	r3, [r7, #28]
 800b190:	68db      	ldr	r3, [r3, #12]
 800b192:	61fb      	str	r3, [r7, #28]
 800b194:	69fb      	ldr	r3, [r7, #28]
 800b196:	2b00      	cmp	r3, #0
 800b198:	f47f af5e 	bne.w	800b058 <tcp_input+0x220>
 800b19c:	e000      	b.n	800b1a0 <tcp_input+0x368>
      break;
 800b19e:	bf00      	nop
  }

  if (pcb == NULL) {
 800b1a0:	69fb      	ldr	r3, [r7, #28]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	f040 80aa 	bne.w	800b2fc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b1a8:	4b51      	ldr	r3, [pc, #324]	@ (800b2f0 <tcp_input+0x4b8>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	61fb      	str	r3, [r7, #28]
 800b1ae:	e03f      	b.n	800b230 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b1b0:	69fb      	ldr	r3, [r7, #28]
 800b1b2:	7d1b      	ldrb	r3, [r3, #20]
 800b1b4:	2b0a      	cmp	r3, #10
 800b1b6:	d006      	beq.n	800b1c6 <tcp_input+0x38e>
 800b1b8:	4b48      	ldr	r3, [pc, #288]	@ (800b2dc <tcp_input+0x4a4>)
 800b1ba:	f240 121f 	movw	r2, #287	@ 0x11f
 800b1be:	494d      	ldr	r1, [pc, #308]	@ (800b2f4 <tcp_input+0x4bc>)
 800b1c0:	4848      	ldr	r0, [pc, #288]	@ (800b2e4 <tcp_input+0x4ac>)
 800b1c2:	f006 fc07 	bl	80119d4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b1c6:	69fb      	ldr	r3, [r7, #28]
 800b1c8:	7a1b      	ldrb	r3, [r3, #8]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d009      	beq.n	800b1e2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b1ce:	69fb      	ldr	r3, [r7, #28]
 800b1d0:	7a1a      	ldrb	r2, [r3, #8]
 800b1d2:	4b41      	ldr	r3, [pc, #260]	@ (800b2d8 <tcp_input+0x4a0>)
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b1da:	3301      	adds	r3, #1
 800b1dc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d122      	bne.n	800b228 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800b1e2:	69fb      	ldr	r3, [r7, #28]
 800b1e4:	8b1a      	ldrh	r2, [r3, #24]
 800b1e6:	4b3b      	ldr	r3, [pc, #236]	@ (800b2d4 <tcp_input+0x49c>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	881b      	ldrh	r3, [r3, #0]
 800b1ec:	b29b      	uxth	r3, r3
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d11b      	bne.n	800b22a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800b1f2:	69fb      	ldr	r3, [r7, #28]
 800b1f4:	8ada      	ldrh	r2, [r3, #22]
 800b1f6:	4b37      	ldr	r3, [pc, #220]	@ (800b2d4 <tcp_input+0x49c>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	885b      	ldrh	r3, [r3, #2]
 800b1fc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d113      	bne.n	800b22a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	685a      	ldr	r2, [r3, #4]
 800b206:	4b34      	ldr	r3, [pc, #208]	@ (800b2d8 <tcp_input+0x4a0>)
 800b208:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d10d      	bne.n	800b22a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b20e:	69fb      	ldr	r3, [r7, #28]
 800b210:	681a      	ldr	r2, [r3, #0]
 800b212:	4b31      	ldr	r3, [pc, #196]	@ (800b2d8 <tcp_input+0x4a0>)
 800b214:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b216:	429a      	cmp	r2, r3
 800b218:	d107      	bne.n	800b22a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800b21a:	69f8      	ldr	r0, [r7, #28]
 800b21c:	f000 fb56 	bl	800b8cc <tcp_timewait_input>
        }
        pbuf_free(p);
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f7fd ffcf 	bl	80091c4 <pbuf_free>
        return;
 800b226:	e1fd      	b.n	800b624 <tcp_input+0x7ec>
        continue;
 800b228:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b22a:	69fb      	ldr	r3, [r7, #28]
 800b22c:	68db      	ldr	r3, [r3, #12]
 800b22e:	61fb      	str	r3, [r7, #28]
 800b230:	69fb      	ldr	r3, [r7, #28]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d1bc      	bne.n	800b1b0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800b236:	2300      	movs	r3, #0
 800b238:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b23a:	4b2f      	ldr	r3, [pc, #188]	@ (800b2f8 <tcp_input+0x4c0>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	617b      	str	r3, [r7, #20]
 800b240:	e02a      	b.n	800b298 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	7a1b      	ldrb	r3, [r3, #8]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d00c      	beq.n	800b264 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	7a1a      	ldrb	r2, [r3, #8]
 800b24e:	4b22      	ldr	r3, [pc, #136]	@ (800b2d8 <tcp_input+0x4a0>)
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b256:	3301      	adds	r3, #1
 800b258:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d002      	beq.n	800b264 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	61bb      	str	r3, [r7, #24]
        continue;
 800b262:	e016      	b.n	800b292 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	8ada      	ldrh	r2, [r3, #22]
 800b268:	4b1a      	ldr	r3, [pc, #104]	@ (800b2d4 <tcp_input+0x49c>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	885b      	ldrh	r3, [r3, #2]
 800b26e:	b29b      	uxth	r3, r3
 800b270:	429a      	cmp	r2, r3
 800b272:	d10c      	bne.n	800b28e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	681a      	ldr	r2, [r3, #0]
 800b278:	4b17      	ldr	r3, [pc, #92]	@ (800b2d8 <tcp_input+0x4a0>)
 800b27a:	695b      	ldr	r3, [r3, #20]
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d00f      	beq.n	800b2a0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d00d      	beq.n	800b2a2 <tcp_input+0x46a>
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d009      	beq.n	800b2a2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	68db      	ldr	r3, [r3, #12]
 800b296:	617b      	str	r3, [r7, #20]
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d1d1      	bne.n	800b242 <tcp_input+0x40a>
 800b29e:	e000      	b.n	800b2a2 <tcp_input+0x46a>
            break;
 800b2a0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d029      	beq.n	800b2fc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800b2a8:	69bb      	ldr	r3, [r7, #24]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d00a      	beq.n	800b2c4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	68da      	ldr	r2, [r3, #12]
 800b2b2:	69bb      	ldr	r3, [r7, #24]
 800b2b4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b2b6:	4b10      	ldr	r3, [pc, #64]	@ (800b2f8 <tcp_input+0x4c0>)
 800b2b8:	681a      	ldr	r2, [r3, #0]
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b2be:	4a0e      	ldr	r2, [pc, #56]	@ (800b2f8 <tcp_input+0x4c0>)
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800b2c4:	6978      	ldr	r0, [r7, #20]
 800b2c6:	f000 fa03 	bl	800b6d0 <tcp_listen_input>
      }
      pbuf_free(p);
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f7fd ff7a 	bl	80091c4 <pbuf_free>
      return;
 800b2d0:	e1a8      	b.n	800b624 <tcp_input+0x7ec>
 800b2d2:	bf00      	nop
 800b2d4:	2000fdd0 	.word	0x2000fdd0
 800b2d8:	200092d8 	.word	0x200092d8
 800b2dc:	08013bd4 	.word	0x08013bd4
 800b2e0:	08013d00 	.word	0x08013d00
 800b2e4:	08013c20 	.word	0x08013c20
 800b2e8:	2000fdb4 	.word	0x2000fdb4
 800b2ec:	08013d2c 	.word	0x08013d2c
 800b2f0:	2000fdb8 	.word	0x2000fdb8
 800b2f4:	08013d58 	.word	0x08013d58
 800b2f8:	2000fdb0 	.word	0x2000fdb0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800b2fc:	69fb      	ldr	r3, [r7, #28]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	f000 8158 	beq.w	800b5b4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800b304:	4b95      	ldr	r3, [pc, #596]	@ (800b55c <tcp_input+0x724>)
 800b306:	2200      	movs	r2, #0
 800b308:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	891a      	ldrh	r2, [r3, #8]
 800b30e:	4b93      	ldr	r3, [pc, #588]	@ (800b55c <tcp_input+0x724>)
 800b310:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800b312:	4a92      	ldr	r2, [pc, #584]	@ (800b55c <tcp_input+0x724>)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b318:	4b91      	ldr	r3, [pc, #580]	@ (800b560 <tcp_input+0x728>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4a8f      	ldr	r2, [pc, #572]	@ (800b55c <tcp_input+0x724>)
 800b31e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800b320:	4b90      	ldr	r3, [pc, #576]	@ (800b564 <tcp_input+0x72c>)
 800b322:	2200      	movs	r2, #0
 800b324:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800b326:	4b90      	ldr	r3, [pc, #576]	@ (800b568 <tcp_input+0x730>)
 800b328:	2200      	movs	r2, #0
 800b32a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800b32c:	4b8f      	ldr	r3, [pc, #572]	@ (800b56c <tcp_input+0x734>)
 800b32e:	2200      	movs	r2, #0
 800b330:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800b332:	4b8f      	ldr	r3, [pc, #572]	@ (800b570 <tcp_input+0x738>)
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	f003 0308 	and.w	r3, r3, #8
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d006      	beq.n	800b34c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	7b5b      	ldrb	r3, [r3, #13]
 800b342:	f043 0301 	orr.w	r3, r3, #1
 800b346:	b2da      	uxtb	r2, r3
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800b34c:	69fb      	ldr	r3, [r7, #28]
 800b34e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b350:	2b00      	cmp	r3, #0
 800b352:	d017      	beq.n	800b384 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b354:	69f8      	ldr	r0, [r7, #28]
 800b356:	f7ff f927 	bl	800a5a8 <tcp_process_refused_data>
 800b35a:	4603      	mov	r3, r0
 800b35c:	f113 0f0d 	cmn.w	r3, #13
 800b360:	d007      	beq.n	800b372 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b362:	69fb      	ldr	r3, [r7, #28]
 800b364:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b366:	2b00      	cmp	r3, #0
 800b368:	d00c      	beq.n	800b384 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b36a:	4b82      	ldr	r3, [pc, #520]	@ (800b574 <tcp_input+0x73c>)
 800b36c:	881b      	ldrh	r3, [r3, #0]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d008      	beq.n	800b384 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b376:	2b00      	cmp	r3, #0
 800b378:	f040 80e4 	bne.w	800b544 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800b37c:	69f8      	ldr	r0, [r7, #28]
 800b37e:	f003 f9a9 	bl	800e6d4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800b382:	e0df      	b.n	800b544 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 800b384:	4a7c      	ldr	r2, [pc, #496]	@ (800b578 <tcp_input+0x740>)
 800b386:	69fb      	ldr	r3, [r7, #28]
 800b388:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800b38a:	69f8      	ldr	r0, [r7, #28]
 800b38c:	f000 fb18 	bl	800b9c0 <tcp_process>
 800b390:	4603      	mov	r3, r0
 800b392:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800b394:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b398:	f113 0f0d 	cmn.w	r3, #13
 800b39c:	f000 80d4 	beq.w	800b548 <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 800b3a0:	4b71      	ldr	r3, [pc, #452]	@ (800b568 <tcp_input+0x730>)
 800b3a2:	781b      	ldrb	r3, [r3, #0]
 800b3a4:	f003 0308 	and.w	r3, r3, #8
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d015      	beq.n	800b3d8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b3ac:	69fb      	ldr	r3, [r7, #28]
 800b3ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d008      	beq.n	800b3c8 <tcp_input+0x590>
 800b3b6:	69fb      	ldr	r3, [r7, #28]
 800b3b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3bc:	69fa      	ldr	r2, [r7, #28]
 800b3be:	6912      	ldr	r2, [r2, #16]
 800b3c0:	f06f 010d 	mvn.w	r1, #13
 800b3c4:	4610      	mov	r0, r2
 800b3c6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b3c8:	69f9      	ldr	r1, [r7, #28]
 800b3ca:	486c      	ldr	r0, [pc, #432]	@ (800b57c <tcp_input+0x744>)
 800b3cc:	f7ff fbbc 	bl	800ab48 <tcp_pcb_remove>
        tcp_free(pcb);
 800b3d0:	69f8      	ldr	r0, [r7, #28]
 800b3d2:	f7fe f9a3 	bl	800971c <tcp_free>
 800b3d6:	e0da      	b.n	800b58e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800b3dc:	4b63      	ldr	r3, [pc, #396]	@ (800b56c <tcp_input+0x734>)
 800b3de:	881b      	ldrh	r3, [r3, #0]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d01d      	beq.n	800b420 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800b3e4:	4b61      	ldr	r3, [pc, #388]	@ (800b56c <tcp_input+0x734>)
 800b3e6:	881b      	ldrh	r3, [r3, #0]
 800b3e8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b3ea:	69fb      	ldr	r3, [r7, #28]
 800b3ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d00a      	beq.n	800b40a <tcp_input+0x5d2>
 800b3f4:	69fb      	ldr	r3, [r7, #28]
 800b3f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3fa:	69fa      	ldr	r2, [r7, #28]
 800b3fc:	6910      	ldr	r0, [r2, #16]
 800b3fe:	89fa      	ldrh	r2, [r7, #14]
 800b400:	69f9      	ldr	r1, [r7, #28]
 800b402:	4798      	blx	r3
 800b404:	4603      	mov	r3, r0
 800b406:	74fb      	strb	r3, [r7, #19]
 800b408:	e001      	b.n	800b40e <tcp_input+0x5d6>
 800b40a:	2300      	movs	r3, #0
 800b40c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b40e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b412:	f113 0f0d 	cmn.w	r3, #13
 800b416:	f000 8099 	beq.w	800b54c <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 800b41a:	4b54      	ldr	r3, [pc, #336]	@ (800b56c <tcp_input+0x734>)
 800b41c:	2200      	movs	r2, #0
 800b41e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800b420:	69f8      	ldr	r0, [r7, #28]
 800b422:	f000 f915 	bl	800b650 <tcp_input_delayed_close>
 800b426:	4603      	mov	r3, r0
 800b428:	2b00      	cmp	r3, #0
 800b42a:	f040 8091 	bne.w	800b550 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800b42e:	4b4d      	ldr	r3, [pc, #308]	@ (800b564 <tcp_input+0x72c>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d041      	beq.n	800b4ba <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b436:	69fb      	ldr	r3, [r7, #28]
 800b438:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d006      	beq.n	800b44c <tcp_input+0x614>
 800b43e:	4b50      	ldr	r3, [pc, #320]	@ (800b580 <tcp_input+0x748>)
 800b440:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800b444:	494f      	ldr	r1, [pc, #316]	@ (800b584 <tcp_input+0x74c>)
 800b446:	4850      	ldr	r0, [pc, #320]	@ (800b588 <tcp_input+0x750>)
 800b448:	f006 fac4 	bl	80119d4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b44c:	69fb      	ldr	r3, [r7, #28]
 800b44e:	8b5b      	ldrh	r3, [r3, #26]
 800b450:	f003 0310 	and.w	r3, r3, #16
 800b454:	2b00      	cmp	r3, #0
 800b456:	d008      	beq.n	800b46a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800b458:	4b42      	ldr	r3, [pc, #264]	@ (800b564 <tcp_input+0x72c>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7fd feb1 	bl	80091c4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800b462:	69f8      	ldr	r0, [r7, #28]
 800b464:	f7fe fc42 	bl	8009cec <tcp_abort>
            goto aborted;
 800b468:	e091      	b.n	800b58e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b46a:	69fb      	ldr	r3, [r7, #28]
 800b46c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b470:	2b00      	cmp	r3, #0
 800b472:	d00c      	beq.n	800b48e <tcp_input+0x656>
 800b474:	69fb      	ldr	r3, [r7, #28]
 800b476:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800b47a:	69fb      	ldr	r3, [r7, #28]
 800b47c:	6918      	ldr	r0, [r3, #16]
 800b47e:	4b39      	ldr	r3, [pc, #228]	@ (800b564 <tcp_input+0x72c>)
 800b480:	681a      	ldr	r2, [r3, #0]
 800b482:	2300      	movs	r3, #0
 800b484:	69f9      	ldr	r1, [r7, #28]
 800b486:	47a0      	blx	r4
 800b488:	4603      	mov	r3, r0
 800b48a:	74fb      	strb	r3, [r7, #19]
 800b48c:	e008      	b.n	800b4a0 <tcp_input+0x668>
 800b48e:	4b35      	ldr	r3, [pc, #212]	@ (800b564 <tcp_input+0x72c>)
 800b490:	681a      	ldr	r2, [r3, #0]
 800b492:	2300      	movs	r3, #0
 800b494:	69f9      	ldr	r1, [r7, #28]
 800b496:	2000      	movs	r0, #0
 800b498:	f7ff f95e 	bl	800a758 <tcp_recv_null>
 800b49c:	4603      	mov	r3, r0
 800b49e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800b4a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b4a4:	f113 0f0d 	cmn.w	r3, #13
 800b4a8:	d054      	beq.n	800b554 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800b4aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d003      	beq.n	800b4ba <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800b4b2:	4b2c      	ldr	r3, [pc, #176]	@ (800b564 <tcp_input+0x72c>)
 800b4b4:	681a      	ldr	r2, [r3, #0]
 800b4b6:	69fb      	ldr	r3, [r7, #28]
 800b4b8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800b4ba:	4b2b      	ldr	r3, [pc, #172]	@ (800b568 <tcp_input+0x730>)
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	f003 0320 	and.w	r3, r3, #32
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d031      	beq.n	800b52a <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 800b4c6:	69fb      	ldr	r3, [r7, #28]
 800b4c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d009      	beq.n	800b4e2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b4ce:	69fb      	ldr	r3, [r7, #28]
 800b4d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b4d2:	7b5a      	ldrb	r2, [r3, #13]
 800b4d4:	69fb      	ldr	r3, [r7, #28]
 800b4d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b4d8:	f042 0220 	orr.w	r2, r2, #32
 800b4dc:	b2d2      	uxtb	r2, r2
 800b4de:	735a      	strb	r2, [r3, #13]
 800b4e0:	e023      	b.n	800b52a <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b4e2:	69fb      	ldr	r3, [r7, #28]
 800b4e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b4e6:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d005      	beq.n	800b4fa <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 800b4ee:	69fb      	ldr	r3, [r7, #28]
 800b4f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	b29a      	uxth	r2, r3
 800b4f6:	69fb      	ldr	r3, [r7, #28]
 800b4f8:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800b4fa:	69fb      	ldr	r3, [r7, #28]
 800b4fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b500:	2b00      	cmp	r3, #0
 800b502:	d00b      	beq.n	800b51c <tcp_input+0x6e4>
 800b504:	69fb      	ldr	r3, [r7, #28]
 800b506:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800b50a:	69fb      	ldr	r3, [r7, #28]
 800b50c:	6918      	ldr	r0, [r3, #16]
 800b50e:	2300      	movs	r3, #0
 800b510:	2200      	movs	r2, #0
 800b512:	69f9      	ldr	r1, [r7, #28]
 800b514:	47a0      	blx	r4
 800b516:	4603      	mov	r3, r0
 800b518:	74fb      	strb	r3, [r7, #19]
 800b51a:	e001      	b.n	800b520 <tcp_input+0x6e8>
 800b51c:	2300      	movs	r3, #0
 800b51e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b520:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b524:	f113 0f0d 	cmn.w	r3, #13
 800b528:	d016      	beq.n	800b558 <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800b52a:	4b13      	ldr	r3, [pc, #76]	@ (800b578 <tcp_input+0x740>)
 800b52c:	2200      	movs	r2, #0
 800b52e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b530:	69f8      	ldr	r0, [r7, #28]
 800b532:	f000 f88d 	bl	800b650 <tcp_input_delayed_close>
 800b536:	4603      	mov	r3, r0
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d127      	bne.n	800b58c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800b53c:	69f8      	ldr	r0, [r7, #28]
 800b53e:	f002 fac3 	bl	800dac8 <tcp_output>
 800b542:	e024      	b.n	800b58e <tcp_input+0x756>
        goto aborted;
 800b544:	bf00      	nop
 800b546:	e022      	b.n	800b58e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800b548:	bf00      	nop
 800b54a:	e020      	b.n	800b58e <tcp_input+0x756>
              goto aborted;
 800b54c:	bf00      	nop
 800b54e:	e01e      	b.n	800b58e <tcp_input+0x756>
          goto aborted;
 800b550:	bf00      	nop
 800b552:	e01c      	b.n	800b58e <tcp_input+0x756>
            goto aborted;
 800b554:	bf00      	nop
 800b556:	e01a      	b.n	800b58e <tcp_input+0x756>
              goto aborted;
 800b558:	bf00      	nop
 800b55a:	e018      	b.n	800b58e <tcp_input+0x756>
 800b55c:	2000fdc0 	.word	0x2000fdc0
 800b560:	2000fdd0 	.word	0x2000fdd0
 800b564:	2000fdf0 	.word	0x2000fdf0
 800b568:	2000fded 	.word	0x2000fded
 800b56c:	2000fde8 	.word	0x2000fde8
 800b570:	2000fdec 	.word	0x2000fdec
 800b574:	2000fdea 	.word	0x2000fdea
 800b578:	2000fdf4 	.word	0x2000fdf4
 800b57c:	2000fdb4 	.word	0x2000fdb4
 800b580:	08013bd4 	.word	0x08013bd4
 800b584:	08013d88 	.word	0x08013d88
 800b588:	08013c20 	.word	0x08013c20
          goto aborted;
 800b58c:	bf00      	nop
    tcp_input_pcb = NULL;
 800b58e:	4b27      	ldr	r3, [pc, #156]	@ (800b62c <tcp_input+0x7f4>)
 800b590:	2200      	movs	r2, #0
 800b592:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800b594:	4b26      	ldr	r3, [pc, #152]	@ (800b630 <tcp_input+0x7f8>)
 800b596:	2200      	movs	r2, #0
 800b598:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800b59a:	4b26      	ldr	r3, [pc, #152]	@ (800b634 <tcp_input+0x7fc>)
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d03f      	beq.n	800b622 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800b5a2:	4b24      	ldr	r3, [pc, #144]	@ (800b634 <tcp_input+0x7fc>)
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f7fd fe0c 	bl	80091c4 <pbuf_free>
      inseg.p = NULL;
 800b5ac:	4b21      	ldr	r3, [pc, #132]	@ (800b634 <tcp_input+0x7fc>)
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800b5b2:	e036      	b.n	800b622 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b5b4:	4b20      	ldr	r3, [pc, #128]	@ (800b638 <tcp_input+0x800>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	899b      	ldrh	r3, [r3, #12]
 800b5ba:	b29b      	uxth	r3, r3
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f7fc f9ff 	bl	80079c0 <lwip_htons>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	b2db      	uxtb	r3, r3
 800b5c6:	f003 0304 	and.w	r3, r3, #4
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d118      	bne.n	800b600 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b5ce:	4b1b      	ldr	r3, [pc, #108]	@ (800b63c <tcp_input+0x804>)
 800b5d0:	6819      	ldr	r1, [r3, #0]
 800b5d2:	4b1b      	ldr	r3, [pc, #108]	@ (800b640 <tcp_input+0x808>)
 800b5d4:	881b      	ldrh	r3, [r3, #0]
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	4b1a      	ldr	r3, [pc, #104]	@ (800b644 <tcp_input+0x80c>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b5de:	4b16      	ldr	r3, [pc, #88]	@ (800b638 <tcp_input+0x800>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b5e2:	885b      	ldrh	r3, [r3, #2]
 800b5e4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b5e6:	4a14      	ldr	r2, [pc, #80]	@ (800b638 <tcp_input+0x800>)
 800b5e8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b5ea:	8812      	ldrh	r2, [r2, #0]
 800b5ec:	b292      	uxth	r2, r2
 800b5ee:	9202      	str	r2, [sp, #8]
 800b5f0:	9301      	str	r3, [sp, #4]
 800b5f2:	4b15      	ldr	r3, [pc, #84]	@ (800b648 <tcp_input+0x810>)
 800b5f4:	9300      	str	r3, [sp, #0]
 800b5f6:	4b15      	ldr	r3, [pc, #84]	@ (800b64c <tcp_input+0x814>)
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	2000      	movs	r0, #0
 800b5fc:	f003 f818 	bl	800e630 <tcp_rst>
    pbuf_free(p);
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f7fd fddf 	bl	80091c4 <pbuf_free>
  return;
 800b606:	e00c      	b.n	800b622 <tcp_input+0x7ea>
    goto dropped;
 800b608:	bf00      	nop
 800b60a:	e006      	b.n	800b61a <tcp_input+0x7e2>
    goto dropped;
 800b60c:	bf00      	nop
 800b60e:	e004      	b.n	800b61a <tcp_input+0x7e2>
    goto dropped;
 800b610:	bf00      	nop
 800b612:	e002      	b.n	800b61a <tcp_input+0x7e2>
      goto dropped;
 800b614:	bf00      	nop
 800b616:	e000      	b.n	800b61a <tcp_input+0x7e2>
      goto dropped;
 800b618:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f7fd fdd2 	bl	80091c4 <pbuf_free>
 800b620:	e000      	b.n	800b624 <tcp_input+0x7ec>
  return;
 800b622:	bf00      	nop
}
 800b624:	3724      	adds	r7, #36	@ 0x24
 800b626:	46bd      	mov	sp, r7
 800b628:	bd90      	pop	{r4, r7, pc}
 800b62a:	bf00      	nop
 800b62c:	2000fdf4 	.word	0x2000fdf4
 800b630:	2000fdf0 	.word	0x2000fdf0
 800b634:	2000fdc0 	.word	0x2000fdc0
 800b638:	2000fdd0 	.word	0x2000fdd0
 800b63c:	2000fde4 	.word	0x2000fde4
 800b640:	2000fdea 	.word	0x2000fdea
 800b644:	2000fde0 	.word	0x2000fde0
 800b648:	200092e8 	.word	0x200092e8
 800b64c:	200092ec 	.word	0x200092ec

0800b650 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d106      	bne.n	800b66c <tcp_input_delayed_close+0x1c>
 800b65e:	4b17      	ldr	r3, [pc, #92]	@ (800b6bc <tcp_input_delayed_close+0x6c>)
 800b660:	f240 225a 	movw	r2, #602	@ 0x25a
 800b664:	4916      	ldr	r1, [pc, #88]	@ (800b6c0 <tcp_input_delayed_close+0x70>)
 800b666:	4817      	ldr	r0, [pc, #92]	@ (800b6c4 <tcp_input_delayed_close+0x74>)
 800b668:	f006 f9b4 	bl	80119d4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800b66c:	4b16      	ldr	r3, [pc, #88]	@ (800b6c8 <tcp_input_delayed_close+0x78>)
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	f003 0310 	and.w	r3, r3, #16
 800b674:	2b00      	cmp	r3, #0
 800b676:	d01c      	beq.n	800b6b2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	8b5b      	ldrh	r3, [r3, #26]
 800b67c:	f003 0310 	and.w	r3, r3, #16
 800b680:	2b00      	cmp	r3, #0
 800b682:	d10d      	bne.n	800b6a0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d008      	beq.n	800b6a0 <tcp_input_delayed_close+0x50>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	6912      	ldr	r2, [r2, #16]
 800b698:	f06f 010e 	mvn.w	r1, #14
 800b69c:	4610      	mov	r0, r2
 800b69e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b6a0:	6879      	ldr	r1, [r7, #4]
 800b6a2:	480a      	ldr	r0, [pc, #40]	@ (800b6cc <tcp_input_delayed_close+0x7c>)
 800b6a4:	f7ff fa50 	bl	800ab48 <tcp_pcb_remove>
    tcp_free(pcb);
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f7fe f837 	bl	800971c <tcp_free>
    return 1;
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	e000      	b.n	800b6b4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800b6b2:	2300      	movs	r3, #0
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3708      	adds	r7, #8
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	08013bd4 	.word	0x08013bd4
 800b6c0:	08013da4 	.word	0x08013da4
 800b6c4:	08013c20 	.word	0x08013c20
 800b6c8:	2000fded 	.word	0x2000fded
 800b6cc:	2000fdb4 	.word	0x2000fdb4

0800b6d0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800b6d0:	b590      	push	{r4, r7, lr}
 800b6d2:	b08b      	sub	sp, #44	@ 0x2c
 800b6d4:	af04      	add	r7, sp, #16
 800b6d6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800b6d8:	4b6f      	ldr	r3, [pc, #444]	@ (800b898 <tcp_listen_input+0x1c8>)
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	f003 0304 	and.w	r3, r3, #4
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	f040 80d2 	bne.w	800b88a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d106      	bne.n	800b6fa <tcp_listen_input+0x2a>
 800b6ec:	4b6b      	ldr	r3, [pc, #428]	@ (800b89c <tcp_listen_input+0x1cc>)
 800b6ee:	f240 2281 	movw	r2, #641	@ 0x281
 800b6f2:	496b      	ldr	r1, [pc, #428]	@ (800b8a0 <tcp_listen_input+0x1d0>)
 800b6f4:	486b      	ldr	r0, [pc, #428]	@ (800b8a4 <tcp_listen_input+0x1d4>)
 800b6f6:	f006 f96d 	bl	80119d4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800b6fa:	4b67      	ldr	r3, [pc, #412]	@ (800b898 <tcp_listen_input+0x1c8>)
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	f003 0310 	and.w	r3, r3, #16
 800b702:	2b00      	cmp	r3, #0
 800b704:	d019      	beq.n	800b73a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b706:	4b68      	ldr	r3, [pc, #416]	@ (800b8a8 <tcp_listen_input+0x1d8>)
 800b708:	6819      	ldr	r1, [r3, #0]
 800b70a:	4b68      	ldr	r3, [pc, #416]	@ (800b8ac <tcp_listen_input+0x1dc>)
 800b70c:	881b      	ldrh	r3, [r3, #0]
 800b70e:	461a      	mov	r2, r3
 800b710:	4b67      	ldr	r3, [pc, #412]	@ (800b8b0 <tcp_listen_input+0x1e0>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b716:	4b67      	ldr	r3, [pc, #412]	@ (800b8b4 <tcp_listen_input+0x1e4>)
 800b718:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b71a:	885b      	ldrh	r3, [r3, #2]
 800b71c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b71e:	4a65      	ldr	r2, [pc, #404]	@ (800b8b4 <tcp_listen_input+0x1e4>)
 800b720:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b722:	8812      	ldrh	r2, [r2, #0]
 800b724:	b292      	uxth	r2, r2
 800b726:	9202      	str	r2, [sp, #8]
 800b728:	9301      	str	r3, [sp, #4]
 800b72a:	4b63      	ldr	r3, [pc, #396]	@ (800b8b8 <tcp_listen_input+0x1e8>)
 800b72c:	9300      	str	r3, [sp, #0]
 800b72e:	4b63      	ldr	r3, [pc, #396]	@ (800b8bc <tcp_listen_input+0x1ec>)
 800b730:	4602      	mov	r2, r0
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f002 ff7c 	bl	800e630 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800b738:	e0a9      	b.n	800b88e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800b73a:	4b57      	ldr	r3, [pc, #348]	@ (800b898 <tcp_listen_input+0x1c8>)
 800b73c:	781b      	ldrb	r3, [r3, #0]
 800b73e:	f003 0302 	and.w	r3, r3, #2
 800b742:	2b00      	cmp	r3, #0
 800b744:	f000 80a3 	beq.w	800b88e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	7d5b      	ldrb	r3, [r3, #21]
 800b74c:	4618      	mov	r0, r3
 800b74e:	f7ff f927 	bl	800a9a0 <tcp_alloc>
 800b752:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d111      	bne.n	800b77e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	699b      	ldr	r3, [r3, #24]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d00a      	beq.n	800b778 <tcp_listen_input+0xa8>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	699b      	ldr	r3, [r3, #24]
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	6910      	ldr	r0, [r2, #16]
 800b76a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b76e:	2100      	movs	r1, #0
 800b770:	4798      	blx	r3
 800b772:	4603      	mov	r3, r0
 800b774:	73bb      	strb	r3, [r7, #14]
      return;
 800b776:	e08b      	b.n	800b890 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b778:	23f0      	movs	r3, #240	@ 0xf0
 800b77a:	73bb      	strb	r3, [r7, #14]
      return;
 800b77c:	e088      	b.n	800b890 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b77e:	4b50      	ldr	r3, [pc, #320]	@ (800b8c0 <tcp_listen_input+0x1f0>)
 800b780:	695a      	ldr	r2, [r3, #20]
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b786:	4b4e      	ldr	r3, [pc, #312]	@ (800b8c0 <tcp_listen_input+0x1f0>)
 800b788:	691a      	ldr	r2, [r3, #16]
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	8ada      	ldrh	r2, [r3, #22]
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800b796:	4b47      	ldr	r3, [pc, #284]	@ (800b8b4 <tcp_listen_input+0x1e4>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	881b      	ldrh	r3, [r3, #0]
 800b79c:	b29a      	uxth	r2, r3
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	2203      	movs	r2, #3
 800b7a6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800b7a8:	4b41      	ldr	r3, [pc, #260]	@ (800b8b0 <tcp_listen_input+0x1e0>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	1c5a      	adds	r2, r3, #1
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800b7ba:	6978      	ldr	r0, [r7, #20]
 800b7bc:	f7ff fa58 	bl	800ac70 <tcp_next_iss>
 800b7c0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	693a      	ldr	r2, [r7, #16]
 800b7c6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	693a      	ldr	r2, [r7, #16]
 800b7cc:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	693a      	ldr	r2, [r7, #16]
 800b7d2:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800b7d4:	697b      	ldr	r3, [r7, #20]
 800b7d6:	693a      	ldr	r2, [r7, #16]
 800b7d8:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b7da:	4b35      	ldr	r3, [pc, #212]	@ (800b8b0 <tcp_listen_input+0x1e0>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	1e5a      	subs	r2, r3, #1
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	691a      	ldr	r2, [r3, #16]
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	687a      	ldr	r2, [r7, #4]
 800b7f0:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	7a5b      	ldrb	r3, [r3, #9]
 800b7f6:	f003 030c 	and.w	r3, r3, #12
 800b7fa:	b2da      	uxtb	r2, r3
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	7a1a      	ldrb	r2, [r3, #8]
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800b808:	4b2e      	ldr	r3, [pc, #184]	@ (800b8c4 <tcp_listen_input+0x1f4>)
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	60da      	str	r2, [r3, #12]
 800b810:	4a2c      	ldr	r2, [pc, #176]	@ (800b8c4 <tcp_listen_input+0x1f4>)
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	6013      	str	r3, [r2, #0]
 800b816:	f003 f8cd 	bl	800e9b4 <tcp_timer_needed>
 800b81a:	4b2b      	ldr	r3, [pc, #172]	@ (800b8c8 <tcp_listen_input+0x1f8>)
 800b81c:	2201      	movs	r2, #1
 800b81e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b820:	6978      	ldr	r0, [r7, #20]
 800b822:	f001 fd8b 	bl	800d33c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800b826:	4b23      	ldr	r3, [pc, #140]	@ (800b8b4 <tcp_listen_input+0x1e4>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	89db      	ldrh	r3, [r3, #14]
 800b82c:	b29a      	uxth	r2, r3
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	3304      	adds	r3, #4
 800b848:	4618      	mov	r0, r3
 800b84a:	f004 fcc1 	bl	80101d0 <ip4_route>
 800b84e:	4601      	mov	r1, r0
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	3304      	adds	r3, #4
 800b854:	461a      	mov	r2, r3
 800b856:	4620      	mov	r0, r4
 800b858:	f7ff fa30 	bl	800acbc <tcp_eff_send_mss_netif>
 800b85c:	4603      	mov	r3, r0
 800b85e:	461a      	mov	r2, r3
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b864:	2112      	movs	r1, #18
 800b866:	6978      	ldr	r0, [r7, #20]
 800b868:	f002 f840 	bl	800d8ec <tcp_enqueue_flags>
 800b86c:	4603      	mov	r3, r0
 800b86e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800b870:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d004      	beq.n	800b882 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800b878:	2100      	movs	r1, #0
 800b87a:	6978      	ldr	r0, [r7, #20]
 800b87c:	f7fe f978 	bl	8009b70 <tcp_abandon>
      return;
 800b880:	e006      	b.n	800b890 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800b882:	6978      	ldr	r0, [r7, #20]
 800b884:	f002 f920 	bl	800dac8 <tcp_output>
  return;
 800b888:	e001      	b.n	800b88e <tcp_listen_input+0x1be>
    return;
 800b88a:	bf00      	nop
 800b88c:	e000      	b.n	800b890 <tcp_listen_input+0x1c0>
  return;
 800b88e:	bf00      	nop
}
 800b890:	371c      	adds	r7, #28
 800b892:	46bd      	mov	sp, r7
 800b894:	bd90      	pop	{r4, r7, pc}
 800b896:	bf00      	nop
 800b898:	2000fdec 	.word	0x2000fdec
 800b89c:	08013bd4 	.word	0x08013bd4
 800b8a0:	08013dcc 	.word	0x08013dcc
 800b8a4:	08013c20 	.word	0x08013c20
 800b8a8:	2000fde4 	.word	0x2000fde4
 800b8ac:	2000fdea 	.word	0x2000fdea
 800b8b0:	2000fde0 	.word	0x2000fde0
 800b8b4:	2000fdd0 	.word	0x2000fdd0
 800b8b8:	200092e8 	.word	0x200092e8
 800b8bc:	200092ec 	.word	0x200092ec
 800b8c0:	200092d8 	.word	0x200092d8
 800b8c4:	2000fdb4 	.word	0x2000fdb4
 800b8c8:	2000fdbc 	.word	0x2000fdbc

0800b8cc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b086      	sub	sp, #24
 800b8d0:	af04      	add	r7, sp, #16
 800b8d2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800b8d4:	4b2f      	ldr	r3, [pc, #188]	@ (800b994 <tcp_timewait_input+0xc8>)
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	f003 0304 	and.w	r3, r3, #4
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d153      	bne.n	800b988 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d106      	bne.n	800b8f4 <tcp_timewait_input+0x28>
 800b8e6:	4b2c      	ldr	r3, [pc, #176]	@ (800b998 <tcp_timewait_input+0xcc>)
 800b8e8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800b8ec:	492b      	ldr	r1, [pc, #172]	@ (800b99c <tcp_timewait_input+0xd0>)
 800b8ee:	482c      	ldr	r0, [pc, #176]	@ (800b9a0 <tcp_timewait_input+0xd4>)
 800b8f0:	f006 f870 	bl	80119d4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800b8f4:	4b27      	ldr	r3, [pc, #156]	@ (800b994 <tcp_timewait_input+0xc8>)
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	f003 0302 	and.w	r3, r3, #2
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d02a      	beq.n	800b956 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b900:	4b28      	ldr	r3, [pc, #160]	@ (800b9a4 <tcp_timewait_input+0xd8>)
 800b902:	681a      	ldr	r2, [r3, #0]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b908:	1ad3      	subs	r3, r2, r3
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	db2d      	blt.n	800b96a <tcp_timewait_input+0x9e>
 800b90e:	4b25      	ldr	r3, [pc, #148]	@ (800b9a4 <tcp_timewait_input+0xd8>)
 800b910:	681a      	ldr	r2, [r3, #0]
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b916:	6879      	ldr	r1, [r7, #4]
 800b918:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b91a:	440b      	add	r3, r1
 800b91c:	1ad3      	subs	r3, r2, r3
 800b91e:	2b00      	cmp	r3, #0
 800b920:	dc23      	bgt.n	800b96a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b922:	4b21      	ldr	r3, [pc, #132]	@ (800b9a8 <tcp_timewait_input+0xdc>)
 800b924:	6819      	ldr	r1, [r3, #0]
 800b926:	4b21      	ldr	r3, [pc, #132]	@ (800b9ac <tcp_timewait_input+0xe0>)
 800b928:	881b      	ldrh	r3, [r3, #0]
 800b92a:	461a      	mov	r2, r3
 800b92c:	4b1d      	ldr	r3, [pc, #116]	@ (800b9a4 <tcp_timewait_input+0xd8>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b932:	4b1f      	ldr	r3, [pc, #124]	@ (800b9b0 <tcp_timewait_input+0xe4>)
 800b934:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b936:	885b      	ldrh	r3, [r3, #2]
 800b938:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b93a:	4a1d      	ldr	r2, [pc, #116]	@ (800b9b0 <tcp_timewait_input+0xe4>)
 800b93c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b93e:	8812      	ldrh	r2, [r2, #0]
 800b940:	b292      	uxth	r2, r2
 800b942:	9202      	str	r2, [sp, #8]
 800b944:	9301      	str	r3, [sp, #4]
 800b946:	4b1b      	ldr	r3, [pc, #108]	@ (800b9b4 <tcp_timewait_input+0xe8>)
 800b948:	9300      	str	r3, [sp, #0]
 800b94a:	4b1b      	ldr	r3, [pc, #108]	@ (800b9b8 <tcp_timewait_input+0xec>)
 800b94c:	4602      	mov	r2, r0
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f002 fe6e 	bl	800e630 <tcp_rst>
      return;
 800b954:	e01b      	b.n	800b98e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800b956:	4b0f      	ldr	r3, [pc, #60]	@ (800b994 <tcp_timewait_input+0xc8>)
 800b958:	781b      	ldrb	r3, [r3, #0]
 800b95a:	f003 0301 	and.w	r3, r3, #1
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d003      	beq.n	800b96a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b962:	4b16      	ldr	r3, [pc, #88]	@ (800b9bc <tcp_timewait_input+0xf0>)
 800b964:	681a      	ldr	r2, [r3, #0]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b96a:	4b10      	ldr	r3, [pc, #64]	@ (800b9ac <tcp_timewait_input+0xe0>)
 800b96c:	881b      	ldrh	r3, [r3, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d00c      	beq.n	800b98c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	8b5b      	ldrh	r3, [r3, #26]
 800b976:	f043 0302 	orr.w	r3, r3, #2
 800b97a:	b29a      	uxth	r2, r3
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f002 f8a1 	bl	800dac8 <tcp_output>
  }
  return;
 800b986:	e001      	b.n	800b98c <tcp_timewait_input+0xc0>
    return;
 800b988:	bf00      	nop
 800b98a:	e000      	b.n	800b98e <tcp_timewait_input+0xc2>
  return;
 800b98c:	bf00      	nop
}
 800b98e:	3708      	adds	r7, #8
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}
 800b994:	2000fdec 	.word	0x2000fdec
 800b998:	08013bd4 	.word	0x08013bd4
 800b99c:	08013dec 	.word	0x08013dec
 800b9a0:	08013c20 	.word	0x08013c20
 800b9a4:	2000fde0 	.word	0x2000fde0
 800b9a8:	2000fde4 	.word	0x2000fde4
 800b9ac:	2000fdea 	.word	0x2000fdea
 800b9b0:	2000fdd0 	.word	0x2000fdd0
 800b9b4:	200092e8 	.word	0x200092e8
 800b9b8:	200092ec 	.word	0x200092ec
 800b9bc:	2000fda8 	.word	0x2000fda8

0800b9c0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b9c0:	b590      	push	{r4, r7, lr}
 800b9c2:	b08d      	sub	sp, #52	@ 0x34
 800b9c4:	af04      	add	r7, sp, #16
 800b9c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d106      	bne.n	800b9e4 <tcp_process+0x24>
 800b9d6:	4b9d      	ldr	r3, [pc, #628]	@ (800bc4c <tcp_process+0x28c>)
 800b9d8:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800b9dc:	499c      	ldr	r1, [pc, #624]	@ (800bc50 <tcp_process+0x290>)
 800b9de:	489d      	ldr	r0, [pc, #628]	@ (800bc54 <tcp_process+0x294>)
 800b9e0:	f005 fff8 	bl	80119d4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b9e4:	4b9c      	ldr	r3, [pc, #624]	@ (800bc58 <tcp_process+0x298>)
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	f003 0304 	and.w	r3, r3, #4
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d04e      	beq.n	800ba8e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	7d1b      	ldrb	r3, [r3, #20]
 800b9f4:	2b02      	cmp	r3, #2
 800b9f6:	d108      	bne.n	800ba0a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b9fc:	4b97      	ldr	r3, [pc, #604]	@ (800bc5c <tcp_process+0x29c>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d123      	bne.n	800ba4c <tcp_process+0x8c>
        acceptable = 1;
 800ba04:	2301      	movs	r3, #1
 800ba06:	76fb      	strb	r3, [r7, #27]
 800ba08:	e020      	b.n	800ba4c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ba0e:	4b94      	ldr	r3, [pc, #592]	@ (800bc60 <tcp_process+0x2a0>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d102      	bne.n	800ba1c <tcp_process+0x5c>
        acceptable = 1;
 800ba16:	2301      	movs	r3, #1
 800ba18:	76fb      	strb	r3, [r7, #27]
 800ba1a:	e017      	b.n	800ba4c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ba1c:	4b90      	ldr	r3, [pc, #576]	@ (800bc60 <tcp_process+0x2a0>)
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba24:	1ad3      	subs	r3, r2, r3
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	db10      	blt.n	800ba4c <tcp_process+0x8c>
 800ba2a:	4b8d      	ldr	r3, [pc, #564]	@ (800bc60 <tcp_process+0x2a0>)
 800ba2c:	681a      	ldr	r2, [r3, #0]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba32:	6879      	ldr	r1, [r7, #4]
 800ba34:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ba36:	440b      	add	r3, r1
 800ba38:	1ad3      	subs	r3, r2, r3
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	dc06      	bgt.n	800ba4c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	8b5b      	ldrh	r3, [r3, #26]
 800ba42:	f043 0302 	orr.w	r3, r3, #2
 800ba46:	b29a      	uxth	r2, r3
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ba4c:	7efb      	ldrb	r3, [r7, #27]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d01b      	beq.n	800ba8a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	7d1b      	ldrb	r3, [r3, #20]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d106      	bne.n	800ba68 <tcp_process+0xa8>
 800ba5a:	4b7c      	ldr	r3, [pc, #496]	@ (800bc4c <tcp_process+0x28c>)
 800ba5c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800ba60:	4980      	ldr	r1, [pc, #512]	@ (800bc64 <tcp_process+0x2a4>)
 800ba62:	487c      	ldr	r0, [pc, #496]	@ (800bc54 <tcp_process+0x294>)
 800ba64:	f005 ffb6 	bl	80119d4 <iprintf>
      recv_flags |= TF_RESET;
 800ba68:	4b7f      	ldr	r3, [pc, #508]	@ (800bc68 <tcp_process+0x2a8>)
 800ba6a:	781b      	ldrb	r3, [r3, #0]
 800ba6c:	f043 0308 	orr.w	r3, r3, #8
 800ba70:	b2da      	uxtb	r2, r3
 800ba72:	4b7d      	ldr	r3, [pc, #500]	@ (800bc68 <tcp_process+0x2a8>)
 800ba74:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	8b5b      	ldrh	r3, [r3, #26]
 800ba7a:	f023 0301 	bic.w	r3, r3, #1
 800ba7e:	b29a      	uxth	r2, r3
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ba84:	f06f 030d 	mvn.w	r3, #13
 800ba88:	e37a      	b.n	800c180 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	e378      	b.n	800c180 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ba8e:	4b72      	ldr	r3, [pc, #456]	@ (800bc58 <tcp_process+0x298>)
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	f003 0302 	and.w	r3, r3, #2
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d010      	beq.n	800babc <tcp_process+0xfc>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	7d1b      	ldrb	r3, [r3, #20]
 800ba9e:	2b02      	cmp	r3, #2
 800baa0:	d00c      	beq.n	800babc <tcp_process+0xfc>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	7d1b      	ldrb	r3, [r3, #20]
 800baa6:	2b03      	cmp	r3, #3
 800baa8:	d008      	beq.n	800babc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	8b5b      	ldrh	r3, [r3, #26]
 800baae:	f043 0302 	orr.w	r3, r3, #2
 800bab2:	b29a      	uxth	r2, r3
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800bab8:	2300      	movs	r3, #0
 800baba:	e361      	b.n	800c180 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	8b5b      	ldrh	r3, [r3, #26]
 800bac0:	f003 0310 	and.w	r3, r3, #16
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d103      	bne.n	800bad0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800bac8:	4b68      	ldr	r3, [pc, #416]	@ (800bc6c <tcp_process+0x2ac>)
 800baca:	681a      	ldr	r2, [r3, #0]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2200      	movs	r2, #0
 800bad4:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2200      	movs	r2, #0
 800badc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f001 fc2b 	bl	800d33c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	7d1b      	ldrb	r3, [r3, #20]
 800baea:	3b02      	subs	r3, #2
 800baec:	2b07      	cmp	r3, #7
 800baee:	f200 8337 	bhi.w	800c160 <tcp_process+0x7a0>
 800baf2:	a201      	add	r2, pc, #4	@ (adr r2, 800baf8 <tcp_process+0x138>)
 800baf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baf8:	0800bb19 	.word	0x0800bb19
 800bafc:	0800bd49 	.word	0x0800bd49
 800bb00:	0800bec1 	.word	0x0800bec1
 800bb04:	0800beeb 	.word	0x0800beeb
 800bb08:	0800c00f 	.word	0x0800c00f
 800bb0c:	0800bec1 	.word	0x0800bec1
 800bb10:	0800c09b 	.word	0x0800c09b
 800bb14:	0800c12b 	.word	0x0800c12b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800bb18:	4b4f      	ldr	r3, [pc, #316]	@ (800bc58 <tcp_process+0x298>)
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	f003 0310 	and.w	r3, r3, #16
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	f000 80e4 	beq.w	800bcee <tcp_process+0x32e>
 800bb26:	4b4c      	ldr	r3, [pc, #304]	@ (800bc58 <tcp_process+0x298>)
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	f003 0302 	and.w	r3, r3, #2
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	f000 80dd 	beq.w	800bcee <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb38:	1c5a      	adds	r2, r3, #1
 800bb3a:	4b48      	ldr	r3, [pc, #288]	@ (800bc5c <tcp_process+0x29c>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	f040 80d5 	bne.w	800bcee <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800bb44:	4b46      	ldr	r3, [pc, #280]	@ (800bc60 <tcp_process+0x2a0>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	1c5a      	adds	r2, r3, #1
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800bb56:	4b41      	ldr	r3, [pc, #260]	@ (800bc5c <tcp_process+0x29c>)
 800bb58:	681a      	ldr	r2, [r3, #0]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800bb5e:	4b44      	ldr	r3, [pc, #272]	@ (800bc70 <tcp_process+0x2b0>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	89db      	ldrh	r3, [r3, #14]
 800bb64:	b29a      	uxth	r2, r3
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800bb78:	4b39      	ldr	r3, [pc, #228]	@ (800bc60 <tcp_process+0x2a0>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	1e5a      	subs	r2, r3, #1
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2204      	movs	r2, #4
 800bb86:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	3304      	adds	r3, #4
 800bb90:	4618      	mov	r0, r3
 800bb92:	f004 fb1d 	bl	80101d0 <ip4_route>
 800bb96:	4601      	mov	r1, r0
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	3304      	adds	r3, #4
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	4620      	mov	r0, r4
 800bba0:	f7ff f88c 	bl	800acbc <tcp_eff_send_mss_netif>
 800bba4:	4603      	mov	r3, r0
 800bba6:	461a      	mov	r2, r3
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bbb0:	009a      	lsls	r2, r3, #2
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bbb6:	005b      	lsls	r3, r3, #1
 800bbb8:	f241 111c 	movw	r1, #4380	@ 0x111c
 800bbbc:	428b      	cmp	r3, r1
 800bbbe:	bf38      	it	cc
 800bbc0:	460b      	movcc	r3, r1
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d204      	bcs.n	800bbd0 <tcp_process+0x210>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bbca:	009b      	lsls	r3, r3, #2
 800bbcc:	b29b      	uxth	r3, r3
 800bbce:	e00d      	b.n	800bbec <tcp_process+0x22c>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bbd4:	005b      	lsls	r3, r3, #1
 800bbd6:	f241 121c 	movw	r2, #4380	@ 0x111c
 800bbda:	4293      	cmp	r3, r2
 800bbdc:	d904      	bls.n	800bbe8 <tcp_process+0x228>
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bbe2:	005b      	lsls	r3, r3, #1
 800bbe4:	b29b      	uxth	r3, r3
 800bbe6:	e001      	b.n	800bbec <tcp_process+0x22c>
 800bbe8:	f241 131c 	movw	r3, #4380	@ 0x111c
 800bbec:	687a      	ldr	r2, [r7, #4]
 800bbee:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d106      	bne.n	800bc0a <tcp_process+0x24a>
 800bbfc:	4b13      	ldr	r3, [pc, #76]	@ (800bc4c <tcp_process+0x28c>)
 800bbfe:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800bc02:	491c      	ldr	r1, [pc, #112]	@ (800bc74 <tcp_process+0x2b4>)
 800bc04:	4813      	ldr	r0, [pc, #76]	@ (800bc54 <tcp_process+0x294>)
 800bc06:	f005 fee5 	bl	80119d4 <iprintf>
        --pcb->snd_queuelen;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bc10:	3b01      	subs	r3, #1
 800bc12:	b29a      	uxth	r2, r3
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc1e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800bc20:	69fb      	ldr	r3, [r7, #28]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d12a      	bne.n	800bc7c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc2a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800bc2c:	69fb      	ldr	r3, [r7, #28]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d106      	bne.n	800bc40 <tcp_process+0x280>
 800bc32:	4b06      	ldr	r3, [pc, #24]	@ (800bc4c <tcp_process+0x28c>)
 800bc34:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800bc38:	490f      	ldr	r1, [pc, #60]	@ (800bc78 <tcp_process+0x2b8>)
 800bc3a:	4806      	ldr	r0, [pc, #24]	@ (800bc54 <tcp_process+0x294>)
 800bc3c:	f005 feca 	bl	80119d4 <iprintf>
          pcb->unsent = rseg->next;
 800bc40:	69fb      	ldr	r3, [r7, #28]
 800bc42:	681a      	ldr	r2, [r3, #0]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	66da      	str	r2, [r3, #108]	@ 0x6c
 800bc48:	e01c      	b.n	800bc84 <tcp_process+0x2c4>
 800bc4a:	bf00      	nop
 800bc4c:	08013bd4 	.word	0x08013bd4
 800bc50:	08013e0c 	.word	0x08013e0c
 800bc54:	08013c20 	.word	0x08013c20
 800bc58:	2000fdec 	.word	0x2000fdec
 800bc5c:	2000fde4 	.word	0x2000fde4
 800bc60:	2000fde0 	.word	0x2000fde0
 800bc64:	08013e28 	.word	0x08013e28
 800bc68:	2000fded 	.word	0x2000fded
 800bc6c:	2000fda8 	.word	0x2000fda8
 800bc70:	2000fdd0 	.word	0x2000fdd0
 800bc74:	08013e48 	.word	0x08013e48
 800bc78:	08013e60 	.word	0x08013e60
        } else {
          pcb->unacked = rseg->next;
 800bc7c:	69fb      	ldr	r3, [r7, #28]
 800bc7e:	681a      	ldr	r2, [r3, #0]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800bc84:	69f8      	ldr	r0, [r7, #28]
 800bc86:	f7fe fd22 	bl	800a6ce <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d104      	bne.n	800bc9c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bc98:	861a      	strh	r2, [r3, #48]	@ 0x30
 800bc9a:	e006      	b.n	800bcaa <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2200      	movs	r2, #0
 800bca6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d00a      	beq.n	800bcca <tcp_process+0x30a>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bcba:	687a      	ldr	r2, [r7, #4]
 800bcbc:	6910      	ldr	r0, [r2, #16]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	6879      	ldr	r1, [r7, #4]
 800bcc2:	4798      	blx	r3
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	76bb      	strb	r3, [r7, #26]
 800bcc8:	e001      	b.n	800bcce <tcp_process+0x30e>
 800bcca:	2300      	movs	r3, #0
 800bccc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800bcce:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bcd2:	f113 0f0d 	cmn.w	r3, #13
 800bcd6:	d102      	bne.n	800bcde <tcp_process+0x31e>
          return ERR_ABRT;
 800bcd8:	f06f 030c 	mvn.w	r3, #12
 800bcdc:	e250      	b.n	800c180 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	8b5b      	ldrh	r3, [r3, #26]
 800bce2:	f043 0302 	orr.w	r3, r3, #2
 800bce6:	b29a      	uxth	r2, r3
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800bcec:	e23a      	b.n	800c164 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800bcee:	4b98      	ldr	r3, [pc, #608]	@ (800bf50 <tcp_process+0x590>)
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	f003 0310 	and.w	r3, r3, #16
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	f000 8234 	beq.w	800c164 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bcfc:	4b95      	ldr	r3, [pc, #596]	@ (800bf54 <tcp_process+0x594>)
 800bcfe:	6819      	ldr	r1, [r3, #0]
 800bd00:	4b95      	ldr	r3, [pc, #596]	@ (800bf58 <tcp_process+0x598>)
 800bd02:	881b      	ldrh	r3, [r3, #0]
 800bd04:	461a      	mov	r2, r3
 800bd06:	4b95      	ldr	r3, [pc, #596]	@ (800bf5c <tcp_process+0x59c>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bd0c:	4b94      	ldr	r3, [pc, #592]	@ (800bf60 <tcp_process+0x5a0>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bd10:	885b      	ldrh	r3, [r3, #2]
 800bd12:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bd14:	4a92      	ldr	r2, [pc, #584]	@ (800bf60 <tcp_process+0x5a0>)
 800bd16:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bd18:	8812      	ldrh	r2, [r2, #0]
 800bd1a:	b292      	uxth	r2, r2
 800bd1c:	9202      	str	r2, [sp, #8]
 800bd1e:	9301      	str	r3, [sp, #4]
 800bd20:	4b90      	ldr	r3, [pc, #576]	@ (800bf64 <tcp_process+0x5a4>)
 800bd22:	9300      	str	r3, [sp, #0]
 800bd24:	4b90      	ldr	r3, [pc, #576]	@ (800bf68 <tcp_process+0x5a8>)
 800bd26:	4602      	mov	r2, r0
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f002 fc81 	bl	800e630 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bd34:	2b05      	cmp	r3, #5
 800bd36:	f200 8215 	bhi.w	800c164 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f002 fa4d 	bl	800e1e0 <tcp_rexmit_rto>
      break;
 800bd46:	e20d      	b.n	800c164 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800bd48:	4b81      	ldr	r3, [pc, #516]	@ (800bf50 <tcp_process+0x590>)
 800bd4a:	781b      	ldrb	r3, [r3, #0]
 800bd4c:	f003 0310 	and.w	r3, r3, #16
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	f000 80a1 	beq.w	800be98 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bd56:	4b7f      	ldr	r3, [pc, #508]	@ (800bf54 <tcp_process+0x594>)
 800bd58:	681a      	ldr	r2, [r3, #0]
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd5e:	1ad3      	subs	r3, r2, r3
 800bd60:	3b01      	subs	r3, #1
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	db7e      	blt.n	800be64 <tcp_process+0x4a4>
 800bd66:	4b7b      	ldr	r3, [pc, #492]	@ (800bf54 <tcp_process+0x594>)
 800bd68:	681a      	ldr	r2, [r3, #0]
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd6e:	1ad3      	subs	r3, r2, r3
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	dc77      	bgt.n	800be64 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2204      	movs	r2, #4
 800bd78:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d102      	bne.n	800bd88 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800bd82:	23fa      	movs	r3, #250	@ 0xfa
 800bd84:	76bb      	strb	r3, [r7, #26]
 800bd86:	e01d      	b.n	800bdc4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bd8c:	699b      	ldr	r3, [r3, #24]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d106      	bne.n	800bda0 <tcp_process+0x3e0>
 800bd92:	4b76      	ldr	r3, [pc, #472]	@ (800bf6c <tcp_process+0x5ac>)
 800bd94:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800bd98:	4975      	ldr	r1, [pc, #468]	@ (800bf70 <tcp_process+0x5b0>)
 800bd9a:	4876      	ldr	r0, [pc, #472]	@ (800bf74 <tcp_process+0x5b4>)
 800bd9c:	f005 fe1a 	bl	80119d4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bda4:	699b      	ldr	r3, [r3, #24]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d00a      	beq.n	800bdc0 <tcp_process+0x400>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bdae:	699b      	ldr	r3, [r3, #24]
 800bdb0:	687a      	ldr	r2, [r7, #4]
 800bdb2:	6910      	ldr	r0, [r2, #16]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	6879      	ldr	r1, [r7, #4]
 800bdb8:	4798      	blx	r3
 800bdba:	4603      	mov	r3, r0
 800bdbc:	76bb      	strb	r3, [r7, #26]
 800bdbe:	e001      	b.n	800bdc4 <tcp_process+0x404>
 800bdc0:	23f0      	movs	r3, #240	@ 0xf0
 800bdc2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800bdc4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d00a      	beq.n	800bde2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800bdcc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bdd0:	f113 0f0d 	cmn.w	r3, #13
 800bdd4:	d002      	beq.n	800bddc <tcp_process+0x41c>
              tcp_abort(pcb);
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f7fd ff88 	bl	8009cec <tcp_abort>
            }
            return ERR_ABRT;
 800bddc:	f06f 030c 	mvn.w	r3, #12
 800bde0:	e1ce      	b.n	800c180 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f000 fae0 	bl	800c3a8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800bde8:	4b63      	ldr	r3, [pc, #396]	@ (800bf78 <tcp_process+0x5b8>)
 800bdea:	881b      	ldrh	r3, [r3, #0]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d005      	beq.n	800bdfc <tcp_process+0x43c>
            recv_acked--;
 800bdf0:	4b61      	ldr	r3, [pc, #388]	@ (800bf78 <tcp_process+0x5b8>)
 800bdf2:	881b      	ldrh	r3, [r3, #0]
 800bdf4:	3b01      	subs	r3, #1
 800bdf6:	b29a      	uxth	r2, r3
 800bdf8:	4b5f      	ldr	r3, [pc, #380]	@ (800bf78 <tcp_process+0x5b8>)
 800bdfa:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800be00:	009a      	lsls	r2, r3, #2
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800be06:	005b      	lsls	r3, r3, #1
 800be08:	f241 111c 	movw	r1, #4380	@ 0x111c
 800be0c:	428b      	cmp	r3, r1
 800be0e:	bf38      	it	cc
 800be10:	460b      	movcc	r3, r1
 800be12:	429a      	cmp	r2, r3
 800be14:	d204      	bcs.n	800be20 <tcp_process+0x460>
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800be1a:	009b      	lsls	r3, r3, #2
 800be1c:	b29b      	uxth	r3, r3
 800be1e:	e00d      	b.n	800be3c <tcp_process+0x47c>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800be24:	005b      	lsls	r3, r3, #1
 800be26:	f241 121c 	movw	r2, #4380	@ 0x111c
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d904      	bls.n	800be38 <tcp_process+0x478>
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800be32:	005b      	lsls	r3, r3, #1
 800be34:	b29b      	uxth	r3, r3
 800be36:	e001      	b.n	800be3c <tcp_process+0x47c>
 800be38:	f241 131c 	movw	r3, #4380	@ 0x111c
 800be3c:	687a      	ldr	r2, [r7, #4]
 800be3e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800be42:	4b4e      	ldr	r3, [pc, #312]	@ (800bf7c <tcp_process+0x5bc>)
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	f003 0320 	and.w	r3, r3, #32
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d037      	beq.n	800bebe <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	8b5b      	ldrh	r3, [r3, #26]
 800be52:	f043 0302 	orr.w	r3, r3, #2
 800be56:	b29a      	uxth	r2, r3
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2207      	movs	r2, #7
 800be60:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800be62:	e02c      	b.n	800bebe <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800be64:	4b3b      	ldr	r3, [pc, #236]	@ (800bf54 <tcp_process+0x594>)
 800be66:	6819      	ldr	r1, [r3, #0]
 800be68:	4b3b      	ldr	r3, [pc, #236]	@ (800bf58 <tcp_process+0x598>)
 800be6a:	881b      	ldrh	r3, [r3, #0]
 800be6c:	461a      	mov	r2, r3
 800be6e:	4b3b      	ldr	r3, [pc, #236]	@ (800bf5c <tcp_process+0x59c>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800be74:	4b3a      	ldr	r3, [pc, #232]	@ (800bf60 <tcp_process+0x5a0>)
 800be76:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800be78:	885b      	ldrh	r3, [r3, #2]
 800be7a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800be7c:	4a38      	ldr	r2, [pc, #224]	@ (800bf60 <tcp_process+0x5a0>)
 800be7e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800be80:	8812      	ldrh	r2, [r2, #0]
 800be82:	b292      	uxth	r2, r2
 800be84:	9202      	str	r2, [sp, #8]
 800be86:	9301      	str	r3, [sp, #4]
 800be88:	4b36      	ldr	r3, [pc, #216]	@ (800bf64 <tcp_process+0x5a4>)
 800be8a:	9300      	str	r3, [sp, #0]
 800be8c:	4b36      	ldr	r3, [pc, #216]	@ (800bf68 <tcp_process+0x5a8>)
 800be8e:	4602      	mov	r2, r0
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f002 fbcd 	bl	800e630 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800be96:	e167      	b.n	800c168 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800be98:	4b2d      	ldr	r3, [pc, #180]	@ (800bf50 <tcp_process+0x590>)
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	f003 0302 	and.w	r3, r3, #2
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	f000 8161 	beq.w	800c168 <tcp_process+0x7a8>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800beaa:	1e5a      	subs	r2, r3, #1
 800beac:	4b2b      	ldr	r3, [pc, #172]	@ (800bf5c <tcp_process+0x59c>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	429a      	cmp	r2, r3
 800beb2:	f040 8159 	bne.w	800c168 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f002 f9b4 	bl	800e224 <tcp_rexmit>
      break;
 800bebc:	e154      	b.n	800c168 <tcp_process+0x7a8>
 800bebe:	e153      	b.n	800c168 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f000 fa71 	bl	800c3a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800bec6:	4b2d      	ldr	r3, [pc, #180]	@ (800bf7c <tcp_process+0x5bc>)
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	f003 0320 	and.w	r3, r3, #32
 800bece:	2b00      	cmp	r3, #0
 800bed0:	f000 814c 	beq.w	800c16c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	8b5b      	ldrh	r3, [r3, #26]
 800bed8:	f043 0302 	orr.w	r3, r3, #2
 800bedc:	b29a      	uxth	r2, r3
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2207      	movs	r2, #7
 800bee6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bee8:	e140      	b.n	800c16c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 fa5c 	bl	800c3a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800bef0:	4b22      	ldr	r3, [pc, #136]	@ (800bf7c <tcp_process+0x5bc>)
 800bef2:	781b      	ldrb	r3, [r3, #0]
 800bef4:	f003 0320 	and.w	r3, r3, #32
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d071      	beq.n	800bfe0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800befc:	4b14      	ldr	r3, [pc, #80]	@ (800bf50 <tcp_process+0x590>)
 800befe:	781b      	ldrb	r3, [r3, #0]
 800bf00:	f003 0310 	and.w	r3, r3, #16
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d060      	beq.n	800bfca <tcp_process+0x60a>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bf0c:	4b11      	ldr	r3, [pc, #68]	@ (800bf54 <tcp_process+0x594>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d15a      	bne.n	800bfca <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d156      	bne.n	800bfca <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	8b5b      	ldrh	r3, [r3, #26]
 800bf20:	f043 0302 	orr.w	r3, r3, #2
 800bf24:	b29a      	uxth	r2, r3
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f7fe fdbc 	bl	800aaa8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800bf30:	4b13      	ldr	r3, [pc, #76]	@ (800bf80 <tcp_process+0x5c0>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d105      	bne.n	800bf46 <tcp_process+0x586>
 800bf3a:	4b11      	ldr	r3, [pc, #68]	@ (800bf80 <tcp_process+0x5c0>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	68db      	ldr	r3, [r3, #12]
 800bf40:	4a0f      	ldr	r2, [pc, #60]	@ (800bf80 <tcp_process+0x5c0>)
 800bf42:	6013      	str	r3, [r2, #0]
 800bf44:	e02e      	b.n	800bfa4 <tcp_process+0x5e4>
 800bf46:	4b0e      	ldr	r3, [pc, #56]	@ (800bf80 <tcp_process+0x5c0>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	617b      	str	r3, [r7, #20]
 800bf4c:	e027      	b.n	800bf9e <tcp_process+0x5de>
 800bf4e:	bf00      	nop
 800bf50:	2000fdec 	.word	0x2000fdec
 800bf54:	2000fde4 	.word	0x2000fde4
 800bf58:	2000fdea 	.word	0x2000fdea
 800bf5c:	2000fde0 	.word	0x2000fde0
 800bf60:	2000fdd0 	.word	0x2000fdd0
 800bf64:	200092e8 	.word	0x200092e8
 800bf68:	200092ec 	.word	0x200092ec
 800bf6c:	08013bd4 	.word	0x08013bd4
 800bf70:	08013e74 	.word	0x08013e74
 800bf74:	08013c20 	.word	0x08013c20
 800bf78:	2000fde8 	.word	0x2000fde8
 800bf7c:	2000fded 	.word	0x2000fded
 800bf80:	2000fdb4 	.word	0x2000fdb4
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	68db      	ldr	r3, [r3, #12]
 800bf88:	687a      	ldr	r2, [r7, #4]
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	d104      	bne.n	800bf98 <tcp_process+0x5d8>
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	68da      	ldr	r2, [r3, #12]
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	60da      	str	r2, [r3, #12]
 800bf96:	e005      	b.n	800bfa4 <tcp_process+0x5e4>
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	68db      	ldr	r3, [r3, #12]
 800bf9c:	617b      	str	r3, [r7, #20]
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d1ef      	bne.n	800bf84 <tcp_process+0x5c4>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	60da      	str	r2, [r3, #12]
 800bfaa:	4b77      	ldr	r3, [pc, #476]	@ (800c188 <tcp_process+0x7c8>)
 800bfac:	2201      	movs	r2, #1
 800bfae:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	220a      	movs	r2, #10
 800bfb4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800bfb6:	4b75      	ldr	r3, [pc, #468]	@ (800c18c <tcp_process+0x7cc>)
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	60da      	str	r2, [r3, #12]
 800bfbe:	4a73      	ldr	r2, [pc, #460]	@ (800c18c <tcp_process+0x7cc>)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6013      	str	r3, [r2, #0]
 800bfc4:	f002 fcf6 	bl	800e9b4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800bfc8:	e0d2      	b.n	800c170 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	8b5b      	ldrh	r3, [r3, #26]
 800bfce:	f043 0302 	orr.w	r3, r3, #2
 800bfd2:	b29a      	uxth	r2, r3
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2208      	movs	r2, #8
 800bfdc:	751a      	strb	r2, [r3, #20]
      break;
 800bfde:	e0c7      	b.n	800c170 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bfe0:	4b6b      	ldr	r3, [pc, #428]	@ (800c190 <tcp_process+0x7d0>)
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	f003 0310 	and.w	r3, r3, #16
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	f000 80c1 	beq.w	800c170 <tcp_process+0x7b0>
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bff2:	4b68      	ldr	r3, [pc, #416]	@ (800c194 <tcp_process+0x7d4>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	429a      	cmp	r2, r3
 800bff8:	f040 80ba 	bne.w	800c170 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c000:	2b00      	cmp	r3, #0
 800c002:	f040 80b5 	bne.w	800c170 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2206      	movs	r2, #6
 800c00a:	751a      	strb	r2, [r3, #20]
      break;
 800c00c:	e0b0      	b.n	800c170 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f000 f9ca 	bl	800c3a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c014:	4b60      	ldr	r3, [pc, #384]	@ (800c198 <tcp_process+0x7d8>)
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	f003 0320 	and.w	r3, r3, #32
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	f000 80a9 	beq.w	800c174 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	8b5b      	ldrh	r3, [r3, #26]
 800c026:	f043 0302 	orr.w	r3, r3, #2
 800c02a:	b29a      	uxth	r2, r3
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f7fe fd39 	bl	800aaa8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c036:	4b59      	ldr	r3, [pc, #356]	@ (800c19c <tcp_process+0x7dc>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	687a      	ldr	r2, [r7, #4]
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d105      	bne.n	800c04c <tcp_process+0x68c>
 800c040:	4b56      	ldr	r3, [pc, #344]	@ (800c19c <tcp_process+0x7dc>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	68db      	ldr	r3, [r3, #12]
 800c046:	4a55      	ldr	r2, [pc, #340]	@ (800c19c <tcp_process+0x7dc>)
 800c048:	6013      	str	r3, [r2, #0]
 800c04a:	e013      	b.n	800c074 <tcp_process+0x6b4>
 800c04c:	4b53      	ldr	r3, [pc, #332]	@ (800c19c <tcp_process+0x7dc>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	613b      	str	r3, [r7, #16]
 800c052:	e00c      	b.n	800c06e <tcp_process+0x6ae>
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	68db      	ldr	r3, [r3, #12]
 800c058:	687a      	ldr	r2, [r7, #4]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d104      	bne.n	800c068 <tcp_process+0x6a8>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	68da      	ldr	r2, [r3, #12]
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	60da      	str	r2, [r3, #12]
 800c066:	e005      	b.n	800c074 <tcp_process+0x6b4>
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	68db      	ldr	r3, [r3, #12]
 800c06c:	613b      	str	r3, [r7, #16]
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d1ef      	bne.n	800c054 <tcp_process+0x694>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2200      	movs	r2, #0
 800c078:	60da      	str	r2, [r3, #12]
 800c07a:	4b43      	ldr	r3, [pc, #268]	@ (800c188 <tcp_process+0x7c8>)
 800c07c:	2201      	movs	r2, #1
 800c07e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	220a      	movs	r2, #10
 800c084:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c086:	4b41      	ldr	r3, [pc, #260]	@ (800c18c <tcp_process+0x7cc>)
 800c088:	681a      	ldr	r2, [r3, #0]
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	60da      	str	r2, [r3, #12]
 800c08e:	4a3f      	ldr	r2, [pc, #252]	@ (800c18c <tcp_process+0x7cc>)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6013      	str	r3, [r2, #0]
 800c094:	f002 fc8e 	bl	800e9b4 <tcp_timer_needed>
      }
      break;
 800c098:	e06c      	b.n	800c174 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f000 f984 	bl	800c3a8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c0a0:	4b3b      	ldr	r3, [pc, #236]	@ (800c190 <tcp_process+0x7d0>)
 800c0a2:	781b      	ldrb	r3, [r3, #0]
 800c0a4:	f003 0310 	and.w	r3, r3, #16
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d065      	beq.n	800c178 <tcp_process+0x7b8>
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c0b0:	4b38      	ldr	r3, [pc, #224]	@ (800c194 <tcp_process+0x7d4>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d15f      	bne.n	800c178 <tcp_process+0x7b8>
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d15b      	bne.n	800c178 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f7fe fcf1 	bl	800aaa8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c0c6:	4b35      	ldr	r3, [pc, #212]	@ (800c19c <tcp_process+0x7dc>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	687a      	ldr	r2, [r7, #4]
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d105      	bne.n	800c0dc <tcp_process+0x71c>
 800c0d0:	4b32      	ldr	r3, [pc, #200]	@ (800c19c <tcp_process+0x7dc>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	68db      	ldr	r3, [r3, #12]
 800c0d6:	4a31      	ldr	r2, [pc, #196]	@ (800c19c <tcp_process+0x7dc>)
 800c0d8:	6013      	str	r3, [r2, #0]
 800c0da:	e013      	b.n	800c104 <tcp_process+0x744>
 800c0dc:	4b2f      	ldr	r3, [pc, #188]	@ (800c19c <tcp_process+0x7dc>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	60fb      	str	r3, [r7, #12]
 800c0e2:	e00c      	b.n	800c0fe <tcp_process+0x73e>
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	68db      	ldr	r3, [r3, #12]
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d104      	bne.n	800c0f8 <tcp_process+0x738>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	68da      	ldr	r2, [r3, #12]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	60da      	str	r2, [r3, #12]
 800c0f6:	e005      	b.n	800c104 <tcp_process+0x744>
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	68db      	ldr	r3, [r3, #12]
 800c0fc:	60fb      	str	r3, [r7, #12]
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d1ef      	bne.n	800c0e4 <tcp_process+0x724>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2200      	movs	r2, #0
 800c108:	60da      	str	r2, [r3, #12]
 800c10a:	4b1f      	ldr	r3, [pc, #124]	@ (800c188 <tcp_process+0x7c8>)
 800c10c:	2201      	movs	r2, #1
 800c10e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	220a      	movs	r2, #10
 800c114:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c116:	4b1d      	ldr	r3, [pc, #116]	@ (800c18c <tcp_process+0x7cc>)
 800c118:	681a      	ldr	r2, [r3, #0]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	60da      	str	r2, [r3, #12]
 800c11e:	4a1b      	ldr	r2, [pc, #108]	@ (800c18c <tcp_process+0x7cc>)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6013      	str	r3, [r2, #0]
 800c124:	f002 fc46 	bl	800e9b4 <tcp_timer_needed>
      }
      break;
 800c128:	e026      	b.n	800c178 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f000 f93c 	bl	800c3a8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c130:	4b17      	ldr	r3, [pc, #92]	@ (800c190 <tcp_process+0x7d0>)
 800c132:	781b      	ldrb	r3, [r3, #0]
 800c134:	f003 0310 	and.w	r3, r3, #16
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d01f      	beq.n	800c17c <tcp_process+0x7bc>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c140:	4b14      	ldr	r3, [pc, #80]	@ (800c194 <tcp_process+0x7d4>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	429a      	cmp	r2, r3
 800c146:	d119      	bne.n	800c17c <tcp_process+0x7bc>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d115      	bne.n	800c17c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800c150:	4b11      	ldr	r3, [pc, #68]	@ (800c198 <tcp_process+0x7d8>)
 800c152:	781b      	ldrb	r3, [r3, #0]
 800c154:	f043 0310 	orr.w	r3, r3, #16
 800c158:	b2da      	uxtb	r2, r3
 800c15a:	4b0f      	ldr	r3, [pc, #60]	@ (800c198 <tcp_process+0x7d8>)
 800c15c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800c15e:	e00d      	b.n	800c17c <tcp_process+0x7bc>
    default:
      break;
 800c160:	bf00      	nop
 800c162:	e00c      	b.n	800c17e <tcp_process+0x7be>
      break;
 800c164:	bf00      	nop
 800c166:	e00a      	b.n	800c17e <tcp_process+0x7be>
      break;
 800c168:	bf00      	nop
 800c16a:	e008      	b.n	800c17e <tcp_process+0x7be>
      break;
 800c16c:	bf00      	nop
 800c16e:	e006      	b.n	800c17e <tcp_process+0x7be>
      break;
 800c170:	bf00      	nop
 800c172:	e004      	b.n	800c17e <tcp_process+0x7be>
      break;
 800c174:	bf00      	nop
 800c176:	e002      	b.n	800c17e <tcp_process+0x7be>
      break;
 800c178:	bf00      	nop
 800c17a:	e000      	b.n	800c17e <tcp_process+0x7be>
      break;
 800c17c:	bf00      	nop
  }
  return ERR_OK;
 800c17e:	2300      	movs	r3, #0
}
 800c180:	4618      	mov	r0, r3
 800c182:	3724      	adds	r7, #36	@ 0x24
 800c184:	46bd      	mov	sp, r7
 800c186:	bd90      	pop	{r4, r7, pc}
 800c188:	2000fdbc 	.word	0x2000fdbc
 800c18c:	2000fdb8 	.word	0x2000fdb8
 800c190:	2000fdec 	.word	0x2000fdec
 800c194:	2000fde4 	.word	0x2000fde4
 800c198:	2000fded 	.word	0x2000fded
 800c19c:	2000fdb4 	.word	0x2000fdb4

0800c1a0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800c1a0:	b590      	push	{r4, r7, lr}
 800c1a2:	b085      	sub	sp, #20
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
 800c1a8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d106      	bne.n	800c1be <tcp_oos_insert_segment+0x1e>
 800c1b0:	4b3b      	ldr	r3, [pc, #236]	@ (800c2a0 <tcp_oos_insert_segment+0x100>)
 800c1b2:	f240 421f 	movw	r2, #1055	@ 0x41f
 800c1b6:	493b      	ldr	r1, [pc, #236]	@ (800c2a4 <tcp_oos_insert_segment+0x104>)
 800c1b8:	483b      	ldr	r0, [pc, #236]	@ (800c2a8 <tcp_oos_insert_segment+0x108>)
 800c1ba:	f005 fc0b 	bl	80119d4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	68db      	ldr	r3, [r3, #12]
 800c1c2:	899b      	ldrh	r3, [r3, #12]
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f7fb fbfa 	bl	80079c0 <lwip_htons>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	b2db      	uxtb	r3, r3
 800c1d0:	f003 0301 	and.w	r3, r3, #1
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d028      	beq.n	800c22a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800c1d8:	6838      	ldr	r0, [r7, #0]
 800c1da:	f7fe fa63 	bl	800a6a4 <tcp_segs_free>
    next = NULL;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	603b      	str	r3, [r7, #0]
 800c1e2:	e056      	b.n	800c292 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	68db      	ldr	r3, [r3, #12]
 800c1e8:	899b      	ldrh	r3, [r3, #12]
 800c1ea:	b29b      	uxth	r3, r3
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f7fb fbe7 	bl	80079c0 <lwip_htons>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	b2db      	uxtb	r3, r3
 800c1f6:	f003 0301 	and.w	r3, r3, #1
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d00d      	beq.n	800c21a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	68db      	ldr	r3, [r3, #12]
 800c202:	899b      	ldrh	r3, [r3, #12]
 800c204:	b29c      	uxth	r4, r3
 800c206:	2001      	movs	r0, #1
 800c208:	f7fb fbda 	bl	80079c0 <lwip_htons>
 800c20c:	4603      	mov	r3, r0
 800c20e:	461a      	mov	r2, r3
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	68db      	ldr	r3, [r3, #12]
 800c214:	4322      	orrs	r2, r4
 800c216:	b292      	uxth	r2, r2
 800c218:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800c224:	68f8      	ldr	r0, [r7, #12]
 800c226:	f7fe fa52 	bl	800a6ce <tcp_seg_free>
    while (next &&
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d00e      	beq.n	800c24e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	891b      	ldrh	r3, [r3, #8]
 800c234:	461a      	mov	r2, r3
 800c236:	4b1d      	ldr	r3, [pc, #116]	@ (800c2ac <tcp_oos_insert_segment+0x10c>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	441a      	add	r2, r3
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	68db      	ldr	r3, [r3, #12]
 800c240:	685b      	ldr	r3, [r3, #4]
 800c242:	6839      	ldr	r1, [r7, #0]
 800c244:	8909      	ldrh	r1, [r1, #8]
 800c246:	440b      	add	r3, r1
 800c248:	1ad3      	subs	r3, r2, r3
    while (next &&
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	daca      	bge.n	800c1e4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d01e      	beq.n	800c292 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	891b      	ldrh	r3, [r3, #8]
 800c258:	461a      	mov	r2, r3
 800c25a:	4b14      	ldr	r3, [pc, #80]	@ (800c2ac <tcp_oos_insert_segment+0x10c>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	441a      	add	r2, r3
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	68db      	ldr	r3, [r3, #12]
 800c264:	685b      	ldr	r3, [r3, #4]
 800c266:	1ad3      	subs	r3, r2, r3
    if (next &&
 800c268:	2b00      	cmp	r3, #0
 800c26a:	dd12      	ble.n	800c292 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	68db      	ldr	r3, [r3, #12]
 800c270:	685b      	ldr	r3, [r3, #4]
 800c272:	b29a      	uxth	r2, r3
 800c274:	4b0d      	ldr	r3, [pc, #52]	@ (800c2ac <tcp_oos_insert_segment+0x10c>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	b29b      	uxth	r3, r3
 800c27a:	1ad3      	subs	r3, r2, r3
 800c27c:	b29a      	uxth	r2, r3
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	685a      	ldr	r2, [r3, #4]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	891b      	ldrh	r3, [r3, #8]
 800c28a:	4619      	mov	r1, r3
 800c28c:	4610      	mov	r0, r2
 800c28e:	f7fc fe13 	bl	8008eb8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	683a      	ldr	r2, [r7, #0]
 800c296:	601a      	str	r2, [r3, #0]
}
 800c298:	bf00      	nop
 800c29a:	3714      	adds	r7, #20
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd90      	pop	{r4, r7, pc}
 800c2a0:	08013bd4 	.word	0x08013bd4
 800c2a4:	08013e94 	.word	0x08013e94
 800c2a8:	08013c20 	.word	0x08013c20
 800c2ac:	2000fde0 	.word	0x2000fde0

0800c2b0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800c2b0:	b5b0      	push	{r4, r5, r7, lr}
 800c2b2:	b086      	sub	sp, #24
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	60f8      	str	r0, [r7, #12]
 800c2b8:	60b9      	str	r1, [r7, #8]
 800c2ba:	607a      	str	r2, [r7, #4]
 800c2bc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800c2be:	e03e      	b.n	800c33e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	685b      	ldr	r3, [r3, #4]
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f7fd f806 	bl	80092e0 <pbuf_clen>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c2de:	8a7a      	ldrh	r2, [r7, #18]
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d906      	bls.n	800c2f2 <tcp_free_acked_segments+0x42>
 800c2e4:	4b2a      	ldr	r3, [pc, #168]	@ (800c390 <tcp_free_acked_segments+0xe0>)
 800c2e6:	f240 4257 	movw	r2, #1111	@ 0x457
 800c2ea:	492a      	ldr	r1, [pc, #168]	@ (800c394 <tcp_free_acked_segments+0xe4>)
 800c2ec:	482a      	ldr	r0, [pc, #168]	@ (800c398 <tcp_free_acked_segments+0xe8>)
 800c2ee:	f005 fb71 	bl	80119d4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800c2f8:	8a7b      	ldrh	r3, [r7, #18]
 800c2fa:	1ad3      	subs	r3, r2, r3
 800c2fc:	b29a      	uxth	r2, r3
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	891a      	ldrh	r2, [r3, #8]
 800c308:	4b24      	ldr	r3, [pc, #144]	@ (800c39c <tcp_free_acked_segments+0xec>)
 800c30a:	881b      	ldrh	r3, [r3, #0]
 800c30c:	4413      	add	r3, r2
 800c30e:	b29a      	uxth	r2, r3
 800c310:	4b22      	ldr	r3, [pc, #136]	@ (800c39c <tcp_free_acked_segments+0xec>)
 800c312:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800c314:	6978      	ldr	r0, [r7, #20]
 800c316:	f7fe f9da 	bl	800a6ce <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c320:	2b00      	cmp	r3, #0
 800c322:	d00c      	beq.n	800c33e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d109      	bne.n	800c33e <tcp_free_acked_segments+0x8e>
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d106      	bne.n	800c33e <tcp_free_acked_segments+0x8e>
 800c330:	4b17      	ldr	r3, [pc, #92]	@ (800c390 <tcp_free_acked_segments+0xe0>)
 800c332:	f240 4261 	movw	r2, #1121	@ 0x461
 800c336:	491a      	ldr	r1, [pc, #104]	@ (800c3a0 <tcp_free_acked_segments+0xf0>)
 800c338:	4817      	ldr	r0, [pc, #92]	@ (800c398 <tcp_free_acked_segments+0xe8>)
 800c33a:	f005 fb4b 	bl	80119d4 <iprintf>
  while (seg_list != NULL &&
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d020      	beq.n	800c386 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	68db      	ldr	r3, [r3, #12]
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	4618      	mov	r0, r3
 800c34c:	f7fb fb4d 	bl	80079ea <lwip_htonl>
 800c350:	4604      	mov	r4, r0
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	891b      	ldrh	r3, [r3, #8]
 800c356:	461d      	mov	r5, r3
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	68db      	ldr	r3, [r3, #12]
 800c35c:	899b      	ldrh	r3, [r3, #12]
 800c35e:	b29b      	uxth	r3, r3
 800c360:	4618      	mov	r0, r3
 800c362:	f7fb fb2d 	bl	80079c0 <lwip_htons>
 800c366:	4603      	mov	r3, r0
 800c368:	b2db      	uxtb	r3, r3
 800c36a:	f003 0303 	and.w	r3, r3, #3
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d001      	beq.n	800c376 <tcp_free_acked_segments+0xc6>
 800c372:	2301      	movs	r3, #1
 800c374:	e000      	b.n	800c378 <tcp_free_acked_segments+0xc8>
 800c376:	2300      	movs	r3, #0
 800c378:	442b      	add	r3, r5
 800c37a:	18e2      	adds	r2, r4, r3
 800c37c:	4b09      	ldr	r3, [pc, #36]	@ (800c3a4 <tcp_free_acked_segments+0xf4>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800c382:	2b00      	cmp	r3, #0
 800c384:	dd9c      	ble.n	800c2c0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800c386:	68bb      	ldr	r3, [r7, #8]
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3718      	adds	r7, #24
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bdb0      	pop	{r4, r5, r7, pc}
 800c390:	08013bd4 	.word	0x08013bd4
 800c394:	08013ebc 	.word	0x08013ebc
 800c398:	08013c20 	.word	0x08013c20
 800c39c:	2000fde8 	.word	0x2000fde8
 800c3a0:	08013ee4 	.word	0x08013ee4
 800c3a4:	2000fde4 	.word	0x2000fde4

0800c3a8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800c3a8:	b5b0      	push	{r4, r5, r7, lr}
 800c3aa:	b094      	sub	sp, #80	@ 0x50
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d106      	bne.n	800c3c8 <tcp_receive+0x20>
 800c3ba:	4b91      	ldr	r3, [pc, #580]	@ (800c600 <tcp_receive+0x258>)
 800c3bc:	f240 427b 	movw	r2, #1147	@ 0x47b
 800c3c0:	4990      	ldr	r1, [pc, #576]	@ (800c604 <tcp_receive+0x25c>)
 800c3c2:	4891      	ldr	r0, [pc, #580]	@ (800c608 <tcp_receive+0x260>)
 800c3c4:	f005 fb06 	bl	80119d4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	7d1b      	ldrb	r3, [r3, #20]
 800c3cc:	2b03      	cmp	r3, #3
 800c3ce:	d806      	bhi.n	800c3de <tcp_receive+0x36>
 800c3d0:	4b8b      	ldr	r3, [pc, #556]	@ (800c600 <tcp_receive+0x258>)
 800c3d2:	f240 427c 	movw	r2, #1148	@ 0x47c
 800c3d6:	498d      	ldr	r1, [pc, #564]	@ (800c60c <tcp_receive+0x264>)
 800c3d8:	488b      	ldr	r0, [pc, #556]	@ (800c608 <tcp_receive+0x260>)
 800c3da:	f005 fafb 	bl	80119d4 <iprintf>

  if (flags & TCP_ACK) {
 800c3de:	4b8c      	ldr	r3, [pc, #560]	@ (800c610 <tcp_receive+0x268>)
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	f003 0310 	and.w	r3, r3, #16
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	f000 8264 	beq.w	800c8b4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3f8:	4413      	add	r3, r2
 800c3fa:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c400:	4b84      	ldr	r3, [pc, #528]	@ (800c614 <tcp_receive+0x26c>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	1ad3      	subs	r3, r2, r3
 800c406:	2b00      	cmp	r3, #0
 800c408:	db1b      	blt.n	800c442 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c40e:	4b81      	ldr	r3, [pc, #516]	@ (800c614 <tcp_receive+0x26c>)
 800c410:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c412:	429a      	cmp	r2, r3
 800c414:	d106      	bne.n	800c424 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c41a:	4b7f      	ldr	r3, [pc, #508]	@ (800c618 <tcp_receive+0x270>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	1ad3      	subs	r3, r2, r3
 800c420:	2b00      	cmp	r3, #0
 800c422:	db0e      	blt.n	800c442 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c428:	4b7b      	ldr	r3, [pc, #492]	@ (800c618 <tcp_receive+0x270>)
 800c42a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d125      	bne.n	800c47c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c430:	4b7a      	ldr	r3, [pc, #488]	@ (800c61c <tcp_receive+0x274>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	89db      	ldrh	r3, [r3, #14]
 800c436:	b29a      	uxth	r2, r3
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c43e:	429a      	cmp	r2, r3
 800c440:	d91c      	bls.n	800c47c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c442:	4b76      	ldr	r3, [pc, #472]	@ (800c61c <tcp_receive+0x274>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	89db      	ldrh	r3, [r3, #14]
 800c448:	b29a      	uxth	r2, r3
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c45c:	429a      	cmp	r2, r3
 800c45e:	d205      	bcs.n	800c46c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800c46c:	4b69      	ldr	r3, [pc, #420]	@ (800c614 <tcp_receive+0x26c>)
 800c46e:	681a      	ldr	r2, [r3, #0]
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800c474:	4b68      	ldr	r3, [pc, #416]	@ (800c618 <tcp_receive+0x270>)
 800c476:	681a      	ldr	r2, [r3, #0]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c47c:	4b66      	ldr	r3, [pc, #408]	@ (800c618 <tcp_receive+0x270>)
 800c47e:	681a      	ldr	r2, [r3, #0]
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c484:	1ad3      	subs	r3, r2, r3
 800c486:	2b00      	cmp	r3, #0
 800c488:	dc58      	bgt.n	800c53c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800c48a:	4b65      	ldr	r3, [pc, #404]	@ (800c620 <tcp_receive+0x278>)
 800c48c:	881b      	ldrh	r3, [r3, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d14b      	bne.n	800c52a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800c49c:	4413      	add	r3, r2
 800c49e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d142      	bne.n	800c52a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	db3d      	blt.n	800c52a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c4b2:	4b59      	ldr	r3, [pc, #356]	@ (800c618 <tcp_receive+0x270>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	d137      	bne.n	800c52a <tcp_receive+0x182>
              found_dupack = 1;
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c4c4:	2bff      	cmp	r3, #255	@ 0xff
 800c4c6:	d007      	beq.n	800c4d8 <tcp_receive+0x130>
                ++pcb->dupacks;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c4ce:	3301      	adds	r3, #1
 800c4d0:	b2da      	uxtb	r2, r3
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c4de:	2b03      	cmp	r3, #3
 800c4e0:	d91b      	bls.n	800c51a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c4ec:	4413      	add	r3, r2
 800c4ee:	b29a      	uxth	r2, r3
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c4f6:	429a      	cmp	r2, r3
 800c4f8:	d30a      	bcc.n	800c510 <tcp_receive+0x168>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c504:	4413      	add	r3, r2
 800c506:	b29a      	uxth	r2, r3
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800c50e:	e004      	b.n	800c51a <tcp_receive+0x172>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c516:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c520:	2b02      	cmp	r3, #2
 800c522:	d902      	bls.n	800c52a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f001 fee9 	bl	800e2fc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800c52a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	f040 8161 	bne.w	800c7f4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2200      	movs	r2, #0
 800c536:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c53a:	e15b      	b.n	800c7f4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c53c:	4b36      	ldr	r3, [pc, #216]	@ (800c618 <tcp_receive+0x270>)
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c544:	1ad3      	subs	r3, r2, r3
 800c546:	3b01      	subs	r3, #1
 800c548:	2b00      	cmp	r3, #0
 800c54a:	f2c0 814e 	blt.w	800c7ea <tcp_receive+0x442>
 800c54e:	4b32      	ldr	r3, [pc, #200]	@ (800c618 <tcp_receive+0x270>)
 800c550:	681a      	ldr	r2, [r3, #0]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c556:	1ad3      	subs	r3, r2, r3
 800c558:	2b00      	cmp	r3, #0
 800c55a:	f300 8146 	bgt.w	800c7ea <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	8b5b      	ldrh	r3, [r3, #26]
 800c562:	f003 0304 	and.w	r3, r3, #4
 800c566:	2b00      	cmp	r3, #0
 800c568:	d010      	beq.n	800c58c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	8b5b      	ldrh	r3, [r3, #26]
 800c56e:	f023 0304 	bic.w	r3, r3, #4
 800c572:	b29a      	uxth	r2, r3
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2200      	movs	r2, #0
 800c588:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2200      	movs	r2, #0
 800c590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c59a:	10db      	asrs	r3, r3, #3
 800c59c:	b21b      	sxth	r3, r3
 800c59e:	b29a      	uxth	r2, r3
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c5a6:	b29b      	uxth	r3, r3
 800c5a8:	4413      	add	r3, r2
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	b21a      	sxth	r2, r3
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c5b4:	4b18      	ldr	r3, [pc, #96]	@ (800c618 <tcp_receive+0x270>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	b29a      	uxth	r2, r3
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5be:	b29b      	uxth	r3, r3
 800c5c0:	1ad3      	subs	r3, r2, r3
 800c5c2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800c5cc:	4b12      	ldr	r3, [pc, #72]	@ (800c618 <tcp_receive+0x270>)
 800c5ce:	681a      	ldr	r2, [r3, #0]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	7d1b      	ldrb	r3, [r3, #20]
 800c5d8:	2b03      	cmp	r3, #3
 800c5da:	f240 8097 	bls.w	800c70c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d245      	bcs.n	800c67a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	8b5b      	ldrh	r3, [r3, #26]
 800c5f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d014      	beq.n	800c624 <tcp_receive+0x27c>
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	e013      	b.n	800c626 <tcp_receive+0x27e>
 800c5fe:	bf00      	nop
 800c600:	08013bd4 	.word	0x08013bd4
 800c604:	08013f04 	.word	0x08013f04
 800c608:	08013c20 	.word	0x08013c20
 800c60c:	08013f20 	.word	0x08013f20
 800c610:	2000fdec 	.word	0x2000fdec
 800c614:	2000fde0 	.word	0x2000fde0
 800c618:	2000fde4 	.word	0x2000fde4
 800c61c:	2000fdd0 	.word	0x2000fdd0
 800c620:	2000fdea 	.word	0x2000fdea
 800c624:	2302      	movs	r3, #2
 800c626:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c62a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800c62e:	b29a      	uxth	r2, r3
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c634:	fb12 f303 	smulbb	r3, r2, r3
 800c638:	b29b      	uxth	r3, r3
 800c63a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c63c:	4293      	cmp	r3, r2
 800c63e:	bf28      	it	cs
 800c640:	4613      	movcs	r3, r2
 800c642:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c64a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c64c:	4413      	add	r3, r2
 800c64e:	b29a      	uxth	r2, r3
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c656:	429a      	cmp	r2, r3
 800c658:	d309      	bcc.n	800c66e <tcp_receive+0x2c6>
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c660:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c662:	4413      	add	r3, r2
 800c664:	b29a      	uxth	r2, r3
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800c66c:	e04e      	b.n	800c70c <tcp_receive+0x364>
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c674:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800c678:	e048      	b.n	800c70c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800c680:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c682:	4413      	add	r3, r2
 800c684:	b29a      	uxth	r2, r3
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d309      	bcc.n	800c6a4 <tcp_receive+0x2fc>
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800c696:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c698:	4413      	add	r3, r2
 800c69a:	b29a      	uxth	r2, r3
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c6a2:	e004      	b.n	800c6ae <tcp_receive+0x306>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c6aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c6ba:	429a      	cmp	r2, r3
 800c6bc:	d326      	bcc.n	800c70c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c6ca:	1ad3      	subs	r3, r2, r3
 800c6cc:	b29a      	uxth	r2, r3
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c6de:	4413      	add	r3, r2
 800c6e0:	b29a      	uxth	r2, r3
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	d30a      	bcc.n	800c702 <tcp_receive+0x35a>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c6f6:	4413      	add	r3, r2
 800c6f8:	b29a      	uxth	r2, r3
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800c700:	e004      	b.n	800c70c <tcp_receive+0x364>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c708:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c714:	4a98      	ldr	r2, [pc, #608]	@ (800c978 <tcp_receive+0x5d0>)
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f7ff fdca 	bl	800c2b0 <tcp_free_acked_segments>
 800c71c:	4602      	mov	r2, r0
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c72a:	4a94      	ldr	r2, [pc, #592]	@ (800c97c <tcp_receive+0x5d4>)
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f7ff fdbf 	bl	800c2b0 <tcp_free_acked_segments>
 800c732:	4602      	mov	r2, r0
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d104      	bne.n	800c74a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c746:	861a      	strh	r2, [r3, #48]	@ 0x30
 800c748:	e002      	b.n	800c750 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2200      	movs	r2, #0
 800c74e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2200      	movs	r2, #0
 800c754:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d103      	bne.n	800c766 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2200      	movs	r2, #0
 800c762:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800c76c:	4b84      	ldr	r3, [pc, #528]	@ (800c980 <tcp_receive+0x5d8>)
 800c76e:	881b      	ldrh	r3, [r3, #0]
 800c770:	4413      	add	r3, r2
 800c772:	b29a      	uxth	r2, r3
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	8b5b      	ldrh	r3, [r3, #26]
 800c77e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c782:	2b00      	cmp	r3, #0
 800c784:	d035      	beq.n	800c7f2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d118      	bne.n	800c7c0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c792:	2b00      	cmp	r3, #0
 800c794:	d00c      	beq.n	800c7b0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c79e:	68db      	ldr	r3, [r3, #12]
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f7fb f921 	bl	80079ea <lwip_htonl>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	dc20      	bgt.n	800c7f2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	8b5b      	ldrh	r3, [r3, #26]
 800c7b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c7b8:	b29a      	uxth	r2, r3
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c7be:	e018      	b.n	800c7f2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c7c8:	68db      	ldr	r3, [r3, #12]
 800c7ca:	685b      	ldr	r3, [r3, #4]
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f7fb f90c 	bl	80079ea <lwip_htonl>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	1ae3      	subs	r3, r4, r3
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	dc0b      	bgt.n	800c7f2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	8b5b      	ldrh	r3, [r3, #26]
 800c7de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c7e2:	b29a      	uxth	r2, r3
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c7e8:	e003      	b.n	800c7f2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f001 ff72 	bl	800e6d4 <tcp_send_empty_ack>
 800c7f0:	e000      	b.n	800c7f4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c7f2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d05b      	beq.n	800c8b4 <tcp_receive+0x50c>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c800:	4b60      	ldr	r3, [pc, #384]	@ (800c984 <tcp_receive+0x5dc>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	1ad3      	subs	r3, r2, r3
 800c806:	2b00      	cmp	r3, #0
 800c808:	da54      	bge.n	800c8b4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c80a:	4b5f      	ldr	r3, [pc, #380]	@ (800c988 <tcp_receive+0x5e0>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	b29a      	uxth	r2, r3
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c814:	b29b      	uxth	r3, r3
 800c816:	1ad3      	subs	r3, r2, r3
 800c818:	b29b      	uxth	r3, r3
 800c81a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800c81e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c828:	10db      	asrs	r3, r3, #3
 800c82a:	b21b      	sxth	r3, r3
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	1ad3      	subs	r3, r2, r3
 800c830:	b29b      	uxth	r3, r3
 800c832:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c83c:	b29a      	uxth	r2, r3
 800c83e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c842:	4413      	add	r3, r2
 800c844:	b29b      	uxth	r3, r3
 800c846:	b21a      	sxth	r2, r3
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800c84c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800c850:	2b00      	cmp	r3, #0
 800c852:	da05      	bge.n	800c860 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800c854:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c858:	425b      	negs	r3, r3
 800c85a:	b29b      	uxth	r3, r3
 800c85c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800c860:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c86a:	109b      	asrs	r3, r3, #2
 800c86c:	b21b      	sxth	r3, r3
 800c86e:	b29b      	uxth	r3, r3
 800c870:	1ad3      	subs	r3, r2, r3
 800c872:	b29b      	uxth	r3, r3
 800c874:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c87e:	b29a      	uxth	r2, r3
 800c880:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c884:	4413      	add	r3, r2
 800c886:	b29b      	uxth	r3, r3
 800c888:	b21a      	sxth	r2, r3
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c894:	10db      	asrs	r3, r3, #3
 800c896:	b21b      	sxth	r3, r3
 800c898:	b29a      	uxth	r2, r3
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c8a0:	b29b      	uxth	r3, r3
 800c8a2:	4413      	add	r3, r2
 800c8a4:	b29b      	uxth	r3, r3
 800c8a6:	b21a      	sxth	r2, r3
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c8b4:	4b35      	ldr	r3, [pc, #212]	@ (800c98c <tcp_receive+0x5e4>)
 800c8b6:	881b      	ldrh	r3, [r3, #0]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	f000 84df 	beq.w	800d27c <tcp_receive+0xed4>
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	7d1b      	ldrb	r3, [r3, #20]
 800c8c2:	2b06      	cmp	r3, #6
 800c8c4:	f200 84da 	bhi.w	800d27c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c8cc:	4b30      	ldr	r3, [pc, #192]	@ (800c990 <tcp_receive+0x5e8>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	1ad3      	subs	r3, r2, r3
 800c8d2:	3b01      	subs	r3, #1
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	f2c0 808f 	blt.w	800c9f8 <tcp_receive+0x650>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c8de:	4b2b      	ldr	r3, [pc, #172]	@ (800c98c <tcp_receive+0x5e4>)
 800c8e0:	881b      	ldrh	r3, [r3, #0]
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	4b2a      	ldr	r3, [pc, #168]	@ (800c990 <tcp_receive+0x5e8>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	440b      	add	r3, r1
 800c8ea:	1ad3      	subs	r3, r2, r3
 800c8ec:	3301      	adds	r3, #1
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	f300 8082 	bgt.w	800c9f8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800c8f4:	4b27      	ldr	r3, [pc, #156]	@ (800c994 <tcp_receive+0x5ec>)
 800c8f6:	685b      	ldr	r3, [r3, #4]
 800c8f8:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c8fe:	4b24      	ldr	r3, [pc, #144]	@ (800c990 <tcp_receive+0x5e8>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	1ad3      	subs	r3, r2, r3
 800c904:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c906:	4b23      	ldr	r3, [pc, #140]	@ (800c994 <tcp_receive+0x5ec>)
 800c908:	685b      	ldr	r3, [r3, #4]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d106      	bne.n	800c91c <tcp_receive+0x574>
 800c90e:	4b22      	ldr	r3, [pc, #136]	@ (800c998 <tcp_receive+0x5f0>)
 800c910:	f240 5294 	movw	r2, #1428	@ 0x594
 800c914:	4921      	ldr	r1, [pc, #132]	@ (800c99c <tcp_receive+0x5f4>)
 800c916:	4822      	ldr	r0, [pc, #136]	@ (800c9a0 <tcp_receive+0x5f8>)
 800c918:	f005 f85c 	bl	80119d4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c91e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c922:	4293      	cmp	r3, r2
 800c924:	d906      	bls.n	800c934 <tcp_receive+0x58c>
 800c926:	4b1c      	ldr	r3, [pc, #112]	@ (800c998 <tcp_receive+0x5f0>)
 800c928:	f240 5295 	movw	r2, #1429	@ 0x595
 800c92c:	491d      	ldr	r1, [pc, #116]	@ (800c9a4 <tcp_receive+0x5fc>)
 800c92e:	481c      	ldr	r0, [pc, #112]	@ (800c9a0 <tcp_receive+0x5f8>)
 800c930:	f005 f850 	bl	80119d4 <iprintf>
      off = (u16_t)off32;
 800c934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c936:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c93a:	4b16      	ldr	r3, [pc, #88]	@ (800c994 <tcp_receive+0x5ec>)
 800c93c:	685b      	ldr	r3, [r3, #4]
 800c93e:	891b      	ldrh	r3, [r3, #8]
 800c940:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c944:	429a      	cmp	r2, r3
 800c946:	d906      	bls.n	800c956 <tcp_receive+0x5ae>
 800c948:	4b13      	ldr	r3, [pc, #76]	@ (800c998 <tcp_receive+0x5f0>)
 800c94a:	f240 5297 	movw	r2, #1431	@ 0x597
 800c94e:	4916      	ldr	r1, [pc, #88]	@ (800c9a8 <tcp_receive+0x600>)
 800c950:	4813      	ldr	r0, [pc, #76]	@ (800c9a0 <tcp_receive+0x5f8>)
 800c952:	f005 f83f 	bl	80119d4 <iprintf>
      inseg.len -= off;
 800c956:	4b0f      	ldr	r3, [pc, #60]	@ (800c994 <tcp_receive+0x5ec>)
 800c958:	891a      	ldrh	r2, [r3, #8]
 800c95a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c95e:	1ad3      	subs	r3, r2, r3
 800c960:	b29a      	uxth	r2, r3
 800c962:	4b0c      	ldr	r3, [pc, #48]	@ (800c994 <tcp_receive+0x5ec>)
 800c964:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c966:	4b0b      	ldr	r3, [pc, #44]	@ (800c994 <tcp_receive+0x5ec>)
 800c968:	685b      	ldr	r3, [r3, #4]
 800c96a:	891a      	ldrh	r2, [r3, #8]
 800c96c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c970:	1ad3      	subs	r3, r2, r3
 800c972:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800c974:	e02a      	b.n	800c9cc <tcp_receive+0x624>
 800c976:	bf00      	nop
 800c978:	08013f3c 	.word	0x08013f3c
 800c97c:	08013f44 	.word	0x08013f44
 800c980:	2000fde8 	.word	0x2000fde8
 800c984:	2000fde4 	.word	0x2000fde4
 800c988:	2000fda8 	.word	0x2000fda8
 800c98c:	2000fdea 	.word	0x2000fdea
 800c990:	2000fde0 	.word	0x2000fde0
 800c994:	2000fdc0 	.word	0x2000fdc0
 800c998:	08013bd4 	.word	0x08013bd4
 800c99c:	08013f4c 	.word	0x08013f4c
 800c9a0:	08013c20 	.word	0x08013c20
 800c9a4:	08013f5c 	.word	0x08013f5c
 800c9a8:	08013f6c 	.word	0x08013f6c
        off -= p->len;
 800c9ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9ae:	895b      	ldrh	r3, [r3, #10]
 800c9b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c9b4:	1ad3      	subs	r3, r2, r3
 800c9b6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800c9ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9bc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c9be:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800c9c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800c9c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800c9cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9ce:	895b      	ldrh	r3, [r3, #10]
 800c9d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d8e9      	bhi.n	800c9ac <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800c9d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c9dc:	4619      	mov	r1, r3
 800c9de:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800c9e0:	f7fc fb6a 	bl	80090b8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9e8:	4a90      	ldr	r2, [pc, #576]	@ (800cc2c <tcp_receive+0x884>)
 800c9ea:	6013      	str	r3, [r2, #0]
 800c9ec:	4b90      	ldr	r3, [pc, #576]	@ (800cc30 <tcp_receive+0x888>)
 800c9ee:	68db      	ldr	r3, [r3, #12]
 800c9f0:	4a8e      	ldr	r2, [pc, #568]	@ (800cc2c <tcp_receive+0x884>)
 800c9f2:	6812      	ldr	r2, [r2, #0]
 800c9f4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c9f6:	e00d      	b.n	800ca14 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c9f8:	4b8c      	ldr	r3, [pc, #560]	@ (800cc2c <tcp_receive+0x884>)
 800c9fa:	681a      	ldr	r2, [r3, #0]
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca00:	1ad3      	subs	r3, r2, r3
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	da06      	bge.n	800ca14 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	8b5b      	ldrh	r3, [r3, #26]
 800ca0a:	f043 0302 	orr.w	r3, r3, #2
 800ca0e:	b29a      	uxth	r2, r3
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ca14:	4b85      	ldr	r3, [pc, #532]	@ (800cc2c <tcp_receive+0x884>)
 800ca16:	681a      	ldr	r2, [r3, #0]
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca1c:	1ad3      	subs	r3, r2, r3
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	f2c0 8427 	blt.w	800d272 <tcp_receive+0xeca>
 800ca24:	4b81      	ldr	r3, [pc, #516]	@ (800cc2c <tcp_receive+0x884>)
 800ca26:	681a      	ldr	r2, [r3, #0]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca2c:	6879      	ldr	r1, [r7, #4]
 800ca2e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ca30:	440b      	add	r3, r1
 800ca32:	1ad3      	subs	r3, r2, r3
 800ca34:	3301      	adds	r3, #1
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	f300 841b 	bgt.w	800d272 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ca40:	4b7a      	ldr	r3, [pc, #488]	@ (800cc2c <tcp_receive+0x884>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	429a      	cmp	r2, r3
 800ca46:	f040 8298 	bne.w	800cf7a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ca4a:	4b79      	ldr	r3, [pc, #484]	@ (800cc30 <tcp_receive+0x888>)
 800ca4c:	891c      	ldrh	r4, [r3, #8]
 800ca4e:	4b78      	ldr	r3, [pc, #480]	@ (800cc30 <tcp_receive+0x888>)
 800ca50:	68db      	ldr	r3, [r3, #12]
 800ca52:	899b      	ldrh	r3, [r3, #12]
 800ca54:	b29b      	uxth	r3, r3
 800ca56:	4618      	mov	r0, r3
 800ca58:	f7fa ffb2 	bl	80079c0 <lwip_htons>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	b2db      	uxtb	r3, r3
 800ca60:	f003 0303 	and.w	r3, r3, #3
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d001      	beq.n	800ca6c <tcp_receive+0x6c4>
 800ca68:	2301      	movs	r3, #1
 800ca6a:	e000      	b.n	800ca6e <tcp_receive+0x6c6>
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	4423      	add	r3, r4
 800ca70:	b29a      	uxth	r2, r3
 800ca72:	4b70      	ldr	r3, [pc, #448]	@ (800cc34 <tcp_receive+0x88c>)
 800ca74:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ca7a:	4b6e      	ldr	r3, [pc, #440]	@ (800cc34 <tcp_receive+0x88c>)
 800ca7c:	881b      	ldrh	r3, [r3, #0]
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d274      	bcs.n	800cb6c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ca82:	4b6b      	ldr	r3, [pc, #428]	@ (800cc30 <tcp_receive+0x888>)
 800ca84:	68db      	ldr	r3, [r3, #12]
 800ca86:	899b      	ldrh	r3, [r3, #12]
 800ca88:	b29b      	uxth	r3, r3
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f7fa ff98 	bl	80079c0 <lwip_htons>
 800ca90:	4603      	mov	r3, r0
 800ca92:	b2db      	uxtb	r3, r3
 800ca94:	f003 0301 	and.w	r3, r3, #1
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d01e      	beq.n	800cada <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ca9c:	4b64      	ldr	r3, [pc, #400]	@ (800cc30 <tcp_receive+0x888>)
 800ca9e:	68db      	ldr	r3, [r3, #12]
 800caa0:	899b      	ldrh	r3, [r3, #12]
 800caa2:	b29b      	uxth	r3, r3
 800caa4:	b21b      	sxth	r3, r3
 800caa6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800caaa:	b21c      	sxth	r4, r3
 800caac:	4b60      	ldr	r3, [pc, #384]	@ (800cc30 <tcp_receive+0x888>)
 800caae:	68db      	ldr	r3, [r3, #12]
 800cab0:	899b      	ldrh	r3, [r3, #12]
 800cab2:	b29b      	uxth	r3, r3
 800cab4:	4618      	mov	r0, r3
 800cab6:	f7fa ff83 	bl	80079c0 <lwip_htons>
 800caba:	4603      	mov	r3, r0
 800cabc:	b2db      	uxtb	r3, r3
 800cabe:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800cac2:	b29b      	uxth	r3, r3
 800cac4:	4618      	mov	r0, r3
 800cac6:	f7fa ff7b 	bl	80079c0 <lwip_htons>
 800caca:	4603      	mov	r3, r0
 800cacc:	b21b      	sxth	r3, r3
 800cace:	4323      	orrs	r3, r4
 800cad0:	b21a      	sxth	r2, r3
 800cad2:	4b57      	ldr	r3, [pc, #348]	@ (800cc30 <tcp_receive+0x888>)
 800cad4:	68db      	ldr	r3, [r3, #12]
 800cad6:	b292      	uxth	r2, r2
 800cad8:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800cade:	4b54      	ldr	r3, [pc, #336]	@ (800cc30 <tcp_receive+0x888>)
 800cae0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800cae2:	4b53      	ldr	r3, [pc, #332]	@ (800cc30 <tcp_receive+0x888>)
 800cae4:	68db      	ldr	r3, [r3, #12]
 800cae6:	899b      	ldrh	r3, [r3, #12]
 800cae8:	b29b      	uxth	r3, r3
 800caea:	4618      	mov	r0, r3
 800caec:	f7fa ff68 	bl	80079c0 <lwip_htons>
 800caf0:	4603      	mov	r3, r0
 800caf2:	b2db      	uxtb	r3, r3
 800caf4:	f003 0302 	and.w	r3, r3, #2
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d005      	beq.n	800cb08 <tcp_receive+0x760>
            inseg.len -= 1;
 800cafc:	4b4c      	ldr	r3, [pc, #304]	@ (800cc30 <tcp_receive+0x888>)
 800cafe:	891b      	ldrh	r3, [r3, #8]
 800cb00:	3b01      	subs	r3, #1
 800cb02:	b29a      	uxth	r2, r3
 800cb04:	4b4a      	ldr	r3, [pc, #296]	@ (800cc30 <tcp_receive+0x888>)
 800cb06:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800cb08:	4b49      	ldr	r3, [pc, #292]	@ (800cc30 <tcp_receive+0x888>)
 800cb0a:	685b      	ldr	r3, [r3, #4]
 800cb0c:	4a48      	ldr	r2, [pc, #288]	@ (800cc30 <tcp_receive+0x888>)
 800cb0e:	8912      	ldrh	r2, [r2, #8]
 800cb10:	4611      	mov	r1, r2
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7fc f9d0 	bl	8008eb8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800cb18:	4b45      	ldr	r3, [pc, #276]	@ (800cc30 <tcp_receive+0x888>)
 800cb1a:	891c      	ldrh	r4, [r3, #8]
 800cb1c:	4b44      	ldr	r3, [pc, #272]	@ (800cc30 <tcp_receive+0x888>)
 800cb1e:	68db      	ldr	r3, [r3, #12]
 800cb20:	899b      	ldrh	r3, [r3, #12]
 800cb22:	b29b      	uxth	r3, r3
 800cb24:	4618      	mov	r0, r3
 800cb26:	f7fa ff4b 	bl	80079c0 <lwip_htons>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	b2db      	uxtb	r3, r3
 800cb2e:	f003 0303 	and.w	r3, r3, #3
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d001      	beq.n	800cb3a <tcp_receive+0x792>
 800cb36:	2301      	movs	r3, #1
 800cb38:	e000      	b.n	800cb3c <tcp_receive+0x794>
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	4423      	add	r3, r4
 800cb3e:	b29a      	uxth	r2, r3
 800cb40:	4b3c      	ldr	r3, [pc, #240]	@ (800cc34 <tcp_receive+0x88c>)
 800cb42:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800cb44:	4b3b      	ldr	r3, [pc, #236]	@ (800cc34 <tcp_receive+0x88c>)
 800cb46:	881b      	ldrh	r3, [r3, #0]
 800cb48:	461a      	mov	r2, r3
 800cb4a:	4b38      	ldr	r3, [pc, #224]	@ (800cc2c <tcp_receive+0x884>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	441a      	add	r2, r3
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb54:	6879      	ldr	r1, [r7, #4]
 800cb56:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800cb58:	440b      	add	r3, r1
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d006      	beq.n	800cb6c <tcp_receive+0x7c4>
 800cb5e:	4b36      	ldr	r3, [pc, #216]	@ (800cc38 <tcp_receive+0x890>)
 800cb60:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800cb64:	4935      	ldr	r1, [pc, #212]	@ (800cc3c <tcp_receive+0x894>)
 800cb66:	4836      	ldr	r0, [pc, #216]	@ (800cc40 <tcp_receive+0x898>)
 800cb68:	f004 ff34 	bl	80119d4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	f000 80e6 	beq.w	800cd42 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cb76:	4b2e      	ldr	r3, [pc, #184]	@ (800cc30 <tcp_receive+0x888>)
 800cb78:	68db      	ldr	r3, [r3, #12]
 800cb7a:	899b      	ldrh	r3, [r3, #12]
 800cb7c:	b29b      	uxth	r3, r3
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7fa ff1e 	bl	80079c0 <lwip_htons>
 800cb84:	4603      	mov	r3, r0
 800cb86:	b2db      	uxtb	r3, r3
 800cb88:	f003 0301 	and.w	r3, r3, #1
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d010      	beq.n	800cbb2 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800cb90:	e00a      	b.n	800cba8 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb96:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb9c:	681a      	ldr	r2, [r3, #0]
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800cba2:	68f8      	ldr	r0, [r7, #12]
 800cba4:	f7fd fd93 	bl	800a6ce <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d1f0      	bne.n	800cb92 <tcp_receive+0x7ea>
 800cbb0:	e0c7      	b.n	800cd42 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800cbb8:	e051      	b.n	800cc5e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800cbba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbbc:	68db      	ldr	r3, [r3, #12]
 800cbbe:	899b      	ldrh	r3, [r3, #12]
 800cbc0:	b29b      	uxth	r3, r3
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f7fa fefc 	bl	80079c0 <lwip_htons>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	b2db      	uxtb	r3, r3
 800cbcc:	f003 0301 	and.w	r3, r3, #1
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d03c      	beq.n	800cc4e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800cbd4:	4b16      	ldr	r3, [pc, #88]	@ (800cc30 <tcp_receive+0x888>)
 800cbd6:	68db      	ldr	r3, [r3, #12]
 800cbd8:	899b      	ldrh	r3, [r3, #12]
 800cbda:	b29b      	uxth	r3, r3
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f7fa feef 	bl	80079c0 <lwip_htons>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	b2db      	uxtb	r3, r3
 800cbe6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d12f      	bne.n	800cc4e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800cbee:	4b10      	ldr	r3, [pc, #64]	@ (800cc30 <tcp_receive+0x888>)
 800cbf0:	68db      	ldr	r3, [r3, #12]
 800cbf2:	899b      	ldrh	r3, [r3, #12]
 800cbf4:	b29c      	uxth	r4, r3
 800cbf6:	2001      	movs	r0, #1
 800cbf8:	f7fa fee2 	bl	80079c0 <lwip_htons>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	461a      	mov	r2, r3
 800cc00:	4b0b      	ldr	r3, [pc, #44]	@ (800cc30 <tcp_receive+0x888>)
 800cc02:	68db      	ldr	r3, [r3, #12]
 800cc04:	4322      	orrs	r2, r4
 800cc06:	b292      	uxth	r2, r2
 800cc08:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800cc0a:	4b09      	ldr	r3, [pc, #36]	@ (800cc30 <tcp_receive+0x888>)
 800cc0c:	891c      	ldrh	r4, [r3, #8]
 800cc0e:	4b08      	ldr	r3, [pc, #32]	@ (800cc30 <tcp_receive+0x888>)
 800cc10:	68db      	ldr	r3, [r3, #12]
 800cc12:	899b      	ldrh	r3, [r3, #12]
 800cc14:	b29b      	uxth	r3, r3
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7fa fed2 	bl	80079c0 <lwip_htons>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	b2db      	uxtb	r3, r3
 800cc20:	f003 0303 	and.w	r3, r3, #3
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d00d      	beq.n	800cc44 <tcp_receive+0x89c>
 800cc28:	2301      	movs	r3, #1
 800cc2a:	e00c      	b.n	800cc46 <tcp_receive+0x89e>
 800cc2c:	2000fde0 	.word	0x2000fde0
 800cc30:	2000fdc0 	.word	0x2000fdc0
 800cc34:	2000fdea 	.word	0x2000fdea
 800cc38:	08013bd4 	.word	0x08013bd4
 800cc3c:	08013f7c 	.word	0x08013f7c
 800cc40:	08013c20 	.word	0x08013c20
 800cc44:	2300      	movs	r3, #0
 800cc46:	4423      	add	r3, r4
 800cc48:	b29a      	uxth	r2, r3
 800cc4a:	4b98      	ldr	r3, [pc, #608]	@ (800ceac <tcp_receive+0xb04>)
 800cc4c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800cc4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc50:	613b      	str	r3, [r7, #16]
              next = next->next;
 800cc52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800cc58:	6938      	ldr	r0, [r7, #16]
 800cc5a:	f7fd fd38 	bl	800a6ce <tcp_seg_free>
            while (next &&
 800cc5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d00e      	beq.n	800cc82 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800cc64:	4b91      	ldr	r3, [pc, #580]	@ (800ceac <tcp_receive+0xb04>)
 800cc66:	881b      	ldrh	r3, [r3, #0]
 800cc68:	461a      	mov	r2, r3
 800cc6a:	4b91      	ldr	r3, [pc, #580]	@ (800ceb0 <tcp_receive+0xb08>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	441a      	add	r2, r3
 800cc70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc72:	68db      	ldr	r3, [r3, #12]
 800cc74:	685b      	ldr	r3, [r3, #4]
 800cc76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cc78:	8909      	ldrh	r1, [r1, #8]
 800cc7a:	440b      	add	r3, r1
 800cc7c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	da9b      	bge.n	800cbba <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800cc82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d059      	beq.n	800cd3c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800cc88:	4b88      	ldr	r3, [pc, #544]	@ (800ceac <tcp_receive+0xb04>)
 800cc8a:	881b      	ldrh	r3, [r3, #0]
 800cc8c:	461a      	mov	r2, r3
 800cc8e:	4b88      	ldr	r3, [pc, #544]	@ (800ceb0 <tcp_receive+0xb08>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	441a      	add	r2, r3
 800cc94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc96:	68db      	ldr	r3, [r3, #12]
 800cc98:	685b      	ldr	r3, [r3, #4]
 800cc9a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	dd4d      	ble.n	800cd3c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800cca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cca2:	68db      	ldr	r3, [r3, #12]
 800cca4:	685b      	ldr	r3, [r3, #4]
 800cca6:	b29a      	uxth	r2, r3
 800cca8:	4b81      	ldr	r3, [pc, #516]	@ (800ceb0 <tcp_receive+0xb08>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	b29b      	uxth	r3, r3
 800ccae:	1ad3      	subs	r3, r2, r3
 800ccb0:	b29a      	uxth	r2, r3
 800ccb2:	4b80      	ldr	r3, [pc, #512]	@ (800ceb4 <tcp_receive+0xb0c>)
 800ccb4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ccb6:	4b7f      	ldr	r3, [pc, #508]	@ (800ceb4 <tcp_receive+0xb0c>)
 800ccb8:	68db      	ldr	r3, [r3, #12]
 800ccba:	899b      	ldrh	r3, [r3, #12]
 800ccbc:	b29b      	uxth	r3, r3
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	f7fa fe7e 	bl	80079c0 <lwip_htons>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	b2db      	uxtb	r3, r3
 800ccc8:	f003 0302 	and.w	r3, r3, #2
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d005      	beq.n	800ccdc <tcp_receive+0x934>
                inseg.len -= 1;
 800ccd0:	4b78      	ldr	r3, [pc, #480]	@ (800ceb4 <tcp_receive+0xb0c>)
 800ccd2:	891b      	ldrh	r3, [r3, #8]
 800ccd4:	3b01      	subs	r3, #1
 800ccd6:	b29a      	uxth	r2, r3
 800ccd8:	4b76      	ldr	r3, [pc, #472]	@ (800ceb4 <tcp_receive+0xb0c>)
 800ccda:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ccdc:	4b75      	ldr	r3, [pc, #468]	@ (800ceb4 <tcp_receive+0xb0c>)
 800ccde:	685b      	ldr	r3, [r3, #4]
 800cce0:	4a74      	ldr	r2, [pc, #464]	@ (800ceb4 <tcp_receive+0xb0c>)
 800cce2:	8912      	ldrh	r2, [r2, #8]
 800cce4:	4611      	mov	r1, r2
 800cce6:	4618      	mov	r0, r3
 800cce8:	f7fc f8e6 	bl	8008eb8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ccec:	4b71      	ldr	r3, [pc, #452]	@ (800ceb4 <tcp_receive+0xb0c>)
 800ccee:	891c      	ldrh	r4, [r3, #8]
 800ccf0:	4b70      	ldr	r3, [pc, #448]	@ (800ceb4 <tcp_receive+0xb0c>)
 800ccf2:	68db      	ldr	r3, [r3, #12]
 800ccf4:	899b      	ldrh	r3, [r3, #12]
 800ccf6:	b29b      	uxth	r3, r3
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f7fa fe61 	bl	80079c0 <lwip_htons>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	b2db      	uxtb	r3, r3
 800cd02:	f003 0303 	and.w	r3, r3, #3
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d001      	beq.n	800cd0e <tcp_receive+0x966>
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	e000      	b.n	800cd10 <tcp_receive+0x968>
 800cd0e:	2300      	movs	r3, #0
 800cd10:	4423      	add	r3, r4
 800cd12:	b29a      	uxth	r2, r3
 800cd14:	4b65      	ldr	r3, [pc, #404]	@ (800ceac <tcp_receive+0xb04>)
 800cd16:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800cd18:	4b64      	ldr	r3, [pc, #400]	@ (800ceac <tcp_receive+0xb04>)
 800cd1a:	881b      	ldrh	r3, [r3, #0]
 800cd1c:	461a      	mov	r2, r3
 800cd1e:	4b64      	ldr	r3, [pc, #400]	@ (800ceb0 <tcp_receive+0xb08>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	441a      	add	r2, r3
 800cd24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd26:	68db      	ldr	r3, [r3, #12]
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d006      	beq.n	800cd3c <tcp_receive+0x994>
 800cd2e:	4b62      	ldr	r3, [pc, #392]	@ (800ceb8 <tcp_receive+0xb10>)
 800cd30:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800cd34:	4961      	ldr	r1, [pc, #388]	@ (800cebc <tcp_receive+0xb14>)
 800cd36:	4862      	ldr	r0, [pc, #392]	@ (800cec0 <tcp_receive+0xb18>)
 800cd38:	f004 fe4c 	bl	80119d4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cd40:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800cd42:	4b5a      	ldr	r3, [pc, #360]	@ (800ceac <tcp_receive+0xb04>)
 800cd44:	881b      	ldrh	r3, [r3, #0]
 800cd46:	461a      	mov	r2, r3
 800cd48:	4b59      	ldr	r3, [pc, #356]	@ (800ceb0 <tcp_receive+0xb08>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	441a      	add	r2, r3
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800cd56:	4b55      	ldr	r3, [pc, #340]	@ (800ceac <tcp_receive+0xb04>)
 800cd58:	881b      	ldrh	r3, [r3, #0]
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d206      	bcs.n	800cd6c <tcp_receive+0x9c4>
 800cd5e:	4b56      	ldr	r3, [pc, #344]	@ (800ceb8 <tcp_receive+0xb10>)
 800cd60:	f240 6207 	movw	r2, #1543	@ 0x607
 800cd64:	4957      	ldr	r1, [pc, #348]	@ (800cec4 <tcp_receive+0xb1c>)
 800cd66:	4856      	ldr	r0, [pc, #344]	@ (800cec0 <tcp_receive+0xb18>)
 800cd68:	f004 fe34 	bl	80119d4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800cd70:	4b4e      	ldr	r3, [pc, #312]	@ (800ceac <tcp_receive+0xb04>)
 800cd72:	881b      	ldrh	r3, [r3, #0]
 800cd74:	1ad3      	subs	r3, r2, r3
 800cd76:	b29a      	uxth	r2, r3
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f7fc ffc1 	bl	8009d04 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800cd82:	4b4c      	ldr	r3, [pc, #304]	@ (800ceb4 <tcp_receive+0xb0c>)
 800cd84:	685b      	ldr	r3, [r3, #4]
 800cd86:	891b      	ldrh	r3, [r3, #8]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d006      	beq.n	800cd9a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800cd8c:	4b49      	ldr	r3, [pc, #292]	@ (800ceb4 <tcp_receive+0xb0c>)
 800cd8e:	685b      	ldr	r3, [r3, #4]
 800cd90:	4a4d      	ldr	r2, [pc, #308]	@ (800cec8 <tcp_receive+0xb20>)
 800cd92:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800cd94:	4b47      	ldr	r3, [pc, #284]	@ (800ceb4 <tcp_receive+0xb0c>)
 800cd96:	2200      	movs	r2, #0
 800cd98:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cd9a:	4b46      	ldr	r3, [pc, #280]	@ (800ceb4 <tcp_receive+0xb0c>)
 800cd9c:	68db      	ldr	r3, [r3, #12]
 800cd9e:	899b      	ldrh	r3, [r3, #12]
 800cda0:	b29b      	uxth	r3, r3
 800cda2:	4618      	mov	r0, r3
 800cda4:	f7fa fe0c 	bl	80079c0 <lwip_htons>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	b2db      	uxtb	r3, r3
 800cdac:	f003 0301 	and.w	r3, r3, #1
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	f000 80b8 	beq.w	800cf26 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800cdb6:	4b45      	ldr	r3, [pc, #276]	@ (800cecc <tcp_receive+0xb24>)
 800cdb8:	781b      	ldrb	r3, [r3, #0]
 800cdba:	f043 0320 	orr.w	r3, r3, #32
 800cdbe:	b2da      	uxtb	r2, r3
 800cdc0:	4b42      	ldr	r3, [pc, #264]	@ (800cecc <tcp_receive+0xb24>)
 800cdc2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800cdc4:	e0af      	b.n	800cf26 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cdca:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cdd0:	68db      	ldr	r3, [r3, #12]
 800cdd2:	685b      	ldr	r3, [r3, #4]
 800cdd4:	4a36      	ldr	r2, [pc, #216]	@ (800ceb0 <tcp_receive+0xb08>)
 800cdd6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	891b      	ldrh	r3, [r3, #8]
 800cddc:	461c      	mov	r4, r3
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	68db      	ldr	r3, [r3, #12]
 800cde2:	899b      	ldrh	r3, [r3, #12]
 800cde4:	b29b      	uxth	r3, r3
 800cde6:	4618      	mov	r0, r3
 800cde8:	f7fa fdea 	bl	80079c0 <lwip_htons>
 800cdec:	4603      	mov	r3, r0
 800cdee:	b2db      	uxtb	r3, r3
 800cdf0:	f003 0303 	and.w	r3, r3, #3
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d001      	beq.n	800cdfc <tcp_receive+0xa54>
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	e000      	b.n	800cdfe <tcp_receive+0xa56>
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	191a      	adds	r2, r3, r4
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce04:	441a      	add	r2, r3
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce0e:	461c      	mov	r4, r3
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	891b      	ldrh	r3, [r3, #8]
 800ce14:	461d      	mov	r5, r3
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	68db      	ldr	r3, [r3, #12]
 800ce1a:	899b      	ldrh	r3, [r3, #12]
 800ce1c:	b29b      	uxth	r3, r3
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f7fa fdce 	bl	80079c0 <lwip_htons>
 800ce24:	4603      	mov	r3, r0
 800ce26:	b2db      	uxtb	r3, r3
 800ce28:	f003 0303 	and.w	r3, r3, #3
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d001      	beq.n	800ce34 <tcp_receive+0xa8c>
 800ce30:	2301      	movs	r3, #1
 800ce32:	e000      	b.n	800ce36 <tcp_receive+0xa8e>
 800ce34:	2300      	movs	r3, #0
 800ce36:	442b      	add	r3, r5
 800ce38:	429c      	cmp	r4, r3
 800ce3a:	d206      	bcs.n	800ce4a <tcp_receive+0xaa2>
 800ce3c:	4b1e      	ldr	r3, [pc, #120]	@ (800ceb8 <tcp_receive+0xb10>)
 800ce3e:	f240 622b 	movw	r2, #1579	@ 0x62b
 800ce42:	4923      	ldr	r1, [pc, #140]	@ (800ced0 <tcp_receive+0xb28>)
 800ce44:	481e      	ldr	r0, [pc, #120]	@ (800cec0 <tcp_receive+0xb18>)
 800ce46:	f004 fdc5 	bl	80119d4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	891b      	ldrh	r3, [r3, #8]
 800ce4e:	461c      	mov	r4, r3
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	68db      	ldr	r3, [r3, #12]
 800ce54:	899b      	ldrh	r3, [r3, #12]
 800ce56:	b29b      	uxth	r3, r3
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f7fa fdb1 	bl	80079c0 <lwip_htons>
 800ce5e:	4603      	mov	r3, r0
 800ce60:	b2db      	uxtb	r3, r3
 800ce62:	f003 0303 	and.w	r3, r3, #3
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d001      	beq.n	800ce6e <tcp_receive+0xac6>
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	e000      	b.n	800ce70 <tcp_receive+0xac8>
 800ce6e:	2300      	movs	r3, #0
 800ce70:	1919      	adds	r1, r3, r4
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ce76:	b28b      	uxth	r3, r1
 800ce78:	1ad3      	subs	r3, r2, r3
 800ce7a:	b29a      	uxth	r2, r3
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f7fc ff3f 	bl	8009d04 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	891b      	ldrh	r3, [r3, #8]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d028      	beq.n	800cee2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800ce90:	4b0d      	ldr	r3, [pc, #52]	@ (800cec8 <tcp_receive+0xb20>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d01d      	beq.n	800ced4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800ce98:	4b0b      	ldr	r3, [pc, #44]	@ (800cec8 <tcp_receive+0xb20>)
 800ce9a:	681a      	ldr	r2, [r3, #0]
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	685b      	ldr	r3, [r3, #4]
 800cea0:	4619      	mov	r1, r3
 800cea2:	4610      	mov	r0, r2
 800cea4:	f7fc fa5c 	bl	8009360 <pbuf_cat>
 800cea8:	e018      	b.n	800cedc <tcp_receive+0xb34>
 800ceaa:	bf00      	nop
 800ceac:	2000fdea 	.word	0x2000fdea
 800ceb0:	2000fde0 	.word	0x2000fde0
 800ceb4:	2000fdc0 	.word	0x2000fdc0
 800ceb8:	08013bd4 	.word	0x08013bd4
 800cebc:	08013fb4 	.word	0x08013fb4
 800cec0:	08013c20 	.word	0x08013c20
 800cec4:	08013ff0 	.word	0x08013ff0
 800cec8:	2000fdf0 	.word	0x2000fdf0
 800cecc:	2000fded 	.word	0x2000fded
 800ced0:	08014010 	.word	0x08014010
            } else {
              recv_data = cseg->p;
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	4a70      	ldr	r2, [pc, #448]	@ (800d09c <tcp_receive+0xcf4>)
 800ceda:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	2200      	movs	r2, #0
 800cee0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	68db      	ldr	r3, [r3, #12]
 800cee6:	899b      	ldrh	r3, [r3, #12]
 800cee8:	b29b      	uxth	r3, r3
 800ceea:	4618      	mov	r0, r3
 800ceec:	f7fa fd68 	bl	80079c0 <lwip_htons>
 800cef0:	4603      	mov	r3, r0
 800cef2:	b2db      	uxtb	r3, r3
 800cef4:	f003 0301 	and.w	r3, r3, #1
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d00d      	beq.n	800cf18 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800cefc:	4b68      	ldr	r3, [pc, #416]	@ (800d0a0 <tcp_receive+0xcf8>)
 800cefe:	781b      	ldrb	r3, [r3, #0]
 800cf00:	f043 0320 	orr.w	r3, r3, #32
 800cf04:	b2da      	uxtb	r2, r3
 800cf06:	4b66      	ldr	r3, [pc, #408]	@ (800d0a0 <tcp_receive+0xcf8>)
 800cf08:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	7d1b      	ldrb	r3, [r3, #20]
 800cf0e:	2b04      	cmp	r3, #4
 800cf10:	d102      	bne.n	800cf18 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2207      	movs	r2, #7
 800cf16:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	681a      	ldr	r2, [r3, #0]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800cf20:	68b8      	ldr	r0, [r7, #8]
 800cf22:	f7fd fbd4 	bl	800a6ce <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d008      	beq.n	800cf40 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf32:	68db      	ldr	r3, [r3, #12]
 800cf34:	685a      	ldr	r2, [r3, #4]
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	f43f af43 	beq.w	800cdc6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	8b5b      	ldrh	r3, [r3, #26]
 800cf44:	f003 0301 	and.w	r3, r3, #1
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d00e      	beq.n	800cf6a <tcp_receive+0xbc2>
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	8b5b      	ldrh	r3, [r3, #26]
 800cf50:	f023 0301 	bic.w	r3, r3, #1
 800cf54:	b29a      	uxth	r2, r3
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	835a      	strh	r2, [r3, #26]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	8b5b      	ldrh	r3, [r3, #26]
 800cf5e:	f043 0302 	orr.w	r3, r3, #2
 800cf62:	b29a      	uxth	r2, r3
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800cf68:	e187      	b.n	800d27a <tcp_receive+0xed2>
        tcp_ack(pcb);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	8b5b      	ldrh	r3, [r3, #26]
 800cf6e:	f043 0301 	orr.w	r3, r3, #1
 800cf72:	b29a      	uxth	r2, r3
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800cf78:	e17f      	b.n	800d27a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d106      	bne.n	800cf90 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800cf82:	4848      	ldr	r0, [pc, #288]	@ (800d0a4 <tcp_receive+0xcfc>)
 800cf84:	f7fd fbbc 	bl	800a700 <tcp_seg_copy>
 800cf88:	4602      	mov	r2, r0
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	675a      	str	r2, [r3, #116]	@ 0x74
 800cf8e:	e16c      	b.n	800d26a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800cf90:	2300      	movs	r3, #0
 800cf92:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf98:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cf9a:	e156      	b.n	800d24a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800cf9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf9e:	68db      	ldr	r3, [r3, #12]
 800cfa0:	685a      	ldr	r2, [r3, #4]
 800cfa2:	4b41      	ldr	r3, [pc, #260]	@ (800d0a8 <tcp_receive+0xd00>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d11d      	bne.n	800cfe6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800cfaa:	4b3e      	ldr	r3, [pc, #248]	@ (800d0a4 <tcp_receive+0xcfc>)
 800cfac:	891a      	ldrh	r2, [r3, #8]
 800cfae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfb0:	891b      	ldrh	r3, [r3, #8]
 800cfb2:	429a      	cmp	r2, r3
 800cfb4:	f240 814e 	bls.w	800d254 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800cfb8:	483a      	ldr	r0, [pc, #232]	@ (800d0a4 <tcp_receive+0xcfc>)
 800cfba:	f7fd fba1 	bl	800a700 <tcp_seg_copy>
 800cfbe:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	f000 8148 	beq.w	800d258 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800cfc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d003      	beq.n	800cfd6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800cfce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfd0:	697a      	ldr	r2, [r7, #20]
 800cfd2:	601a      	str	r2, [r3, #0]
 800cfd4:	e002      	b.n	800cfdc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	697a      	ldr	r2, [r7, #20]
 800cfda:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800cfdc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cfde:	6978      	ldr	r0, [r7, #20]
 800cfe0:	f7ff f8de 	bl	800c1a0 <tcp_oos_insert_segment>
                }
                break;
 800cfe4:	e138      	b.n	800d258 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800cfe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d117      	bne.n	800d01c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800cfec:	4b2e      	ldr	r3, [pc, #184]	@ (800d0a8 <tcp_receive+0xd00>)
 800cfee:	681a      	ldr	r2, [r3, #0]
 800cff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cff2:	68db      	ldr	r3, [r3, #12]
 800cff4:	685b      	ldr	r3, [r3, #4]
 800cff6:	1ad3      	subs	r3, r2, r3
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	da57      	bge.n	800d0ac <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800cffc:	4829      	ldr	r0, [pc, #164]	@ (800d0a4 <tcp_receive+0xcfc>)
 800cffe:	f7fd fb7f 	bl	800a700 <tcp_seg_copy>
 800d002:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800d004:	69bb      	ldr	r3, [r7, #24]
 800d006:	2b00      	cmp	r3, #0
 800d008:	f000 8128 	beq.w	800d25c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	69ba      	ldr	r2, [r7, #24]
 800d010:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800d012:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d014:	69b8      	ldr	r0, [r7, #24]
 800d016:	f7ff f8c3 	bl	800c1a0 <tcp_oos_insert_segment>
                  }
                  break;
 800d01a:	e11f      	b.n	800d25c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800d01c:	4b22      	ldr	r3, [pc, #136]	@ (800d0a8 <tcp_receive+0xd00>)
 800d01e:	681a      	ldr	r2, [r3, #0]
 800d020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d022:	68db      	ldr	r3, [r3, #12]
 800d024:	685b      	ldr	r3, [r3, #4]
 800d026:	1ad3      	subs	r3, r2, r3
 800d028:	3b01      	subs	r3, #1
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	db3e      	blt.n	800d0ac <tcp_receive+0xd04>
 800d02e:	4b1e      	ldr	r3, [pc, #120]	@ (800d0a8 <tcp_receive+0xd00>)
 800d030:	681a      	ldr	r2, [r3, #0]
 800d032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d034:	68db      	ldr	r3, [r3, #12]
 800d036:	685b      	ldr	r3, [r3, #4]
 800d038:	1ad3      	subs	r3, r2, r3
 800d03a:	3301      	adds	r3, #1
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	dc35      	bgt.n	800d0ac <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d040:	4818      	ldr	r0, [pc, #96]	@ (800d0a4 <tcp_receive+0xcfc>)
 800d042:	f7fd fb5d 	bl	800a700 <tcp_seg_copy>
 800d046:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800d048:	69fb      	ldr	r3, [r7, #28]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	f000 8108 	beq.w	800d260 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800d050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d052:	68db      	ldr	r3, [r3, #12]
 800d054:	685b      	ldr	r3, [r3, #4]
 800d056:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d058:	8912      	ldrh	r2, [r2, #8]
 800d05a:	441a      	add	r2, r3
 800d05c:	4b12      	ldr	r3, [pc, #72]	@ (800d0a8 <tcp_receive+0xd00>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	1ad3      	subs	r3, r2, r3
 800d062:	2b00      	cmp	r3, #0
 800d064:	dd12      	ble.n	800d08c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800d066:	4b10      	ldr	r3, [pc, #64]	@ (800d0a8 <tcp_receive+0xd00>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	b29a      	uxth	r2, r3
 800d06c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d06e:	68db      	ldr	r3, [r3, #12]
 800d070:	685b      	ldr	r3, [r3, #4]
 800d072:	b29b      	uxth	r3, r3
 800d074:	1ad3      	subs	r3, r2, r3
 800d076:	b29a      	uxth	r2, r3
 800d078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d07a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800d07c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d07e:	685a      	ldr	r2, [r3, #4]
 800d080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d082:	891b      	ldrh	r3, [r3, #8]
 800d084:	4619      	mov	r1, r3
 800d086:	4610      	mov	r0, r2
 800d088:	f7fb ff16 	bl	8008eb8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800d08c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d08e:	69fa      	ldr	r2, [r7, #28]
 800d090:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800d092:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d094:	69f8      	ldr	r0, [r7, #28]
 800d096:	f7ff f883 	bl	800c1a0 <tcp_oos_insert_segment>
                  }
                  break;
 800d09a:	e0e1      	b.n	800d260 <tcp_receive+0xeb8>
 800d09c:	2000fdf0 	.word	0x2000fdf0
 800d0a0:	2000fded 	.word	0x2000fded
 800d0a4:	2000fdc0 	.word	0x2000fdc0
 800d0a8:	2000fde0 	.word	0x2000fde0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800d0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ae:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800d0b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	f040 80c5 	bne.w	800d244 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800d0ba:	4b7f      	ldr	r3, [pc, #508]	@ (800d2b8 <tcp_receive+0xf10>)
 800d0bc:	681a      	ldr	r2, [r3, #0]
 800d0be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0c0:	68db      	ldr	r3, [r3, #12]
 800d0c2:	685b      	ldr	r3, [r3, #4]
 800d0c4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	f340 80bc 	ble.w	800d244 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d0cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ce:	68db      	ldr	r3, [r3, #12]
 800d0d0:	899b      	ldrh	r3, [r3, #12]
 800d0d2:	b29b      	uxth	r3, r3
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f7fa fc73 	bl	80079c0 <lwip_htons>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	b2db      	uxtb	r3, r3
 800d0de:	f003 0301 	and.w	r3, r3, #1
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	f040 80be 	bne.w	800d264 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800d0e8:	4874      	ldr	r0, [pc, #464]	@ (800d2bc <tcp_receive+0xf14>)
 800d0ea:	f7fd fb09 	bl	800a700 <tcp_seg_copy>
 800d0ee:	4602      	mov	r2, r0
 800d0f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0f2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800d0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	f000 80b5 	beq.w	800d268 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800d0fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d100:	68db      	ldr	r3, [r3, #12]
 800d102:	685b      	ldr	r3, [r3, #4]
 800d104:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d106:	8912      	ldrh	r2, [r2, #8]
 800d108:	441a      	add	r2, r3
 800d10a:	4b6b      	ldr	r3, [pc, #428]	@ (800d2b8 <tcp_receive+0xf10>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	1ad3      	subs	r3, r2, r3
 800d110:	2b00      	cmp	r3, #0
 800d112:	dd12      	ble.n	800d13a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800d114:	4b68      	ldr	r3, [pc, #416]	@ (800d2b8 <tcp_receive+0xf10>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	b29a      	uxth	r2, r3
 800d11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d11c:	68db      	ldr	r3, [r3, #12]
 800d11e:	685b      	ldr	r3, [r3, #4]
 800d120:	b29b      	uxth	r3, r3
 800d122:	1ad3      	subs	r3, r2, r3
 800d124:	b29a      	uxth	r2, r3
 800d126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d128:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800d12a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d12c:	685a      	ldr	r2, [r3, #4]
 800d12e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d130:	891b      	ldrh	r3, [r3, #8]
 800d132:	4619      	mov	r1, r3
 800d134:	4610      	mov	r0, r2
 800d136:	f7fb febf 	bl	8008eb8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800d13a:	4b61      	ldr	r3, [pc, #388]	@ (800d2c0 <tcp_receive+0xf18>)
 800d13c:	881b      	ldrh	r3, [r3, #0]
 800d13e:	461a      	mov	r2, r3
 800d140:	4b5d      	ldr	r3, [pc, #372]	@ (800d2b8 <tcp_receive+0xf10>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	441a      	add	r2, r3
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d14a:	6879      	ldr	r1, [r7, #4]
 800d14c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800d14e:	440b      	add	r3, r1
 800d150:	1ad3      	subs	r3, r2, r3
 800d152:	2b00      	cmp	r3, #0
 800d154:	f340 8088 	ble.w	800d268 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800d158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	68db      	ldr	r3, [r3, #12]
 800d15e:	899b      	ldrh	r3, [r3, #12]
 800d160:	b29b      	uxth	r3, r3
 800d162:	4618      	mov	r0, r3
 800d164:	f7fa fc2c 	bl	80079c0 <lwip_htons>
 800d168:	4603      	mov	r3, r0
 800d16a:	b2db      	uxtb	r3, r3
 800d16c:	f003 0301 	and.w	r3, r3, #1
 800d170:	2b00      	cmp	r3, #0
 800d172:	d021      	beq.n	800d1b8 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800d174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	68db      	ldr	r3, [r3, #12]
 800d17a:	899b      	ldrh	r3, [r3, #12]
 800d17c:	b29b      	uxth	r3, r3
 800d17e:	b21b      	sxth	r3, r3
 800d180:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d184:	b21c      	sxth	r4, r3
 800d186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	68db      	ldr	r3, [r3, #12]
 800d18c:	899b      	ldrh	r3, [r3, #12]
 800d18e:	b29b      	uxth	r3, r3
 800d190:	4618      	mov	r0, r3
 800d192:	f7fa fc15 	bl	80079c0 <lwip_htons>
 800d196:	4603      	mov	r3, r0
 800d198:	b2db      	uxtb	r3, r3
 800d19a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800d19e:	b29b      	uxth	r3, r3
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f7fa fc0d 	bl	80079c0 <lwip_htons>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	b21b      	sxth	r3, r3
 800d1aa:	4323      	orrs	r3, r4
 800d1ac:	b21a      	sxth	r2, r3
 800d1ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	68db      	ldr	r3, [r3, #12]
 800d1b4:	b292      	uxth	r2, r2
 800d1b6:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1bc:	b29a      	uxth	r2, r3
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d1c2:	4413      	add	r3, r2
 800d1c4:	b299      	uxth	r1, r3
 800d1c6:	4b3c      	ldr	r3, [pc, #240]	@ (800d2b8 <tcp_receive+0xf10>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	b29a      	uxth	r2, r3
 800d1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	1a8a      	subs	r2, r1, r2
 800d1d2:	b292      	uxth	r2, r2
 800d1d4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800d1d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	685a      	ldr	r2, [r3, #4]
 800d1dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	891b      	ldrh	r3, [r3, #8]
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	4610      	mov	r0, r2
 800d1e6:	f7fb fe67 	bl	8008eb8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800d1ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	891c      	ldrh	r4, [r3, #8]
 800d1f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	68db      	ldr	r3, [r3, #12]
 800d1f6:	899b      	ldrh	r3, [r3, #12]
 800d1f8:	b29b      	uxth	r3, r3
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f7fa fbe0 	bl	80079c0 <lwip_htons>
 800d200:	4603      	mov	r3, r0
 800d202:	b2db      	uxtb	r3, r3
 800d204:	f003 0303 	and.w	r3, r3, #3
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d001      	beq.n	800d210 <tcp_receive+0xe68>
 800d20c:	2301      	movs	r3, #1
 800d20e:	e000      	b.n	800d212 <tcp_receive+0xe6a>
 800d210:	2300      	movs	r3, #0
 800d212:	4423      	add	r3, r4
 800d214:	b29a      	uxth	r2, r3
 800d216:	4b2a      	ldr	r3, [pc, #168]	@ (800d2c0 <tcp_receive+0xf18>)
 800d218:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d21a:	4b29      	ldr	r3, [pc, #164]	@ (800d2c0 <tcp_receive+0xf18>)
 800d21c:	881b      	ldrh	r3, [r3, #0]
 800d21e:	461a      	mov	r2, r3
 800d220:	4b25      	ldr	r3, [pc, #148]	@ (800d2b8 <tcp_receive+0xf10>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	441a      	add	r2, r3
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d22a:	6879      	ldr	r1, [r7, #4]
 800d22c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800d22e:	440b      	add	r3, r1
 800d230:	429a      	cmp	r2, r3
 800d232:	d019      	beq.n	800d268 <tcp_receive+0xec0>
 800d234:	4b23      	ldr	r3, [pc, #140]	@ (800d2c4 <tcp_receive+0xf1c>)
 800d236:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800d23a:	4923      	ldr	r1, [pc, #140]	@ (800d2c8 <tcp_receive+0xf20>)
 800d23c:	4823      	ldr	r0, [pc, #140]	@ (800d2cc <tcp_receive+0xf24>)
 800d23e:	f004 fbc9 	bl	80119d4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800d242:	e011      	b.n	800d268 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d24a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	f47f aea5 	bne.w	800cf9c <tcp_receive+0xbf4>
 800d252:	e00a      	b.n	800d26a <tcp_receive+0xec2>
                break;
 800d254:	bf00      	nop
 800d256:	e008      	b.n	800d26a <tcp_receive+0xec2>
                break;
 800d258:	bf00      	nop
 800d25a:	e006      	b.n	800d26a <tcp_receive+0xec2>
                  break;
 800d25c:	bf00      	nop
 800d25e:	e004      	b.n	800d26a <tcp_receive+0xec2>
                  break;
 800d260:	bf00      	nop
 800d262:	e002      	b.n	800d26a <tcp_receive+0xec2>
                  break;
 800d264:	bf00      	nop
 800d266:	e000      	b.n	800d26a <tcp_receive+0xec2>
                break;
 800d268:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f001 fa32 	bl	800e6d4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800d270:	e003      	b.n	800d27a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f001 fa2e 	bl	800e6d4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d278:	e01a      	b.n	800d2b0 <tcp_receive+0xf08>
 800d27a:	e019      	b.n	800d2b0 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800d27c:	4b0e      	ldr	r3, [pc, #56]	@ (800d2b8 <tcp_receive+0xf10>)
 800d27e:	681a      	ldr	r2, [r3, #0]
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d284:	1ad3      	subs	r3, r2, r3
 800d286:	2b00      	cmp	r3, #0
 800d288:	db0a      	blt.n	800d2a0 <tcp_receive+0xef8>
 800d28a:	4b0b      	ldr	r3, [pc, #44]	@ (800d2b8 <tcp_receive+0xf10>)
 800d28c:	681a      	ldr	r2, [r3, #0]
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d292:	6879      	ldr	r1, [r7, #4]
 800d294:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800d296:	440b      	add	r3, r1
 800d298:	1ad3      	subs	r3, r2, r3
 800d29a:	3301      	adds	r3, #1
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	dd07      	ble.n	800d2b0 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	8b5b      	ldrh	r3, [r3, #26]
 800d2a4:	f043 0302 	orr.w	r3, r3, #2
 800d2a8:	b29a      	uxth	r2, r3
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800d2ae:	e7ff      	b.n	800d2b0 <tcp_receive+0xf08>
 800d2b0:	bf00      	nop
 800d2b2:	3750      	adds	r7, #80	@ 0x50
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bdb0      	pop	{r4, r5, r7, pc}
 800d2b8:	2000fde0 	.word	0x2000fde0
 800d2bc:	2000fdc0 	.word	0x2000fdc0
 800d2c0:	2000fdea 	.word	0x2000fdea
 800d2c4:	08013bd4 	.word	0x08013bd4
 800d2c8:	08013f7c 	.word	0x08013f7c
 800d2cc:	08013c20 	.word	0x08013c20

0800d2d0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	b083      	sub	sp, #12
 800d2d4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800d2d6:	4b15      	ldr	r3, [pc, #84]	@ (800d32c <tcp_get_next_optbyte+0x5c>)
 800d2d8:	881b      	ldrh	r3, [r3, #0]
 800d2da:	1c5a      	adds	r2, r3, #1
 800d2dc:	b291      	uxth	r1, r2
 800d2de:	4a13      	ldr	r2, [pc, #76]	@ (800d32c <tcp_get_next_optbyte+0x5c>)
 800d2e0:	8011      	strh	r1, [r2, #0]
 800d2e2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800d2e4:	4b12      	ldr	r3, [pc, #72]	@ (800d330 <tcp_get_next_optbyte+0x60>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d004      	beq.n	800d2f6 <tcp_get_next_optbyte+0x26>
 800d2ec:	4b11      	ldr	r3, [pc, #68]	@ (800d334 <tcp_get_next_optbyte+0x64>)
 800d2ee:	881b      	ldrh	r3, [r3, #0]
 800d2f0:	88fa      	ldrh	r2, [r7, #6]
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	d208      	bcs.n	800d308 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800d2f6:	4b10      	ldr	r3, [pc, #64]	@ (800d338 <tcp_get_next_optbyte+0x68>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	3314      	adds	r3, #20
 800d2fc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800d2fe:	88fb      	ldrh	r3, [r7, #6]
 800d300:	683a      	ldr	r2, [r7, #0]
 800d302:	4413      	add	r3, r2
 800d304:	781b      	ldrb	r3, [r3, #0]
 800d306:	e00b      	b.n	800d320 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800d308:	88fb      	ldrh	r3, [r7, #6]
 800d30a:	b2da      	uxtb	r2, r3
 800d30c:	4b09      	ldr	r3, [pc, #36]	@ (800d334 <tcp_get_next_optbyte+0x64>)
 800d30e:	881b      	ldrh	r3, [r3, #0]
 800d310:	b2db      	uxtb	r3, r3
 800d312:	1ad3      	subs	r3, r2, r3
 800d314:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800d316:	4b06      	ldr	r3, [pc, #24]	@ (800d330 <tcp_get_next_optbyte+0x60>)
 800d318:	681a      	ldr	r2, [r3, #0]
 800d31a:	797b      	ldrb	r3, [r7, #5]
 800d31c:	4413      	add	r3, r2
 800d31e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d320:	4618      	mov	r0, r3
 800d322:	370c      	adds	r7, #12
 800d324:	46bd      	mov	sp, r7
 800d326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32a:	4770      	bx	lr
 800d32c:	2000fddc 	.word	0x2000fddc
 800d330:	2000fdd8 	.word	0x2000fdd8
 800d334:	2000fdd6 	.word	0x2000fdd6
 800d338:	2000fdd0 	.word	0x2000fdd0

0800d33c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b084      	sub	sp, #16
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d106      	bne.n	800d358 <tcp_parseopt+0x1c>
 800d34a:	4b33      	ldr	r3, [pc, #204]	@ (800d418 <tcp_parseopt+0xdc>)
 800d34c:	f240 727d 	movw	r2, #1917	@ 0x77d
 800d350:	4932      	ldr	r1, [pc, #200]	@ (800d41c <tcp_parseopt+0xe0>)
 800d352:	4833      	ldr	r0, [pc, #204]	@ (800d420 <tcp_parseopt+0xe4>)
 800d354:	f004 fb3e 	bl	80119d4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800d358:	4b32      	ldr	r3, [pc, #200]	@ (800d424 <tcp_parseopt+0xe8>)
 800d35a:	881b      	ldrh	r3, [r3, #0]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d057      	beq.n	800d410 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d360:	4b31      	ldr	r3, [pc, #196]	@ (800d428 <tcp_parseopt+0xec>)
 800d362:	2200      	movs	r2, #0
 800d364:	801a      	strh	r2, [r3, #0]
 800d366:	e047      	b.n	800d3f8 <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 800d368:	f7ff ffb2 	bl	800d2d0 <tcp_get_next_optbyte>
 800d36c:	4603      	mov	r3, r0
 800d36e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800d370:	7bfb      	ldrb	r3, [r7, #15]
 800d372:	2b02      	cmp	r3, #2
 800d374:	d006      	beq.n	800d384 <tcp_parseopt+0x48>
 800d376:	2b02      	cmp	r3, #2
 800d378:	dc2b      	bgt.n	800d3d2 <tcp_parseopt+0x96>
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d043      	beq.n	800d406 <tcp_parseopt+0xca>
 800d37e:	2b01      	cmp	r3, #1
 800d380:	d039      	beq.n	800d3f6 <tcp_parseopt+0xba>
 800d382:	e026      	b.n	800d3d2 <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800d384:	f7ff ffa4 	bl	800d2d0 <tcp_get_next_optbyte>
 800d388:	4603      	mov	r3, r0
 800d38a:	2b04      	cmp	r3, #4
 800d38c:	d13d      	bne.n	800d40a <tcp_parseopt+0xce>
 800d38e:	4b26      	ldr	r3, [pc, #152]	@ (800d428 <tcp_parseopt+0xec>)
 800d390:	881b      	ldrh	r3, [r3, #0]
 800d392:	3301      	adds	r3, #1
 800d394:	4a23      	ldr	r2, [pc, #140]	@ (800d424 <tcp_parseopt+0xe8>)
 800d396:	8812      	ldrh	r2, [r2, #0]
 800d398:	4293      	cmp	r3, r2
 800d39a:	da36      	bge.n	800d40a <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800d39c:	f7ff ff98 	bl	800d2d0 <tcp_get_next_optbyte>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	021b      	lsls	r3, r3, #8
 800d3a4:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800d3a6:	f7ff ff93 	bl	800d2d0 <tcp_get_next_optbyte>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	461a      	mov	r2, r3
 800d3ae:	89bb      	ldrh	r3, [r7, #12]
 800d3b0:	4313      	orrs	r3, r2
 800d3b2:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800d3b4:	89bb      	ldrh	r3, [r7, #12]
 800d3b6:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800d3ba:	4293      	cmp	r3, r2
 800d3bc:	d804      	bhi.n	800d3c8 <tcp_parseopt+0x8c>
 800d3be:	89bb      	ldrh	r3, [r7, #12]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d001      	beq.n	800d3c8 <tcp_parseopt+0x8c>
 800d3c4:	89ba      	ldrh	r2, [r7, #12]
 800d3c6:	e001      	b.n	800d3cc <tcp_parseopt+0x90>
 800d3c8:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800d3d0:	e012      	b.n	800d3f8 <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800d3d2:	f7ff ff7d 	bl	800d2d0 <tcp_get_next_optbyte>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800d3da:	7afb      	ldrb	r3, [r7, #11]
 800d3dc:	2b01      	cmp	r3, #1
 800d3de:	d916      	bls.n	800d40e <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800d3e0:	7afb      	ldrb	r3, [r7, #11]
 800d3e2:	b29a      	uxth	r2, r3
 800d3e4:	4b10      	ldr	r3, [pc, #64]	@ (800d428 <tcp_parseopt+0xec>)
 800d3e6:	881b      	ldrh	r3, [r3, #0]
 800d3e8:	4413      	add	r3, r2
 800d3ea:	b29b      	uxth	r3, r3
 800d3ec:	3b02      	subs	r3, #2
 800d3ee:	b29a      	uxth	r2, r3
 800d3f0:	4b0d      	ldr	r3, [pc, #52]	@ (800d428 <tcp_parseopt+0xec>)
 800d3f2:	801a      	strh	r2, [r3, #0]
 800d3f4:	e000      	b.n	800d3f8 <tcp_parseopt+0xbc>
          break;
 800d3f6:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d3f8:	4b0b      	ldr	r3, [pc, #44]	@ (800d428 <tcp_parseopt+0xec>)
 800d3fa:	881a      	ldrh	r2, [r3, #0]
 800d3fc:	4b09      	ldr	r3, [pc, #36]	@ (800d424 <tcp_parseopt+0xe8>)
 800d3fe:	881b      	ldrh	r3, [r3, #0]
 800d400:	429a      	cmp	r2, r3
 800d402:	d3b1      	bcc.n	800d368 <tcp_parseopt+0x2c>
 800d404:	e004      	b.n	800d410 <tcp_parseopt+0xd4>
          return;
 800d406:	bf00      	nop
 800d408:	e002      	b.n	800d410 <tcp_parseopt+0xd4>
            return;
 800d40a:	bf00      	nop
 800d40c:	e000      	b.n	800d410 <tcp_parseopt+0xd4>
            return;
 800d40e:	bf00      	nop
      }
    }
  }
}
 800d410:	3710      	adds	r7, #16
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}
 800d416:	bf00      	nop
 800d418:	08013bd4 	.word	0x08013bd4
 800d41c:	08014038 	.word	0x08014038
 800d420:	08013c20 	.word	0x08013c20
 800d424:	2000fdd4 	.word	0x2000fdd4
 800d428:	2000fddc 	.word	0x2000fddc

0800d42c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800d42c:	b480      	push	{r7}
 800d42e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800d430:	4b05      	ldr	r3, [pc, #20]	@ (800d448 <tcp_trigger_input_pcb_close+0x1c>)
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	f043 0310 	orr.w	r3, r3, #16
 800d438:	b2da      	uxtb	r2, r3
 800d43a:	4b03      	ldr	r3, [pc, #12]	@ (800d448 <tcp_trigger_input_pcb_close+0x1c>)
 800d43c:	701a      	strb	r2, [r3, #0]
}
 800d43e:	bf00      	nop
 800d440:	46bd      	mov	sp, r7
 800d442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d446:	4770      	bx	lr
 800d448:	2000fded 	.word	0x2000fded

0800d44c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b084      	sub	sp, #16
 800d450:	af00      	add	r7, sp, #0
 800d452:	60f8      	str	r0, [r7, #12]
 800d454:	60b9      	str	r1, [r7, #8]
 800d456:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d00a      	beq.n	800d474 <tcp_route+0x28>
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	7a1b      	ldrb	r3, [r3, #8]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d006      	beq.n	800d474 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	7a1b      	ldrb	r3, [r3, #8]
 800d46a:	4618      	mov	r0, r3
 800d46c:	f7fb fb18 	bl	8008aa0 <netif_get_by_index>
 800d470:	4603      	mov	r3, r0
 800d472:	e003      	b.n	800d47c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f002 feab 	bl	80101d0 <ip4_route>
 800d47a:	4603      	mov	r3, r0
  }
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3710      	adds	r7, #16
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800d484:	b590      	push	{r4, r7, lr}
 800d486:	b087      	sub	sp, #28
 800d488:	af00      	add	r7, sp, #0
 800d48a:	60f8      	str	r0, [r7, #12]
 800d48c:	60b9      	str	r1, [r7, #8]
 800d48e:	603b      	str	r3, [r7, #0]
 800d490:	4613      	mov	r3, r2
 800d492:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d105      	bne.n	800d4a6 <tcp_create_segment+0x22>
 800d49a:	4b43      	ldr	r3, [pc, #268]	@ (800d5a8 <tcp_create_segment+0x124>)
 800d49c:	22a3      	movs	r2, #163	@ 0xa3
 800d49e:	4943      	ldr	r1, [pc, #268]	@ (800d5ac <tcp_create_segment+0x128>)
 800d4a0:	4843      	ldr	r0, [pc, #268]	@ (800d5b0 <tcp_create_segment+0x12c>)
 800d4a2:	f004 fa97 	bl	80119d4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d4a6:	68bb      	ldr	r3, [r7, #8]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d105      	bne.n	800d4b8 <tcp_create_segment+0x34>
 800d4ac:	4b3e      	ldr	r3, [pc, #248]	@ (800d5a8 <tcp_create_segment+0x124>)
 800d4ae:	22a4      	movs	r2, #164	@ 0xa4
 800d4b0:	4940      	ldr	r1, [pc, #256]	@ (800d5b4 <tcp_create_segment+0x130>)
 800d4b2:	483f      	ldr	r0, [pc, #252]	@ (800d5b0 <tcp_create_segment+0x12c>)
 800d4b4:	f004 fa8e 	bl	80119d4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d4b8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d4bc:	009b      	lsls	r3, r3, #2
 800d4be:	b2db      	uxtb	r3, r3
 800d4c0:	f003 0304 	and.w	r3, r3, #4
 800d4c4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d4c6:	2003      	movs	r0, #3
 800d4c8:	f7fa ff5e 	bl	8008388 <memp_malloc>
 800d4cc:	6138      	str	r0, [r7, #16]
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d104      	bne.n	800d4de <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800d4d4:	68b8      	ldr	r0, [r7, #8]
 800d4d6:	f7fb fe75 	bl	80091c4 <pbuf_free>
    return NULL;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	e060      	b.n	800d5a0 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800d4e4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800d4e6:	693b      	ldr	r3, [r7, #16]
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800d4ec:	693b      	ldr	r3, [r7, #16]
 800d4ee:	68ba      	ldr	r2, [r7, #8]
 800d4f0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	891a      	ldrh	r2, [r3, #8]
 800d4f6:	7dfb      	ldrb	r3, [r7, #23]
 800d4f8:	b29b      	uxth	r3, r3
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d205      	bcs.n	800d50a <tcp_create_segment+0x86>
 800d4fe:	4b2a      	ldr	r3, [pc, #168]	@ (800d5a8 <tcp_create_segment+0x124>)
 800d500:	22b0      	movs	r2, #176	@ 0xb0
 800d502:	492d      	ldr	r1, [pc, #180]	@ (800d5b8 <tcp_create_segment+0x134>)
 800d504:	482a      	ldr	r0, [pc, #168]	@ (800d5b0 <tcp_create_segment+0x12c>)
 800d506:	f004 fa65 	bl	80119d4 <iprintf>
  seg->len = p->tot_len - optlen;
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	891a      	ldrh	r2, [r3, #8]
 800d50e:	7dfb      	ldrb	r3, [r7, #23]
 800d510:	b29b      	uxth	r3, r3
 800d512:	1ad3      	subs	r3, r2, r3
 800d514:	b29a      	uxth	r2, r3
 800d516:	693b      	ldr	r3, [r7, #16]
 800d518:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d51a:	2114      	movs	r1, #20
 800d51c:	68b8      	ldr	r0, [r7, #8]
 800d51e:	f7fb fdbb 	bl	8009098 <pbuf_add_header>
 800d522:	4603      	mov	r3, r0
 800d524:	2b00      	cmp	r3, #0
 800d526:	d004      	beq.n	800d532 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800d528:	6938      	ldr	r0, [r7, #16]
 800d52a:	f7fd f8d0 	bl	800a6ce <tcp_seg_free>
    return NULL;
 800d52e:	2300      	movs	r3, #0
 800d530:	e036      	b.n	800d5a0 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	685a      	ldr	r2, [r3, #4]
 800d538:	693b      	ldr	r3, [r7, #16]
 800d53a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	8ada      	ldrh	r2, [r3, #22]
 800d540:	693b      	ldr	r3, [r7, #16]
 800d542:	68dc      	ldr	r4, [r3, #12]
 800d544:	4610      	mov	r0, r2
 800d546:	f7fa fa3b 	bl	80079c0 <lwip_htons>
 800d54a:	4603      	mov	r3, r0
 800d54c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	8b1a      	ldrh	r2, [r3, #24]
 800d552:	693b      	ldr	r3, [r7, #16]
 800d554:	68dc      	ldr	r4, [r3, #12]
 800d556:	4610      	mov	r0, r2
 800d558:	f7fa fa32 	bl	80079c0 <lwip_htons>
 800d55c:	4603      	mov	r3, r0
 800d55e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	68dc      	ldr	r4, [r3, #12]
 800d564:	6838      	ldr	r0, [r7, #0]
 800d566:	f7fa fa40 	bl	80079ea <lwip_htonl>
 800d56a:	4603      	mov	r3, r0
 800d56c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d56e:	7dfb      	ldrb	r3, [r7, #23]
 800d570:	089b      	lsrs	r3, r3, #2
 800d572:	b2db      	uxtb	r3, r3
 800d574:	3305      	adds	r3, #5
 800d576:	b29b      	uxth	r3, r3
 800d578:	031b      	lsls	r3, r3, #12
 800d57a:	b29a      	uxth	r2, r3
 800d57c:	79fb      	ldrb	r3, [r7, #7]
 800d57e:	b29b      	uxth	r3, r3
 800d580:	4313      	orrs	r3, r2
 800d582:	b29a      	uxth	r2, r3
 800d584:	693b      	ldr	r3, [r7, #16]
 800d586:	68dc      	ldr	r4, [r3, #12]
 800d588:	4610      	mov	r0, r2
 800d58a:	f7fa fa19 	bl	80079c0 <lwip_htons>
 800d58e:	4603      	mov	r3, r0
 800d590:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800d592:	693b      	ldr	r3, [r7, #16]
 800d594:	68db      	ldr	r3, [r3, #12]
 800d596:	2200      	movs	r2, #0
 800d598:	749a      	strb	r2, [r3, #18]
 800d59a:	2200      	movs	r2, #0
 800d59c:	74da      	strb	r2, [r3, #19]
  return seg;
 800d59e:	693b      	ldr	r3, [r7, #16]
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	371c      	adds	r7, #28
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd90      	pop	{r4, r7, pc}
 800d5a8:	08014054 	.word	0x08014054
 800d5ac:	08014088 	.word	0x08014088
 800d5b0:	080140a8 	.word	0x080140a8
 800d5b4:	080140d0 	.word	0x080140d0
 800d5b8:	080140f4 	.word	0x080140f4

0800d5bc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800d5bc:	b590      	push	{r4, r7, lr}
 800d5be:	b08b      	sub	sp, #44	@ 0x2c
 800d5c0:	af02      	add	r7, sp, #8
 800d5c2:	6078      	str	r0, [r7, #4]
 800d5c4:	460b      	mov	r3, r1
 800d5c6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	61fb      	str	r3, [r7, #28]
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d106      	bne.n	800d5e8 <tcp_split_unsent_seg+0x2c>
 800d5da:	4b95      	ldr	r3, [pc, #596]	@ (800d830 <tcp_split_unsent_seg+0x274>)
 800d5dc:	f240 324b 	movw	r2, #843	@ 0x34b
 800d5e0:	4994      	ldr	r1, [pc, #592]	@ (800d834 <tcp_split_unsent_seg+0x278>)
 800d5e2:	4895      	ldr	r0, [pc, #596]	@ (800d838 <tcp_split_unsent_seg+0x27c>)
 800d5e4:	f004 f9f6 	bl	80119d4 <iprintf>

  useg = pcb->unsent;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d5ec:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d102      	bne.n	800d5fa <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800d5f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d5f8:	e116      	b.n	800d828 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800d5fa:	887b      	ldrh	r3, [r7, #2]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d109      	bne.n	800d614 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800d600:	4b8b      	ldr	r3, [pc, #556]	@ (800d830 <tcp_split_unsent_seg+0x274>)
 800d602:	f240 3253 	movw	r2, #851	@ 0x353
 800d606:	498d      	ldr	r1, [pc, #564]	@ (800d83c <tcp_split_unsent_seg+0x280>)
 800d608:	488b      	ldr	r0, [pc, #556]	@ (800d838 <tcp_split_unsent_seg+0x27c>)
 800d60a:	f004 f9e3 	bl	80119d4 <iprintf>
    return ERR_VAL;
 800d60e:	f06f 0305 	mvn.w	r3, #5
 800d612:	e109      	b.n	800d828 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	891b      	ldrh	r3, [r3, #8]
 800d618:	887a      	ldrh	r2, [r7, #2]
 800d61a:	429a      	cmp	r2, r3
 800d61c:	d301      	bcc.n	800d622 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800d61e:	2300      	movs	r3, #0
 800d620:	e102      	b.n	800d828 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d626:	887a      	ldrh	r2, [r7, #2]
 800d628:	429a      	cmp	r2, r3
 800d62a:	d906      	bls.n	800d63a <tcp_split_unsent_seg+0x7e>
 800d62c:	4b80      	ldr	r3, [pc, #512]	@ (800d830 <tcp_split_unsent_seg+0x274>)
 800d62e:	f240 325b 	movw	r2, #859	@ 0x35b
 800d632:	4983      	ldr	r1, [pc, #524]	@ (800d840 <tcp_split_unsent_seg+0x284>)
 800d634:	4880      	ldr	r0, [pc, #512]	@ (800d838 <tcp_split_unsent_seg+0x27c>)
 800d636:	f004 f9cd 	bl	80119d4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	891b      	ldrh	r3, [r3, #8]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d106      	bne.n	800d650 <tcp_split_unsent_seg+0x94>
 800d642:	4b7b      	ldr	r3, [pc, #492]	@ (800d830 <tcp_split_unsent_seg+0x274>)
 800d644:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800d648:	497e      	ldr	r1, [pc, #504]	@ (800d844 <tcp_split_unsent_seg+0x288>)
 800d64a:	487b      	ldr	r0, [pc, #492]	@ (800d838 <tcp_split_unsent_seg+0x27c>)
 800d64c:	f004 f9c2 	bl	80119d4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800d650:	697b      	ldr	r3, [r7, #20]
 800d652:	7a9b      	ldrb	r3, [r3, #10]
 800d654:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d656:	7bfb      	ldrb	r3, [r7, #15]
 800d658:	009b      	lsls	r3, r3, #2
 800d65a:	b2db      	uxtb	r3, r3
 800d65c:	f003 0304 	and.w	r3, r3, #4
 800d660:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	891a      	ldrh	r2, [r3, #8]
 800d666:	887b      	ldrh	r3, [r7, #2]
 800d668:	1ad3      	subs	r3, r2, r3
 800d66a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d66c:	7bbb      	ldrb	r3, [r7, #14]
 800d66e:	b29a      	uxth	r2, r3
 800d670:	89bb      	ldrh	r3, [r7, #12]
 800d672:	4413      	add	r3, r2
 800d674:	b29b      	uxth	r3, r3
 800d676:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d67a:	4619      	mov	r1, r3
 800d67c:	2036      	movs	r0, #54	@ 0x36
 800d67e:	f7fb fab9 	bl	8008bf4 <pbuf_alloc>
 800d682:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d684:	693b      	ldr	r3, [r7, #16]
 800d686:	2b00      	cmp	r3, #0
 800d688:	f000 80b7 	beq.w	800d7fa <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	685b      	ldr	r3, [r3, #4]
 800d690:	891a      	ldrh	r2, [r3, #8]
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	891b      	ldrh	r3, [r3, #8]
 800d696:	1ad3      	subs	r3, r2, r3
 800d698:	b29a      	uxth	r2, r3
 800d69a:	887b      	ldrh	r3, [r7, #2]
 800d69c:	4413      	add	r3, r2
 800d69e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d6a0:	697b      	ldr	r3, [r7, #20]
 800d6a2:	6858      	ldr	r0, [r3, #4]
 800d6a4:	693b      	ldr	r3, [r7, #16]
 800d6a6:	685a      	ldr	r2, [r3, #4]
 800d6a8:	7bbb      	ldrb	r3, [r7, #14]
 800d6aa:	18d1      	adds	r1, r2, r3
 800d6ac:	897b      	ldrh	r3, [r7, #10]
 800d6ae:	89ba      	ldrh	r2, [r7, #12]
 800d6b0:	f7fb ff7e 	bl	80095b0 <pbuf_copy_partial>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	461a      	mov	r2, r3
 800d6b8:	89bb      	ldrh	r3, [r7, #12]
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	f040 809f 	bne.w	800d7fe <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	68db      	ldr	r3, [r3, #12]
 800d6c4:	899b      	ldrh	r3, [r3, #12]
 800d6c6:	b29b      	uxth	r3, r3
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f7fa f979 	bl	80079c0 <lwip_htons>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	b2db      	uxtb	r3, r3
 800d6d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d6d6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800d6d8:	2300      	movs	r3, #0
 800d6da:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800d6dc:	7efb      	ldrb	r3, [r7, #27]
 800d6de:	f003 0308 	and.w	r3, r3, #8
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d007      	beq.n	800d6f6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800d6e6:	7efb      	ldrb	r3, [r7, #27]
 800d6e8:	f023 0308 	bic.w	r3, r3, #8
 800d6ec:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800d6ee:	7ebb      	ldrb	r3, [r7, #26]
 800d6f0:	f043 0308 	orr.w	r3, r3, #8
 800d6f4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800d6f6:	7efb      	ldrb	r3, [r7, #27]
 800d6f8:	f003 0301 	and.w	r3, r3, #1
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d007      	beq.n	800d710 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800d700:	7efb      	ldrb	r3, [r7, #27]
 800d702:	f023 0301 	bic.w	r3, r3, #1
 800d706:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800d708:	7ebb      	ldrb	r3, [r7, #26]
 800d70a:	f043 0301 	orr.w	r3, r3, #1
 800d70e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	68db      	ldr	r3, [r3, #12]
 800d714:	685b      	ldr	r3, [r3, #4]
 800d716:	4618      	mov	r0, r3
 800d718:	f7fa f967 	bl	80079ea <lwip_htonl>
 800d71c:	4602      	mov	r2, r0
 800d71e:	887b      	ldrh	r3, [r7, #2]
 800d720:	18d1      	adds	r1, r2, r3
 800d722:	7eba      	ldrb	r2, [r7, #26]
 800d724:	7bfb      	ldrb	r3, [r7, #15]
 800d726:	9300      	str	r3, [sp, #0]
 800d728:	460b      	mov	r3, r1
 800d72a:	6939      	ldr	r1, [r7, #16]
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f7ff fea9 	bl	800d484 <tcp_create_segment>
 800d732:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800d734:	69fb      	ldr	r3, [r7, #28]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d063      	beq.n	800d802 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	685b      	ldr	r3, [r3, #4]
 800d73e:	4618      	mov	r0, r3
 800d740:	f7fb fdce 	bl	80092e0 <pbuf_clen>
 800d744:	4603      	mov	r3, r0
 800d746:	461a      	mov	r2, r3
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d74e:	1a9b      	subs	r3, r3, r2
 800d750:	b29a      	uxth	r2, r3
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	6858      	ldr	r0, [r3, #4]
 800d75c:	697b      	ldr	r3, [r7, #20]
 800d75e:	685b      	ldr	r3, [r3, #4]
 800d760:	891a      	ldrh	r2, [r3, #8]
 800d762:	89bb      	ldrh	r3, [r7, #12]
 800d764:	1ad3      	subs	r3, r2, r3
 800d766:	b29b      	uxth	r3, r3
 800d768:	4619      	mov	r1, r3
 800d76a:	f7fb fba5 	bl	8008eb8 <pbuf_realloc>
  useg->len -= remainder;
 800d76e:	697b      	ldr	r3, [r7, #20]
 800d770:	891a      	ldrh	r2, [r3, #8]
 800d772:	89bb      	ldrh	r3, [r7, #12]
 800d774:	1ad3      	subs	r3, r2, r3
 800d776:	b29a      	uxth	r2, r3
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d77c:	697b      	ldr	r3, [r7, #20]
 800d77e:	68db      	ldr	r3, [r3, #12]
 800d780:	899b      	ldrh	r3, [r3, #12]
 800d782:	b29c      	uxth	r4, r3
 800d784:	7efb      	ldrb	r3, [r7, #27]
 800d786:	b29b      	uxth	r3, r3
 800d788:	4618      	mov	r0, r3
 800d78a:	f7fa f919 	bl	80079c0 <lwip_htons>
 800d78e:	4603      	mov	r3, r0
 800d790:	461a      	mov	r2, r3
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	68db      	ldr	r3, [r3, #12]
 800d796:	4322      	orrs	r2, r4
 800d798:	b292      	uxth	r2, r2
 800d79a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	685b      	ldr	r3, [r3, #4]
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f7fb fd9d 	bl	80092e0 <pbuf_clen>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	461a      	mov	r2, r3
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d7b0:	4413      	add	r3, r2
 800d7b2:	b29a      	uxth	r2, r3
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d7ba:	69fb      	ldr	r3, [r7, #28]
 800d7bc:	685b      	ldr	r3, [r3, #4]
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f7fb fd8e 	bl	80092e0 <pbuf_clen>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	461a      	mov	r2, r3
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d7ce:	4413      	add	r3, r2
 800d7d0:	b29a      	uxth	r2, r3
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	681a      	ldr	r2, [r3, #0]
 800d7dc:	69fb      	ldr	r3, [r7, #28]
 800d7de:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	69fa      	ldr	r2, [r7, #28]
 800d7e4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800d7e6:	69fb      	ldr	r3, [r7, #28]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d103      	bne.n	800d7f6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	e016      	b.n	800d828 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800d7fa:	bf00      	nop
 800d7fc:	e002      	b.n	800d804 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d7fe:	bf00      	nop
 800d800:	e000      	b.n	800d804 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d802:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800d804:	69fb      	ldr	r3, [r7, #28]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d006      	beq.n	800d818 <tcp_split_unsent_seg+0x25c>
 800d80a:	4b09      	ldr	r3, [pc, #36]	@ (800d830 <tcp_split_unsent_seg+0x274>)
 800d80c:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800d810:	490d      	ldr	r1, [pc, #52]	@ (800d848 <tcp_split_unsent_seg+0x28c>)
 800d812:	4809      	ldr	r0, [pc, #36]	@ (800d838 <tcp_split_unsent_seg+0x27c>)
 800d814:	f004 f8de 	bl	80119d4 <iprintf>
  if (p != NULL) {
 800d818:	693b      	ldr	r3, [r7, #16]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d002      	beq.n	800d824 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800d81e:	6938      	ldr	r0, [r7, #16]
 800d820:	f7fb fcd0 	bl	80091c4 <pbuf_free>
  }

  return ERR_MEM;
 800d824:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3724      	adds	r7, #36	@ 0x24
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd90      	pop	{r4, r7, pc}
 800d830:	08014054 	.word	0x08014054
 800d834:	080143e8 	.word	0x080143e8
 800d838:	080140a8 	.word	0x080140a8
 800d83c:	0801440c 	.word	0x0801440c
 800d840:	08014430 	.word	0x08014430
 800d844:	08014440 	.word	0x08014440
 800d848:	08014450 	.word	0x08014450

0800d84c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800d84c:	b590      	push	{r4, r7, lr}
 800d84e:	b085      	sub	sp, #20
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d106      	bne.n	800d868 <tcp_send_fin+0x1c>
 800d85a:	4b21      	ldr	r3, [pc, #132]	@ (800d8e0 <tcp_send_fin+0x94>)
 800d85c:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800d860:	4920      	ldr	r1, [pc, #128]	@ (800d8e4 <tcp_send_fin+0x98>)
 800d862:	4821      	ldr	r0, [pc, #132]	@ (800d8e8 <tcp_send_fin+0x9c>)
 800d864:	f004 f8b6 	bl	80119d4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d02e      	beq.n	800d8ce <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d874:	60fb      	str	r3, [r7, #12]
 800d876:	e002      	b.n	800d87e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d1f8      	bne.n	800d878 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	68db      	ldr	r3, [r3, #12]
 800d88a:	899b      	ldrh	r3, [r3, #12]
 800d88c:	b29b      	uxth	r3, r3
 800d88e:	4618      	mov	r0, r3
 800d890:	f7fa f896 	bl	80079c0 <lwip_htons>
 800d894:	4603      	mov	r3, r0
 800d896:	b2db      	uxtb	r3, r3
 800d898:	f003 0307 	and.w	r3, r3, #7
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d116      	bne.n	800d8ce <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	68db      	ldr	r3, [r3, #12]
 800d8a4:	899b      	ldrh	r3, [r3, #12]
 800d8a6:	b29c      	uxth	r4, r3
 800d8a8:	2001      	movs	r0, #1
 800d8aa:	f7fa f889 	bl	80079c0 <lwip_htons>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	461a      	mov	r2, r3
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	68db      	ldr	r3, [r3, #12]
 800d8b6:	4322      	orrs	r2, r4
 800d8b8:	b292      	uxth	r2, r2
 800d8ba:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	8b5b      	ldrh	r3, [r3, #26]
 800d8c0:	f043 0320 	orr.w	r3, r3, #32
 800d8c4:	b29a      	uxth	r2, r3
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	e004      	b.n	800d8d8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d8ce:	2101      	movs	r1, #1
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	f000 f80b 	bl	800d8ec <tcp_enqueue_flags>
 800d8d6:	4603      	mov	r3, r0
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3714      	adds	r7, #20
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd90      	pop	{r4, r7, pc}
 800d8e0:	08014054 	.word	0x08014054
 800d8e4:	0801445c 	.word	0x0801445c
 800d8e8:	080140a8 	.word	0x080140a8

0800d8ec <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b08a      	sub	sp, #40	@ 0x28
 800d8f0:	af02      	add	r7, sp, #8
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	460b      	mov	r3, r1
 800d8f6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d900:	78fb      	ldrb	r3, [r7, #3]
 800d902:	f003 0303 	and.w	r3, r3, #3
 800d906:	2b00      	cmp	r3, #0
 800d908:	d106      	bne.n	800d918 <tcp_enqueue_flags+0x2c>
 800d90a:	4b67      	ldr	r3, [pc, #412]	@ (800daa8 <tcp_enqueue_flags+0x1bc>)
 800d90c:	f240 4211 	movw	r2, #1041	@ 0x411
 800d910:	4966      	ldr	r1, [pc, #408]	@ (800daac <tcp_enqueue_flags+0x1c0>)
 800d912:	4867      	ldr	r0, [pc, #412]	@ (800dab0 <tcp_enqueue_flags+0x1c4>)
 800d914:	f004 f85e 	bl	80119d4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d106      	bne.n	800d92c <tcp_enqueue_flags+0x40>
 800d91e:	4b62      	ldr	r3, [pc, #392]	@ (800daa8 <tcp_enqueue_flags+0x1bc>)
 800d920:	f240 4213 	movw	r2, #1043	@ 0x413
 800d924:	4963      	ldr	r1, [pc, #396]	@ (800dab4 <tcp_enqueue_flags+0x1c8>)
 800d926:	4862      	ldr	r0, [pc, #392]	@ (800dab0 <tcp_enqueue_flags+0x1c4>)
 800d928:	f004 f854 	bl	80119d4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800d92c:	78fb      	ldrb	r3, [r7, #3]
 800d92e:	f003 0302 	and.w	r3, r3, #2
 800d932:	2b00      	cmp	r3, #0
 800d934:	d001      	beq.n	800d93a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800d936:	2301      	movs	r3, #1
 800d938:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d93a:	7ffb      	ldrb	r3, [r7, #31]
 800d93c:	009b      	lsls	r3, r3, #2
 800d93e:	b2db      	uxtb	r3, r3
 800d940:	f003 0304 	and.w	r3, r3, #4
 800d944:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d946:	7dfb      	ldrb	r3, [r7, #23]
 800d948:	b29b      	uxth	r3, r3
 800d94a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d94e:	4619      	mov	r1, r3
 800d950:	2036      	movs	r0, #54	@ 0x36
 800d952:	f7fb f94f 	bl	8008bf4 <pbuf_alloc>
 800d956:	6138      	str	r0, [r7, #16]
 800d958:	693b      	ldr	r3, [r7, #16]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d109      	bne.n	800d972 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	8b5b      	ldrh	r3, [r3, #26]
 800d962:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d966:	b29a      	uxth	r2, r3
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d96c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d970:	e095      	b.n	800da9e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	895a      	ldrh	r2, [r3, #10]
 800d976:	7dfb      	ldrb	r3, [r7, #23]
 800d978:	b29b      	uxth	r3, r3
 800d97a:	429a      	cmp	r2, r3
 800d97c:	d206      	bcs.n	800d98c <tcp_enqueue_flags+0xa0>
 800d97e:	4b4a      	ldr	r3, [pc, #296]	@ (800daa8 <tcp_enqueue_flags+0x1bc>)
 800d980:	f240 4239 	movw	r2, #1081	@ 0x439
 800d984:	494c      	ldr	r1, [pc, #304]	@ (800dab8 <tcp_enqueue_flags+0x1cc>)
 800d986:	484a      	ldr	r0, [pc, #296]	@ (800dab0 <tcp_enqueue_flags+0x1c4>)
 800d988:	f004 f824 	bl	80119d4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800d990:	78fa      	ldrb	r2, [r7, #3]
 800d992:	7ffb      	ldrb	r3, [r7, #31]
 800d994:	9300      	str	r3, [sp, #0]
 800d996:	460b      	mov	r3, r1
 800d998:	6939      	ldr	r1, [r7, #16]
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f7ff fd72 	bl	800d484 <tcp_create_segment>
 800d9a0:	60f8      	str	r0, [r7, #12]
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d109      	bne.n	800d9bc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	8b5b      	ldrh	r3, [r3, #26]
 800d9ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9b0:	b29a      	uxth	r2, r3
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d9b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d9ba:	e070      	b.n	800da9e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	68db      	ldr	r3, [r3, #12]
 800d9c0:	f003 0303 	and.w	r3, r3, #3
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d006      	beq.n	800d9d6 <tcp_enqueue_flags+0xea>
 800d9c8:	4b37      	ldr	r3, [pc, #220]	@ (800daa8 <tcp_enqueue_flags+0x1bc>)
 800d9ca:	f240 4242 	movw	r2, #1090	@ 0x442
 800d9ce:	493b      	ldr	r1, [pc, #236]	@ (800dabc <tcp_enqueue_flags+0x1d0>)
 800d9d0:	4837      	ldr	r0, [pc, #220]	@ (800dab0 <tcp_enqueue_flags+0x1c4>)
 800d9d2:	f003 ffff 	bl	80119d4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	891b      	ldrh	r3, [r3, #8]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d006      	beq.n	800d9ec <tcp_enqueue_flags+0x100>
 800d9de:	4b32      	ldr	r3, [pc, #200]	@ (800daa8 <tcp_enqueue_flags+0x1bc>)
 800d9e0:	f240 4243 	movw	r2, #1091	@ 0x443
 800d9e4:	4936      	ldr	r1, [pc, #216]	@ (800dac0 <tcp_enqueue_flags+0x1d4>)
 800d9e6:	4832      	ldr	r0, [pc, #200]	@ (800dab0 <tcp_enqueue_flags+0x1c4>)
 800d9e8:	f003 fff4 	bl	80119d4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d103      	bne.n	800d9fc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	68fa      	ldr	r2, [r7, #12]
 800d9f8:	66da      	str	r2, [r3, #108]	@ 0x6c
 800d9fa:	e00d      	b.n	800da18 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da00:	61bb      	str	r3, [r7, #24]
 800da02:	e002      	b.n	800da0a <tcp_enqueue_flags+0x11e>
 800da04:	69bb      	ldr	r3, [r7, #24]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	61bb      	str	r3, [r7, #24]
 800da0a:	69bb      	ldr	r3, [r7, #24]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d1f8      	bne.n	800da04 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800da12:	69bb      	ldr	r3, [r7, #24]
 800da14:	68fa      	ldr	r2, [r7, #12]
 800da16:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2200      	movs	r2, #0
 800da1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800da20:	78fb      	ldrb	r3, [r7, #3]
 800da22:	f003 0302 	and.w	r3, r3, #2
 800da26:	2b00      	cmp	r3, #0
 800da28:	d104      	bne.n	800da34 <tcp_enqueue_flags+0x148>
 800da2a:	78fb      	ldrb	r3, [r7, #3]
 800da2c:	f003 0301 	and.w	r3, r3, #1
 800da30:	2b00      	cmp	r3, #0
 800da32:	d004      	beq.n	800da3e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800da38:	1c5a      	adds	r2, r3, #1
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800da3e:	78fb      	ldrb	r3, [r7, #3]
 800da40:	f003 0301 	and.w	r3, r3, #1
 800da44:	2b00      	cmp	r3, #0
 800da46:	d006      	beq.n	800da56 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	8b5b      	ldrh	r3, [r3, #26]
 800da4c:	f043 0320 	orr.w	r3, r3, #32
 800da50:	b29a      	uxth	r2, r3
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	685b      	ldr	r3, [r3, #4]
 800da5a:	4618      	mov	r0, r3
 800da5c:	f7fb fc40 	bl	80092e0 <pbuf_clen>
 800da60:	4603      	mov	r3, r0
 800da62:	461a      	mov	r2, r3
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800da6a:	4413      	add	r3, r2
 800da6c:	b29a      	uxth	r2, r3
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d00e      	beq.n	800da9c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da82:	2b00      	cmp	r3, #0
 800da84:	d10a      	bne.n	800da9c <tcp_enqueue_flags+0x1b0>
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d106      	bne.n	800da9c <tcp_enqueue_flags+0x1b0>
 800da8e:	4b06      	ldr	r3, [pc, #24]	@ (800daa8 <tcp_enqueue_flags+0x1bc>)
 800da90:	f240 4265 	movw	r2, #1125	@ 0x465
 800da94:	490b      	ldr	r1, [pc, #44]	@ (800dac4 <tcp_enqueue_flags+0x1d8>)
 800da96:	4806      	ldr	r0, [pc, #24]	@ (800dab0 <tcp_enqueue_flags+0x1c4>)
 800da98:	f003 ff9c 	bl	80119d4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800da9c:	2300      	movs	r3, #0
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3720      	adds	r7, #32
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}
 800daa6:	bf00      	nop
 800daa8:	08014054 	.word	0x08014054
 800daac:	08014478 	.word	0x08014478
 800dab0:	080140a8 	.word	0x080140a8
 800dab4:	080144d0 	.word	0x080144d0
 800dab8:	080144f0 	.word	0x080144f0
 800dabc:	0801452c 	.word	0x0801452c
 800dac0:	08014544 	.word	0x08014544
 800dac4:	08014570 	.word	0x08014570

0800dac8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800dac8:	b5b0      	push	{r4, r5, r7, lr}
 800daca:	b08a      	sub	sp, #40	@ 0x28
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d106      	bne.n	800dae4 <tcp_output+0x1c>
 800dad6:	4b8a      	ldr	r3, [pc, #552]	@ (800dd00 <tcp_output+0x238>)
 800dad8:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800dadc:	4989      	ldr	r1, [pc, #548]	@ (800dd04 <tcp_output+0x23c>)
 800dade:	488a      	ldr	r0, [pc, #552]	@ (800dd08 <tcp_output+0x240>)
 800dae0:	f003 ff78 	bl	80119d4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	7d1b      	ldrb	r3, [r3, #20]
 800dae8:	2b01      	cmp	r3, #1
 800daea:	d106      	bne.n	800dafa <tcp_output+0x32>
 800daec:	4b84      	ldr	r3, [pc, #528]	@ (800dd00 <tcp_output+0x238>)
 800daee:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800daf2:	4986      	ldr	r1, [pc, #536]	@ (800dd0c <tcp_output+0x244>)
 800daf4:	4884      	ldr	r0, [pc, #528]	@ (800dd08 <tcp_output+0x240>)
 800daf6:	f003 ff6d 	bl	80119d4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800dafa:	4b85      	ldr	r3, [pc, #532]	@ (800dd10 <tcp_output+0x248>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	687a      	ldr	r2, [r7, #4]
 800db00:	429a      	cmp	r2, r3
 800db02:	d101      	bne.n	800db08 <tcp_output+0x40>
    return ERR_OK;
 800db04:	2300      	movs	r3, #0
 800db06:	e1ce      	b.n	800dea6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800db14:	4293      	cmp	r3, r2
 800db16:	bf28      	it	cs
 800db18:	4613      	movcs	r3, r2
 800db1a:	b29b      	uxth	r3, r3
 800db1c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db22:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800db24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db26:	2b00      	cmp	r3, #0
 800db28:	d10b      	bne.n	800db42 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	8b5b      	ldrh	r3, [r3, #26]
 800db2e:	f003 0302 	and.w	r3, r3, #2
 800db32:	2b00      	cmp	r3, #0
 800db34:	f000 81aa 	beq.w	800de8c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f000 fdcb 	bl	800e6d4 <tcp_send_empty_ack>
 800db3e:	4603      	mov	r3, r0
 800db40:	e1b1      	b.n	800dea6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800db42:	6879      	ldr	r1, [r7, #4]
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	3304      	adds	r3, #4
 800db48:	461a      	mov	r2, r3
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	f7ff fc7e 	bl	800d44c <tcp_route>
 800db50:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800db52:	697b      	ldr	r3, [r7, #20]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d102      	bne.n	800db5e <tcp_output+0x96>
    return ERR_RTE;
 800db58:	f06f 0303 	mvn.w	r3, #3
 800db5c:	e1a3      	b.n	800dea6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d003      	beq.n	800db6c <tcp_output+0xa4>
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d111      	bne.n	800db90 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800db6c:	697b      	ldr	r3, [r7, #20]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d002      	beq.n	800db78 <tcp_output+0xb0>
 800db72:	697b      	ldr	r3, [r7, #20]
 800db74:	3304      	adds	r3, #4
 800db76:	e000      	b.n	800db7a <tcp_output+0xb2>
 800db78:	2300      	movs	r3, #0
 800db7a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d102      	bne.n	800db88 <tcp_output+0xc0>
      return ERR_RTE;
 800db82:	f06f 0303 	mvn.w	r3, #3
 800db86:	e18e      	b.n	800dea6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	681a      	ldr	r2, [r3, #0]
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800db90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db92:	68db      	ldr	r3, [r3, #12]
 800db94:	685b      	ldr	r3, [r3, #4]
 800db96:	4618      	mov	r0, r3
 800db98:	f7f9 ff27 	bl	80079ea <lwip_htonl>
 800db9c:	4602      	mov	r2, r0
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dba2:	1ad3      	subs	r3, r2, r3
 800dba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dba6:	8912      	ldrh	r2, [r2, #8]
 800dba8:	4413      	add	r3, r2
 800dbaa:	69ba      	ldr	r2, [r7, #24]
 800dbac:	429a      	cmp	r2, r3
 800dbae:	d227      	bcs.n	800dc00 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dbb6:	461a      	mov	r2, r3
 800dbb8:	69bb      	ldr	r3, [r7, #24]
 800dbba:	4293      	cmp	r3, r2
 800dbbc:	d114      	bne.n	800dbe8 <tcp_output+0x120>
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d110      	bne.n	800dbe8 <tcp_output+0x120>
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d10b      	bne.n	800dbe8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2201      	movs	r2, #1
 800dbdc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	8b5b      	ldrh	r3, [r3, #26]
 800dbec:	f003 0302 	and.w	r3, r3, #2
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	f000 814d 	beq.w	800de90 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f000 fd6c 	bl	800e6d4 <tcp_send_empty_ack>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	e152      	b.n	800dea6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2200      	movs	r2, #0
 800dc04:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dc0c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800dc0e:	6a3b      	ldr	r3, [r7, #32]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	f000 811c 	beq.w	800de4e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800dc16:	e002      	b.n	800dc1e <tcp_output+0x156>
 800dc18:	6a3b      	ldr	r3, [r7, #32]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	623b      	str	r3, [r7, #32]
 800dc1e:	6a3b      	ldr	r3, [r7, #32]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d1f8      	bne.n	800dc18 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800dc26:	e112      	b.n	800de4e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800dc28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc2a:	68db      	ldr	r3, [r3, #12]
 800dc2c:	899b      	ldrh	r3, [r3, #12]
 800dc2e:	b29b      	uxth	r3, r3
 800dc30:	4618      	mov	r0, r3
 800dc32:	f7f9 fec5 	bl	80079c0 <lwip_htons>
 800dc36:	4603      	mov	r3, r0
 800dc38:	b2db      	uxtb	r3, r3
 800dc3a:	f003 0304 	and.w	r3, r3, #4
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d006      	beq.n	800dc50 <tcp_output+0x188>
 800dc42:	4b2f      	ldr	r3, [pc, #188]	@ (800dd00 <tcp_output+0x238>)
 800dc44:	f240 5236 	movw	r2, #1334	@ 0x536
 800dc48:	4932      	ldr	r1, [pc, #200]	@ (800dd14 <tcp_output+0x24c>)
 800dc4a:	482f      	ldr	r0, [pc, #188]	@ (800dd08 <tcp_output+0x240>)
 800dc4c:	f003 fec2 	bl	80119d4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d01f      	beq.n	800dc98 <tcp_output+0x1d0>
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	8b5b      	ldrh	r3, [r3, #26]
 800dc5c:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d119      	bne.n	800dc98 <tcp_output+0x1d0>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d00b      	beq.n	800dc84 <tcp_output+0x1bc>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d110      	bne.n	800dc98 <tcp_output+0x1d0>
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc7a:	891a      	ldrh	r2, [r3, #8]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d209      	bcs.n	800dc98 <tcp_output+0x1d0>
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d004      	beq.n	800dc98 <tcp_output+0x1d0>
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800dc94:	2b0f      	cmp	r3, #15
 800dc96:	d901      	bls.n	800dc9c <tcp_output+0x1d4>
 800dc98:	2301      	movs	r3, #1
 800dc9a:	e000      	b.n	800dc9e <tcp_output+0x1d6>
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d106      	bne.n	800dcb0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	8b5b      	ldrh	r3, [r3, #26]
 800dca6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	f000 80e4 	beq.w	800de78 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	7d1b      	ldrb	r3, [r3, #20]
 800dcb4:	2b02      	cmp	r3, #2
 800dcb6:	d00d      	beq.n	800dcd4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800dcb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcba:	68db      	ldr	r3, [r3, #12]
 800dcbc:	899b      	ldrh	r3, [r3, #12]
 800dcbe:	b29c      	uxth	r4, r3
 800dcc0:	2010      	movs	r0, #16
 800dcc2:	f7f9 fe7d 	bl	80079c0 <lwip_htons>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	461a      	mov	r2, r3
 800dcca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dccc:	68db      	ldr	r3, [r3, #12]
 800dcce:	4322      	orrs	r2, r4
 800dcd0:	b292      	uxth	r2, r2
 800dcd2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800dcd4:	697a      	ldr	r2, [r7, #20]
 800dcd6:	6879      	ldr	r1, [r7, #4]
 800dcd8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dcda:	f000 f909 	bl	800def0 <tcp_output_segment>
 800dcde:	4603      	mov	r3, r0
 800dce0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800dce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d016      	beq.n	800dd18 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	8b5b      	ldrh	r3, [r3, #26]
 800dcee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dcf2:	b29a      	uxth	r2, r3
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	835a      	strh	r2, [r3, #26]
      return err;
 800dcf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dcfc:	e0d3      	b.n	800dea6 <tcp_output+0x3de>
 800dcfe:	bf00      	nop
 800dd00:	08014054 	.word	0x08014054
 800dd04:	08014598 	.word	0x08014598
 800dd08:	080140a8 	.word	0x080140a8
 800dd0c:	080145b0 	.word	0x080145b0
 800dd10:	2000fdf4 	.word	0x2000fdf4
 800dd14:	080145d8 	.word	0x080145d8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800dd18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd1a:	681a      	ldr	r2, [r3, #0]
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	7d1b      	ldrb	r3, [r3, #20]
 800dd24:	2b02      	cmp	r3, #2
 800dd26:	d006      	beq.n	800dd36 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	8b5b      	ldrh	r3, [r3, #26]
 800dd2c:	f023 0303 	bic.w	r3, r3, #3
 800dd30:	b29a      	uxth	r2, r3
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800dd36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd38:	68db      	ldr	r3, [r3, #12]
 800dd3a:	685b      	ldr	r3, [r3, #4]
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f7f9 fe54 	bl	80079ea <lwip_htonl>
 800dd42:	4604      	mov	r4, r0
 800dd44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd46:	891b      	ldrh	r3, [r3, #8]
 800dd48:	461d      	mov	r5, r3
 800dd4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd4c:	68db      	ldr	r3, [r3, #12]
 800dd4e:	899b      	ldrh	r3, [r3, #12]
 800dd50:	b29b      	uxth	r3, r3
 800dd52:	4618      	mov	r0, r3
 800dd54:	f7f9 fe34 	bl	80079c0 <lwip_htons>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	b2db      	uxtb	r3, r3
 800dd5c:	f003 0303 	and.w	r3, r3, #3
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d001      	beq.n	800dd68 <tcp_output+0x2a0>
 800dd64:	2301      	movs	r3, #1
 800dd66:	e000      	b.n	800dd6a <tcp_output+0x2a2>
 800dd68:	2300      	movs	r3, #0
 800dd6a:	442b      	add	r3, r5
 800dd6c:	4423      	add	r3, r4
 800dd6e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	1ad3      	subs	r3, r2, r3
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	da02      	bge.n	800dd82 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	68ba      	ldr	r2, [r7, #8]
 800dd80:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800dd82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd84:	891b      	ldrh	r3, [r3, #8]
 800dd86:	461c      	mov	r4, r3
 800dd88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd8a:	68db      	ldr	r3, [r3, #12]
 800dd8c:	899b      	ldrh	r3, [r3, #12]
 800dd8e:	b29b      	uxth	r3, r3
 800dd90:	4618      	mov	r0, r3
 800dd92:	f7f9 fe15 	bl	80079c0 <lwip_htons>
 800dd96:	4603      	mov	r3, r0
 800dd98:	b2db      	uxtb	r3, r3
 800dd9a:	f003 0303 	and.w	r3, r3, #3
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d001      	beq.n	800dda6 <tcp_output+0x2de>
 800dda2:	2301      	movs	r3, #1
 800dda4:	e000      	b.n	800dda8 <tcp_output+0x2e0>
 800dda6:	2300      	movs	r3, #0
 800dda8:	4423      	add	r3, r4
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d049      	beq.n	800de42 <tcp_output+0x37a>
      seg->next = NULL;
 800ddae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d105      	bne.n	800ddc8 <tcp_output+0x300>
        pcb->unacked = seg;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ddc0:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800ddc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddc4:	623b      	str	r3, [r7, #32]
 800ddc6:	e03f      	b.n	800de48 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ddc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddca:	68db      	ldr	r3, [r3, #12]
 800ddcc:	685b      	ldr	r3, [r3, #4]
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f7f9 fe0b 	bl	80079ea <lwip_htonl>
 800ddd4:	4604      	mov	r4, r0
 800ddd6:	6a3b      	ldr	r3, [r7, #32]
 800ddd8:	68db      	ldr	r3, [r3, #12]
 800ddda:	685b      	ldr	r3, [r3, #4]
 800dddc:	4618      	mov	r0, r3
 800ddde:	f7f9 fe04 	bl	80079ea <lwip_htonl>
 800dde2:	4603      	mov	r3, r0
 800dde4:	1ae3      	subs	r3, r4, r3
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	da24      	bge.n	800de34 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	3370      	adds	r3, #112	@ 0x70
 800ddee:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ddf0:	e002      	b.n	800ddf8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800ddf2:	69fb      	ldr	r3, [r7, #28]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ddf8:	69fb      	ldr	r3, [r7, #28]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d011      	beq.n	800de24 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800de00:	69fb      	ldr	r3, [r7, #28]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	68db      	ldr	r3, [r3, #12]
 800de06:	685b      	ldr	r3, [r3, #4]
 800de08:	4618      	mov	r0, r3
 800de0a:	f7f9 fdee 	bl	80079ea <lwip_htonl>
 800de0e:	4604      	mov	r4, r0
 800de10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de12:	68db      	ldr	r3, [r3, #12]
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	4618      	mov	r0, r3
 800de18:	f7f9 fde7 	bl	80079ea <lwip_htonl>
 800de1c:	4603      	mov	r3, r0
 800de1e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800de20:	2b00      	cmp	r3, #0
 800de22:	dbe6      	blt.n	800ddf2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800de24:	69fb      	ldr	r3, [r7, #28]
 800de26:	681a      	ldr	r2, [r3, #0]
 800de28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de2a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800de2c:	69fb      	ldr	r3, [r7, #28]
 800de2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de30:	601a      	str	r2, [r3, #0]
 800de32:	e009      	b.n	800de48 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800de34:	6a3b      	ldr	r3, [r7, #32]
 800de36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de38:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800de3a:	6a3b      	ldr	r3, [r7, #32]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	623b      	str	r3, [r7, #32]
 800de40:	e002      	b.n	800de48 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800de42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800de44:	f7fc fc43 	bl	800a6ce <tcp_seg_free>
    }
    seg = pcb->unsent;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de4c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800de4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de50:	2b00      	cmp	r3, #0
 800de52:	d012      	beq.n	800de7a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800de54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de56:	68db      	ldr	r3, [r3, #12]
 800de58:	685b      	ldr	r3, [r3, #4]
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7f9 fdc5 	bl	80079ea <lwip_htonl>
 800de60:	4602      	mov	r2, r0
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de66:	1ad3      	subs	r3, r2, r3
 800de68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de6a:	8912      	ldrh	r2, [r2, #8]
 800de6c:	4413      	add	r3, r2
  while (seg != NULL &&
 800de6e:	69ba      	ldr	r2, [r7, #24]
 800de70:	429a      	cmp	r2, r3
 800de72:	f4bf aed9 	bcs.w	800dc28 <tcp_output+0x160>
 800de76:	e000      	b.n	800de7a <tcp_output+0x3b2>
      break;
 800de78:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d108      	bne.n	800de94 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	2200      	movs	r2, #0
 800de86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800de8a:	e004      	b.n	800de96 <tcp_output+0x3ce>
    goto output_done;
 800de8c:	bf00      	nop
 800de8e:	e002      	b.n	800de96 <tcp_output+0x3ce>
    goto output_done;
 800de90:	bf00      	nop
 800de92:	e000      	b.n	800de96 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800de94:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	8b5b      	ldrh	r3, [r3, #26]
 800de9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800de9e:	b29a      	uxth	r2, r3
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800dea4:	2300      	movs	r3, #0
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	3728      	adds	r7, #40	@ 0x28
 800deaa:	46bd      	mov	sp, r7
 800deac:	bdb0      	pop	{r4, r5, r7, pc}
 800deae:	bf00      	nop

0800deb0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b082      	sub	sp, #8
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d106      	bne.n	800decc <tcp_output_segment_busy+0x1c>
 800debe:	4b09      	ldr	r3, [pc, #36]	@ (800dee4 <tcp_output_segment_busy+0x34>)
 800dec0:	f240 529a 	movw	r2, #1434	@ 0x59a
 800dec4:	4908      	ldr	r1, [pc, #32]	@ (800dee8 <tcp_output_segment_busy+0x38>)
 800dec6:	4809      	ldr	r0, [pc, #36]	@ (800deec <tcp_output_segment_busy+0x3c>)
 800dec8:	f003 fd84 	bl	80119d4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	685b      	ldr	r3, [r3, #4]
 800ded0:	7b9b      	ldrb	r3, [r3, #14]
 800ded2:	2b01      	cmp	r3, #1
 800ded4:	d001      	beq.n	800deda <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800ded6:	2301      	movs	r3, #1
 800ded8:	e000      	b.n	800dedc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800deda:	2300      	movs	r3, #0
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3708      	adds	r7, #8
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}
 800dee4:	08014054 	.word	0x08014054
 800dee8:	080145f0 	.word	0x080145f0
 800deec:	080140a8 	.word	0x080140a8

0800def0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800def0:	b5b0      	push	{r4, r5, r7, lr}
 800def2:	b08c      	sub	sp, #48	@ 0x30
 800def4:	af04      	add	r7, sp, #16
 800def6:	60f8      	str	r0, [r7, #12]
 800def8:	60b9      	str	r1, [r7, #8]
 800defa:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d106      	bne.n	800df10 <tcp_output_segment+0x20>
 800df02:	4b64      	ldr	r3, [pc, #400]	@ (800e094 <tcp_output_segment+0x1a4>)
 800df04:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800df08:	4963      	ldr	r1, [pc, #396]	@ (800e098 <tcp_output_segment+0x1a8>)
 800df0a:	4864      	ldr	r0, [pc, #400]	@ (800e09c <tcp_output_segment+0x1ac>)
 800df0c:	f003 fd62 	bl	80119d4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d106      	bne.n	800df24 <tcp_output_segment+0x34>
 800df16:	4b5f      	ldr	r3, [pc, #380]	@ (800e094 <tcp_output_segment+0x1a4>)
 800df18:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800df1c:	4960      	ldr	r1, [pc, #384]	@ (800e0a0 <tcp_output_segment+0x1b0>)
 800df1e:	485f      	ldr	r0, [pc, #380]	@ (800e09c <tcp_output_segment+0x1ac>)
 800df20:	f003 fd58 	bl	80119d4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d106      	bne.n	800df38 <tcp_output_segment+0x48>
 800df2a:	4b5a      	ldr	r3, [pc, #360]	@ (800e094 <tcp_output_segment+0x1a4>)
 800df2c:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800df30:	495c      	ldr	r1, [pc, #368]	@ (800e0a4 <tcp_output_segment+0x1b4>)
 800df32:	485a      	ldr	r0, [pc, #360]	@ (800e09c <tcp_output_segment+0x1ac>)
 800df34:	f003 fd4e 	bl	80119d4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800df38:	68f8      	ldr	r0, [r7, #12]
 800df3a:	f7ff ffb9 	bl	800deb0 <tcp_output_segment_busy>
 800df3e:	4603      	mov	r3, r0
 800df40:	2b00      	cmp	r3, #0
 800df42:	d001      	beq.n	800df48 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800df44:	2300      	movs	r3, #0
 800df46:	e0a1      	b.n	800e08c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	68dc      	ldr	r4, [r3, #12]
 800df50:	4610      	mov	r0, r2
 800df52:	f7f9 fd4a 	bl	80079ea <lwip_htonl>
 800df56:	4603      	mov	r3, r0
 800df58:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	68dc      	ldr	r4, [r3, #12]
 800df62:	4610      	mov	r0, r2
 800df64:	f7f9 fd2c 	bl	80079c0 <lwip_htons>
 800df68:	4603      	mov	r3, r0
 800df6a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df70:	68ba      	ldr	r2, [r7, #8]
 800df72:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800df74:	441a      	add	r2, r3
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	68db      	ldr	r3, [r3, #12]
 800df7e:	3314      	adds	r3, #20
 800df80:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	7a9b      	ldrb	r3, [r3, #10]
 800df86:	f003 0301 	and.w	r3, r3, #1
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d015      	beq.n	800dfba <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	3304      	adds	r3, #4
 800df92:	461a      	mov	r2, r3
 800df94:	6879      	ldr	r1, [r7, #4]
 800df96:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 800df9a:	f7fc fe8f 	bl	800acbc <tcp_eff_send_mss_netif>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800dfa2:	8b7b      	ldrh	r3, [r7, #26]
 800dfa4:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f7f9 fd1e 	bl	80079ea <lwip_htonl>
 800dfae:	4602      	mov	r2, r0
 800dfb0:	69fb      	ldr	r3, [r7, #28]
 800dfb2:	601a      	str	r2, [r3, #0]
    opts += 1;
 800dfb4:	69fb      	ldr	r3, [r7, #28]
 800dfb6:	3304      	adds	r3, #4
 800dfb8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	da02      	bge.n	800dfca <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d10c      	bne.n	800dfec <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800dfd2:	4b35      	ldr	r3, [pc, #212]	@ (800e0a8 <tcp_output_segment+0x1b8>)
 800dfd4:	681a      	ldr	r2, [r3, #0]
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	68db      	ldr	r3, [r3, #12]
 800dfde:	685b      	ldr	r3, [r3, #4]
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f7f9 fd02 	bl	80079ea <lwip_htonl>
 800dfe6:	4602      	mov	r2, r0
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	68da      	ldr	r2, [r3, #12]
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	685b      	ldr	r3, [r3, #4]
 800dff4:	685b      	ldr	r3, [r3, #4]
 800dff6:	1ad3      	subs	r3, r2, r3
 800dff8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	685b      	ldr	r3, [r3, #4]
 800dffe:	8959      	ldrh	r1, [r3, #10]
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	685b      	ldr	r3, [r3, #4]
 800e004:	8b3a      	ldrh	r2, [r7, #24]
 800e006:	1a8a      	subs	r2, r1, r2
 800e008:	b292      	uxth	r2, r2
 800e00a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	685b      	ldr	r3, [r3, #4]
 800e010:	8919      	ldrh	r1, [r3, #8]
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	685b      	ldr	r3, [r3, #4]
 800e016:	8b3a      	ldrh	r2, [r7, #24]
 800e018:	1a8a      	subs	r2, r1, r2
 800e01a:	b292      	uxth	r2, r2
 800e01c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	685b      	ldr	r3, [r3, #4]
 800e022:	68fa      	ldr	r2, [r7, #12]
 800e024:	68d2      	ldr	r2, [r2, #12]
 800e026:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	68db      	ldr	r3, [r3, #12]
 800e02c:	2200      	movs	r2, #0
 800e02e:	741a      	strb	r2, [r3, #16]
 800e030:	2200      	movs	r2, #0
 800e032:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	68da      	ldr	r2, [r3, #12]
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	7a9b      	ldrb	r3, [r3, #10]
 800e03c:	f003 0301 	and.w	r3, r3, #1
 800e040:	2b00      	cmp	r3, #0
 800e042:	d001      	beq.n	800e048 <tcp_output_segment+0x158>
 800e044:	2318      	movs	r3, #24
 800e046:	e000      	b.n	800e04a <tcp_output_segment+0x15a>
 800e048:	2314      	movs	r3, #20
 800e04a:	4413      	add	r3, r2
 800e04c:	69fa      	ldr	r2, [r7, #28]
 800e04e:	429a      	cmp	r2, r3
 800e050:	d006      	beq.n	800e060 <tcp_output_segment+0x170>
 800e052:	4b10      	ldr	r3, [pc, #64]	@ (800e094 <tcp_output_segment+0x1a4>)
 800e054:	f240 621c 	movw	r2, #1564	@ 0x61c
 800e058:	4914      	ldr	r1, [pc, #80]	@ (800e0ac <tcp_output_segment+0x1bc>)
 800e05a:	4810      	ldr	r0, [pc, #64]	@ (800e09c <tcp_output_segment+0x1ac>)
 800e05c:	f003 fcba 	bl	80119d4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	6858      	ldr	r0, [r3, #4]
 800e064:	68b9      	ldr	r1, [r7, #8]
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	1d1c      	adds	r4, r3, #4
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	7add      	ldrb	r5, [r3, #11]
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	7a9b      	ldrb	r3, [r3, #10]
 800e072:	687a      	ldr	r2, [r7, #4]
 800e074:	9202      	str	r2, [sp, #8]
 800e076:	2206      	movs	r2, #6
 800e078:	9201      	str	r2, [sp, #4]
 800e07a:	9300      	str	r3, [sp, #0]
 800e07c:	462b      	mov	r3, r5
 800e07e:	4622      	mov	r2, r4
 800e080:	f002 fa64 	bl	801054c <ip4_output_if>
 800e084:	4603      	mov	r3, r0
 800e086:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800e088:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e08c:	4618      	mov	r0, r3
 800e08e:	3720      	adds	r7, #32
 800e090:	46bd      	mov	sp, r7
 800e092:	bdb0      	pop	{r4, r5, r7, pc}
 800e094:	08014054 	.word	0x08014054
 800e098:	08014618 	.word	0x08014618
 800e09c:	080140a8 	.word	0x080140a8
 800e0a0:	08014638 	.word	0x08014638
 800e0a4:	08014658 	.word	0x08014658
 800e0a8:	2000fda8 	.word	0x2000fda8
 800e0ac:	0801467c 	.word	0x0801467c

0800e0b0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800e0b0:	b5b0      	push	{r4, r5, r7, lr}
 800e0b2:	b084      	sub	sp, #16
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d106      	bne.n	800e0cc <tcp_rexmit_rto_prepare+0x1c>
 800e0be:	4b31      	ldr	r3, [pc, #196]	@ (800e184 <tcp_rexmit_rto_prepare+0xd4>)
 800e0c0:	f240 6263 	movw	r2, #1635	@ 0x663
 800e0c4:	4930      	ldr	r1, [pc, #192]	@ (800e188 <tcp_rexmit_rto_prepare+0xd8>)
 800e0c6:	4831      	ldr	r0, [pc, #196]	@ (800e18c <tcp_rexmit_rto_prepare+0xdc>)
 800e0c8:	f003 fc84 	bl	80119d4 <iprintf>

  if (pcb->unacked == NULL) {
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d102      	bne.n	800e0da <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800e0d4:	f06f 0305 	mvn.w	r3, #5
 800e0d8:	e050      	b.n	800e17c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e0de:	60fb      	str	r3, [r7, #12]
 800e0e0:	e00b      	b.n	800e0fa <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800e0e2:	68f8      	ldr	r0, [r7, #12]
 800e0e4:	f7ff fee4 	bl	800deb0 <tcp_output_segment_busy>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d002      	beq.n	800e0f4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800e0ee:	f06f 0305 	mvn.w	r3, #5
 800e0f2:	e043      	b.n	800e17c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	60fb      	str	r3, [r7, #12]
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d1ef      	bne.n	800e0e2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800e102:	68f8      	ldr	r0, [r7, #12]
 800e104:	f7ff fed4 	bl	800deb0 <tcp_output_segment_busy>
 800e108:	4603      	mov	r3, r0
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d002      	beq.n	800e114 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800e10e:	f06f 0305 	mvn.w	r3, #5
 800e112:	e033      	b.n	800e17c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2200      	movs	r2, #0
 800e128:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	8b5b      	ldrh	r3, [r3, #26]
 800e12e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800e132:	b29a      	uxth	r2, r3
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	68db      	ldr	r3, [r3, #12]
 800e13c:	685b      	ldr	r3, [r3, #4]
 800e13e:	4618      	mov	r0, r3
 800e140:	f7f9 fc53 	bl	80079ea <lwip_htonl>
 800e144:	4604      	mov	r4, r0
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	891b      	ldrh	r3, [r3, #8]
 800e14a:	461d      	mov	r5, r3
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	68db      	ldr	r3, [r3, #12]
 800e150:	899b      	ldrh	r3, [r3, #12]
 800e152:	b29b      	uxth	r3, r3
 800e154:	4618      	mov	r0, r3
 800e156:	f7f9 fc33 	bl	80079c0 <lwip_htons>
 800e15a:	4603      	mov	r3, r0
 800e15c:	b2db      	uxtb	r3, r3
 800e15e:	f003 0303 	and.w	r3, r3, #3
 800e162:	2b00      	cmp	r3, #0
 800e164:	d001      	beq.n	800e16a <tcp_rexmit_rto_prepare+0xba>
 800e166:	2301      	movs	r3, #1
 800e168:	e000      	b.n	800e16c <tcp_rexmit_rto_prepare+0xbc>
 800e16a:	2300      	movs	r3, #0
 800e16c:	442b      	add	r3, r5
 800e16e:	18e2      	adds	r2, r4, r3
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2200      	movs	r2, #0
 800e178:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800e17a:	2300      	movs	r3, #0
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	3710      	adds	r7, #16
 800e180:	46bd      	mov	sp, r7
 800e182:	bdb0      	pop	{r4, r5, r7, pc}
 800e184:	08014054 	.word	0x08014054
 800e188:	08014690 	.word	0x08014690
 800e18c:	080140a8 	.word	0x080140a8

0800e190 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b082      	sub	sp, #8
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d106      	bne.n	800e1ac <tcp_rexmit_rto_commit+0x1c>
 800e19e:	4b0d      	ldr	r3, [pc, #52]	@ (800e1d4 <tcp_rexmit_rto_commit+0x44>)
 800e1a0:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800e1a4:	490c      	ldr	r1, [pc, #48]	@ (800e1d8 <tcp_rexmit_rto_commit+0x48>)
 800e1a6:	480d      	ldr	r0, [pc, #52]	@ (800e1dc <tcp_rexmit_rto_commit+0x4c>)
 800e1a8:	f003 fc14 	bl	80119d4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e1b2:	2bff      	cmp	r3, #255	@ 0xff
 800e1b4:	d007      	beq.n	800e1c6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e1bc:	3301      	adds	r3, #1
 800e1be:	b2da      	uxtb	r2, r3
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800e1c6:	6878      	ldr	r0, [r7, #4]
 800e1c8:	f7ff fc7e 	bl	800dac8 <tcp_output>
}
 800e1cc:	bf00      	nop
 800e1ce:	3708      	adds	r7, #8
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}
 800e1d4:	08014054 	.word	0x08014054
 800e1d8:	080146b4 	.word	0x080146b4
 800e1dc:	080140a8 	.word	0x080140a8

0800e1e0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b082      	sub	sp, #8
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d106      	bne.n	800e1fc <tcp_rexmit_rto+0x1c>
 800e1ee:	4b0a      	ldr	r3, [pc, #40]	@ (800e218 <tcp_rexmit_rto+0x38>)
 800e1f0:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800e1f4:	4909      	ldr	r1, [pc, #36]	@ (800e21c <tcp_rexmit_rto+0x3c>)
 800e1f6:	480a      	ldr	r0, [pc, #40]	@ (800e220 <tcp_rexmit_rto+0x40>)
 800e1f8:	f003 fbec 	bl	80119d4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f7ff ff57 	bl	800e0b0 <tcp_rexmit_rto_prepare>
 800e202:	4603      	mov	r3, r0
 800e204:	2b00      	cmp	r3, #0
 800e206:	d102      	bne.n	800e20e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f7ff ffc1 	bl	800e190 <tcp_rexmit_rto_commit>
  }
}
 800e20e:	bf00      	nop
 800e210:	3708      	adds	r7, #8
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}
 800e216:	bf00      	nop
 800e218:	08014054 	.word	0x08014054
 800e21c:	080146d8 	.word	0x080146d8
 800e220:	080140a8 	.word	0x080140a8

0800e224 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e224:	b590      	push	{r4, r7, lr}
 800e226:	b085      	sub	sp, #20
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d106      	bne.n	800e240 <tcp_rexmit+0x1c>
 800e232:	4b2f      	ldr	r3, [pc, #188]	@ (800e2f0 <tcp_rexmit+0xcc>)
 800e234:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800e238:	492e      	ldr	r1, [pc, #184]	@ (800e2f4 <tcp_rexmit+0xd0>)
 800e23a:	482f      	ldr	r0, [pc, #188]	@ (800e2f8 <tcp_rexmit+0xd4>)
 800e23c:	f003 fbca 	bl	80119d4 <iprintf>

  if (pcb->unacked == NULL) {
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e244:	2b00      	cmp	r3, #0
 800e246:	d102      	bne.n	800e24e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800e248:	f06f 0305 	mvn.w	r3, #5
 800e24c:	e04c      	b.n	800e2e8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e252:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800e254:	68b8      	ldr	r0, [r7, #8]
 800e256:	f7ff fe2b 	bl	800deb0 <tcp_output_segment_busy>
 800e25a:	4603      	mov	r3, r0
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d002      	beq.n	800e266 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800e260:	f06f 0305 	mvn.w	r3, #5
 800e264:	e040      	b.n	800e2e8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	681a      	ldr	r2, [r3, #0]
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	336c      	adds	r3, #108	@ 0x6c
 800e272:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e274:	e002      	b.n	800e27c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d011      	beq.n	800e2a8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	68db      	ldr	r3, [r3, #12]
 800e28a:	685b      	ldr	r3, [r3, #4]
 800e28c:	4618      	mov	r0, r3
 800e28e:	f7f9 fbac 	bl	80079ea <lwip_htonl>
 800e292:	4604      	mov	r4, r0
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	68db      	ldr	r3, [r3, #12]
 800e298:	685b      	ldr	r3, [r3, #4]
 800e29a:	4618      	mov	r0, r3
 800e29c:	f7f9 fba5 	bl	80079ea <lwip_htonl>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	dbe6      	blt.n	800e276 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	681a      	ldr	r2, [r3, #0]
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	68ba      	ldr	r2, [r7, #8]
 800e2b4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d103      	bne.n	800e2c6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e2cc:	2bff      	cmp	r3, #255	@ 0xff
 800e2ce:	d007      	beq.n	800e2e0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e2d6:	3301      	adds	r3, #1
 800e2d8:	b2da      	uxtb	r2, r3
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800e2e6:	2300      	movs	r3, #0
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	3714      	adds	r7, #20
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd90      	pop	{r4, r7, pc}
 800e2f0:	08014054 	.word	0x08014054
 800e2f4:	080146f4 	.word	0x080146f4
 800e2f8:	080140a8 	.word	0x080140a8

0800e2fc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b082      	sub	sp, #8
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d106      	bne.n	800e318 <tcp_rexmit_fast+0x1c>
 800e30a:	4b2a      	ldr	r3, [pc, #168]	@ (800e3b4 <tcp_rexmit_fast+0xb8>)
 800e30c:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800e310:	4929      	ldr	r1, [pc, #164]	@ (800e3b8 <tcp_rexmit_fast+0xbc>)
 800e312:	482a      	ldr	r0, [pc, #168]	@ (800e3bc <tcp_rexmit_fast+0xc0>)
 800e314:	f003 fb5e 	bl	80119d4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d045      	beq.n	800e3ac <tcp_rexmit_fast+0xb0>
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	8b5b      	ldrh	r3, [r3, #26]
 800e324:	f003 0304 	and.w	r3, r3, #4
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d13f      	bne.n	800e3ac <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f7ff ff79 	bl	800e224 <tcp_rexmit>
 800e332:	4603      	mov	r3, r0
 800e334:	2b00      	cmp	r3, #0
 800e336:	d139      	bne.n	800e3ac <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e344:	4293      	cmp	r3, r2
 800e346:	bf28      	it	cs
 800e348:	4613      	movcs	r3, r2
 800e34a:	b29b      	uxth	r3, r3
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	da00      	bge.n	800e352 <tcp_rexmit_fast+0x56>
 800e350:	3301      	adds	r3, #1
 800e352:	105b      	asrs	r3, r3, #1
 800e354:	b29a      	uxth	r2, r3
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800e362:	461a      	mov	r2, r3
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e368:	005b      	lsls	r3, r3, #1
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d206      	bcs.n	800e37c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e372:	005b      	lsls	r3, r3, #1
 800e374:	b29a      	uxth	r2, r3
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e386:	4619      	mov	r1, r3
 800e388:	0049      	lsls	r1, r1, #1
 800e38a:	440b      	add	r3, r1
 800e38c:	b29b      	uxth	r3, r3
 800e38e:	4413      	add	r3, r2
 800e390:	b29a      	uxth	r2, r3
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	8b5b      	ldrh	r3, [r3, #26]
 800e39c:	f043 0304 	orr.w	r3, r3, #4
 800e3a0:	b29a      	uxth	r2, r3
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800e3ac:	bf00      	nop
 800e3ae:	3708      	adds	r7, #8
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}
 800e3b4:	08014054 	.word	0x08014054
 800e3b8:	0801470c 	.word	0x0801470c
 800e3bc:	080140a8 	.word	0x080140a8

0800e3c0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b086      	sub	sp, #24
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	60f8      	str	r0, [r7, #12]
 800e3c8:	607b      	str	r3, [r7, #4]
 800e3ca:	460b      	mov	r3, r1
 800e3cc:	817b      	strh	r3, [r7, #10]
 800e3ce:	4613      	mov	r3, r2
 800e3d0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e3d2:	897a      	ldrh	r2, [r7, #10]
 800e3d4:	893b      	ldrh	r3, [r7, #8]
 800e3d6:	4413      	add	r3, r2
 800e3d8:	b29b      	uxth	r3, r3
 800e3da:	3314      	adds	r3, #20
 800e3dc:	b29b      	uxth	r3, r3
 800e3de:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e3e2:	4619      	mov	r1, r3
 800e3e4:	2022      	movs	r0, #34	@ 0x22
 800e3e6:	f7fa fc05 	bl	8008bf4 <pbuf_alloc>
 800e3ea:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e3ec:	697b      	ldr	r3, [r7, #20]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d04d      	beq.n	800e48e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e3f2:	897b      	ldrh	r3, [r7, #10]
 800e3f4:	3313      	adds	r3, #19
 800e3f6:	697a      	ldr	r2, [r7, #20]
 800e3f8:	8952      	ldrh	r2, [r2, #10]
 800e3fa:	4293      	cmp	r3, r2
 800e3fc:	db06      	blt.n	800e40c <tcp_output_alloc_header_common+0x4c>
 800e3fe:	4b26      	ldr	r3, [pc, #152]	@ (800e498 <tcp_output_alloc_header_common+0xd8>)
 800e400:	f240 7223 	movw	r2, #1827	@ 0x723
 800e404:	4925      	ldr	r1, [pc, #148]	@ (800e49c <tcp_output_alloc_header_common+0xdc>)
 800e406:	4826      	ldr	r0, [pc, #152]	@ (800e4a0 <tcp_output_alloc_header_common+0xe0>)
 800e408:	f003 fae4 	bl	80119d4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e40c:	697b      	ldr	r3, [r7, #20]
 800e40e:	685b      	ldr	r3, [r3, #4]
 800e410:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800e412:	8c3b      	ldrh	r3, [r7, #32]
 800e414:	4618      	mov	r0, r3
 800e416:	f7f9 fad3 	bl	80079c0 <lwip_htons>
 800e41a:	4603      	mov	r3, r0
 800e41c:	461a      	mov	r2, r3
 800e41e:	693b      	ldr	r3, [r7, #16]
 800e420:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800e422:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e424:	4618      	mov	r0, r3
 800e426:	f7f9 facb 	bl	80079c0 <lwip_htons>
 800e42a:	4603      	mov	r3, r0
 800e42c:	461a      	mov	r2, r3
 800e42e:	693b      	ldr	r3, [r7, #16]
 800e430:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e432:	693b      	ldr	r3, [r7, #16]
 800e434:	687a      	ldr	r2, [r7, #4]
 800e436:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800e438:	68f8      	ldr	r0, [r7, #12]
 800e43a:	f7f9 fad6 	bl	80079ea <lwip_htonl>
 800e43e:	4602      	mov	r2, r0
 800e440:	693b      	ldr	r3, [r7, #16]
 800e442:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800e444:	897b      	ldrh	r3, [r7, #10]
 800e446:	089b      	lsrs	r3, r3, #2
 800e448:	b29b      	uxth	r3, r3
 800e44a:	3305      	adds	r3, #5
 800e44c:	b29b      	uxth	r3, r3
 800e44e:	031b      	lsls	r3, r3, #12
 800e450:	b29a      	uxth	r2, r3
 800e452:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e456:	b29b      	uxth	r3, r3
 800e458:	4313      	orrs	r3, r2
 800e45a:	b29b      	uxth	r3, r3
 800e45c:	4618      	mov	r0, r3
 800e45e:	f7f9 faaf 	bl	80079c0 <lwip_htons>
 800e462:	4603      	mov	r3, r0
 800e464:	461a      	mov	r2, r3
 800e466:	693b      	ldr	r3, [r7, #16]
 800e468:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800e46a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800e46c:	4618      	mov	r0, r3
 800e46e:	f7f9 faa7 	bl	80079c0 <lwip_htons>
 800e472:	4603      	mov	r3, r0
 800e474:	461a      	mov	r2, r3
 800e476:	693b      	ldr	r3, [r7, #16]
 800e478:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e47a:	693b      	ldr	r3, [r7, #16]
 800e47c:	2200      	movs	r2, #0
 800e47e:	741a      	strb	r2, [r3, #16]
 800e480:	2200      	movs	r2, #0
 800e482:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e484:	693b      	ldr	r3, [r7, #16]
 800e486:	2200      	movs	r2, #0
 800e488:	749a      	strb	r2, [r3, #18]
 800e48a:	2200      	movs	r2, #0
 800e48c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800e48e:	697b      	ldr	r3, [r7, #20]
}
 800e490:	4618      	mov	r0, r3
 800e492:	3718      	adds	r7, #24
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}
 800e498:	08014054 	.word	0x08014054
 800e49c:	0801472c 	.word	0x0801472c
 800e4a0:	080140a8 	.word	0x080140a8

0800e4a4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800e4a4:	b5b0      	push	{r4, r5, r7, lr}
 800e4a6:	b08a      	sub	sp, #40	@ 0x28
 800e4a8:	af04      	add	r7, sp, #16
 800e4aa:	60f8      	str	r0, [r7, #12]
 800e4ac:	607b      	str	r3, [r7, #4]
 800e4ae:	460b      	mov	r3, r1
 800e4b0:	817b      	strh	r3, [r7, #10]
 800e4b2:	4613      	mov	r3, r2
 800e4b4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d106      	bne.n	800e4ca <tcp_output_alloc_header+0x26>
 800e4bc:	4b15      	ldr	r3, [pc, #84]	@ (800e514 <tcp_output_alloc_header+0x70>)
 800e4be:	f240 7242 	movw	r2, #1858	@ 0x742
 800e4c2:	4915      	ldr	r1, [pc, #84]	@ (800e518 <tcp_output_alloc_header+0x74>)
 800e4c4:	4815      	ldr	r0, [pc, #84]	@ (800e51c <tcp_output_alloc_header+0x78>)
 800e4c6:	f003 fa85 	bl	80119d4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	8adb      	ldrh	r3, [r3, #22]
 800e4d2:	68fa      	ldr	r2, [r7, #12]
 800e4d4:	8b12      	ldrh	r2, [r2, #24]
 800e4d6:	68f9      	ldr	r1, [r7, #12]
 800e4d8:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800e4da:	893d      	ldrh	r5, [r7, #8]
 800e4dc:	897c      	ldrh	r4, [r7, #10]
 800e4de:	9103      	str	r1, [sp, #12]
 800e4e0:	2110      	movs	r1, #16
 800e4e2:	9102      	str	r1, [sp, #8]
 800e4e4:	9201      	str	r2, [sp, #4]
 800e4e6:	9300      	str	r3, [sp, #0]
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	462a      	mov	r2, r5
 800e4ec:	4621      	mov	r1, r4
 800e4ee:	f7ff ff67 	bl	800e3c0 <tcp_output_alloc_header_common>
 800e4f2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d006      	beq.n	800e508 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4fe:	68fa      	ldr	r2, [r7, #12]
 800e500:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800e502:	441a      	add	r2, r3
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800e508:	697b      	ldr	r3, [r7, #20]
}
 800e50a:	4618      	mov	r0, r3
 800e50c:	3718      	adds	r7, #24
 800e50e:	46bd      	mov	sp, r7
 800e510:	bdb0      	pop	{r4, r5, r7, pc}
 800e512:	bf00      	nop
 800e514:	08014054 	.word	0x08014054
 800e518:	0801475c 	.word	0x0801475c
 800e51c:	080140a8 	.word	0x080140a8

0800e520 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b088      	sub	sp, #32
 800e524:	af00      	add	r7, sp, #0
 800e526:	60f8      	str	r0, [r7, #12]
 800e528:	60b9      	str	r1, [r7, #8]
 800e52a:	4611      	mov	r1, r2
 800e52c:	461a      	mov	r2, r3
 800e52e:	460b      	mov	r3, r1
 800e530:	71fb      	strb	r3, [r7, #7]
 800e532:	4613      	mov	r3, r2
 800e534:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800e536:	2300      	movs	r3, #0
 800e538:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d106      	bne.n	800e54e <tcp_output_fill_options+0x2e>
 800e540:	4b12      	ldr	r3, [pc, #72]	@ (800e58c <tcp_output_fill_options+0x6c>)
 800e542:	f240 7256 	movw	r2, #1878	@ 0x756
 800e546:	4912      	ldr	r1, [pc, #72]	@ (800e590 <tcp_output_fill_options+0x70>)
 800e548:	4812      	ldr	r0, [pc, #72]	@ (800e594 <tcp_output_fill_options+0x74>)
 800e54a:	f003 fa43 	bl	80119d4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	685b      	ldr	r3, [r3, #4]
 800e552:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800e554:	69bb      	ldr	r3, [r7, #24]
 800e556:	3314      	adds	r3, #20
 800e558:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800e55a:	8bfb      	ldrh	r3, [r7, #30]
 800e55c:	009b      	lsls	r3, r3, #2
 800e55e:	461a      	mov	r2, r3
 800e560:	79fb      	ldrb	r3, [r7, #7]
 800e562:	009b      	lsls	r3, r3, #2
 800e564:	f003 0304 	and.w	r3, r3, #4
 800e568:	4413      	add	r3, r2
 800e56a:	3314      	adds	r3, #20
 800e56c:	69ba      	ldr	r2, [r7, #24]
 800e56e:	4413      	add	r3, r2
 800e570:	697a      	ldr	r2, [r7, #20]
 800e572:	429a      	cmp	r2, r3
 800e574:	d006      	beq.n	800e584 <tcp_output_fill_options+0x64>
 800e576:	4b05      	ldr	r3, [pc, #20]	@ (800e58c <tcp_output_fill_options+0x6c>)
 800e578:	f240 7275 	movw	r2, #1909	@ 0x775
 800e57c:	4906      	ldr	r1, [pc, #24]	@ (800e598 <tcp_output_fill_options+0x78>)
 800e57e:	4805      	ldr	r0, [pc, #20]	@ (800e594 <tcp_output_fill_options+0x74>)
 800e580:	f003 fa28 	bl	80119d4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800e584:	bf00      	nop
 800e586:	3720      	adds	r7, #32
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}
 800e58c:	08014054 	.word	0x08014054
 800e590:	08014784 	.word	0x08014784
 800e594:	080140a8 	.word	0x080140a8
 800e598:	0801467c 	.word	0x0801467c

0800e59c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b08a      	sub	sp, #40	@ 0x28
 800e5a0:	af04      	add	r7, sp, #16
 800e5a2:	60f8      	str	r0, [r7, #12]
 800e5a4:	60b9      	str	r1, [r7, #8]
 800e5a6:	607a      	str	r2, [r7, #4]
 800e5a8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800e5aa:	68bb      	ldr	r3, [r7, #8]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d106      	bne.n	800e5be <tcp_output_control_segment+0x22>
 800e5b0:	4b1c      	ldr	r3, [pc, #112]	@ (800e624 <tcp_output_control_segment+0x88>)
 800e5b2:	f240 7287 	movw	r2, #1927	@ 0x787
 800e5b6:	491c      	ldr	r1, [pc, #112]	@ (800e628 <tcp_output_control_segment+0x8c>)
 800e5b8:	481c      	ldr	r0, [pc, #112]	@ (800e62c <tcp_output_control_segment+0x90>)
 800e5ba:	f003 fa0b 	bl	80119d4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800e5be:	683a      	ldr	r2, [r7, #0]
 800e5c0:	6879      	ldr	r1, [r7, #4]
 800e5c2:	68f8      	ldr	r0, [r7, #12]
 800e5c4:	f7fe ff42 	bl	800d44c <tcp_route>
 800e5c8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800e5ca:	693b      	ldr	r3, [r7, #16]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d102      	bne.n	800e5d6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800e5d0:	23fc      	movs	r3, #252	@ 0xfc
 800e5d2:	75fb      	strb	r3, [r7, #23]
 800e5d4:	e01c      	b.n	800e610 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d006      	beq.n	800e5ea <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	7adb      	ldrb	r3, [r3, #11]
 800e5e0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	7a9b      	ldrb	r3, [r3, #10]
 800e5e6:	757b      	strb	r3, [r7, #21]
 800e5e8:	e003      	b.n	800e5f2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800e5ea:	23ff      	movs	r3, #255	@ 0xff
 800e5ec:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800e5f2:	7dba      	ldrb	r2, [r7, #22]
 800e5f4:	693b      	ldr	r3, [r7, #16]
 800e5f6:	9302      	str	r3, [sp, #8]
 800e5f8:	2306      	movs	r3, #6
 800e5fa:	9301      	str	r3, [sp, #4]
 800e5fc:	7d7b      	ldrb	r3, [r7, #21]
 800e5fe:	9300      	str	r3, [sp, #0]
 800e600:	4613      	mov	r3, r2
 800e602:	683a      	ldr	r2, [r7, #0]
 800e604:	6879      	ldr	r1, [r7, #4]
 800e606:	68b8      	ldr	r0, [r7, #8]
 800e608:	f001 ffa0 	bl	801054c <ip4_output_if>
 800e60c:	4603      	mov	r3, r0
 800e60e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800e610:	68b8      	ldr	r0, [r7, #8]
 800e612:	f7fa fdd7 	bl	80091c4 <pbuf_free>
  return err;
 800e616:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	3718      	adds	r7, #24
 800e61e:	46bd      	mov	sp, r7
 800e620:	bd80      	pop	{r7, pc}
 800e622:	bf00      	nop
 800e624:	08014054 	.word	0x08014054
 800e628:	080147ac 	.word	0x080147ac
 800e62c:	080140a8 	.word	0x080140a8

0800e630 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800e630:	b590      	push	{r4, r7, lr}
 800e632:	b08b      	sub	sp, #44	@ 0x2c
 800e634:	af04      	add	r7, sp, #16
 800e636:	60f8      	str	r0, [r7, #12]
 800e638:	60b9      	str	r1, [r7, #8]
 800e63a:	607a      	str	r2, [r7, #4]
 800e63c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d106      	bne.n	800e652 <tcp_rst+0x22>
 800e644:	4b1f      	ldr	r3, [pc, #124]	@ (800e6c4 <tcp_rst+0x94>)
 800e646:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800e64a:	491f      	ldr	r1, [pc, #124]	@ (800e6c8 <tcp_rst+0x98>)
 800e64c:	481f      	ldr	r0, [pc, #124]	@ (800e6cc <tcp_rst+0x9c>)
 800e64e:	f003 f9c1 	bl	80119d4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e654:	2b00      	cmp	r3, #0
 800e656:	d106      	bne.n	800e666 <tcp_rst+0x36>
 800e658:	4b1a      	ldr	r3, [pc, #104]	@ (800e6c4 <tcp_rst+0x94>)
 800e65a:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800e65e:	491c      	ldr	r1, [pc, #112]	@ (800e6d0 <tcp_rst+0xa0>)
 800e660:	481a      	ldr	r0, [pc, #104]	@ (800e6cc <tcp_rst+0x9c>)
 800e662:	f003 f9b7 	bl	80119d4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e666:	2300      	movs	r3, #0
 800e668:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800e66a:	f24d 0316 	movw	r3, #53270	@ 0xd016
 800e66e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800e670:	7dfb      	ldrb	r3, [r7, #23]
 800e672:	b29c      	uxth	r4, r3
 800e674:	68b8      	ldr	r0, [r7, #8]
 800e676:	f7f9 f9b8 	bl	80079ea <lwip_htonl>
 800e67a:	4602      	mov	r2, r0
 800e67c:	8abb      	ldrh	r3, [r7, #20]
 800e67e:	9303      	str	r3, [sp, #12]
 800e680:	2314      	movs	r3, #20
 800e682:	9302      	str	r3, [sp, #8]
 800e684:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800e686:	9301      	str	r3, [sp, #4]
 800e688:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800e68a:	9300      	str	r3, [sp, #0]
 800e68c:	4613      	mov	r3, r2
 800e68e:	2200      	movs	r2, #0
 800e690:	4621      	mov	r1, r4
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	f7ff fe94 	bl	800e3c0 <tcp_output_alloc_header_common>
 800e698:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800e69a:	693b      	ldr	r3, [r7, #16]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d00c      	beq.n	800e6ba <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e6a0:	7dfb      	ldrb	r3, [r7, #23]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	6939      	ldr	r1, [r7, #16]
 800e6a6:	68f8      	ldr	r0, [r7, #12]
 800e6a8:	f7ff ff3a 	bl	800e520 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e6ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6ae:	683a      	ldr	r2, [r7, #0]
 800e6b0:	6939      	ldr	r1, [r7, #16]
 800e6b2:	68f8      	ldr	r0, [r7, #12]
 800e6b4:	f7ff ff72 	bl	800e59c <tcp_output_control_segment>
 800e6b8:	e000      	b.n	800e6bc <tcp_rst+0x8c>
    return;
 800e6ba:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e6bc:	371c      	adds	r7, #28
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd90      	pop	{r4, r7, pc}
 800e6c2:	bf00      	nop
 800e6c4:	08014054 	.word	0x08014054
 800e6c8:	080147d8 	.word	0x080147d8
 800e6cc:	080140a8 	.word	0x080140a8
 800e6d0:	080147f4 	.word	0x080147f4

0800e6d4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e6d4:	b590      	push	{r4, r7, lr}
 800e6d6:	b087      	sub	sp, #28
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800e6dc:	2300      	movs	r3, #0
 800e6de:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d106      	bne.n	800e6f8 <tcp_send_empty_ack+0x24>
 800e6ea:	4b28      	ldr	r3, [pc, #160]	@ (800e78c <tcp_send_empty_ack+0xb8>)
 800e6ec:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800e6f0:	4927      	ldr	r1, [pc, #156]	@ (800e790 <tcp_send_empty_ack+0xbc>)
 800e6f2:	4828      	ldr	r0, [pc, #160]	@ (800e794 <tcp_send_empty_ack+0xc0>)
 800e6f4:	f003 f96e 	bl	80119d4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e6f8:	7dfb      	ldrb	r3, [r7, #23]
 800e6fa:	009b      	lsls	r3, r3, #2
 800e6fc:	b2db      	uxtb	r3, r3
 800e6fe:	f003 0304 	and.w	r3, r3, #4
 800e702:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e704:	7d7b      	ldrb	r3, [r7, #21]
 800e706:	b29c      	uxth	r4, r3
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e70c:	4618      	mov	r0, r3
 800e70e:	f7f9 f96c 	bl	80079ea <lwip_htonl>
 800e712:	4603      	mov	r3, r0
 800e714:	2200      	movs	r2, #0
 800e716:	4621      	mov	r1, r4
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f7ff fec3 	bl	800e4a4 <tcp_output_alloc_header>
 800e71e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e720:	693b      	ldr	r3, [r7, #16]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d109      	bne.n	800e73a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	8b5b      	ldrh	r3, [r3, #26]
 800e72a:	f043 0303 	orr.w	r3, r3, #3
 800e72e:	b29a      	uxth	r2, r3
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800e734:	f06f 0301 	mvn.w	r3, #1
 800e738:	e023      	b.n	800e782 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800e73a:	7dbb      	ldrb	r3, [r7, #22]
 800e73c:	7dfa      	ldrb	r2, [r7, #23]
 800e73e:	6939      	ldr	r1, [r7, #16]
 800e740:	6878      	ldr	r0, [r7, #4]
 800e742:	f7ff feed 	bl	800e520 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e746:	687a      	ldr	r2, [r7, #4]
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	3304      	adds	r3, #4
 800e74c:	6939      	ldr	r1, [r7, #16]
 800e74e:	6878      	ldr	r0, [r7, #4]
 800e750:	f7ff ff24 	bl	800e59c <tcp_output_control_segment>
 800e754:	4603      	mov	r3, r0
 800e756:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800e758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d007      	beq.n	800e770 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	8b5b      	ldrh	r3, [r3, #26]
 800e764:	f043 0303 	orr.w	r3, r3, #3
 800e768:	b29a      	uxth	r2, r3
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	835a      	strh	r2, [r3, #26]
 800e76e:	e006      	b.n	800e77e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	8b5b      	ldrh	r3, [r3, #26]
 800e774:	f023 0303 	bic.w	r3, r3, #3
 800e778:	b29a      	uxth	r2, r3
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800e77e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e782:	4618      	mov	r0, r3
 800e784:	371c      	adds	r7, #28
 800e786:	46bd      	mov	sp, r7
 800e788:	bd90      	pop	{r4, r7, pc}
 800e78a:	bf00      	nop
 800e78c:	08014054 	.word	0x08014054
 800e790:	08014810 	.word	0x08014810
 800e794:	080140a8 	.word	0x080140a8

0800e798 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e798:	b590      	push	{r4, r7, lr}
 800e79a:	b087      	sub	sp, #28
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d106      	bne.n	800e7b8 <tcp_keepalive+0x20>
 800e7aa:	4b18      	ldr	r3, [pc, #96]	@ (800e80c <tcp_keepalive+0x74>)
 800e7ac:	f640 0224 	movw	r2, #2084	@ 0x824
 800e7b0:	4917      	ldr	r1, [pc, #92]	@ (800e810 <tcp_keepalive+0x78>)
 800e7b2:	4818      	ldr	r0, [pc, #96]	@ (800e814 <tcp_keepalive+0x7c>)
 800e7b4:	f003 f90e 	bl	80119d4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e7b8:	7dfb      	ldrb	r3, [r7, #23]
 800e7ba:	b29c      	uxth	r4, r3
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7c0:	3b01      	subs	r3, #1
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f7f9 f911 	bl	80079ea <lwip_htonl>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	4621      	mov	r1, r4
 800e7ce:	6878      	ldr	r0, [r7, #4]
 800e7d0:	f7ff fe68 	bl	800e4a4 <tcp_output_alloc_header>
 800e7d4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e7d6:	693b      	ldr	r3, [r7, #16]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d102      	bne.n	800e7e2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800e7dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e7e0:	e010      	b.n	800e804 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e7e2:	7dfb      	ldrb	r3, [r7, #23]
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	6939      	ldr	r1, [r7, #16]
 800e7e8:	6878      	ldr	r0, [r7, #4]
 800e7ea:	f7ff fe99 	bl	800e520 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e7ee:	687a      	ldr	r2, [r7, #4]
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	3304      	adds	r3, #4
 800e7f4:	6939      	ldr	r1, [r7, #16]
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f7ff fed0 	bl	800e59c <tcp_output_control_segment>
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e800:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e804:	4618      	mov	r0, r3
 800e806:	371c      	adds	r7, #28
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd90      	pop	{r4, r7, pc}
 800e80c:	08014054 	.word	0x08014054
 800e810:	08014830 	.word	0x08014830
 800e814:	080140a8 	.word	0x080140a8

0800e818 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e818:	b590      	push	{r4, r7, lr}
 800e81a:	b08b      	sub	sp, #44	@ 0x2c
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e820:	2300      	movs	r3, #0
 800e822:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d106      	bne.n	800e83a <tcp_zero_window_probe+0x22>
 800e82c:	4b4c      	ldr	r3, [pc, #304]	@ (800e960 <tcp_zero_window_probe+0x148>)
 800e82e:	f640 024f 	movw	r2, #2127	@ 0x84f
 800e832:	494c      	ldr	r1, [pc, #304]	@ (800e964 <tcp_zero_window_probe+0x14c>)
 800e834:	484c      	ldr	r0, [pc, #304]	@ (800e968 <tcp_zero_window_probe+0x150>)
 800e836:	f003 f8cd 	bl	80119d4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e83e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800e840:	6a3b      	ldr	r3, [r7, #32]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d101      	bne.n	800e84a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800e846:	2300      	movs	r3, #0
 800e848:	e086      	b.n	800e958 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800e850:	2bff      	cmp	r3, #255	@ 0xff
 800e852:	d007      	beq.n	800e864 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800e85a:	3301      	adds	r3, #1
 800e85c:	b2da      	uxtb	r2, r3
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e864:	6a3b      	ldr	r3, [r7, #32]
 800e866:	68db      	ldr	r3, [r3, #12]
 800e868:	899b      	ldrh	r3, [r3, #12]
 800e86a:	b29b      	uxth	r3, r3
 800e86c:	4618      	mov	r0, r3
 800e86e:	f7f9 f8a7 	bl	80079c0 <lwip_htons>
 800e872:	4603      	mov	r3, r0
 800e874:	b2db      	uxtb	r3, r3
 800e876:	f003 0301 	and.w	r3, r3, #1
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d005      	beq.n	800e88a <tcp_zero_window_probe+0x72>
 800e87e:	6a3b      	ldr	r3, [r7, #32]
 800e880:	891b      	ldrh	r3, [r3, #8]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d101      	bne.n	800e88a <tcp_zero_window_probe+0x72>
 800e886:	2301      	movs	r3, #1
 800e888:	e000      	b.n	800e88c <tcp_zero_window_probe+0x74>
 800e88a:	2300      	movs	r3, #0
 800e88c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800e88e:	7ffb      	ldrb	r3, [r7, #31]
 800e890:	2b00      	cmp	r3, #0
 800e892:	bf0c      	ite	eq
 800e894:	2301      	moveq	r3, #1
 800e896:	2300      	movne	r3, #0
 800e898:	b2db      	uxtb	r3, r3
 800e89a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800e89c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e8a0:	b299      	uxth	r1, r3
 800e8a2:	6a3b      	ldr	r3, [r7, #32]
 800e8a4:	68db      	ldr	r3, [r3, #12]
 800e8a6:	685b      	ldr	r3, [r3, #4]
 800e8a8:	8bba      	ldrh	r2, [r7, #28]
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f7ff fdfa 	bl	800e4a4 <tcp_output_alloc_header>
 800e8b0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800e8b2:	69bb      	ldr	r3, [r7, #24]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d102      	bne.n	800e8be <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800e8b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e8bc:	e04c      	b.n	800e958 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800e8be:	69bb      	ldr	r3, [r7, #24]
 800e8c0:	685b      	ldr	r3, [r3, #4]
 800e8c2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800e8c4:	7ffb      	ldrb	r3, [r7, #31]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d011      	beq.n	800e8ee <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	899b      	ldrh	r3, [r3, #12]
 800e8ce:	b29b      	uxth	r3, r3
 800e8d0:	b21b      	sxth	r3, r3
 800e8d2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e8d6:	b21c      	sxth	r4, r3
 800e8d8:	2011      	movs	r0, #17
 800e8da:	f7f9 f871 	bl	80079c0 <lwip_htons>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	b21b      	sxth	r3, r3
 800e8e2:	4323      	orrs	r3, r4
 800e8e4:	b21b      	sxth	r3, r3
 800e8e6:	b29a      	uxth	r2, r3
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	819a      	strh	r2, [r3, #12]
 800e8ec:	e010      	b.n	800e910 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800e8ee:	69bb      	ldr	r3, [r7, #24]
 800e8f0:	685b      	ldr	r3, [r3, #4]
 800e8f2:	3314      	adds	r3, #20
 800e8f4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e8f6:	6a3b      	ldr	r3, [r7, #32]
 800e8f8:	6858      	ldr	r0, [r3, #4]
 800e8fa:	6a3b      	ldr	r3, [r7, #32]
 800e8fc:	685b      	ldr	r3, [r3, #4]
 800e8fe:	891a      	ldrh	r2, [r3, #8]
 800e900:	6a3b      	ldr	r3, [r7, #32]
 800e902:	891b      	ldrh	r3, [r3, #8]
 800e904:	1ad3      	subs	r3, r2, r3
 800e906:	b29b      	uxth	r3, r3
 800e908:	2201      	movs	r2, #1
 800e90a:	6939      	ldr	r1, [r7, #16]
 800e90c:	f7fa fe50 	bl	80095b0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e910:	6a3b      	ldr	r3, [r7, #32]
 800e912:	68db      	ldr	r3, [r3, #12]
 800e914:	685b      	ldr	r3, [r3, #4]
 800e916:	4618      	mov	r0, r3
 800e918:	f7f9 f867 	bl	80079ea <lwip_htonl>
 800e91c:	4603      	mov	r3, r0
 800e91e:	3301      	adds	r3, #1
 800e920:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	1ad3      	subs	r3, r2, r3
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	da02      	bge.n	800e934 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	68fa      	ldr	r2, [r7, #12]
 800e932:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e934:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e938:	2200      	movs	r2, #0
 800e93a:	69b9      	ldr	r1, [r7, #24]
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	f7ff fdef 	bl	800e520 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e942:	687a      	ldr	r2, [r7, #4]
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	3304      	adds	r3, #4
 800e948:	69b9      	ldr	r1, [r7, #24]
 800e94a:	6878      	ldr	r0, [r7, #4]
 800e94c:	f7ff fe26 	bl	800e59c <tcp_output_control_segment>
 800e950:	4603      	mov	r3, r0
 800e952:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e954:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e958:	4618      	mov	r0, r3
 800e95a:	372c      	adds	r7, #44	@ 0x2c
 800e95c:	46bd      	mov	sp, r7
 800e95e:	bd90      	pop	{r4, r7, pc}
 800e960:	08014054 	.word	0x08014054
 800e964:	0801484c 	.word	0x0801484c
 800e968:	080140a8 	.word	0x080140a8

0800e96c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b082      	sub	sp, #8
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800e974:	f7fa ff0a 	bl	800978c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e978:	4b0a      	ldr	r3, [pc, #40]	@ (800e9a4 <tcpip_tcp_timer+0x38>)
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d103      	bne.n	800e988 <tcpip_tcp_timer+0x1c>
 800e980:	4b09      	ldr	r3, [pc, #36]	@ (800e9a8 <tcpip_tcp_timer+0x3c>)
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d005      	beq.n	800e994 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e988:	2200      	movs	r2, #0
 800e98a:	4908      	ldr	r1, [pc, #32]	@ (800e9ac <tcpip_tcp_timer+0x40>)
 800e98c:	20fa      	movs	r0, #250	@ 0xfa
 800e98e:	f000 f8f3 	bl	800eb78 <sys_timeout>
 800e992:	e003      	b.n	800e99c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800e994:	4b06      	ldr	r3, [pc, #24]	@ (800e9b0 <tcpip_tcp_timer+0x44>)
 800e996:	2200      	movs	r2, #0
 800e998:	601a      	str	r2, [r3, #0]
  }
}
 800e99a:	bf00      	nop
 800e99c:	bf00      	nop
 800e99e:	3708      	adds	r7, #8
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}
 800e9a4:	2000fdb4 	.word	0x2000fdb4
 800e9a8:	2000fdb8 	.word	0x2000fdb8
 800e9ac:	0800e96d 	.word	0x0800e96d
 800e9b0:	2000fe00 	.word	0x2000fe00

0800e9b4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e9b8:	4b0a      	ldr	r3, [pc, #40]	@ (800e9e4 <tcp_timer_needed+0x30>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d10f      	bne.n	800e9e0 <tcp_timer_needed+0x2c>
 800e9c0:	4b09      	ldr	r3, [pc, #36]	@ (800e9e8 <tcp_timer_needed+0x34>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d103      	bne.n	800e9d0 <tcp_timer_needed+0x1c>
 800e9c8:	4b08      	ldr	r3, [pc, #32]	@ (800e9ec <tcp_timer_needed+0x38>)
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d007      	beq.n	800e9e0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800e9d0:	4b04      	ldr	r3, [pc, #16]	@ (800e9e4 <tcp_timer_needed+0x30>)
 800e9d2:	2201      	movs	r2, #1
 800e9d4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	4905      	ldr	r1, [pc, #20]	@ (800e9f0 <tcp_timer_needed+0x3c>)
 800e9da:	20fa      	movs	r0, #250	@ 0xfa
 800e9dc:	f000 f8cc 	bl	800eb78 <sys_timeout>
  }
}
 800e9e0:	bf00      	nop
 800e9e2:	bd80      	pop	{r7, pc}
 800e9e4:	2000fe00 	.word	0x2000fe00
 800e9e8:	2000fdb4 	.word	0x2000fdb4
 800e9ec:	2000fdb8 	.word	0x2000fdb8
 800e9f0:	0800e96d 	.word	0x0800e96d

0800e9f4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b086      	sub	sp, #24
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	60f8      	str	r0, [r7, #12]
 800e9fc:	60b9      	str	r1, [r7, #8]
 800e9fe:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ea00:	200a      	movs	r0, #10
 800ea02:	f7f9 fcc1 	bl	8008388 <memp_malloc>
 800ea06:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800ea08:	693b      	ldr	r3, [r7, #16]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d109      	bne.n	800ea22 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ea0e:	693b      	ldr	r3, [r7, #16]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d151      	bne.n	800eab8 <sys_timeout_abs+0xc4>
 800ea14:	4b2a      	ldr	r3, [pc, #168]	@ (800eac0 <sys_timeout_abs+0xcc>)
 800ea16:	22be      	movs	r2, #190	@ 0xbe
 800ea18:	492a      	ldr	r1, [pc, #168]	@ (800eac4 <sys_timeout_abs+0xd0>)
 800ea1a:	482b      	ldr	r0, [pc, #172]	@ (800eac8 <sys_timeout_abs+0xd4>)
 800ea1c:	f002 ffda 	bl	80119d4 <iprintf>
    return;
 800ea20:	e04a      	b.n	800eab8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800ea22:	693b      	ldr	r3, [r7, #16]
 800ea24:	2200      	movs	r2, #0
 800ea26:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800ea28:	693b      	ldr	r3, [r7, #16]
 800ea2a:	68ba      	ldr	r2, [r7, #8]
 800ea2c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800ea2e:	693b      	ldr	r3, [r7, #16]
 800ea30:	687a      	ldr	r2, [r7, #4]
 800ea32:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	68fa      	ldr	r2, [r7, #12]
 800ea38:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ea3a:	4b24      	ldr	r3, [pc, #144]	@ (800eacc <sys_timeout_abs+0xd8>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d103      	bne.n	800ea4a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800ea42:	4a22      	ldr	r2, [pc, #136]	@ (800eacc <sys_timeout_abs+0xd8>)
 800ea44:	693b      	ldr	r3, [r7, #16]
 800ea46:	6013      	str	r3, [r2, #0]
    return;
 800ea48:	e037      	b.n	800eaba <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ea4a:	693b      	ldr	r3, [r7, #16]
 800ea4c:	685a      	ldr	r2, [r3, #4]
 800ea4e:	4b1f      	ldr	r3, [pc, #124]	@ (800eacc <sys_timeout_abs+0xd8>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	685b      	ldr	r3, [r3, #4]
 800ea54:	1ad3      	subs	r3, r2, r3
 800ea56:	0fdb      	lsrs	r3, r3, #31
 800ea58:	f003 0301 	and.w	r3, r3, #1
 800ea5c:	b2db      	uxtb	r3, r3
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d007      	beq.n	800ea72 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ea62:	4b1a      	ldr	r3, [pc, #104]	@ (800eacc <sys_timeout_abs+0xd8>)
 800ea64:	681a      	ldr	r2, [r3, #0]
 800ea66:	693b      	ldr	r3, [r7, #16]
 800ea68:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ea6a:	4a18      	ldr	r2, [pc, #96]	@ (800eacc <sys_timeout_abs+0xd8>)
 800ea6c:	693b      	ldr	r3, [r7, #16]
 800ea6e:	6013      	str	r3, [r2, #0]
 800ea70:	e023      	b.n	800eaba <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ea72:	4b16      	ldr	r3, [pc, #88]	@ (800eacc <sys_timeout_abs+0xd8>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	617b      	str	r3, [r7, #20]
 800ea78:	e01a      	b.n	800eab0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ea7a:	697b      	ldr	r3, [r7, #20]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d00b      	beq.n	800ea9a <sys_timeout_abs+0xa6>
 800ea82:	693b      	ldr	r3, [r7, #16]
 800ea84:	685a      	ldr	r2, [r3, #4]
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	685b      	ldr	r3, [r3, #4]
 800ea8c:	1ad3      	subs	r3, r2, r3
 800ea8e:	0fdb      	lsrs	r3, r3, #31
 800ea90:	f003 0301 	and.w	r3, r3, #1
 800ea94:	b2db      	uxtb	r3, r3
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d007      	beq.n	800eaaa <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ea9a:	697b      	ldr	r3, [r7, #20]
 800ea9c:	681a      	ldr	r2, [r3, #0]
 800ea9e:	693b      	ldr	r3, [r7, #16]
 800eaa0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800eaa2:	697b      	ldr	r3, [r7, #20]
 800eaa4:	693a      	ldr	r2, [r7, #16]
 800eaa6:	601a      	str	r2, [r3, #0]
        break;
 800eaa8:	e007      	b.n	800eaba <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800eaaa:	697b      	ldr	r3, [r7, #20]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	617b      	str	r3, [r7, #20]
 800eab0:	697b      	ldr	r3, [r7, #20]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d1e1      	bne.n	800ea7a <sys_timeout_abs+0x86>
 800eab6:	e000      	b.n	800eaba <sys_timeout_abs+0xc6>
    return;
 800eab8:	bf00      	nop
      }
    }
  }
}
 800eaba:	3718      	adds	r7, #24
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}
 800eac0:	08014870 	.word	0x08014870
 800eac4:	080148a4 	.word	0x080148a4
 800eac8:	080148e4 	.word	0x080148e4
 800eacc:	2000fdf8 	.word	0x2000fdf8

0800ead0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b086      	sub	sp, #24
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800eadc:	697b      	ldr	r3, [r7, #20]
 800eade:	685b      	ldr	r3, [r3, #4]
 800eae0:	4798      	blx	r3

  now = sys_now();
 800eae2:	f7f5 fb39 	bl	8004158 <sys_now>
 800eae6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800eae8:	697b      	ldr	r3, [r7, #20]
 800eaea:	681a      	ldr	r2, [r3, #0]
 800eaec:	4b0f      	ldr	r3, [pc, #60]	@ (800eb2c <lwip_cyclic_timer+0x5c>)
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	4413      	add	r3, r2
 800eaf2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800eaf4:	68fa      	ldr	r2, [r7, #12]
 800eaf6:	693b      	ldr	r3, [r7, #16]
 800eaf8:	1ad3      	subs	r3, r2, r3
 800eafa:	0fdb      	lsrs	r3, r3, #31
 800eafc:	f003 0301 	and.w	r3, r3, #1
 800eb00:	b2db      	uxtb	r3, r3
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d009      	beq.n	800eb1a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800eb06:	697b      	ldr	r3, [r7, #20]
 800eb08:	681a      	ldr	r2, [r3, #0]
 800eb0a:	693b      	ldr	r3, [r7, #16]
 800eb0c:	4413      	add	r3, r2
 800eb0e:	687a      	ldr	r2, [r7, #4]
 800eb10:	4907      	ldr	r1, [pc, #28]	@ (800eb30 <lwip_cyclic_timer+0x60>)
 800eb12:	4618      	mov	r0, r3
 800eb14:	f7ff ff6e 	bl	800e9f4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800eb18:	e004      	b.n	800eb24 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800eb1a:	687a      	ldr	r2, [r7, #4]
 800eb1c:	4904      	ldr	r1, [pc, #16]	@ (800eb30 <lwip_cyclic_timer+0x60>)
 800eb1e:	68f8      	ldr	r0, [r7, #12]
 800eb20:	f7ff ff68 	bl	800e9f4 <sys_timeout_abs>
}
 800eb24:	bf00      	nop
 800eb26:	3718      	adds	r7, #24
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}
 800eb2c:	2000fdfc 	.word	0x2000fdfc
 800eb30:	0800ead1 	.word	0x0800ead1

0800eb34 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b082      	sub	sp, #8
 800eb38:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800eb3a:	2301      	movs	r3, #1
 800eb3c:	607b      	str	r3, [r7, #4]
 800eb3e:	e00e      	b.n	800eb5e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800eb40:	4a0b      	ldr	r2, [pc, #44]	@ (800eb70 <sys_timeouts_init+0x3c>)
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	00db      	lsls	r3, r3, #3
 800eb4c:	4a08      	ldr	r2, [pc, #32]	@ (800eb70 <sys_timeouts_init+0x3c>)
 800eb4e:	4413      	add	r3, r2
 800eb50:	461a      	mov	r2, r3
 800eb52:	4908      	ldr	r1, [pc, #32]	@ (800eb74 <sys_timeouts_init+0x40>)
 800eb54:	f000 f810 	bl	800eb78 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	3301      	adds	r3, #1
 800eb5c:	607b      	str	r3, [r7, #4]
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2b02      	cmp	r3, #2
 800eb62:	d9ed      	bls.n	800eb40 <sys_timeouts_init+0xc>
  }
}
 800eb64:	bf00      	nop
 800eb66:	bf00      	nop
 800eb68:	3708      	adds	r7, #8
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}
 800eb6e:	bf00      	nop
 800eb70:	0801549c 	.word	0x0801549c
 800eb74:	0800ead1 	.word	0x0800ead1

0800eb78 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b086      	sub	sp, #24
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	60f8      	str	r0, [r7, #12]
 800eb80:	60b9      	str	r1, [r7, #8]
 800eb82:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb8a:	d306      	bcc.n	800eb9a <sys_timeout+0x22>
 800eb8c:	4b0a      	ldr	r3, [pc, #40]	@ (800ebb8 <sys_timeout+0x40>)
 800eb8e:	f240 1229 	movw	r2, #297	@ 0x129
 800eb92:	490a      	ldr	r1, [pc, #40]	@ (800ebbc <sys_timeout+0x44>)
 800eb94:	480a      	ldr	r0, [pc, #40]	@ (800ebc0 <sys_timeout+0x48>)
 800eb96:	f002 ff1d 	bl	80119d4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800eb9a:	f7f5 fadd 	bl	8004158 <sys_now>
 800eb9e:	4602      	mov	r2, r0
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	4413      	add	r3, r2
 800eba4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800eba6:	687a      	ldr	r2, [r7, #4]
 800eba8:	68b9      	ldr	r1, [r7, #8]
 800ebaa:	6978      	ldr	r0, [r7, #20]
 800ebac:	f7ff ff22 	bl	800e9f4 <sys_timeout_abs>
#endif
}
 800ebb0:	bf00      	nop
 800ebb2:	3718      	adds	r7, #24
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bd80      	pop	{r7, pc}
 800ebb8:	08014870 	.word	0x08014870
 800ebbc:	0801490c 	.word	0x0801490c
 800ebc0:	080148e4 	.word	0x080148e4

0800ebc4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b084      	sub	sp, #16
 800ebc8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800ebca:	f7f5 fac5 	bl	8004158 <sys_now>
 800ebce:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800ebd0:	4b17      	ldr	r3, [pc, #92]	@ (800ec30 <sys_check_timeouts+0x6c>)
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800ebd6:	68bb      	ldr	r3, [r7, #8]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d022      	beq.n	800ec22 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800ebdc:	68bb      	ldr	r3, [r7, #8]
 800ebde:	685b      	ldr	r3, [r3, #4]
 800ebe0:	68fa      	ldr	r2, [r7, #12]
 800ebe2:	1ad3      	subs	r3, r2, r3
 800ebe4:	0fdb      	lsrs	r3, r3, #31
 800ebe6:	f003 0301 	and.w	r3, r3, #1
 800ebea:	b2db      	uxtb	r3, r3
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d11a      	bne.n	800ec26 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800ebf0:	68bb      	ldr	r3, [r7, #8]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	4a0e      	ldr	r2, [pc, #56]	@ (800ec30 <sys_check_timeouts+0x6c>)
 800ebf6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800ebf8:	68bb      	ldr	r3, [r7, #8]
 800ebfa:	689b      	ldr	r3, [r3, #8]
 800ebfc:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800ebfe:	68bb      	ldr	r3, [r7, #8]
 800ec00:	68db      	ldr	r3, [r3, #12]
 800ec02:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800ec04:	68bb      	ldr	r3, [r7, #8]
 800ec06:	685b      	ldr	r3, [r3, #4]
 800ec08:	4a0a      	ldr	r2, [pc, #40]	@ (800ec34 <sys_check_timeouts+0x70>)
 800ec0a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ec0c:	68b9      	ldr	r1, [r7, #8]
 800ec0e:	200a      	movs	r0, #10
 800ec10:	f7f9 fc30 	bl	8008474 <memp_free>
    if (handler != NULL) {
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d0da      	beq.n	800ebd0 <sys_check_timeouts+0xc>
      handler(arg);
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6838      	ldr	r0, [r7, #0]
 800ec1e:	4798      	blx	r3
  do {
 800ec20:	e7d6      	b.n	800ebd0 <sys_check_timeouts+0xc>
      return;
 800ec22:	bf00      	nop
 800ec24:	e000      	b.n	800ec28 <sys_check_timeouts+0x64>
      return;
 800ec26:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800ec28:	3710      	adds	r7, #16
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}
 800ec2e:	bf00      	nop
 800ec30:	2000fdf8 	.word	0x2000fdf8
 800ec34:	2000fdfc 	.word	0x2000fdfc

0800ec38 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b082      	sub	sp, #8
 800ec3c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800ec3e:	4b16      	ldr	r3, [pc, #88]	@ (800ec98 <sys_timeouts_sleeptime+0x60>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d102      	bne.n	800ec4c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800ec46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ec4a:	e020      	b.n	800ec8e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800ec4c:	f7f5 fa84 	bl	8004158 <sys_now>
 800ec50:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800ec52:	4b11      	ldr	r3, [pc, #68]	@ (800ec98 <sys_timeouts_sleeptime+0x60>)
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	685a      	ldr	r2, [r3, #4]
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	1ad3      	subs	r3, r2, r3
 800ec5c:	0fdb      	lsrs	r3, r3, #31
 800ec5e:	f003 0301 	and.w	r3, r3, #1
 800ec62:	b2db      	uxtb	r3, r3
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d001      	beq.n	800ec6c <sys_timeouts_sleeptime+0x34>
    return 0;
 800ec68:	2300      	movs	r3, #0
 800ec6a:	e010      	b.n	800ec8e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800ec6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ec98 <sys_timeouts_sleeptime+0x60>)
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	685a      	ldr	r2, [r3, #4]
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	1ad3      	subs	r3, r2, r3
 800ec76:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	da06      	bge.n	800ec8c <sys_timeouts_sleeptime+0x54>
 800ec7e:	4b07      	ldr	r3, [pc, #28]	@ (800ec9c <sys_timeouts_sleeptime+0x64>)
 800ec80:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800ec84:	4906      	ldr	r1, [pc, #24]	@ (800eca0 <sys_timeouts_sleeptime+0x68>)
 800ec86:	4807      	ldr	r0, [pc, #28]	@ (800eca4 <sys_timeouts_sleeptime+0x6c>)
 800ec88:	f002 fea4 	bl	80119d4 <iprintf>
    return ret;
 800ec8c:	683b      	ldr	r3, [r7, #0]
  }
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3708      	adds	r7, #8
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
 800ec96:	bf00      	nop
 800ec98:	2000fdf8 	.word	0x2000fdf8
 800ec9c:	08014870 	.word	0x08014870
 800eca0:	08014944 	.word	0x08014944
 800eca4:	080148e4 	.word	0x080148e4

0800eca8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ecac:	f002 fd92 	bl	80117d4 <rand>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	b29b      	uxth	r3, r3
 800ecb4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ecb8:	b29b      	uxth	r3, r3
 800ecba:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800ecbe:	b29a      	uxth	r2, r3
 800ecc0:	4b01      	ldr	r3, [pc, #4]	@ (800ecc8 <udp_init+0x20>)
 800ecc2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ecc4:	bf00      	nop
 800ecc6:	bd80      	pop	{r7, pc}
 800ecc8:	2000002c 	.word	0x2000002c

0800eccc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b084      	sub	sp, #16
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	60f8      	str	r0, [r7, #12]
 800ecd4:	60b9      	str	r1, [r7, #8]
 800ecd6:	4613      	mov	r3, r2
 800ecd8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d105      	bne.n	800ecec <udp_input_local_match+0x20>
 800ece0:	4b27      	ldr	r3, [pc, #156]	@ (800ed80 <udp_input_local_match+0xb4>)
 800ece2:	2287      	movs	r2, #135	@ 0x87
 800ece4:	4927      	ldr	r1, [pc, #156]	@ (800ed84 <udp_input_local_match+0xb8>)
 800ece6:	4828      	ldr	r0, [pc, #160]	@ (800ed88 <udp_input_local_match+0xbc>)
 800ece8:	f002 fe74 	bl	80119d4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ecec:	68bb      	ldr	r3, [r7, #8]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d105      	bne.n	800ecfe <udp_input_local_match+0x32>
 800ecf2:	4b23      	ldr	r3, [pc, #140]	@ (800ed80 <udp_input_local_match+0xb4>)
 800ecf4:	2288      	movs	r2, #136	@ 0x88
 800ecf6:	4925      	ldr	r1, [pc, #148]	@ (800ed8c <udp_input_local_match+0xc0>)
 800ecf8:	4823      	ldr	r0, [pc, #140]	@ (800ed88 <udp_input_local_match+0xbc>)
 800ecfa:	f002 fe6b 	bl	80119d4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	7a1b      	ldrb	r3, [r3, #8]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d00b      	beq.n	800ed1e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	7a1a      	ldrb	r2, [r3, #8]
 800ed0a:	4b21      	ldr	r3, [pc, #132]	@ (800ed90 <udp_input_local_match+0xc4>)
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ed12:	3301      	adds	r3, #1
 800ed14:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ed16:	429a      	cmp	r2, r3
 800ed18:	d001      	beq.n	800ed1e <udp_input_local_match+0x52>
    return 0;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	e02b      	b.n	800ed76 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ed1e:	79fb      	ldrb	r3, [r7, #7]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d018      	beq.n	800ed56 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d013      	beq.n	800ed52 <udp_input_local_match+0x86>
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d00f      	beq.n	800ed52 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ed32:	4b17      	ldr	r3, [pc, #92]	@ (800ed90 <udp_input_local_match+0xc4>)
 800ed34:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ed36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ed3a:	d00a      	beq.n	800ed52 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	681a      	ldr	r2, [r3, #0]
 800ed40:	4b13      	ldr	r3, [pc, #76]	@ (800ed90 <udp_input_local_match+0xc4>)
 800ed42:	695b      	ldr	r3, [r3, #20]
 800ed44:	405a      	eors	r2, r3
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	3308      	adds	r3, #8
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d110      	bne.n	800ed74 <udp_input_local_match+0xa8>
          return 1;
 800ed52:	2301      	movs	r3, #1
 800ed54:	e00f      	b.n	800ed76 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d009      	beq.n	800ed70 <udp_input_local_match+0xa4>
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d005      	beq.n	800ed70 <udp_input_local_match+0xa4>
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	681a      	ldr	r2, [r3, #0]
 800ed68:	4b09      	ldr	r3, [pc, #36]	@ (800ed90 <udp_input_local_match+0xc4>)
 800ed6a:	695b      	ldr	r3, [r3, #20]
 800ed6c:	429a      	cmp	r2, r3
 800ed6e:	d101      	bne.n	800ed74 <udp_input_local_match+0xa8>
        return 1;
 800ed70:	2301      	movs	r3, #1
 800ed72:	e000      	b.n	800ed76 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800ed74:	2300      	movs	r3, #0
}
 800ed76:	4618      	mov	r0, r3
 800ed78:	3710      	adds	r7, #16
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}
 800ed7e:	bf00      	nop
 800ed80:	08014958 	.word	0x08014958
 800ed84:	08014988 	.word	0x08014988
 800ed88:	080149ac 	.word	0x080149ac
 800ed8c:	080149d4 	.word	0x080149d4
 800ed90:	200092d8 	.word	0x200092d8

0800ed94 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ed94:	b590      	push	{r4, r7, lr}
 800ed96:	b08d      	sub	sp, #52	@ 0x34
 800ed98:	af02      	add	r7, sp, #8
 800ed9a:	6078      	str	r0, [r7, #4]
 800ed9c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ed9e:	2300      	movs	r3, #0
 800eda0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d105      	bne.n	800edb4 <udp_input+0x20>
 800eda8:	4b7c      	ldr	r3, [pc, #496]	@ (800ef9c <udp_input+0x208>)
 800edaa:	22cf      	movs	r2, #207	@ 0xcf
 800edac:	497c      	ldr	r1, [pc, #496]	@ (800efa0 <udp_input+0x20c>)
 800edae:	487d      	ldr	r0, [pc, #500]	@ (800efa4 <udp_input+0x210>)
 800edb0:	f002 fe10 	bl	80119d4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d105      	bne.n	800edc6 <udp_input+0x32>
 800edba:	4b78      	ldr	r3, [pc, #480]	@ (800ef9c <udp_input+0x208>)
 800edbc:	22d0      	movs	r2, #208	@ 0xd0
 800edbe:	497a      	ldr	r1, [pc, #488]	@ (800efa8 <udp_input+0x214>)
 800edc0:	4878      	ldr	r0, [pc, #480]	@ (800efa4 <udp_input+0x210>)
 800edc2:	f002 fe07 	bl	80119d4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	895b      	ldrh	r3, [r3, #10]
 800edca:	2b07      	cmp	r3, #7
 800edcc:	d803      	bhi.n	800edd6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	f7fa f9f8 	bl	80091c4 <pbuf_free>
    goto end;
 800edd4:	e0de      	b.n	800ef94 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	685b      	ldr	r3, [r3, #4]
 800edda:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800eddc:	4b73      	ldr	r3, [pc, #460]	@ (800efac <udp_input+0x218>)
 800edde:	695b      	ldr	r3, [r3, #20]
 800ede0:	4a72      	ldr	r2, [pc, #456]	@ (800efac <udp_input+0x218>)
 800ede2:	6812      	ldr	r2, [r2, #0]
 800ede4:	4611      	mov	r1, r2
 800ede6:	4618      	mov	r0, r3
 800ede8:	f001 fc88 	bl	80106fc <ip4_addr_isbroadcast_u32>
 800edec:	4603      	mov	r3, r0
 800edee:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	881b      	ldrh	r3, [r3, #0]
 800edf4:	b29b      	uxth	r3, r3
 800edf6:	4618      	mov	r0, r3
 800edf8:	f7f8 fde2 	bl	80079c0 <lwip_htons>
 800edfc:	4603      	mov	r3, r0
 800edfe:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800ee00:	697b      	ldr	r3, [r7, #20]
 800ee02:	885b      	ldrh	r3, [r3, #2]
 800ee04:	b29b      	uxth	r3, r3
 800ee06:	4618      	mov	r0, r3
 800ee08:	f7f8 fdda 	bl	80079c0 <lwip_htons>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800ee10:	2300      	movs	r3, #0
 800ee12:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800ee14:	2300      	movs	r3, #0
 800ee16:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee1c:	4b64      	ldr	r3, [pc, #400]	@ (800efb0 <udp_input+0x21c>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	627b      	str	r3, [r7, #36]	@ 0x24
 800ee22:	e054      	b.n	800eece <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800ee24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee26:	8a5b      	ldrh	r3, [r3, #18]
 800ee28:	89fa      	ldrh	r2, [r7, #14]
 800ee2a:	429a      	cmp	r2, r3
 800ee2c:	d14a      	bne.n	800eec4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800ee2e:	7cfb      	ldrb	r3, [r7, #19]
 800ee30:	461a      	mov	r2, r3
 800ee32:	6839      	ldr	r1, [r7, #0]
 800ee34:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ee36:	f7ff ff49 	bl	800eccc <udp_input_local_match>
 800ee3a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d041      	beq.n	800eec4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800ee40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee42:	7c1b      	ldrb	r3, [r3, #16]
 800ee44:	f003 0304 	and.w	r3, r3, #4
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d11d      	bne.n	800ee88 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800ee4c:	69fb      	ldr	r3, [r7, #28]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d102      	bne.n	800ee58 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800ee52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee54:	61fb      	str	r3, [r7, #28]
 800ee56:	e017      	b.n	800ee88 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800ee58:	7cfb      	ldrb	r3, [r7, #19]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d014      	beq.n	800ee88 <udp_input+0xf4>
 800ee5e:	4b53      	ldr	r3, [pc, #332]	@ (800efac <udp_input+0x218>)
 800ee60:	695b      	ldr	r3, [r3, #20]
 800ee62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ee66:	d10f      	bne.n	800ee88 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800ee68:	69fb      	ldr	r3, [r7, #28]
 800ee6a:	681a      	ldr	r2, [r3, #0]
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	3304      	adds	r3, #4
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	429a      	cmp	r2, r3
 800ee74:	d008      	beq.n	800ee88 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800ee76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee78:	681a      	ldr	r2, [r3, #0]
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	3304      	adds	r3, #4
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	429a      	cmp	r2, r3
 800ee82:	d101      	bne.n	800ee88 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800ee84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee86:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800ee88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee8a:	8a9b      	ldrh	r3, [r3, #20]
 800ee8c:	8a3a      	ldrh	r2, [r7, #16]
 800ee8e:	429a      	cmp	r2, r3
 800ee90:	d118      	bne.n	800eec4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ee92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee94:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d005      	beq.n	800eea6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800ee9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee9c:	685a      	ldr	r2, [r3, #4]
 800ee9e:	4b43      	ldr	r3, [pc, #268]	@ (800efac <udp_input+0x218>)
 800eea0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800eea2:	429a      	cmp	r2, r3
 800eea4:	d10e      	bne.n	800eec4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800eea6:	6a3b      	ldr	r3, [r7, #32]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d014      	beq.n	800eed6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800eeac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeae:	68da      	ldr	r2, [r3, #12]
 800eeb0:	6a3b      	ldr	r3, [r7, #32]
 800eeb2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800eeb4:	4b3e      	ldr	r3, [pc, #248]	@ (800efb0 <udp_input+0x21c>)
 800eeb6:	681a      	ldr	r2, [r3, #0]
 800eeb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeba:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800eebc:	4a3c      	ldr	r2, [pc, #240]	@ (800efb0 <udp_input+0x21c>)
 800eebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eec0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800eec2:	e008      	b.n	800eed6 <udp_input+0x142>
      }
    }

    prev = pcb;
 800eec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eec6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800eec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeca:	68db      	ldr	r3, [r3, #12]
 800eecc:	627b      	str	r3, [r7, #36]	@ 0x24
 800eece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d1a7      	bne.n	800ee24 <udp_input+0x90>
 800eed4:	e000      	b.n	800eed8 <udp_input+0x144>
        break;
 800eed6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800eed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d101      	bne.n	800eee2 <udp_input+0x14e>
    pcb = uncon_pcb;
 800eede:	69fb      	ldr	r3, [r7, #28]
 800eee0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800eee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d002      	beq.n	800eeee <udp_input+0x15a>
    for_us = 1;
 800eee8:	2301      	movs	r3, #1
 800eeea:	76fb      	strb	r3, [r7, #27]
 800eeec:	e00a      	b.n	800ef04 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	3304      	adds	r3, #4
 800eef2:	681a      	ldr	r2, [r3, #0]
 800eef4:	4b2d      	ldr	r3, [pc, #180]	@ (800efac <udp_input+0x218>)
 800eef6:	695b      	ldr	r3, [r3, #20]
 800eef8:	429a      	cmp	r2, r3
 800eefa:	bf0c      	ite	eq
 800eefc:	2301      	moveq	r3, #1
 800eefe:	2300      	movne	r3, #0
 800ef00:	b2db      	uxtb	r3, r3
 800ef02:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800ef04:	7efb      	ldrb	r3, [r7, #27]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d041      	beq.n	800ef8e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ef0a:	2108      	movs	r1, #8
 800ef0c:	6878      	ldr	r0, [r7, #4]
 800ef0e:	f7fa f8d3 	bl	80090b8 <pbuf_remove_header>
 800ef12:	4603      	mov	r3, r0
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d00a      	beq.n	800ef2e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800ef18:	4b20      	ldr	r3, [pc, #128]	@ (800ef9c <udp_input+0x208>)
 800ef1a:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800ef1e:	4925      	ldr	r1, [pc, #148]	@ (800efb4 <udp_input+0x220>)
 800ef20:	4820      	ldr	r0, [pc, #128]	@ (800efa4 <udp_input+0x210>)
 800ef22:	f002 fd57 	bl	80119d4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	f7fa f94c 	bl	80091c4 <pbuf_free>
      goto end;
 800ef2c:	e032      	b.n	800ef94 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800ef2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d012      	beq.n	800ef5a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800ef34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef36:	699b      	ldr	r3, [r3, #24]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d00a      	beq.n	800ef52 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ef3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef3e:	699c      	ldr	r4, [r3, #24]
 800ef40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef42:	69d8      	ldr	r0, [r3, #28]
 800ef44:	8a3b      	ldrh	r3, [r7, #16]
 800ef46:	9300      	str	r3, [sp, #0]
 800ef48:	4b1b      	ldr	r3, [pc, #108]	@ (800efb8 <udp_input+0x224>)
 800ef4a:	687a      	ldr	r2, [r7, #4]
 800ef4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ef4e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800ef50:	e021      	b.n	800ef96 <udp_input+0x202>
        pbuf_free(p);
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f7fa f936 	bl	80091c4 <pbuf_free>
        goto end;
 800ef58:	e01c      	b.n	800ef94 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ef5a:	7cfb      	ldrb	r3, [r7, #19]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d112      	bne.n	800ef86 <udp_input+0x1f2>
 800ef60:	4b12      	ldr	r3, [pc, #72]	@ (800efac <udp_input+0x218>)
 800ef62:	695b      	ldr	r3, [r3, #20]
 800ef64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ef68:	2be0      	cmp	r3, #224	@ 0xe0
 800ef6a:	d00c      	beq.n	800ef86 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800ef6c:	4b0f      	ldr	r3, [pc, #60]	@ (800efac <udp_input+0x218>)
 800ef6e:	899b      	ldrh	r3, [r3, #12]
 800ef70:	3308      	adds	r3, #8
 800ef72:	b29b      	uxth	r3, r3
 800ef74:	b21b      	sxth	r3, r3
 800ef76:	4619      	mov	r1, r3
 800ef78:	6878      	ldr	r0, [r7, #4]
 800ef7a:	f7fa f910 	bl	800919e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800ef7e:	2103      	movs	r1, #3
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	f001 f89b 	bl	80100bc <icmp_dest_unreach>
      pbuf_free(p);
 800ef86:	6878      	ldr	r0, [r7, #4]
 800ef88:	f7fa f91c 	bl	80091c4 <pbuf_free>
  return;
 800ef8c:	e003      	b.n	800ef96 <udp_input+0x202>
    pbuf_free(p);
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f7fa f918 	bl	80091c4 <pbuf_free>
  return;
 800ef94:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ef96:	372c      	adds	r7, #44	@ 0x2c
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd90      	pop	{r4, r7, pc}
 800ef9c:	08014958 	.word	0x08014958
 800efa0:	080149fc 	.word	0x080149fc
 800efa4:	080149ac 	.word	0x080149ac
 800efa8:	08014a14 	.word	0x08014a14
 800efac:	200092d8 	.word	0x200092d8
 800efb0:	2000fe04 	.word	0x2000fe04
 800efb4:	08014a30 	.word	0x08014a30
 800efb8:	200092e8 	.word	0x200092e8

0800efbc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800efbc:	b480      	push	{r7}
 800efbe:	b085      	sub	sp, #20
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
 800efc4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d01e      	beq.n	800f00a <udp_netif_ip_addr_changed+0x4e>
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d01a      	beq.n	800f00a <udp_netif_ip_addr_changed+0x4e>
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d017      	beq.n	800f00a <udp_netif_ip_addr_changed+0x4e>
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d013      	beq.n	800f00a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800efe2:	4b0d      	ldr	r3, [pc, #52]	@ (800f018 <udp_netif_ip_addr_changed+0x5c>)
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	60fb      	str	r3, [r7, #12]
 800efe8:	e00c      	b.n	800f004 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	681a      	ldr	r2, [r3, #0]
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d103      	bne.n	800effe <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	681a      	ldr	r2, [r3, #0]
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	68db      	ldr	r3, [r3, #12]
 800f002:	60fb      	str	r3, [r7, #12]
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d1ef      	bne.n	800efea <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800f00a:	bf00      	nop
 800f00c:	3714      	adds	r7, #20
 800f00e:	46bd      	mov	sp, r7
 800f010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f014:	4770      	bx	lr
 800f016:	bf00      	nop
 800f018:	2000fe04 	.word	0x2000fe04

0800f01c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b082      	sub	sp, #8
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800f024:	4915      	ldr	r1, [pc, #84]	@ (800f07c <etharp_free_entry+0x60>)
 800f026:	687a      	ldr	r2, [r7, #4]
 800f028:	4613      	mov	r3, r2
 800f02a:	005b      	lsls	r3, r3, #1
 800f02c:	4413      	add	r3, r2
 800f02e:	00db      	lsls	r3, r3, #3
 800f030:	440b      	add	r3, r1
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d013      	beq.n	800f060 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800f038:	4910      	ldr	r1, [pc, #64]	@ (800f07c <etharp_free_entry+0x60>)
 800f03a:	687a      	ldr	r2, [r7, #4]
 800f03c:	4613      	mov	r3, r2
 800f03e:	005b      	lsls	r3, r3, #1
 800f040:	4413      	add	r3, r2
 800f042:	00db      	lsls	r3, r3, #3
 800f044:	440b      	add	r3, r1
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	4618      	mov	r0, r3
 800f04a:	f7fa f8bb 	bl	80091c4 <pbuf_free>
    arp_table[i].q = NULL;
 800f04e:	490b      	ldr	r1, [pc, #44]	@ (800f07c <etharp_free_entry+0x60>)
 800f050:	687a      	ldr	r2, [r7, #4]
 800f052:	4613      	mov	r3, r2
 800f054:	005b      	lsls	r3, r3, #1
 800f056:	4413      	add	r3, r2
 800f058:	00db      	lsls	r3, r3, #3
 800f05a:	440b      	add	r3, r1
 800f05c:	2200      	movs	r2, #0
 800f05e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f060:	4906      	ldr	r1, [pc, #24]	@ (800f07c <etharp_free_entry+0x60>)
 800f062:	687a      	ldr	r2, [r7, #4]
 800f064:	4613      	mov	r3, r2
 800f066:	005b      	lsls	r3, r3, #1
 800f068:	4413      	add	r3, r2
 800f06a:	00db      	lsls	r3, r3, #3
 800f06c:	440b      	add	r3, r1
 800f06e:	3314      	adds	r3, #20
 800f070:	2200      	movs	r2, #0
 800f072:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800f074:	bf00      	nop
 800f076:	3708      	adds	r7, #8
 800f078:	46bd      	mov	sp, r7
 800f07a:	bd80      	pop	{r7, pc}
 800f07c:	2000fe08 	.word	0x2000fe08

0800f080 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b082      	sub	sp, #8
 800f084:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f086:	2300      	movs	r3, #0
 800f088:	607b      	str	r3, [r7, #4]
 800f08a:	e096      	b.n	800f1ba <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800f08c:	494f      	ldr	r1, [pc, #316]	@ (800f1cc <etharp_tmr+0x14c>)
 800f08e:	687a      	ldr	r2, [r7, #4]
 800f090:	4613      	mov	r3, r2
 800f092:	005b      	lsls	r3, r3, #1
 800f094:	4413      	add	r3, r2
 800f096:	00db      	lsls	r3, r3, #3
 800f098:	440b      	add	r3, r1
 800f09a:	3314      	adds	r3, #20
 800f09c:	781b      	ldrb	r3, [r3, #0]
 800f09e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800f0a0:	78fb      	ldrb	r3, [r7, #3]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	f000 8086 	beq.w	800f1b4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800f0a8:	4948      	ldr	r1, [pc, #288]	@ (800f1cc <etharp_tmr+0x14c>)
 800f0aa:	687a      	ldr	r2, [r7, #4]
 800f0ac:	4613      	mov	r3, r2
 800f0ae:	005b      	lsls	r3, r3, #1
 800f0b0:	4413      	add	r3, r2
 800f0b2:	00db      	lsls	r3, r3, #3
 800f0b4:	440b      	add	r3, r1
 800f0b6:	3312      	adds	r3, #18
 800f0b8:	881b      	ldrh	r3, [r3, #0]
 800f0ba:	3301      	adds	r3, #1
 800f0bc:	b298      	uxth	r0, r3
 800f0be:	4943      	ldr	r1, [pc, #268]	@ (800f1cc <etharp_tmr+0x14c>)
 800f0c0:	687a      	ldr	r2, [r7, #4]
 800f0c2:	4613      	mov	r3, r2
 800f0c4:	005b      	lsls	r3, r3, #1
 800f0c6:	4413      	add	r3, r2
 800f0c8:	00db      	lsls	r3, r3, #3
 800f0ca:	440b      	add	r3, r1
 800f0cc:	3312      	adds	r3, #18
 800f0ce:	4602      	mov	r2, r0
 800f0d0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f0d2:	493e      	ldr	r1, [pc, #248]	@ (800f1cc <etharp_tmr+0x14c>)
 800f0d4:	687a      	ldr	r2, [r7, #4]
 800f0d6:	4613      	mov	r3, r2
 800f0d8:	005b      	lsls	r3, r3, #1
 800f0da:	4413      	add	r3, r2
 800f0dc:	00db      	lsls	r3, r3, #3
 800f0de:	440b      	add	r3, r1
 800f0e0:	3312      	adds	r3, #18
 800f0e2:	881b      	ldrh	r3, [r3, #0]
 800f0e4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800f0e8:	d215      	bcs.n	800f116 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f0ea:	4938      	ldr	r1, [pc, #224]	@ (800f1cc <etharp_tmr+0x14c>)
 800f0ec:	687a      	ldr	r2, [r7, #4]
 800f0ee:	4613      	mov	r3, r2
 800f0f0:	005b      	lsls	r3, r3, #1
 800f0f2:	4413      	add	r3, r2
 800f0f4:	00db      	lsls	r3, r3, #3
 800f0f6:	440b      	add	r3, r1
 800f0f8:	3314      	adds	r3, #20
 800f0fa:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f0fc:	2b01      	cmp	r3, #1
 800f0fe:	d10e      	bne.n	800f11e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800f100:	4932      	ldr	r1, [pc, #200]	@ (800f1cc <etharp_tmr+0x14c>)
 800f102:	687a      	ldr	r2, [r7, #4]
 800f104:	4613      	mov	r3, r2
 800f106:	005b      	lsls	r3, r3, #1
 800f108:	4413      	add	r3, r2
 800f10a:	00db      	lsls	r3, r3, #3
 800f10c:	440b      	add	r3, r1
 800f10e:	3312      	adds	r3, #18
 800f110:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f112:	2b04      	cmp	r3, #4
 800f114:	d903      	bls.n	800f11e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800f116:	6878      	ldr	r0, [r7, #4]
 800f118:	f7ff ff80 	bl	800f01c <etharp_free_entry>
 800f11c:	e04a      	b.n	800f1b4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800f11e:	492b      	ldr	r1, [pc, #172]	@ (800f1cc <etharp_tmr+0x14c>)
 800f120:	687a      	ldr	r2, [r7, #4]
 800f122:	4613      	mov	r3, r2
 800f124:	005b      	lsls	r3, r3, #1
 800f126:	4413      	add	r3, r2
 800f128:	00db      	lsls	r3, r3, #3
 800f12a:	440b      	add	r3, r1
 800f12c:	3314      	adds	r3, #20
 800f12e:	781b      	ldrb	r3, [r3, #0]
 800f130:	2b03      	cmp	r3, #3
 800f132:	d10a      	bne.n	800f14a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800f134:	4925      	ldr	r1, [pc, #148]	@ (800f1cc <etharp_tmr+0x14c>)
 800f136:	687a      	ldr	r2, [r7, #4]
 800f138:	4613      	mov	r3, r2
 800f13a:	005b      	lsls	r3, r3, #1
 800f13c:	4413      	add	r3, r2
 800f13e:	00db      	lsls	r3, r3, #3
 800f140:	440b      	add	r3, r1
 800f142:	3314      	adds	r3, #20
 800f144:	2204      	movs	r2, #4
 800f146:	701a      	strb	r2, [r3, #0]
 800f148:	e034      	b.n	800f1b4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800f14a:	4920      	ldr	r1, [pc, #128]	@ (800f1cc <etharp_tmr+0x14c>)
 800f14c:	687a      	ldr	r2, [r7, #4]
 800f14e:	4613      	mov	r3, r2
 800f150:	005b      	lsls	r3, r3, #1
 800f152:	4413      	add	r3, r2
 800f154:	00db      	lsls	r3, r3, #3
 800f156:	440b      	add	r3, r1
 800f158:	3314      	adds	r3, #20
 800f15a:	781b      	ldrb	r3, [r3, #0]
 800f15c:	2b04      	cmp	r3, #4
 800f15e:	d10a      	bne.n	800f176 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800f160:	491a      	ldr	r1, [pc, #104]	@ (800f1cc <etharp_tmr+0x14c>)
 800f162:	687a      	ldr	r2, [r7, #4]
 800f164:	4613      	mov	r3, r2
 800f166:	005b      	lsls	r3, r3, #1
 800f168:	4413      	add	r3, r2
 800f16a:	00db      	lsls	r3, r3, #3
 800f16c:	440b      	add	r3, r1
 800f16e:	3314      	adds	r3, #20
 800f170:	2202      	movs	r2, #2
 800f172:	701a      	strb	r2, [r3, #0]
 800f174:	e01e      	b.n	800f1b4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f176:	4915      	ldr	r1, [pc, #84]	@ (800f1cc <etharp_tmr+0x14c>)
 800f178:	687a      	ldr	r2, [r7, #4]
 800f17a:	4613      	mov	r3, r2
 800f17c:	005b      	lsls	r3, r3, #1
 800f17e:	4413      	add	r3, r2
 800f180:	00db      	lsls	r3, r3, #3
 800f182:	440b      	add	r3, r1
 800f184:	3314      	adds	r3, #20
 800f186:	781b      	ldrb	r3, [r3, #0]
 800f188:	2b01      	cmp	r3, #1
 800f18a:	d113      	bne.n	800f1b4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800f18c:	490f      	ldr	r1, [pc, #60]	@ (800f1cc <etharp_tmr+0x14c>)
 800f18e:	687a      	ldr	r2, [r7, #4]
 800f190:	4613      	mov	r3, r2
 800f192:	005b      	lsls	r3, r3, #1
 800f194:	4413      	add	r3, r2
 800f196:	00db      	lsls	r3, r3, #3
 800f198:	440b      	add	r3, r1
 800f19a:	3308      	adds	r3, #8
 800f19c:	6818      	ldr	r0, [r3, #0]
 800f19e:	687a      	ldr	r2, [r7, #4]
 800f1a0:	4613      	mov	r3, r2
 800f1a2:	005b      	lsls	r3, r3, #1
 800f1a4:	4413      	add	r3, r2
 800f1a6:	00db      	lsls	r3, r3, #3
 800f1a8:	4a08      	ldr	r2, [pc, #32]	@ (800f1cc <etharp_tmr+0x14c>)
 800f1aa:	4413      	add	r3, r2
 800f1ac:	3304      	adds	r3, #4
 800f1ae:	4619      	mov	r1, r3
 800f1b0:	f000 fe6e 	bl	800fe90 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	3301      	adds	r3, #1
 800f1b8:	607b      	str	r3, [r7, #4]
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2b09      	cmp	r3, #9
 800f1be:	f77f af65 	ble.w	800f08c <etharp_tmr+0xc>
      }
    }
  }
}
 800f1c2:	bf00      	nop
 800f1c4:	bf00      	nop
 800f1c6:	3708      	adds	r7, #8
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bd80      	pop	{r7, pc}
 800f1cc:	2000fe08 	.word	0x2000fe08

0800f1d0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b08a      	sub	sp, #40	@ 0x28
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	60f8      	str	r0, [r7, #12]
 800f1d8:	460b      	mov	r3, r1
 800f1da:	607a      	str	r2, [r7, #4]
 800f1dc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800f1de:	230a      	movs	r3, #10
 800f1e0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f1e2:	230a      	movs	r3, #10
 800f1e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800f1e6:	230a      	movs	r3, #10
 800f1e8:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800f1ee:	230a      	movs	r3, #10
 800f1f0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	83bb      	strh	r3, [r7, #28]
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	837b      	strh	r3, [r7, #26]
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f1fe:	2300      	movs	r3, #0
 800f200:	843b      	strh	r3, [r7, #32]
 800f202:	e0ae      	b.n	800f362 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800f204:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f208:	49a6      	ldr	r1, [pc, #664]	@ (800f4a4 <etharp_find_entry+0x2d4>)
 800f20a:	4613      	mov	r3, r2
 800f20c:	005b      	lsls	r3, r3, #1
 800f20e:	4413      	add	r3, r2
 800f210:	00db      	lsls	r3, r3, #3
 800f212:	440b      	add	r3, r1
 800f214:	3314      	adds	r3, #20
 800f216:	781b      	ldrb	r3, [r3, #0]
 800f218:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f21a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800f21e:	2b0a      	cmp	r3, #10
 800f220:	d105      	bne.n	800f22e <etharp_find_entry+0x5e>
 800f222:	7dfb      	ldrb	r3, [r7, #23]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d102      	bne.n	800f22e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800f228:	8c3b      	ldrh	r3, [r7, #32]
 800f22a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800f22c:	e095      	b.n	800f35a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800f22e:	7dfb      	ldrb	r3, [r7, #23]
 800f230:	2b00      	cmp	r3, #0
 800f232:	f000 8092 	beq.w	800f35a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800f236:	7dfb      	ldrb	r3, [r7, #23]
 800f238:	2b01      	cmp	r3, #1
 800f23a:	d009      	beq.n	800f250 <etharp_find_entry+0x80>
 800f23c:	7dfb      	ldrb	r3, [r7, #23]
 800f23e:	2b01      	cmp	r3, #1
 800f240:	d806      	bhi.n	800f250 <etharp_find_entry+0x80>
 800f242:	4b99      	ldr	r3, [pc, #612]	@ (800f4a8 <etharp_find_entry+0x2d8>)
 800f244:	f240 1223 	movw	r2, #291	@ 0x123
 800f248:	4998      	ldr	r1, [pc, #608]	@ (800f4ac <etharp_find_entry+0x2dc>)
 800f24a:	4899      	ldr	r0, [pc, #612]	@ (800f4b0 <etharp_find_entry+0x2e0>)
 800f24c:	f002 fbc2 	bl	80119d4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d020      	beq.n	800f298 <etharp_find_entry+0xc8>
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	6819      	ldr	r1, [r3, #0]
 800f25a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f25e:	4891      	ldr	r0, [pc, #580]	@ (800f4a4 <etharp_find_entry+0x2d4>)
 800f260:	4613      	mov	r3, r2
 800f262:	005b      	lsls	r3, r3, #1
 800f264:	4413      	add	r3, r2
 800f266:	00db      	lsls	r3, r3, #3
 800f268:	4403      	add	r3, r0
 800f26a:	3304      	adds	r3, #4
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	4299      	cmp	r1, r3
 800f270:	d112      	bne.n	800f298 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d00c      	beq.n	800f292 <etharp_find_entry+0xc2>
 800f278:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f27c:	4989      	ldr	r1, [pc, #548]	@ (800f4a4 <etharp_find_entry+0x2d4>)
 800f27e:	4613      	mov	r3, r2
 800f280:	005b      	lsls	r3, r3, #1
 800f282:	4413      	add	r3, r2
 800f284:	00db      	lsls	r3, r3, #3
 800f286:	440b      	add	r3, r1
 800f288:	3308      	adds	r3, #8
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	687a      	ldr	r2, [r7, #4]
 800f28e:	429a      	cmp	r2, r3
 800f290:	d102      	bne.n	800f298 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800f292:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f296:	e100      	b.n	800f49a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800f298:	7dfb      	ldrb	r3, [r7, #23]
 800f29a:	2b01      	cmp	r3, #1
 800f29c:	d140      	bne.n	800f320 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800f29e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f2a2:	4980      	ldr	r1, [pc, #512]	@ (800f4a4 <etharp_find_entry+0x2d4>)
 800f2a4:	4613      	mov	r3, r2
 800f2a6:	005b      	lsls	r3, r3, #1
 800f2a8:	4413      	add	r3, r2
 800f2aa:	00db      	lsls	r3, r3, #3
 800f2ac:	440b      	add	r3, r1
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d01a      	beq.n	800f2ea <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800f2b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f2b8:	497a      	ldr	r1, [pc, #488]	@ (800f4a4 <etharp_find_entry+0x2d4>)
 800f2ba:	4613      	mov	r3, r2
 800f2bc:	005b      	lsls	r3, r3, #1
 800f2be:	4413      	add	r3, r2
 800f2c0:	00db      	lsls	r3, r3, #3
 800f2c2:	440b      	add	r3, r1
 800f2c4:	3312      	adds	r3, #18
 800f2c6:	881b      	ldrh	r3, [r3, #0]
 800f2c8:	8bba      	ldrh	r2, [r7, #28]
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	d845      	bhi.n	800f35a <etharp_find_entry+0x18a>
            old_queue = i;
 800f2ce:	8c3b      	ldrh	r3, [r7, #32]
 800f2d0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800f2d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f2d6:	4973      	ldr	r1, [pc, #460]	@ (800f4a4 <etharp_find_entry+0x2d4>)
 800f2d8:	4613      	mov	r3, r2
 800f2da:	005b      	lsls	r3, r3, #1
 800f2dc:	4413      	add	r3, r2
 800f2de:	00db      	lsls	r3, r3, #3
 800f2e0:	440b      	add	r3, r1
 800f2e2:	3312      	adds	r3, #18
 800f2e4:	881b      	ldrh	r3, [r3, #0]
 800f2e6:	83bb      	strh	r3, [r7, #28]
 800f2e8:	e037      	b.n	800f35a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800f2ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f2ee:	496d      	ldr	r1, [pc, #436]	@ (800f4a4 <etharp_find_entry+0x2d4>)
 800f2f0:	4613      	mov	r3, r2
 800f2f2:	005b      	lsls	r3, r3, #1
 800f2f4:	4413      	add	r3, r2
 800f2f6:	00db      	lsls	r3, r3, #3
 800f2f8:	440b      	add	r3, r1
 800f2fa:	3312      	adds	r3, #18
 800f2fc:	881b      	ldrh	r3, [r3, #0]
 800f2fe:	8b7a      	ldrh	r2, [r7, #26]
 800f300:	429a      	cmp	r2, r3
 800f302:	d82a      	bhi.n	800f35a <etharp_find_entry+0x18a>
            old_pending = i;
 800f304:	8c3b      	ldrh	r3, [r7, #32]
 800f306:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800f308:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f30c:	4965      	ldr	r1, [pc, #404]	@ (800f4a4 <etharp_find_entry+0x2d4>)
 800f30e:	4613      	mov	r3, r2
 800f310:	005b      	lsls	r3, r3, #1
 800f312:	4413      	add	r3, r2
 800f314:	00db      	lsls	r3, r3, #3
 800f316:	440b      	add	r3, r1
 800f318:	3312      	adds	r3, #18
 800f31a:	881b      	ldrh	r3, [r3, #0]
 800f31c:	837b      	strh	r3, [r7, #26]
 800f31e:	e01c      	b.n	800f35a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800f320:	7dfb      	ldrb	r3, [r7, #23]
 800f322:	2b01      	cmp	r3, #1
 800f324:	d919      	bls.n	800f35a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800f326:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f32a:	495e      	ldr	r1, [pc, #376]	@ (800f4a4 <etharp_find_entry+0x2d4>)
 800f32c:	4613      	mov	r3, r2
 800f32e:	005b      	lsls	r3, r3, #1
 800f330:	4413      	add	r3, r2
 800f332:	00db      	lsls	r3, r3, #3
 800f334:	440b      	add	r3, r1
 800f336:	3312      	adds	r3, #18
 800f338:	881b      	ldrh	r3, [r3, #0]
 800f33a:	8b3a      	ldrh	r2, [r7, #24]
 800f33c:	429a      	cmp	r2, r3
 800f33e:	d80c      	bhi.n	800f35a <etharp_find_entry+0x18a>
            old_stable = i;
 800f340:	8c3b      	ldrh	r3, [r7, #32]
 800f342:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800f344:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f348:	4956      	ldr	r1, [pc, #344]	@ (800f4a4 <etharp_find_entry+0x2d4>)
 800f34a:	4613      	mov	r3, r2
 800f34c:	005b      	lsls	r3, r3, #1
 800f34e:	4413      	add	r3, r2
 800f350:	00db      	lsls	r3, r3, #3
 800f352:	440b      	add	r3, r1
 800f354:	3312      	adds	r3, #18
 800f356:	881b      	ldrh	r3, [r3, #0]
 800f358:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f35a:	8c3b      	ldrh	r3, [r7, #32]
 800f35c:	3301      	adds	r3, #1
 800f35e:	b29b      	uxth	r3, r3
 800f360:	843b      	strh	r3, [r7, #32]
 800f362:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f366:	2b09      	cmp	r3, #9
 800f368:	f77f af4c 	ble.w	800f204 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800f36c:	7afb      	ldrb	r3, [r7, #11]
 800f36e:	f003 0302 	and.w	r3, r3, #2
 800f372:	2b00      	cmp	r3, #0
 800f374:	d108      	bne.n	800f388 <etharp_find_entry+0x1b8>
 800f376:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800f37a:	2b0a      	cmp	r3, #10
 800f37c:	d107      	bne.n	800f38e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800f37e:	7afb      	ldrb	r3, [r7, #11]
 800f380:	f003 0301 	and.w	r3, r3, #1
 800f384:	2b00      	cmp	r3, #0
 800f386:	d102      	bne.n	800f38e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800f388:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f38c:	e085      	b.n	800f49a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800f38e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800f392:	2b09      	cmp	r3, #9
 800f394:	dc02      	bgt.n	800f39c <etharp_find_entry+0x1cc>
    i = empty;
 800f396:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f398:	843b      	strh	r3, [r7, #32]
 800f39a:	e039      	b.n	800f410 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800f39c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800f3a0:	2b09      	cmp	r3, #9
 800f3a2:	dc14      	bgt.n	800f3ce <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800f3a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f3a6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800f3a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f3ac:	493d      	ldr	r1, [pc, #244]	@ (800f4a4 <etharp_find_entry+0x2d4>)
 800f3ae:	4613      	mov	r3, r2
 800f3b0:	005b      	lsls	r3, r3, #1
 800f3b2:	4413      	add	r3, r2
 800f3b4:	00db      	lsls	r3, r3, #3
 800f3b6:	440b      	add	r3, r1
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d018      	beq.n	800f3f0 <etharp_find_entry+0x220>
 800f3be:	4b3a      	ldr	r3, [pc, #232]	@ (800f4a8 <etharp_find_entry+0x2d8>)
 800f3c0:	f240 126d 	movw	r2, #365	@ 0x16d
 800f3c4:	493b      	ldr	r1, [pc, #236]	@ (800f4b4 <etharp_find_entry+0x2e4>)
 800f3c6:	483a      	ldr	r0, [pc, #232]	@ (800f4b0 <etharp_find_entry+0x2e0>)
 800f3c8:	f002 fb04 	bl	80119d4 <iprintf>
 800f3cc:	e010      	b.n	800f3f0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800f3ce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800f3d2:	2b09      	cmp	r3, #9
 800f3d4:	dc02      	bgt.n	800f3dc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800f3d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f3d8:	843b      	strh	r3, [r7, #32]
 800f3da:	e009      	b.n	800f3f0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800f3dc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f3e0:	2b09      	cmp	r3, #9
 800f3e2:	dc02      	bgt.n	800f3ea <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800f3e4:	8bfb      	ldrh	r3, [r7, #30]
 800f3e6:	843b      	strh	r3, [r7, #32]
 800f3e8:	e002      	b.n	800f3f0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800f3ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f3ee:	e054      	b.n	800f49a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f3f0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f3f4:	2b09      	cmp	r3, #9
 800f3f6:	dd06      	ble.n	800f406 <etharp_find_entry+0x236>
 800f3f8:	4b2b      	ldr	r3, [pc, #172]	@ (800f4a8 <etharp_find_entry+0x2d8>)
 800f3fa:	f240 127f 	movw	r2, #383	@ 0x17f
 800f3fe:	492e      	ldr	r1, [pc, #184]	@ (800f4b8 <etharp_find_entry+0x2e8>)
 800f400:	482b      	ldr	r0, [pc, #172]	@ (800f4b0 <etharp_find_entry+0x2e0>)
 800f402:	f002 fae7 	bl	80119d4 <iprintf>
    etharp_free_entry(i);
 800f406:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f40a:	4618      	mov	r0, r3
 800f40c:	f7ff fe06 	bl	800f01c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f410:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f414:	2b09      	cmp	r3, #9
 800f416:	dd06      	ble.n	800f426 <etharp_find_entry+0x256>
 800f418:	4b23      	ldr	r3, [pc, #140]	@ (800f4a8 <etharp_find_entry+0x2d8>)
 800f41a:	f240 1283 	movw	r2, #387	@ 0x183
 800f41e:	4926      	ldr	r1, [pc, #152]	@ (800f4b8 <etharp_find_entry+0x2e8>)
 800f420:	4823      	ldr	r0, [pc, #140]	@ (800f4b0 <etharp_find_entry+0x2e0>)
 800f422:	f002 fad7 	bl	80119d4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f426:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f42a:	491e      	ldr	r1, [pc, #120]	@ (800f4a4 <etharp_find_entry+0x2d4>)
 800f42c:	4613      	mov	r3, r2
 800f42e:	005b      	lsls	r3, r3, #1
 800f430:	4413      	add	r3, r2
 800f432:	00db      	lsls	r3, r3, #3
 800f434:	440b      	add	r3, r1
 800f436:	3314      	adds	r3, #20
 800f438:	781b      	ldrb	r3, [r3, #0]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d006      	beq.n	800f44c <etharp_find_entry+0x27c>
 800f43e:	4b1a      	ldr	r3, [pc, #104]	@ (800f4a8 <etharp_find_entry+0x2d8>)
 800f440:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800f444:	491d      	ldr	r1, [pc, #116]	@ (800f4bc <etharp_find_entry+0x2ec>)
 800f446:	481a      	ldr	r0, [pc, #104]	@ (800f4b0 <etharp_find_entry+0x2e0>)
 800f448:	f002 fac4 	bl	80119d4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d00b      	beq.n	800f46a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800f452:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	6819      	ldr	r1, [r3, #0]
 800f45a:	4812      	ldr	r0, [pc, #72]	@ (800f4a4 <etharp_find_entry+0x2d4>)
 800f45c:	4613      	mov	r3, r2
 800f45e:	005b      	lsls	r3, r3, #1
 800f460:	4413      	add	r3, r2
 800f462:	00db      	lsls	r3, r3, #3
 800f464:	4403      	add	r3, r0
 800f466:	3304      	adds	r3, #4
 800f468:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800f46a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f46e:	490d      	ldr	r1, [pc, #52]	@ (800f4a4 <etharp_find_entry+0x2d4>)
 800f470:	4613      	mov	r3, r2
 800f472:	005b      	lsls	r3, r3, #1
 800f474:	4413      	add	r3, r2
 800f476:	00db      	lsls	r3, r3, #3
 800f478:	440b      	add	r3, r1
 800f47a:	3312      	adds	r3, #18
 800f47c:	2200      	movs	r2, #0
 800f47e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800f480:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f484:	4907      	ldr	r1, [pc, #28]	@ (800f4a4 <etharp_find_entry+0x2d4>)
 800f486:	4613      	mov	r3, r2
 800f488:	005b      	lsls	r3, r3, #1
 800f48a:	4413      	add	r3, r2
 800f48c:	00db      	lsls	r3, r3, #3
 800f48e:	440b      	add	r3, r1
 800f490:	3308      	adds	r3, #8
 800f492:	687a      	ldr	r2, [r7, #4]
 800f494:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800f496:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	3728      	adds	r7, #40	@ 0x28
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bd80      	pop	{r7, pc}
 800f4a2:	bf00      	nop
 800f4a4:	2000fe08 	.word	0x2000fe08
 800f4a8:	08014cbc 	.word	0x08014cbc
 800f4ac:	08014cf4 	.word	0x08014cf4
 800f4b0:	08014d34 	.word	0x08014d34
 800f4b4:	08014d5c 	.word	0x08014d5c
 800f4b8:	08014d74 	.word	0x08014d74
 800f4bc:	08014d88 	.word	0x08014d88

0800f4c0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b088      	sub	sp, #32
 800f4c4:	af02      	add	r7, sp, #8
 800f4c6:	60f8      	str	r0, [r7, #12]
 800f4c8:	60b9      	str	r1, [r7, #8]
 800f4ca:	607a      	str	r2, [r7, #4]
 800f4cc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800f4d4:	2b06      	cmp	r3, #6
 800f4d6:	d006      	beq.n	800f4e6 <etharp_update_arp_entry+0x26>
 800f4d8:	4b48      	ldr	r3, [pc, #288]	@ (800f5fc <etharp_update_arp_entry+0x13c>)
 800f4da:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800f4de:	4948      	ldr	r1, [pc, #288]	@ (800f600 <etharp_update_arp_entry+0x140>)
 800f4e0:	4848      	ldr	r0, [pc, #288]	@ (800f604 <etharp_update_arp_entry+0x144>)
 800f4e2:	f002 fa77 	bl	80119d4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d012      	beq.n	800f512 <etharp_update_arp_entry+0x52>
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d00e      	beq.n	800f512 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	68f9      	ldr	r1, [r7, #12]
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f001 f8fe 	bl	80106fc <ip4_addr_isbroadcast_u32>
 800f500:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800f502:	2b00      	cmp	r3, #0
 800f504:	d105      	bne.n	800f512 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f50e:	2be0      	cmp	r3, #224	@ 0xe0
 800f510:	d102      	bne.n	800f518 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f512:	f06f 030f 	mvn.w	r3, #15
 800f516:	e06c      	b.n	800f5f2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800f518:	78fb      	ldrb	r3, [r7, #3]
 800f51a:	68fa      	ldr	r2, [r7, #12]
 800f51c:	4619      	mov	r1, r3
 800f51e:	68b8      	ldr	r0, [r7, #8]
 800f520:	f7ff fe56 	bl	800f1d0 <etharp_find_entry>
 800f524:	4603      	mov	r3, r0
 800f526:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800f528:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	da02      	bge.n	800f536 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800f530:	8afb      	ldrh	r3, [r7, #22]
 800f532:	b25b      	sxtb	r3, r3
 800f534:	e05d      	b.n	800f5f2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f536:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f53a:	4933      	ldr	r1, [pc, #204]	@ (800f608 <etharp_update_arp_entry+0x148>)
 800f53c:	4613      	mov	r3, r2
 800f53e:	005b      	lsls	r3, r3, #1
 800f540:	4413      	add	r3, r2
 800f542:	00db      	lsls	r3, r3, #3
 800f544:	440b      	add	r3, r1
 800f546:	3314      	adds	r3, #20
 800f548:	2202      	movs	r2, #2
 800f54a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800f54c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f550:	492d      	ldr	r1, [pc, #180]	@ (800f608 <etharp_update_arp_entry+0x148>)
 800f552:	4613      	mov	r3, r2
 800f554:	005b      	lsls	r3, r3, #1
 800f556:	4413      	add	r3, r2
 800f558:	00db      	lsls	r3, r3, #3
 800f55a:	440b      	add	r3, r1
 800f55c:	3308      	adds	r3, #8
 800f55e:	68fa      	ldr	r2, [r7, #12]
 800f560:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f562:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f566:	4613      	mov	r3, r2
 800f568:	005b      	lsls	r3, r3, #1
 800f56a:	4413      	add	r3, r2
 800f56c:	00db      	lsls	r3, r3, #3
 800f56e:	3308      	adds	r3, #8
 800f570:	4a25      	ldr	r2, [pc, #148]	@ (800f608 <etharp_update_arp_entry+0x148>)
 800f572:	4413      	add	r3, r2
 800f574:	3304      	adds	r3, #4
 800f576:	2206      	movs	r2, #6
 800f578:	6879      	ldr	r1, [r7, #4]
 800f57a:	4618      	mov	r0, r3
 800f57c:	f002 fb05 	bl	8011b8a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800f580:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f584:	4920      	ldr	r1, [pc, #128]	@ (800f608 <etharp_update_arp_entry+0x148>)
 800f586:	4613      	mov	r3, r2
 800f588:	005b      	lsls	r3, r3, #1
 800f58a:	4413      	add	r3, r2
 800f58c:	00db      	lsls	r3, r3, #3
 800f58e:	440b      	add	r3, r1
 800f590:	3312      	adds	r3, #18
 800f592:	2200      	movs	r2, #0
 800f594:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800f596:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f59a:	491b      	ldr	r1, [pc, #108]	@ (800f608 <etharp_update_arp_entry+0x148>)
 800f59c:	4613      	mov	r3, r2
 800f59e:	005b      	lsls	r3, r3, #1
 800f5a0:	4413      	add	r3, r2
 800f5a2:	00db      	lsls	r3, r3, #3
 800f5a4:	440b      	add	r3, r1
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d021      	beq.n	800f5f0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800f5ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f5b0:	4915      	ldr	r1, [pc, #84]	@ (800f608 <etharp_update_arp_entry+0x148>)
 800f5b2:	4613      	mov	r3, r2
 800f5b4:	005b      	lsls	r3, r3, #1
 800f5b6:	4413      	add	r3, r2
 800f5b8:	00db      	lsls	r3, r3, #3
 800f5ba:	440b      	add	r3, r1
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800f5c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f5c4:	4910      	ldr	r1, [pc, #64]	@ (800f608 <etharp_update_arp_entry+0x148>)
 800f5c6:	4613      	mov	r3, r2
 800f5c8:	005b      	lsls	r3, r3, #1
 800f5ca:	4413      	add	r3, r2
 800f5cc:	00db      	lsls	r3, r3, #3
 800f5ce:	440b      	add	r3, r1
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800f5da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f5de:	9300      	str	r3, [sp, #0]
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	6939      	ldr	r1, [r7, #16]
 800f5e4:	68f8      	ldr	r0, [r7, #12]
 800f5e6:	f001 ff97 	bl	8011518 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800f5ea:	6938      	ldr	r0, [r7, #16]
 800f5ec:	f7f9 fdea 	bl	80091c4 <pbuf_free>
  }
  return ERR_OK;
 800f5f0:	2300      	movs	r3, #0
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	3718      	adds	r7, #24
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd80      	pop	{r7, pc}
 800f5fa:	bf00      	nop
 800f5fc:	08014cbc 	.word	0x08014cbc
 800f600:	08014db4 	.word	0x08014db4
 800f604:	08014d34 	.word	0x08014d34
 800f608:	2000fe08 	.word	0x2000fe08

0800f60c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b084      	sub	sp, #16
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f614:	2300      	movs	r3, #0
 800f616:	60fb      	str	r3, [r7, #12]
 800f618:	e01e      	b.n	800f658 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800f61a:	4913      	ldr	r1, [pc, #76]	@ (800f668 <etharp_cleanup_netif+0x5c>)
 800f61c:	68fa      	ldr	r2, [r7, #12]
 800f61e:	4613      	mov	r3, r2
 800f620:	005b      	lsls	r3, r3, #1
 800f622:	4413      	add	r3, r2
 800f624:	00db      	lsls	r3, r3, #3
 800f626:	440b      	add	r3, r1
 800f628:	3314      	adds	r3, #20
 800f62a:	781b      	ldrb	r3, [r3, #0]
 800f62c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800f62e:	7afb      	ldrb	r3, [r7, #11]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d00e      	beq.n	800f652 <etharp_cleanup_netif+0x46>
 800f634:	490c      	ldr	r1, [pc, #48]	@ (800f668 <etharp_cleanup_netif+0x5c>)
 800f636:	68fa      	ldr	r2, [r7, #12]
 800f638:	4613      	mov	r3, r2
 800f63a:	005b      	lsls	r3, r3, #1
 800f63c:	4413      	add	r3, r2
 800f63e:	00db      	lsls	r3, r3, #3
 800f640:	440b      	add	r3, r1
 800f642:	3308      	adds	r3, #8
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	687a      	ldr	r2, [r7, #4]
 800f648:	429a      	cmp	r2, r3
 800f64a:	d102      	bne.n	800f652 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800f64c:	68f8      	ldr	r0, [r7, #12]
 800f64e:	f7ff fce5 	bl	800f01c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	3301      	adds	r3, #1
 800f656:	60fb      	str	r3, [r7, #12]
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	2b09      	cmp	r3, #9
 800f65c:	dddd      	ble.n	800f61a <etharp_cleanup_netif+0xe>
    }
  }
}
 800f65e:	bf00      	nop
 800f660:	bf00      	nop
 800f662:	3710      	adds	r7, #16
 800f664:	46bd      	mov	sp, r7
 800f666:	bd80      	pop	{r7, pc}
 800f668:	2000fe08 	.word	0x2000fe08

0800f66c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800f66c:	b5b0      	push	{r4, r5, r7, lr}
 800f66e:	b08a      	sub	sp, #40	@ 0x28
 800f670:	af04      	add	r7, sp, #16
 800f672:	6078      	str	r0, [r7, #4]
 800f674:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f676:	683b      	ldr	r3, [r7, #0]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d107      	bne.n	800f68c <etharp_input+0x20>
 800f67c:	4b3d      	ldr	r3, [pc, #244]	@ (800f774 <etharp_input+0x108>)
 800f67e:	f240 228a 	movw	r2, #650	@ 0x28a
 800f682:	493d      	ldr	r1, [pc, #244]	@ (800f778 <etharp_input+0x10c>)
 800f684:	483d      	ldr	r0, [pc, #244]	@ (800f77c <etharp_input+0x110>)
 800f686:	f002 f9a5 	bl	80119d4 <iprintf>
 800f68a:	e06f      	b.n	800f76c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	685b      	ldr	r3, [r3, #4]
 800f690:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f692:	693b      	ldr	r3, [r7, #16]
 800f694:	881b      	ldrh	r3, [r3, #0]
 800f696:	b29b      	uxth	r3, r3
 800f698:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f69c:	d10c      	bne.n	800f6b8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f69e:	693b      	ldr	r3, [r7, #16]
 800f6a0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f6a2:	2b06      	cmp	r3, #6
 800f6a4:	d108      	bne.n	800f6b8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f6a6:	693b      	ldr	r3, [r7, #16]
 800f6a8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f6aa:	2b04      	cmp	r3, #4
 800f6ac:	d104      	bne.n	800f6b8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800f6ae:	693b      	ldr	r3, [r7, #16]
 800f6b0:	885b      	ldrh	r3, [r3, #2]
 800f6b2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f6b4:	2b08      	cmp	r3, #8
 800f6b6:	d003      	beq.n	800f6c0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800f6b8:	6878      	ldr	r0, [r7, #4]
 800f6ba:	f7f9 fd83 	bl	80091c4 <pbuf_free>
    return;
 800f6be:	e055      	b.n	800f76c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f6c0:	693b      	ldr	r3, [r7, #16]
 800f6c2:	330e      	adds	r3, #14
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800f6c8:	693b      	ldr	r3, [r7, #16]
 800f6ca:	3318      	adds	r3, #24
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f6d0:	683b      	ldr	r3, [r7, #0]
 800f6d2:	3304      	adds	r3, #4
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d102      	bne.n	800f6e0 <etharp_input+0x74>
    for_us = 0;
 800f6da:	2300      	movs	r3, #0
 800f6dc:	75fb      	strb	r3, [r7, #23]
 800f6de:	e009      	b.n	800f6f4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800f6e0:	68ba      	ldr	r2, [r7, #8]
 800f6e2:	683b      	ldr	r3, [r7, #0]
 800f6e4:	3304      	adds	r3, #4
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	429a      	cmp	r2, r3
 800f6ea:	bf0c      	ite	eq
 800f6ec:	2301      	moveq	r3, #1
 800f6ee:	2300      	movne	r3, #0
 800f6f0:	b2db      	uxtb	r3, r3
 800f6f2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f6f4:	693b      	ldr	r3, [r7, #16]
 800f6f6:	f103 0208 	add.w	r2, r3, #8
 800f6fa:	7dfb      	ldrb	r3, [r7, #23]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d001      	beq.n	800f704 <etharp_input+0x98>
 800f700:	2301      	movs	r3, #1
 800f702:	e000      	b.n	800f706 <etharp_input+0x9a>
 800f704:	2302      	movs	r3, #2
 800f706:	f107 010c 	add.w	r1, r7, #12
 800f70a:	6838      	ldr	r0, [r7, #0]
 800f70c:	f7ff fed8 	bl	800f4c0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800f710:	693b      	ldr	r3, [r7, #16]
 800f712:	88db      	ldrh	r3, [r3, #6]
 800f714:	b29b      	uxth	r3, r3
 800f716:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f71a:	d003      	beq.n	800f724 <etharp_input+0xb8>
 800f71c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f720:	d01e      	beq.n	800f760 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800f722:	e020      	b.n	800f766 <etharp_input+0xfa>
      if (for_us) {
 800f724:	7dfb      	ldrb	r3, [r7, #23]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d01c      	beq.n	800f764 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800f730:	693b      	ldr	r3, [r7, #16]
 800f732:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800f736:	683b      	ldr	r3, [r7, #0]
 800f738:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800f73c:	683b      	ldr	r3, [r7, #0]
 800f73e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800f740:	693a      	ldr	r2, [r7, #16]
 800f742:	3208      	adds	r2, #8
        etharp_raw(netif,
 800f744:	2102      	movs	r1, #2
 800f746:	9103      	str	r1, [sp, #12]
 800f748:	f107 010c 	add.w	r1, r7, #12
 800f74c:	9102      	str	r1, [sp, #8]
 800f74e:	9201      	str	r2, [sp, #4]
 800f750:	9300      	str	r3, [sp, #0]
 800f752:	462b      	mov	r3, r5
 800f754:	4622      	mov	r2, r4
 800f756:	4601      	mov	r1, r0
 800f758:	6838      	ldr	r0, [r7, #0]
 800f75a:	f000 faeb 	bl	800fd34 <etharp_raw>
      break;
 800f75e:	e001      	b.n	800f764 <etharp_input+0xf8>
      break;
 800f760:	bf00      	nop
 800f762:	e000      	b.n	800f766 <etharp_input+0xfa>
      break;
 800f764:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800f766:	6878      	ldr	r0, [r7, #4]
 800f768:	f7f9 fd2c 	bl	80091c4 <pbuf_free>
}
 800f76c:	3718      	adds	r7, #24
 800f76e:	46bd      	mov	sp, r7
 800f770:	bdb0      	pop	{r4, r5, r7, pc}
 800f772:	bf00      	nop
 800f774:	08014cbc 	.word	0x08014cbc
 800f778:	08014e0c 	.word	0x08014e0c
 800f77c:	08014d34 	.word	0x08014d34

0800f780 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b086      	sub	sp, #24
 800f784:	af02      	add	r7, sp, #8
 800f786:	60f8      	str	r0, [r7, #12]
 800f788:	60b9      	str	r1, [r7, #8]
 800f78a:	4613      	mov	r3, r2
 800f78c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f78e:	79fa      	ldrb	r2, [r7, #7]
 800f790:	4944      	ldr	r1, [pc, #272]	@ (800f8a4 <etharp_output_to_arp_index+0x124>)
 800f792:	4613      	mov	r3, r2
 800f794:	005b      	lsls	r3, r3, #1
 800f796:	4413      	add	r3, r2
 800f798:	00db      	lsls	r3, r3, #3
 800f79a:	440b      	add	r3, r1
 800f79c:	3314      	adds	r3, #20
 800f79e:	781b      	ldrb	r3, [r3, #0]
 800f7a0:	2b01      	cmp	r3, #1
 800f7a2:	d806      	bhi.n	800f7b2 <etharp_output_to_arp_index+0x32>
 800f7a4:	4b40      	ldr	r3, [pc, #256]	@ (800f8a8 <etharp_output_to_arp_index+0x128>)
 800f7a6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800f7aa:	4940      	ldr	r1, [pc, #256]	@ (800f8ac <etharp_output_to_arp_index+0x12c>)
 800f7ac:	4840      	ldr	r0, [pc, #256]	@ (800f8b0 <etharp_output_to_arp_index+0x130>)
 800f7ae:	f002 f911 	bl	80119d4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f7b2:	79fa      	ldrb	r2, [r7, #7]
 800f7b4:	493b      	ldr	r1, [pc, #236]	@ (800f8a4 <etharp_output_to_arp_index+0x124>)
 800f7b6:	4613      	mov	r3, r2
 800f7b8:	005b      	lsls	r3, r3, #1
 800f7ba:	4413      	add	r3, r2
 800f7bc:	00db      	lsls	r3, r3, #3
 800f7be:	440b      	add	r3, r1
 800f7c0:	3314      	adds	r3, #20
 800f7c2:	781b      	ldrb	r3, [r3, #0]
 800f7c4:	2b02      	cmp	r3, #2
 800f7c6:	d153      	bne.n	800f870 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f7c8:	79fa      	ldrb	r2, [r7, #7]
 800f7ca:	4936      	ldr	r1, [pc, #216]	@ (800f8a4 <etharp_output_to_arp_index+0x124>)
 800f7cc:	4613      	mov	r3, r2
 800f7ce:	005b      	lsls	r3, r3, #1
 800f7d0:	4413      	add	r3, r2
 800f7d2:	00db      	lsls	r3, r3, #3
 800f7d4:	440b      	add	r3, r1
 800f7d6:	3312      	adds	r3, #18
 800f7d8:	881b      	ldrh	r3, [r3, #0]
 800f7da:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800f7de:	d919      	bls.n	800f814 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f7e0:	79fa      	ldrb	r2, [r7, #7]
 800f7e2:	4613      	mov	r3, r2
 800f7e4:	005b      	lsls	r3, r3, #1
 800f7e6:	4413      	add	r3, r2
 800f7e8:	00db      	lsls	r3, r3, #3
 800f7ea:	4a2e      	ldr	r2, [pc, #184]	@ (800f8a4 <etharp_output_to_arp_index+0x124>)
 800f7ec:	4413      	add	r3, r2
 800f7ee:	3304      	adds	r3, #4
 800f7f0:	4619      	mov	r1, r3
 800f7f2:	68f8      	ldr	r0, [r7, #12]
 800f7f4:	f000 fb4c 	bl	800fe90 <etharp_request>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d138      	bne.n	800f870 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f7fe:	79fa      	ldrb	r2, [r7, #7]
 800f800:	4928      	ldr	r1, [pc, #160]	@ (800f8a4 <etharp_output_to_arp_index+0x124>)
 800f802:	4613      	mov	r3, r2
 800f804:	005b      	lsls	r3, r3, #1
 800f806:	4413      	add	r3, r2
 800f808:	00db      	lsls	r3, r3, #3
 800f80a:	440b      	add	r3, r1
 800f80c:	3314      	adds	r3, #20
 800f80e:	2203      	movs	r2, #3
 800f810:	701a      	strb	r2, [r3, #0]
 800f812:	e02d      	b.n	800f870 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f814:	79fa      	ldrb	r2, [r7, #7]
 800f816:	4923      	ldr	r1, [pc, #140]	@ (800f8a4 <etharp_output_to_arp_index+0x124>)
 800f818:	4613      	mov	r3, r2
 800f81a:	005b      	lsls	r3, r3, #1
 800f81c:	4413      	add	r3, r2
 800f81e:	00db      	lsls	r3, r3, #3
 800f820:	440b      	add	r3, r1
 800f822:	3312      	adds	r3, #18
 800f824:	881b      	ldrh	r3, [r3, #0]
 800f826:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800f82a:	d321      	bcc.n	800f870 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f82c:	79fa      	ldrb	r2, [r7, #7]
 800f82e:	4613      	mov	r3, r2
 800f830:	005b      	lsls	r3, r3, #1
 800f832:	4413      	add	r3, r2
 800f834:	00db      	lsls	r3, r3, #3
 800f836:	4a1b      	ldr	r2, [pc, #108]	@ (800f8a4 <etharp_output_to_arp_index+0x124>)
 800f838:	4413      	add	r3, r2
 800f83a:	1d19      	adds	r1, r3, #4
 800f83c:	79fa      	ldrb	r2, [r7, #7]
 800f83e:	4613      	mov	r3, r2
 800f840:	005b      	lsls	r3, r3, #1
 800f842:	4413      	add	r3, r2
 800f844:	00db      	lsls	r3, r3, #3
 800f846:	3308      	adds	r3, #8
 800f848:	4a16      	ldr	r2, [pc, #88]	@ (800f8a4 <etharp_output_to_arp_index+0x124>)
 800f84a:	4413      	add	r3, r2
 800f84c:	3304      	adds	r3, #4
 800f84e:	461a      	mov	r2, r3
 800f850:	68f8      	ldr	r0, [r7, #12]
 800f852:	f000 fafb 	bl	800fe4c <etharp_request_dst>
 800f856:	4603      	mov	r3, r0
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d109      	bne.n	800f870 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f85c:	79fa      	ldrb	r2, [r7, #7]
 800f85e:	4911      	ldr	r1, [pc, #68]	@ (800f8a4 <etharp_output_to_arp_index+0x124>)
 800f860:	4613      	mov	r3, r2
 800f862:	005b      	lsls	r3, r3, #1
 800f864:	4413      	add	r3, r2
 800f866:	00db      	lsls	r3, r3, #3
 800f868:	440b      	add	r3, r1
 800f86a:	3314      	adds	r3, #20
 800f86c:	2203      	movs	r2, #3
 800f86e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800f876:	79fa      	ldrb	r2, [r7, #7]
 800f878:	4613      	mov	r3, r2
 800f87a:	005b      	lsls	r3, r3, #1
 800f87c:	4413      	add	r3, r2
 800f87e:	00db      	lsls	r3, r3, #3
 800f880:	3308      	adds	r3, #8
 800f882:	4a08      	ldr	r2, [pc, #32]	@ (800f8a4 <etharp_output_to_arp_index+0x124>)
 800f884:	4413      	add	r3, r2
 800f886:	3304      	adds	r3, #4
 800f888:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f88c:	9200      	str	r2, [sp, #0]
 800f88e:	460a      	mov	r2, r1
 800f890:	68b9      	ldr	r1, [r7, #8]
 800f892:	68f8      	ldr	r0, [r7, #12]
 800f894:	f001 fe40 	bl	8011518 <ethernet_output>
 800f898:	4603      	mov	r3, r0
}
 800f89a:	4618      	mov	r0, r3
 800f89c:	3710      	adds	r7, #16
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	bd80      	pop	{r7, pc}
 800f8a2:	bf00      	nop
 800f8a4:	2000fe08 	.word	0x2000fe08
 800f8a8:	08014cbc 	.word	0x08014cbc
 800f8ac:	08014e2c 	.word	0x08014e2c
 800f8b0:	08014d34 	.word	0x08014d34

0800f8b4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b08a      	sub	sp, #40	@ 0x28
 800f8b8:	af02      	add	r7, sp, #8
 800f8ba:	60f8      	str	r0, [r7, #12]
 800f8bc:	60b9      	str	r1, [r7, #8]
 800f8be:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d106      	bne.n	800f8d8 <etharp_output+0x24>
 800f8ca:	4b73      	ldr	r3, [pc, #460]	@ (800fa98 <etharp_output+0x1e4>)
 800f8cc:	f240 321e 	movw	r2, #798	@ 0x31e
 800f8d0:	4972      	ldr	r1, [pc, #456]	@ (800fa9c <etharp_output+0x1e8>)
 800f8d2:	4873      	ldr	r0, [pc, #460]	@ (800faa0 <etharp_output+0x1ec>)
 800f8d4:	f002 f87e 	bl	80119d4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f8d8:	68bb      	ldr	r3, [r7, #8]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d106      	bne.n	800f8ec <etharp_output+0x38>
 800f8de:	4b6e      	ldr	r3, [pc, #440]	@ (800fa98 <etharp_output+0x1e4>)
 800f8e0:	f240 321f 	movw	r2, #799	@ 0x31f
 800f8e4:	496f      	ldr	r1, [pc, #444]	@ (800faa4 <etharp_output+0x1f0>)
 800f8e6:	486e      	ldr	r0, [pc, #440]	@ (800faa0 <etharp_output+0x1ec>)
 800f8e8:	f002 f874 	bl	80119d4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d106      	bne.n	800f900 <etharp_output+0x4c>
 800f8f2:	4b69      	ldr	r3, [pc, #420]	@ (800fa98 <etharp_output+0x1e4>)
 800f8f4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800f8f8:	496b      	ldr	r1, [pc, #428]	@ (800faa8 <etharp_output+0x1f4>)
 800f8fa:	4869      	ldr	r0, [pc, #420]	@ (800faa0 <etharp_output+0x1ec>)
 800f8fc:	f002 f86a 	bl	80119d4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	68f9      	ldr	r1, [r7, #12]
 800f906:	4618      	mov	r0, r3
 800f908:	f000 fef8 	bl	80106fc <ip4_addr_isbroadcast_u32>
 800f90c:	4603      	mov	r3, r0
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d002      	beq.n	800f918 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800f912:	4b66      	ldr	r3, [pc, #408]	@ (800faac <etharp_output+0x1f8>)
 800f914:	61fb      	str	r3, [r7, #28]
 800f916:	e0af      	b.n	800fa78 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f920:	2be0      	cmp	r3, #224	@ 0xe0
 800f922:	d118      	bne.n	800f956 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f924:	2301      	movs	r3, #1
 800f926:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800f928:	2300      	movs	r3, #0
 800f92a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f92c:	235e      	movs	r3, #94	@ 0x5e
 800f92e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	3301      	adds	r3, #1
 800f934:	781b      	ldrb	r3, [r3, #0]
 800f936:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f93a:	b2db      	uxtb	r3, r3
 800f93c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	3302      	adds	r3, #2
 800f942:	781b      	ldrb	r3, [r3, #0]
 800f944:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	3303      	adds	r3, #3
 800f94a:	781b      	ldrb	r3, [r3, #0]
 800f94c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800f94e:	f107 0310 	add.w	r3, r7, #16
 800f952:	61fb      	str	r3, [r7, #28]
 800f954:	e090      	b.n	800fa78 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681a      	ldr	r2, [r3, #0]
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	3304      	adds	r3, #4
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	405a      	eors	r2, r3
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	3308      	adds	r3, #8
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	4013      	ands	r3, r2
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d012      	beq.n	800f994 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f974:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800f978:	4293      	cmp	r3, r2
 800f97a:	d00b      	beq.n	800f994 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	330c      	adds	r3, #12
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d003      	beq.n	800f98e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	330c      	adds	r3, #12
 800f98a:	61bb      	str	r3, [r7, #24]
 800f98c:	e002      	b.n	800f994 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800f98e:	f06f 0303 	mvn.w	r3, #3
 800f992:	e07d      	b.n	800fa90 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f994:	4b46      	ldr	r3, [pc, #280]	@ (800fab0 <etharp_output+0x1fc>)
 800f996:	781b      	ldrb	r3, [r3, #0]
 800f998:	4619      	mov	r1, r3
 800f99a:	4a46      	ldr	r2, [pc, #280]	@ (800fab4 <etharp_output+0x200>)
 800f99c:	460b      	mov	r3, r1
 800f99e:	005b      	lsls	r3, r3, #1
 800f9a0:	440b      	add	r3, r1
 800f9a2:	00db      	lsls	r3, r3, #3
 800f9a4:	4413      	add	r3, r2
 800f9a6:	3314      	adds	r3, #20
 800f9a8:	781b      	ldrb	r3, [r3, #0]
 800f9aa:	2b01      	cmp	r3, #1
 800f9ac:	d925      	bls.n	800f9fa <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f9ae:	4b40      	ldr	r3, [pc, #256]	@ (800fab0 <etharp_output+0x1fc>)
 800f9b0:	781b      	ldrb	r3, [r3, #0]
 800f9b2:	4619      	mov	r1, r3
 800f9b4:	4a3f      	ldr	r2, [pc, #252]	@ (800fab4 <etharp_output+0x200>)
 800f9b6:	460b      	mov	r3, r1
 800f9b8:	005b      	lsls	r3, r3, #1
 800f9ba:	440b      	add	r3, r1
 800f9bc:	00db      	lsls	r3, r3, #3
 800f9be:	4413      	add	r3, r2
 800f9c0:	3308      	adds	r3, #8
 800f9c2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f9c4:	68fa      	ldr	r2, [r7, #12]
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	d117      	bne.n	800f9fa <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800f9ca:	69bb      	ldr	r3, [r7, #24]
 800f9cc:	681a      	ldr	r2, [r3, #0]
 800f9ce:	4b38      	ldr	r3, [pc, #224]	@ (800fab0 <etharp_output+0x1fc>)
 800f9d0:	781b      	ldrb	r3, [r3, #0]
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	4937      	ldr	r1, [pc, #220]	@ (800fab4 <etharp_output+0x200>)
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	005b      	lsls	r3, r3, #1
 800f9da:	4403      	add	r3, r0
 800f9dc:	00db      	lsls	r3, r3, #3
 800f9de:	440b      	add	r3, r1
 800f9e0:	3304      	adds	r3, #4
 800f9e2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f9e4:	429a      	cmp	r2, r3
 800f9e6:	d108      	bne.n	800f9fa <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f9e8:	4b31      	ldr	r3, [pc, #196]	@ (800fab0 <etharp_output+0x1fc>)
 800f9ea:	781b      	ldrb	r3, [r3, #0]
 800f9ec:	461a      	mov	r2, r3
 800f9ee:	68b9      	ldr	r1, [r7, #8]
 800f9f0:	68f8      	ldr	r0, [r7, #12]
 800f9f2:	f7ff fec5 	bl	800f780 <etharp_output_to_arp_index>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	e04a      	b.n	800fa90 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	75fb      	strb	r3, [r7, #23]
 800f9fe:	e031      	b.n	800fa64 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800fa00:	7dfa      	ldrb	r2, [r7, #23]
 800fa02:	492c      	ldr	r1, [pc, #176]	@ (800fab4 <etharp_output+0x200>)
 800fa04:	4613      	mov	r3, r2
 800fa06:	005b      	lsls	r3, r3, #1
 800fa08:	4413      	add	r3, r2
 800fa0a:	00db      	lsls	r3, r3, #3
 800fa0c:	440b      	add	r3, r1
 800fa0e:	3314      	adds	r3, #20
 800fa10:	781b      	ldrb	r3, [r3, #0]
 800fa12:	2b01      	cmp	r3, #1
 800fa14:	d923      	bls.n	800fa5e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800fa16:	7dfa      	ldrb	r2, [r7, #23]
 800fa18:	4926      	ldr	r1, [pc, #152]	@ (800fab4 <etharp_output+0x200>)
 800fa1a:	4613      	mov	r3, r2
 800fa1c:	005b      	lsls	r3, r3, #1
 800fa1e:	4413      	add	r3, r2
 800fa20:	00db      	lsls	r3, r3, #3
 800fa22:	440b      	add	r3, r1
 800fa24:	3308      	adds	r3, #8
 800fa26:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800fa28:	68fa      	ldr	r2, [r7, #12]
 800fa2a:	429a      	cmp	r2, r3
 800fa2c:	d117      	bne.n	800fa5e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800fa2e:	69bb      	ldr	r3, [r7, #24]
 800fa30:	6819      	ldr	r1, [r3, #0]
 800fa32:	7dfa      	ldrb	r2, [r7, #23]
 800fa34:	481f      	ldr	r0, [pc, #124]	@ (800fab4 <etharp_output+0x200>)
 800fa36:	4613      	mov	r3, r2
 800fa38:	005b      	lsls	r3, r3, #1
 800fa3a:	4413      	add	r3, r2
 800fa3c:	00db      	lsls	r3, r3, #3
 800fa3e:	4403      	add	r3, r0
 800fa40:	3304      	adds	r3, #4
 800fa42:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800fa44:	4299      	cmp	r1, r3
 800fa46:	d10a      	bne.n	800fa5e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800fa48:	4a19      	ldr	r2, [pc, #100]	@ (800fab0 <etharp_output+0x1fc>)
 800fa4a:	7dfb      	ldrb	r3, [r7, #23]
 800fa4c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800fa4e:	7dfb      	ldrb	r3, [r7, #23]
 800fa50:	461a      	mov	r2, r3
 800fa52:	68b9      	ldr	r1, [r7, #8]
 800fa54:	68f8      	ldr	r0, [r7, #12]
 800fa56:	f7ff fe93 	bl	800f780 <etharp_output_to_arp_index>
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	e018      	b.n	800fa90 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800fa5e:	7dfb      	ldrb	r3, [r7, #23]
 800fa60:	3301      	adds	r3, #1
 800fa62:	75fb      	strb	r3, [r7, #23]
 800fa64:	7dfb      	ldrb	r3, [r7, #23]
 800fa66:	2b09      	cmp	r3, #9
 800fa68:	d9ca      	bls.n	800fa00 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800fa6a:	68ba      	ldr	r2, [r7, #8]
 800fa6c:	69b9      	ldr	r1, [r7, #24]
 800fa6e:	68f8      	ldr	r0, [r7, #12]
 800fa70:	f000 f822 	bl	800fab8 <etharp_query>
 800fa74:	4603      	mov	r3, r0
 800fa76:	e00b      	b.n	800fa90 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800fa7e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fa82:	9300      	str	r3, [sp, #0]
 800fa84:	69fb      	ldr	r3, [r7, #28]
 800fa86:	68b9      	ldr	r1, [r7, #8]
 800fa88:	68f8      	ldr	r0, [r7, #12]
 800fa8a:	f001 fd45 	bl	8011518 <ethernet_output>
 800fa8e:	4603      	mov	r3, r0
}
 800fa90:	4618      	mov	r0, r3
 800fa92:	3720      	adds	r7, #32
 800fa94:	46bd      	mov	sp, r7
 800fa96:	bd80      	pop	{r7, pc}
 800fa98:	08014cbc 	.word	0x08014cbc
 800fa9c:	08014e0c 	.word	0x08014e0c
 800faa0:	08014d34 	.word	0x08014d34
 800faa4:	08014e5c 	.word	0x08014e5c
 800faa8:	08014dfc 	.word	0x08014dfc
 800faac:	080154b8 	.word	0x080154b8
 800fab0:	2000fef8 	.word	0x2000fef8
 800fab4:	2000fe08 	.word	0x2000fe08

0800fab8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b08c      	sub	sp, #48	@ 0x30
 800fabc:	af02      	add	r7, sp, #8
 800fabe:	60f8      	str	r0, [r7, #12]
 800fac0:	60b9      	str	r1, [r7, #8]
 800fac2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	3326      	adds	r3, #38	@ 0x26
 800fac8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800faca:	23ff      	movs	r3, #255	@ 0xff
 800facc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800fad0:	2300      	movs	r3, #0
 800fad2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800fad4:	68bb      	ldr	r3, [r7, #8]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	68f9      	ldr	r1, [r7, #12]
 800fada:	4618      	mov	r0, r3
 800fadc:	f000 fe0e 	bl	80106fc <ip4_addr_isbroadcast_u32>
 800fae0:	4603      	mov	r3, r0
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d10c      	bne.n	800fb00 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800fae6:	68bb      	ldr	r3, [r7, #8]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800faee:	2be0      	cmp	r3, #224	@ 0xe0
 800faf0:	d006      	beq.n	800fb00 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d003      	beq.n	800fb00 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800faf8:	68bb      	ldr	r3, [r7, #8]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d102      	bne.n	800fb06 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800fb00:	f06f 030f 	mvn.w	r3, #15
 800fb04:	e101      	b.n	800fd0a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800fb06:	68fa      	ldr	r2, [r7, #12]
 800fb08:	2101      	movs	r1, #1
 800fb0a:	68b8      	ldr	r0, [r7, #8]
 800fb0c:	f7ff fb60 	bl	800f1d0 <etharp_find_entry>
 800fb10:	4603      	mov	r3, r0
 800fb12:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800fb14:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	da02      	bge.n	800fb22 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800fb1c:	8a7b      	ldrh	r3, [r7, #18]
 800fb1e:	b25b      	sxtb	r3, r3
 800fb20:	e0f3      	b.n	800fd0a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800fb22:	8a7b      	ldrh	r3, [r7, #18]
 800fb24:	2b7e      	cmp	r3, #126	@ 0x7e
 800fb26:	d906      	bls.n	800fb36 <etharp_query+0x7e>
 800fb28:	4b7a      	ldr	r3, [pc, #488]	@ (800fd14 <etharp_query+0x25c>)
 800fb2a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800fb2e:	497a      	ldr	r1, [pc, #488]	@ (800fd18 <etharp_query+0x260>)
 800fb30:	487a      	ldr	r0, [pc, #488]	@ (800fd1c <etharp_query+0x264>)
 800fb32:	f001 ff4f 	bl	80119d4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800fb36:	8a7b      	ldrh	r3, [r7, #18]
 800fb38:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800fb3a:	7c7a      	ldrb	r2, [r7, #17]
 800fb3c:	4978      	ldr	r1, [pc, #480]	@ (800fd20 <etharp_query+0x268>)
 800fb3e:	4613      	mov	r3, r2
 800fb40:	005b      	lsls	r3, r3, #1
 800fb42:	4413      	add	r3, r2
 800fb44:	00db      	lsls	r3, r3, #3
 800fb46:	440b      	add	r3, r1
 800fb48:	3314      	adds	r3, #20
 800fb4a:	781b      	ldrb	r3, [r3, #0]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d115      	bne.n	800fb7c <etharp_query+0xc4>
    is_new_entry = 1;
 800fb50:	2301      	movs	r3, #1
 800fb52:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800fb54:	7c7a      	ldrb	r2, [r7, #17]
 800fb56:	4972      	ldr	r1, [pc, #456]	@ (800fd20 <etharp_query+0x268>)
 800fb58:	4613      	mov	r3, r2
 800fb5a:	005b      	lsls	r3, r3, #1
 800fb5c:	4413      	add	r3, r2
 800fb5e:	00db      	lsls	r3, r3, #3
 800fb60:	440b      	add	r3, r1
 800fb62:	3314      	adds	r3, #20
 800fb64:	2201      	movs	r2, #1
 800fb66:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800fb68:	7c7a      	ldrb	r2, [r7, #17]
 800fb6a:	496d      	ldr	r1, [pc, #436]	@ (800fd20 <etharp_query+0x268>)
 800fb6c:	4613      	mov	r3, r2
 800fb6e:	005b      	lsls	r3, r3, #1
 800fb70:	4413      	add	r3, r2
 800fb72:	00db      	lsls	r3, r3, #3
 800fb74:	440b      	add	r3, r1
 800fb76:	3308      	adds	r3, #8
 800fb78:	68fa      	ldr	r2, [r7, #12]
 800fb7a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800fb7c:	7c7a      	ldrb	r2, [r7, #17]
 800fb7e:	4968      	ldr	r1, [pc, #416]	@ (800fd20 <etharp_query+0x268>)
 800fb80:	4613      	mov	r3, r2
 800fb82:	005b      	lsls	r3, r3, #1
 800fb84:	4413      	add	r3, r2
 800fb86:	00db      	lsls	r3, r3, #3
 800fb88:	440b      	add	r3, r1
 800fb8a:	3314      	adds	r3, #20
 800fb8c:	781b      	ldrb	r3, [r3, #0]
 800fb8e:	2b01      	cmp	r3, #1
 800fb90:	d011      	beq.n	800fbb6 <etharp_query+0xfe>
 800fb92:	7c7a      	ldrb	r2, [r7, #17]
 800fb94:	4962      	ldr	r1, [pc, #392]	@ (800fd20 <etharp_query+0x268>)
 800fb96:	4613      	mov	r3, r2
 800fb98:	005b      	lsls	r3, r3, #1
 800fb9a:	4413      	add	r3, r2
 800fb9c:	00db      	lsls	r3, r3, #3
 800fb9e:	440b      	add	r3, r1
 800fba0:	3314      	adds	r3, #20
 800fba2:	781b      	ldrb	r3, [r3, #0]
 800fba4:	2b01      	cmp	r3, #1
 800fba6:	d806      	bhi.n	800fbb6 <etharp_query+0xfe>
 800fba8:	4b5a      	ldr	r3, [pc, #360]	@ (800fd14 <etharp_query+0x25c>)
 800fbaa:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800fbae:	495d      	ldr	r1, [pc, #372]	@ (800fd24 <etharp_query+0x26c>)
 800fbb0:	485a      	ldr	r0, [pc, #360]	@ (800fd1c <etharp_query+0x264>)
 800fbb2:	f001 ff0f 	bl	80119d4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800fbb6:	6a3b      	ldr	r3, [r7, #32]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d102      	bne.n	800fbc2 <etharp_query+0x10a>
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d10c      	bne.n	800fbdc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800fbc2:	68b9      	ldr	r1, [r7, #8]
 800fbc4:	68f8      	ldr	r0, [r7, #12]
 800fbc6:	f000 f963 	bl	800fe90 <etharp_request>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d102      	bne.n	800fbdc <etharp_query+0x124>
      return result;
 800fbd6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800fbda:	e096      	b.n	800fd0a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d106      	bne.n	800fbf0 <etharp_query+0x138>
 800fbe2:	4b4c      	ldr	r3, [pc, #304]	@ (800fd14 <etharp_query+0x25c>)
 800fbe4:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800fbe8:	494f      	ldr	r1, [pc, #316]	@ (800fd28 <etharp_query+0x270>)
 800fbea:	484c      	ldr	r0, [pc, #304]	@ (800fd1c <etharp_query+0x264>)
 800fbec:	f001 fef2 	bl	80119d4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800fbf0:	7c7a      	ldrb	r2, [r7, #17]
 800fbf2:	494b      	ldr	r1, [pc, #300]	@ (800fd20 <etharp_query+0x268>)
 800fbf4:	4613      	mov	r3, r2
 800fbf6:	005b      	lsls	r3, r3, #1
 800fbf8:	4413      	add	r3, r2
 800fbfa:	00db      	lsls	r3, r3, #3
 800fbfc:	440b      	add	r3, r1
 800fbfe:	3314      	adds	r3, #20
 800fc00:	781b      	ldrb	r3, [r3, #0]
 800fc02:	2b01      	cmp	r3, #1
 800fc04:	d917      	bls.n	800fc36 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800fc06:	4a49      	ldr	r2, [pc, #292]	@ (800fd2c <etharp_query+0x274>)
 800fc08:	7c7b      	ldrb	r3, [r7, #17]
 800fc0a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800fc0c:	7c7a      	ldrb	r2, [r7, #17]
 800fc0e:	4613      	mov	r3, r2
 800fc10:	005b      	lsls	r3, r3, #1
 800fc12:	4413      	add	r3, r2
 800fc14:	00db      	lsls	r3, r3, #3
 800fc16:	3308      	adds	r3, #8
 800fc18:	4a41      	ldr	r2, [pc, #260]	@ (800fd20 <etharp_query+0x268>)
 800fc1a:	4413      	add	r3, r2
 800fc1c:	3304      	adds	r3, #4
 800fc1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fc22:	9200      	str	r2, [sp, #0]
 800fc24:	697a      	ldr	r2, [r7, #20]
 800fc26:	6879      	ldr	r1, [r7, #4]
 800fc28:	68f8      	ldr	r0, [r7, #12]
 800fc2a:	f001 fc75 	bl	8011518 <ethernet_output>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800fc34:	e067      	b.n	800fd06 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800fc36:	7c7a      	ldrb	r2, [r7, #17]
 800fc38:	4939      	ldr	r1, [pc, #228]	@ (800fd20 <etharp_query+0x268>)
 800fc3a:	4613      	mov	r3, r2
 800fc3c:	005b      	lsls	r3, r3, #1
 800fc3e:	4413      	add	r3, r2
 800fc40:	00db      	lsls	r3, r3, #3
 800fc42:	440b      	add	r3, r1
 800fc44:	3314      	adds	r3, #20
 800fc46:	781b      	ldrb	r3, [r3, #0]
 800fc48:	2b01      	cmp	r3, #1
 800fc4a:	d15c      	bne.n	800fd06 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	61fb      	str	r3, [r7, #28]
    while (p) {
 800fc54:	e01c      	b.n	800fc90 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800fc56:	69fb      	ldr	r3, [r7, #28]
 800fc58:	895a      	ldrh	r2, [r3, #10]
 800fc5a:	69fb      	ldr	r3, [r7, #28]
 800fc5c:	891b      	ldrh	r3, [r3, #8]
 800fc5e:	429a      	cmp	r2, r3
 800fc60:	d10a      	bne.n	800fc78 <etharp_query+0x1c0>
 800fc62:	69fb      	ldr	r3, [r7, #28]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d006      	beq.n	800fc78 <etharp_query+0x1c0>
 800fc6a:	4b2a      	ldr	r3, [pc, #168]	@ (800fd14 <etharp_query+0x25c>)
 800fc6c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800fc70:	492f      	ldr	r1, [pc, #188]	@ (800fd30 <etharp_query+0x278>)
 800fc72:	482a      	ldr	r0, [pc, #168]	@ (800fd1c <etharp_query+0x264>)
 800fc74:	f001 feae 	bl	80119d4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800fc78:	69fb      	ldr	r3, [r7, #28]
 800fc7a:	7b1b      	ldrb	r3, [r3, #12]
 800fc7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d002      	beq.n	800fc8a <etharp_query+0x1d2>
        copy_needed = 1;
 800fc84:	2301      	movs	r3, #1
 800fc86:	61bb      	str	r3, [r7, #24]
        break;
 800fc88:	e005      	b.n	800fc96 <etharp_query+0x1de>
      }
      p = p->next;
 800fc8a:	69fb      	ldr	r3, [r7, #28]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800fc90:	69fb      	ldr	r3, [r7, #28]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d1df      	bne.n	800fc56 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800fc96:	69bb      	ldr	r3, [r7, #24]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d007      	beq.n	800fcac <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800fc9c:	687a      	ldr	r2, [r7, #4]
 800fc9e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800fca2:	200e      	movs	r0, #14
 800fca4:	f7f9 fcf6 	bl	8009694 <pbuf_clone>
 800fca8:	61f8      	str	r0, [r7, #28]
 800fcaa:	e004      	b.n	800fcb6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800fcb0:	69f8      	ldr	r0, [r7, #28]
 800fcb2:	f7f9 fb2d 	bl	8009310 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800fcb6:	69fb      	ldr	r3, [r7, #28]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d021      	beq.n	800fd00 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800fcbc:	7c7a      	ldrb	r2, [r7, #17]
 800fcbe:	4918      	ldr	r1, [pc, #96]	@ (800fd20 <etharp_query+0x268>)
 800fcc0:	4613      	mov	r3, r2
 800fcc2:	005b      	lsls	r3, r3, #1
 800fcc4:	4413      	add	r3, r2
 800fcc6:	00db      	lsls	r3, r3, #3
 800fcc8:	440b      	add	r3, r1
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d00a      	beq.n	800fce6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800fcd0:	7c7a      	ldrb	r2, [r7, #17]
 800fcd2:	4913      	ldr	r1, [pc, #76]	@ (800fd20 <etharp_query+0x268>)
 800fcd4:	4613      	mov	r3, r2
 800fcd6:	005b      	lsls	r3, r3, #1
 800fcd8:	4413      	add	r3, r2
 800fcda:	00db      	lsls	r3, r3, #3
 800fcdc:	440b      	add	r3, r1
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	4618      	mov	r0, r3
 800fce2:	f7f9 fa6f 	bl	80091c4 <pbuf_free>
      }
      arp_table[i].q = p;
 800fce6:	7c7a      	ldrb	r2, [r7, #17]
 800fce8:	490d      	ldr	r1, [pc, #52]	@ (800fd20 <etharp_query+0x268>)
 800fcea:	4613      	mov	r3, r2
 800fcec:	005b      	lsls	r3, r3, #1
 800fcee:	4413      	add	r3, r2
 800fcf0:	00db      	lsls	r3, r3, #3
 800fcf2:	440b      	add	r3, r1
 800fcf4:	69fa      	ldr	r2, [r7, #28]
 800fcf6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800fcfe:	e002      	b.n	800fd06 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800fd00:	23ff      	movs	r3, #255	@ 0xff
 800fd02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800fd06:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	3728      	adds	r7, #40	@ 0x28
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd80      	pop	{r7, pc}
 800fd12:	bf00      	nop
 800fd14:	08014cbc 	.word	0x08014cbc
 800fd18:	08014e68 	.word	0x08014e68
 800fd1c:	08014d34 	.word	0x08014d34
 800fd20:	2000fe08 	.word	0x2000fe08
 800fd24:	08014e78 	.word	0x08014e78
 800fd28:	08014e5c 	.word	0x08014e5c
 800fd2c:	2000fef8 	.word	0x2000fef8
 800fd30:	08014ea0 	.word	0x08014ea0

0800fd34 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b08a      	sub	sp, #40	@ 0x28
 800fd38:	af02      	add	r7, sp, #8
 800fd3a:	60f8      	str	r0, [r7, #12]
 800fd3c:	60b9      	str	r1, [r7, #8]
 800fd3e:	607a      	str	r2, [r7, #4]
 800fd40:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800fd42:	2300      	movs	r3, #0
 800fd44:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d106      	bne.n	800fd5a <etharp_raw+0x26>
 800fd4c:	4b3a      	ldr	r3, [pc, #232]	@ (800fe38 <etharp_raw+0x104>)
 800fd4e:	f240 4257 	movw	r2, #1111	@ 0x457
 800fd52:	493a      	ldr	r1, [pc, #232]	@ (800fe3c <etharp_raw+0x108>)
 800fd54:	483a      	ldr	r0, [pc, #232]	@ (800fe40 <etharp_raw+0x10c>)
 800fd56:	f001 fe3d 	bl	80119d4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800fd5a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fd5e:	211c      	movs	r1, #28
 800fd60:	200e      	movs	r0, #14
 800fd62:	f7f8 ff47 	bl	8008bf4 <pbuf_alloc>
 800fd66:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800fd68:	69bb      	ldr	r3, [r7, #24]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d102      	bne.n	800fd74 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800fd6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fd72:	e05d      	b.n	800fe30 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800fd74:	69bb      	ldr	r3, [r7, #24]
 800fd76:	895b      	ldrh	r3, [r3, #10]
 800fd78:	2b1b      	cmp	r3, #27
 800fd7a:	d806      	bhi.n	800fd8a <etharp_raw+0x56>
 800fd7c:	4b2e      	ldr	r3, [pc, #184]	@ (800fe38 <etharp_raw+0x104>)
 800fd7e:	f240 4262 	movw	r2, #1122	@ 0x462
 800fd82:	4930      	ldr	r1, [pc, #192]	@ (800fe44 <etharp_raw+0x110>)
 800fd84:	482e      	ldr	r0, [pc, #184]	@ (800fe40 <etharp_raw+0x10c>)
 800fd86:	f001 fe25 	bl	80119d4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800fd8a:	69bb      	ldr	r3, [r7, #24]
 800fd8c:	685b      	ldr	r3, [r3, #4]
 800fd8e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800fd90:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800fd92:	4618      	mov	r0, r3
 800fd94:	f7f7 fe14 	bl	80079c0 <lwip_htons>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	461a      	mov	r2, r3
 800fd9c:	697b      	ldr	r3, [r7, #20]
 800fd9e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800fda6:	2b06      	cmp	r3, #6
 800fda8:	d006      	beq.n	800fdb8 <etharp_raw+0x84>
 800fdaa:	4b23      	ldr	r3, [pc, #140]	@ (800fe38 <etharp_raw+0x104>)
 800fdac:	f240 4269 	movw	r2, #1129	@ 0x469
 800fdb0:	4925      	ldr	r1, [pc, #148]	@ (800fe48 <etharp_raw+0x114>)
 800fdb2:	4823      	ldr	r0, [pc, #140]	@ (800fe40 <etharp_raw+0x10c>)
 800fdb4:	f001 fe0e 	bl	80119d4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800fdb8:	697b      	ldr	r3, [r7, #20]
 800fdba:	3308      	adds	r3, #8
 800fdbc:	2206      	movs	r2, #6
 800fdbe:	6839      	ldr	r1, [r7, #0]
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	f001 fee2 	bl	8011b8a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800fdc6:	697b      	ldr	r3, [r7, #20]
 800fdc8:	3312      	adds	r3, #18
 800fdca:	2206      	movs	r2, #6
 800fdcc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fdce:	4618      	mov	r0, r3
 800fdd0:	f001 fedb 	bl	8011b8a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	330e      	adds	r3, #14
 800fdd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fdda:	6812      	ldr	r2, [r2, #0]
 800fddc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800fdde:	697b      	ldr	r3, [r7, #20]
 800fde0:	3318      	adds	r3, #24
 800fde2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fde4:	6812      	ldr	r2, [r2, #0]
 800fde6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800fde8:	697b      	ldr	r3, [r7, #20]
 800fdea:	2200      	movs	r2, #0
 800fdec:	701a      	strb	r2, [r3, #0]
 800fdee:	2200      	movs	r2, #0
 800fdf0:	f042 0201 	orr.w	r2, r2, #1
 800fdf4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800fdf6:	697b      	ldr	r3, [r7, #20]
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	f042 0208 	orr.w	r2, r2, #8
 800fdfe:	709a      	strb	r2, [r3, #2]
 800fe00:	2200      	movs	r2, #0
 800fe02:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800fe04:	697b      	ldr	r3, [r7, #20]
 800fe06:	2206      	movs	r2, #6
 800fe08:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	2204      	movs	r2, #4
 800fe0e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800fe10:	f640 0306 	movw	r3, #2054	@ 0x806
 800fe14:	9300      	str	r3, [sp, #0]
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	68ba      	ldr	r2, [r7, #8]
 800fe1a:	69b9      	ldr	r1, [r7, #24]
 800fe1c:	68f8      	ldr	r0, [r7, #12]
 800fe1e:	f001 fb7b 	bl	8011518 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800fe22:	69b8      	ldr	r0, [r7, #24]
 800fe24:	f7f9 f9ce 	bl	80091c4 <pbuf_free>
  p = NULL;
 800fe28:	2300      	movs	r3, #0
 800fe2a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800fe2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fe30:	4618      	mov	r0, r3
 800fe32:	3720      	adds	r7, #32
 800fe34:	46bd      	mov	sp, r7
 800fe36:	bd80      	pop	{r7, pc}
 800fe38:	08014cbc 	.word	0x08014cbc
 800fe3c:	08014e0c 	.word	0x08014e0c
 800fe40:	08014d34 	.word	0x08014d34
 800fe44:	08014ebc 	.word	0x08014ebc
 800fe48:	08014ef0 	.word	0x08014ef0

0800fe4c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b088      	sub	sp, #32
 800fe50:	af04      	add	r7, sp, #16
 800fe52:	60f8      	str	r0, [r7, #12]
 800fe54:	60b9      	str	r1, [r7, #8]
 800fe56:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fe68:	2201      	movs	r2, #1
 800fe6a:	9203      	str	r2, [sp, #12]
 800fe6c:	68ba      	ldr	r2, [r7, #8]
 800fe6e:	9202      	str	r2, [sp, #8]
 800fe70:	4a06      	ldr	r2, [pc, #24]	@ (800fe8c <etharp_request_dst+0x40>)
 800fe72:	9201      	str	r2, [sp, #4]
 800fe74:	9300      	str	r3, [sp, #0]
 800fe76:	4603      	mov	r3, r0
 800fe78:	687a      	ldr	r2, [r7, #4]
 800fe7a:	68f8      	ldr	r0, [r7, #12]
 800fe7c:	f7ff ff5a 	bl	800fd34 <etharp_raw>
 800fe80:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800fe82:	4618      	mov	r0, r3
 800fe84:	3710      	adds	r7, #16
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd80      	pop	{r7, pc}
 800fe8a:	bf00      	nop
 800fe8c:	080154c0 	.word	0x080154c0

0800fe90 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b082      	sub	sp, #8
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
 800fe98:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800fe9a:	4a05      	ldr	r2, [pc, #20]	@ (800feb0 <etharp_request+0x20>)
 800fe9c:	6839      	ldr	r1, [r7, #0]
 800fe9e:	6878      	ldr	r0, [r7, #4]
 800fea0:	f7ff ffd4 	bl	800fe4c <etharp_request_dst>
 800fea4:	4603      	mov	r3, r0
}
 800fea6:	4618      	mov	r0, r3
 800fea8:	3708      	adds	r7, #8
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
 800feae:	bf00      	nop
 800feb0:	080154b8 	.word	0x080154b8

0800feb4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b08e      	sub	sp, #56	@ 0x38
 800feb8:	af04      	add	r7, sp, #16
 800feba:	6078      	str	r0, [r7, #4]
 800febc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800febe:	4b79      	ldr	r3, [pc, #484]	@ (80100a4 <icmp_input+0x1f0>)
 800fec0:	689b      	ldr	r3, [r3, #8]
 800fec2:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800fec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fec6:	781b      	ldrb	r3, [r3, #0]
 800fec8:	f003 030f 	and.w	r3, r3, #15
 800fecc:	b2db      	uxtb	r3, r3
 800fece:	009b      	lsls	r3, r3, #2
 800fed0:	b2db      	uxtb	r3, r3
 800fed2:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800fed4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fed6:	2b13      	cmp	r3, #19
 800fed8:	f240 80cd 	bls.w	8010076 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	895b      	ldrh	r3, [r3, #10]
 800fee0:	2b03      	cmp	r3, #3
 800fee2:	f240 80ca 	bls.w	801007a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	685b      	ldr	r3, [r3, #4]
 800feea:	781b      	ldrb	r3, [r3, #0]
 800feec:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800fef0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	f000 80b7 	beq.w	8010068 <icmp_input+0x1b4>
 800fefa:	2b08      	cmp	r3, #8
 800fefc:	f040 80b7 	bne.w	801006e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800ff00:	4b69      	ldr	r3, [pc, #420]	@ (80100a8 <icmp_input+0x1f4>)
 800ff02:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ff04:	4b67      	ldr	r3, [pc, #412]	@ (80100a4 <icmp_input+0x1f0>)
 800ff06:	695b      	ldr	r3, [r3, #20]
 800ff08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ff0c:	2be0      	cmp	r3, #224	@ 0xe0
 800ff0e:	f000 80bb 	beq.w	8010088 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ff12:	4b64      	ldr	r3, [pc, #400]	@ (80100a4 <icmp_input+0x1f0>)
 800ff14:	695b      	ldr	r3, [r3, #20]
 800ff16:	4a63      	ldr	r2, [pc, #396]	@ (80100a4 <icmp_input+0x1f0>)
 800ff18:	6812      	ldr	r2, [r2, #0]
 800ff1a:	4611      	mov	r1, r2
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	f000 fbed 	bl	80106fc <ip4_addr_isbroadcast_u32>
 800ff22:	4603      	mov	r3, r0
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	f040 80b1 	bne.w	801008c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	891b      	ldrh	r3, [r3, #8]
 800ff2e:	2b07      	cmp	r3, #7
 800ff30:	f240 80a5 	bls.w	801007e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ff34:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ff36:	330e      	adds	r3, #14
 800ff38:	4619      	mov	r1, r3
 800ff3a:	6878      	ldr	r0, [r7, #4]
 800ff3c:	f7f9 f8ac 	bl	8009098 <pbuf_add_header>
 800ff40:	4603      	mov	r3, r0
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d04b      	beq.n	800ffde <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	891a      	ldrh	r2, [r3, #8]
 800ff4a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ff4c:	4413      	add	r3, r2
 800ff4e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	891b      	ldrh	r3, [r3, #8]
 800ff54:	8b7a      	ldrh	r2, [r7, #26]
 800ff56:	429a      	cmp	r2, r3
 800ff58:	f0c0 809a 	bcc.w	8010090 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800ff5c:	8b7b      	ldrh	r3, [r7, #26]
 800ff5e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ff62:	4619      	mov	r1, r3
 800ff64:	200e      	movs	r0, #14
 800ff66:	f7f8 fe45 	bl	8008bf4 <pbuf_alloc>
 800ff6a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800ff6c:	697b      	ldr	r3, [r7, #20]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	f000 8090 	beq.w	8010094 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800ff74:	697b      	ldr	r3, [r7, #20]
 800ff76:	895b      	ldrh	r3, [r3, #10]
 800ff78:	461a      	mov	r2, r3
 800ff7a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ff7c:	3308      	adds	r3, #8
 800ff7e:	429a      	cmp	r2, r3
 800ff80:	d203      	bcs.n	800ff8a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800ff82:	6978      	ldr	r0, [r7, #20]
 800ff84:	f7f9 f91e 	bl	80091c4 <pbuf_free>
          goto icmperr;
 800ff88:	e085      	b.n	8010096 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800ff8a:	697b      	ldr	r3, [r7, #20]
 800ff8c:	685b      	ldr	r3, [r3, #4]
 800ff8e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800ff90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ff92:	4618      	mov	r0, r3
 800ff94:	f001 fdf9 	bl	8011b8a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800ff98:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ff9a:	4619      	mov	r1, r3
 800ff9c:	6978      	ldr	r0, [r7, #20]
 800ff9e:	f7f9 f88b 	bl	80090b8 <pbuf_remove_header>
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d009      	beq.n	800ffbc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800ffa8:	4b40      	ldr	r3, [pc, #256]	@ (80100ac <icmp_input+0x1f8>)
 800ffaa:	22b6      	movs	r2, #182	@ 0xb6
 800ffac:	4940      	ldr	r1, [pc, #256]	@ (80100b0 <icmp_input+0x1fc>)
 800ffae:	4841      	ldr	r0, [pc, #260]	@ (80100b4 <icmp_input+0x200>)
 800ffb0:	f001 fd10 	bl	80119d4 <iprintf>
          pbuf_free(r);
 800ffb4:	6978      	ldr	r0, [r7, #20]
 800ffb6:	f7f9 f905 	bl	80091c4 <pbuf_free>
          goto icmperr;
 800ffba:	e06c      	b.n	8010096 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800ffbc:	6879      	ldr	r1, [r7, #4]
 800ffbe:	6978      	ldr	r0, [r7, #20]
 800ffc0:	f7f9 fa24 	bl	800940c <pbuf_copy>
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d003      	beq.n	800ffd2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800ffca:	6978      	ldr	r0, [r7, #20]
 800ffcc:	f7f9 f8fa 	bl	80091c4 <pbuf_free>
          goto icmperr;
 800ffd0:	e061      	b.n	8010096 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f7f9 f8f6 	bl	80091c4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800ffd8:	697b      	ldr	r3, [r7, #20]
 800ffda:	607b      	str	r3, [r7, #4]
 800ffdc:	e00f      	b.n	800fffe <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ffde:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ffe0:	330e      	adds	r3, #14
 800ffe2:	4619      	mov	r1, r3
 800ffe4:	6878      	ldr	r0, [r7, #4]
 800ffe6:	f7f9 f867 	bl	80090b8 <pbuf_remove_header>
 800ffea:	4603      	mov	r3, r0
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d006      	beq.n	800fffe <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800fff0:	4b2e      	ldr	r3, [pc, #184]	@ (80100ac <icmp_input+0x1f8>)
 800fff2:	22c7      	movs	r2, #199	@ 0xc7
 800fff4:	4930      	ldr	r1, [pc, #192]	@ (80100b8 <icmp_input+0x204>)
 800fff6:	482f      	ldr	r0, [pc, #188]	@ (80100b4 <icmp_input+0x200>)
 800fff8:	f001 fcec 	bl	80119d4 <iprintf>
          goto icmperr;
 800fffc:	e04b      	b.n	8010096 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	685b      	ldr	r3, [r3, #4]
 8010002:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8010004:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010006:	4619      	mov	r1, r3
 8010008:	6878      	ldr	r0, [r7, #4]
 801000a:	f7f9 f845 	bl	8009098 <pbuf_add_header>
 801000e:	4603      	mov	r3, r0
 8010010:	2b00      	cmp	r3, #0
 8010012:	d12b      	bne.n	801006c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	685b      	ldr	r3, [r3, #4]
 8010018:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801001a:	69fb      	ldr	r3, [r7, #28]
 801001c:	681a      	ldr	r2, [r3, #0]
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8010022:	4b20      	ldr	r3, [pc, #128]	@ (80100a4 <icmp_input+0x1f0>)
 8010024:	691a      	ldr	r2, [r3, #16]
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801002a:	693b      	ldr	r3, [r7, #16]
 801002c:	2200      	movs	r2, #0
 801002e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8010030:	693b      	ldr	r3, [r7, #16]
 8010032:	2200      	movs	r2, #0
 8010034:	709a      	strb	r2, [r3, #2]
 8010036:	2200      	movs	r2, #0
 8010038:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	22ff      	movs	r2, #255	@ 0xff
 801003e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	2200      	movs	r2, #0
 8010044:	729a      	strb	r2, [r3, #10]
 8010046:	2200      	movs	r2, #0
 8010048:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801004a:	683b      	ldr	r3, [r7, #0]
 801004c:	9302      	str	r3, [sp, #8]
 801004e:	2301      	movs	r3, #1
 8010050:	9301      	str	r3, [sp, #4]
 8010052:	2300      	movs	r3, #0
 8010054:	9300      	str	r3, [sp, #0]
 8010056:	23ff      	movs	r3, #255	@ 0xff
 8010058:	2200      	movs	r2, #0
 801005a:	69f9      	ldr	r1, [r7, #28]
 801005c:	6878      	ldr	r0, [r7, #4]
 801005e:	f000 fa75 	bl	801054c <ip4_output_if>
 8010062:	4603      	mov	r3, r0
 8010064:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8010066:	e001      	b.n	801006c <icmp_input+0x1b8>
      break;
 8010068:	bf00      	nop
 801006a:	e000      	b.n	801006e <icmp_input+0x1ba>
      break;
 801006c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801006e:	6878      	ldr	r0, [r7, #4]
 8010070:	f7f9 f8a8 	bl	80091c4 <pbuf_free>
  return;
 8010074:	e013      	b.n	801009e <icmp_input+0x1ea>
    goto lenerr;
 8010076:	bf00      	nop
 8010078:	e002      	b.n	8010080 <icmp_input+0x1cc>
    goto lenerr;
 801007a:	bf00      	nop
 801007c:	e000      	b.n	8010080 <icmp_input+0x1cc>
        goto lenerr;
 801007e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8010080:	6878      	ldr	r0, [r7, #4]
 8010082:	f7f9 f89f 	bl	80091c4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010086:	e00a      	b.n	801009e <icmp_input+0x1ea>
        goto icmperr;
 8010088:	bf00      	nop
 801008a:	e004      	b.n	8010096 <icmp_input+0x1e2>
        goto icmperr;
 801008c:	bf00      	nop
 801008e:	e002      	b.n	8010096 <icmp_input+0x1e2>
          goto icmperr;
 8010090:	bf00      	nop
 8010092:	e000      	b.n	8010096 <icmp_input+0x1e2>
          goto icmperr;
 8010094:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8010096:	6878      	ldr	r0, [r7, #4]
 8010098:	f7f9 f894 	bl	80091c4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801009c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801009e:	3728      	adds	r7, #40	@ 0x28
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bd80      	pop	{r7, pc}
 80100a4:	200092d8 	.word	0x200092d8
 80100a8:	200092ec 	.word	0x200092ec
 80100ac:	08014f34 	.word	0x08014f34
 80100b0:	08014f6c 	.word	0x08014f6c
 80100b4:	08014fa4 	.word	0x08014fa4
 80100b8:	08014fcc 	.word	0x08014fcc

080100bc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b082      	sub	sp, #8
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
 80100c4:	460b      	mov	r3, r1
 80100c6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80100c8:	78fb      	ldrb	r3, [r7, #3]
 80100ca:	461a      	mov	r2, r3
 80100cc:	2103      	movs	r1, #3
 80100ce:	6878      	ldr	r0, [r7, #4]
 80100d0:	f000 f814 	bl	80100fc <icmp_send_response>
}
 80100d4:	bf00      	nop
 80100d6:	3708      	adds	r7, #8
 80100d8:	46bd      	mov	sp, r7
 80100da:	bd80      	pop	{r7, pc}

080100dc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80100dc:	b580      	push	{r7, lr}
 80100de:	b082      	sub	sp, #8
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
 80100e4:	460b      	mov	r3, r1
 80100e6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80100e8:	78fb      	ldrb	r3, [r7, #3]
 80100ea:	461a      	mov	r2, r3
 80100ec:	210b      	movs	r1, #11
 80100ee:	6878      	ldr	r0, [r7, #4]
 80100f0:	f000 f804 	bl	80100fc <icmp_send_response>
}
 80100f4:	bf00      	nop
 80100f6:	3708      	adds	r7, #8
 80100f8:	46bd      	mov	sp, r7
 80100fa:	bd80      	pop	{r7, pc}

080100fc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b08c      	sub	sp, #48	@ 0x30
 8010100:	af04      	add	r7, sp, #16
 8010102:	6078      	str	r0, [r7, #4]
 8010104:	460b      	mov	r3, r1
 8010106:	70fb      	strb	r3, [r7, #3]
 8010108:	4613      	mov	r3, r2
 801010a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801010c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010110:	2124      	movs	r1, #36	@ 0x24
 8010112:	2022      	movs	r0, #34	@ 0x22
 8010114:	f7f8 fd6e 	bl	8008bf4 <pbuf_alloc>
 8010118:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801011a:	69fb      	ldr	r3, [r7, #28]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d04c      	beq.n	80101ba <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8010120:	69fb      	ldr	r3, [r7, #28]
 8010122:	895b      	ldrh	r3, [r3, #10]
 8010124:	2b23      	cmp	r3, #35	@ 0x23
 8010126:	d806      	bhi.n	8010136 <icmp_send_response+0x3a>
 8010128:	4b26      	ldr	r3, [pc, #152]	@ (80101c4 <icmp_send_response+0xc8>)
 801012a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801012e:	4926      	ldr	r1, [pc, #152]	@ (80101c8 <icmp_send_response+0xcc>)
 8010130:	4826      	ldr	r0, [pc, #152]	@ (80101cc <icmp_send_response+0xd0>)
 8010132:	f001 fc4f 	bl	80119d4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	685b      	ldr	r3, [r3, #4]
 801013a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801013c:	69fb      	ldr	r3, [r7, #28]
 801013e:	685b      	ldr	r3, [r3, #4]
 8010140:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8010142:	697b      	ldr	r3, [r7, #20]
 8010144:	78fa      	ldrb	r2, [r7, #3]
 8010146:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8010148:	697b      	ldr	r3, [r7, #20]
 801014a:	78ba      	ldrb	r2, [r7, #2]
 801014c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801014e:	697b      	ldr	r3, [r7, #20]
 8010150:	2200      	movs	r2, #0
 8010152:	711a      	strb	r2, [r3, #4]
 8010154:	2200      	movs	r2, #0
 8010156:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8010158:	697b      	ldr	r3, [r7, #20]
 801015a:	2200      	movs	r2, #0
 801015c:	719a      	strb	r2, [r3, #6]
 801015e:	2200      	movs	r2, #0
 8010160:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8010162:	69fb      	ldr	r3, [r7, #28]
 8010164:	685b      	ldr	r3, [r3, #4]
 8010166:	f103 0008 	add.w	r0, r3, #8
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	685b      	ldr	r3, [r3, #4]
 801016e:	221c      	movs	r2, #28
 8010170:	4619      	mov	r1, r3
 8010172:	f001 fd0a 	bl	8011b8a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8010176:	69bb      	ldr	r3, [r7, #24]
 8010178:	68db      	ldr	r3, [r3, #12]
 801017a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801017c:	f107 030c 	add.w	r3, r7, #12
 8010180:	4618      	mov	r0, r3
 8010182:	f000 f825 	bl	80101d0 <ip4_route>
 8010186:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8010188:	693b      	ldr	r3, [r7, #16]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d011      	beq.n	80101b2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801018e:	697b      	ldr	r3, [r7, #20]
 8010190:	2200      	movs	r2, #0
 8010192:	709a      	strb	r2, [r3, #2]
 8010194:	2200      	movs	r2, #0
 8010196:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8010198:	f107 020c 	add.w	r2, r7, #12
 801019c:	693b      	ldr	r3, [r7, #16]
 801019e:	9302      	str	r3, [sp, #8]
 80101a0:	2301      	movs	r3, #1
 80101a2:	9301      	str	r3, [sp, #4]
 80101a4:	2300      	movs	r3, #0
 80101a6:	9300      	str	r3, [sp, #0]
 80101a8:	23ff      	movs	r3, #255	@ 0xff
 80101aa:	2100      	movs	r1, #0
 80101ac:	69f8      	ldr	r0, [r7, #28]
 80101ae:	f000 f9cd 	bl	801054c <ip4_output_if>
  }
  pbuf_free(q);
 80101b2:	69f8      	ldr	r0, [r7, #28]
 80101b4:	f7f9 f806 	bl	80091c4 <pbuf_free>
 80101b8:	e000      	b.n	80101bc <icmp_send_response+0xc0>
    return;
 80101ba:	bf00      	nop
}
 80101bc:	3720      	adds	r7, #32
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd80      	pop	{r7, pc}
 80101c2:	bf00      	nop
 80101c4:	08014f34 	.word	0x08014f34
 80101c8:	08015000 	.word	0x08015000
 80101cc:	08014fa4 	.word	0x08014fa4

080101d0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80101d0:	b480      	push	{r7}
 80101d2:	b085      	sub	sp, #20
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80101d8:	4b33      	ldr	r3, [pc, #204]	@ (80102a8 <ip4_route+0xd8>)
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	60fb      	str	r3, [r7, #12]
 80101de:	e036      	b.n	801024e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80101e6:	f003 0301 	and.w	r3, r3, #1
 80101ea:	b2db      	uxtb	r3, r3
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d02b      	beq.n	8010248 <ip4_route+0x78>
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80101f6:	089b      	lsrs	r3, r3, #2
 80101f8:	f003 0301 	and.w	r3, r3, #1
 80101fc:	b2db      	uxtb	r3, r3
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d022      	beq.n	8010248 <ip4_route+0x78>
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	3304      	adds	r3, #4
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d01d      	beq.n	8010248 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681a      	ldr	r2, [r3, #0]
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	3304      	adds	r3, #4
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	405a      	eors	r2, r3
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	3308      	adds	r3, #8
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	4013      	ands	r3, r2
 8010220:	2b00      	cmp	r3, #0
 8010222:	d101      	bne.n	8010228 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	e038      	b.n	801029a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801022e:	f003 0302 	and.w	r3, r3, #2
 8010232:	2b00      	cmp	r3, #0
 8010234:	d108      	bne.n	8010248 <ip4_route+0x78>
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	681a      	ldr	r2, [r3, #0]
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	330c      	adds	r3, #12
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	429a      	cmp	r2, r3
 8010242:	d101      	bne.n	8010248 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	e028      	b.n	801029a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	60fb      	str	r3, [r7, #12]
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d1c5      	bne.n	80101e0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010254:	4b15      	ldr	r3, [pc, #84]	@ (80102ac <ip4_route+0xdc>)
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d01a      	beq.n	8010292 <ip4_route+0xc2>
 801025c:	4b13      	ldr	r3, [pc, #76]	@ (80102ac <ip4_route+0xdc>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010264:	f003 0301 	and.w	r3, r3, #1
 8010268:	2b00      	cmp	r3, #0
 801026a:	d012      	beq.n	8010292 <ip4_route+0xc2>
 801026c:	4b0f      	ldr	r3, [pc, #60]	@ (80102ac <ip4_route+0xdc>)
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010274:	f003 0304 	and.w	r3, r3, #4
 8010278:	2b00      	cmp	r3, #0
 801027a:	d00a      	beq.n	8010292 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801027c:	4b0b      	ldr	r3, [pc, #44]	@ (80102ac <ip4_route+0xdc>)
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	3304      	adds	r3, #4
 8010282:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010284:	2b00      	cmp	r3, #0
 8010286:	d004      	beq.n	8010292 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	b2db      	uxtb	r3, r3
 801028e:	2b7f      	cmp	r3, #127	@ 0x7f
 8010290:	d101      	bne.n	8010296 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8010292:	2300      	movs	r3, #0
 8010294:	e001      	b.n	801029a <ip4_route+0xca>
  }

  return netif_default;
 8010296:	4b05      	ldr	r3, [pc, #20]	@ (80102ac <ip4_route+0xdc>)
 8010298:	681b      	ldr	r3, [r3, #0]
}
 801029a:	4618      	mov	r0, r3
 801029c:	3714      	adds	r7, #20
 801029e:	46bd      	mov	sp, r7
 80102a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a4:	4770      	bx	lr
 80102a6:	bf00      	nop
 80102a8:	2000fd9c 	.word	0x2000fd9c
 80102ac:	2000fda0 	.word	0x2000fda0

080102b0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b082      	sub	sp, #8
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80102be:	f003 0301 	and.w	r3, r3, #1
 80102c2:	b2db      	uxtb	r3, r3
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d016      	beq.n	80102f6 <ip4_input_accept+0x46>
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	3304      	adds	r3, #4
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d011      	beq.n	80102f6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80102d2:	4b0b      	ldr	r3, [pc, #44]	@ (8010300 <ip4_input_accept+0x50>)
 80102d4:	695a      	ldr	r2, [r3, #20]
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	3304      	adds	r3, #4
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	429a      	cmp	r2, r3
 80102de:	d008      	beq.n	80102f2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80102e0:	4b07      	ldr	r3, [pc, #28]	@ (8010300 <ip4_input_accept+0x50>)
 80102e2:	695b      	ldr	r3, [r3, #20]
 80102e4:	6879      	ldr	r1, [r7, #4]
 80102e6:	4618      	mov	r0, r3
 80102e8:	f000 fa08 	bl	80106fc <ip4_addr_isbroadcast_u32>
 80102ec:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d001      	beq.n	80102f6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80102f2:	2301      	movs	r3, #1
 80102f4:	e000      	b.n	80102f8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80102f6:	2300      	movs	r3, #0
}
 80102f8:	4618      	mov	r0, r3
 80102fa:	3708      	adds	r7, #8
 80102fc:	46bd      	mov	sp, r7
 80102fe:	bd80      	pop	{r7, pc}
 8010300:	200092d8 	.word	0x200092d8

08010304 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b086      	sub	sp, #24
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
 801030c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	685b      	ldr	r3, [r3, #4]
 8010312:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8010314:	697b      	ldr	r3, [r7, #20]
 8010316:	781b      	ldrb	r3, [r3, #0]
 8010318:	091b      	lsrs	r3, r3, #4
 801031a:	b2db      	uxtb	r3, r3
 801031c:	2b04      	cmp	r3, #4
 801031e:	d004      	beq.n	801032a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8010320:	6878      	ldr	r0, [r7, #4]
 8010322:	f7f8 ff4f 	bl	80091c4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8010326:	2300      	movs	r3, #0
 8010328:	e107      	b.n	801053a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801032a:	697b      	ldr	r3, [r7, #20]
 801032c:	781b      	ldrb	r3, [r3, #0]
 801032e:	f003 030f 	and.w	r3, r3, #15
 8010332:	b2db      	uxtb	r3, r3
 8010334:	009b      	lsls	r3, r3, #2
 8010336:	b2db      	uxtb	r3, r3
 8010338:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801033a:	697b      	ldr	r3, [r7, #20]
 801033c:	885b      	ldrh	r3, [r3, #2]
 801033e:	b29b      	uxth	r3, r3
 8010340:	4618      	mov	r0, r3
 8010342:	f7f7 fb3d 	bl	80079c0 <lwip_htons>
 8010346:	4603      	mov	r3, r0
 8010348:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	891b      	ldrh	r3, [r3, #8]
 801034e:	89ba      	ldrh	r2, [r7, #12]
 8010350:	429a      	cmp	r2, r3
 8010352:	d204      	bcs.n	801035e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8010354:	89bb      	ldrh	r3, [r7, #12]
 8010356:	4619      	mov	r1, r3
 8010358:	6878      	ldr	r0, [r7, #4]
 801035a:	f7f8 fdad 	bl	8008eb8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	895b      	ldrh	r3, [r3, #10]
 8010362:	89fa      	ldrh	r2, [r7, #14]
 8010364:	429a      	cmp	r2, r3
 8010366:	d807      	bhi.n	8010378 <ip4_input+0x74>
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	891b      	ldrh	r3, [r3, #8]
 801036c:	89ba      	ldrh	r2, [r7, #12]
 801036e:	429a      	cmp	r2, r3
 8010370:	d802      	bhi.n	8010378 <ip4_input+0x74>
 8010372:	89fb      	ldrh	r3, [r7, #14]
 8010374:	2b13      	cmp	r3, #19
 8010376:	d804      	bhi.n	8010382 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8010378:	6878      	ldr	r0, [r7, #4]
 801037a:	f7f8 ff23 	bl	80091c4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801037e:	2300      	movs	r3, #0
 8010380:	e0db      	b.n	801053a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8010382:	697b      	ldr	r3, [r7, #20]
 8010384:	691b      	ldr	r3, [r3, #16]
 8010386:	4a6f      	ldr	r2, [pc, #444]	@ (8010544 <ip4_input+0x240>)
 8010388:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801038a:	697b      	ldr	r3, [r7, #20]
 801038c:	68db      	ldr	r3, [r3, #12]
 801038e:	4a6d      	ldr	r2, [pc, #436]	@ (8010544 <ip4_input+0x240>)
 8010390:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010392:	4b6c      	ldr	r3, [pc, #432]	@ (8010544 <ip4_input+0x240>)
 8010394:	695b      	ldr	r3, [r3, #20]
 8010396:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801039a:	2be0      	cmp	r3, #224	@ 0xe0
 801039c:	d112      	bne.n	80103c4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801039e:	683b      	ldr	r3, [r7, #0]
 80103a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80103a4:	f003 0301 	and.w	r3, r3, #1
 80103a8:	b2db      	uxtb	r3, r3
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d007      	beq.n	80103be <ip4_input+0xba>
 80103ae:	683b      	ldr	r3, [r7, #0]
 80103b0:	3304      	adds	r3, #4
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d002      	beq.n	80103be <ip4_input+0xba>
      netif = inp;
 80103b8:	683b      	ldr	r3, [r7, #0]
 80103ba:	613b      	str	r3, [r7, #16]
 80103bc:	e02a      	b.n	8010414 <ip4_input+0x110>
    } else {
      netif = NULL;
 80103be:	2300      	movs	r3, #0
 80103c0:	613b      	str	r3, [r7, #16]
 80103c2:	e027      	b.n	8010414 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80103c4:	6838      	ldr	r0, [r7, #0]
 80103c6:	f7ff ff73 	bl	80102b0 <ip4_input_accept>
 80103ca:	4603      	mov	r3, r0
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d002      	beq.n	80103d6 <ip4_input+0xd2>
      netif = inp;
 80103d0:	683b      	ldr	r3, [r7, #0]
 80103d2:	613b      	str	r3, [r7, #16]
 80103d4:	e01e      	b.n	8010414 <ip4_input+0x110>
    } else {
      netif = NULL;
 80103d6:	2300      	movs	r3, #0
 80103d8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80103da:	4b5a      	ldr	r3, [pc, #360]	@ (8010544 <ip4_input+0x240>)
 80103dc:	695b      	ldr	r3, [r3, #20]
 80103de:	b2db      	uxtb	r3, r3
 80103e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80103e2:	d017      	beq.n	8010414 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80103e4:	4b58      	ldr	r3, [pc, #352]	@ (8010548 <ip4_input+0x244>)
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	613b      	str	r3, [r7, #16]
 80103ea:	e00e      	b.n	801040a <ip4_input+0x106>
          if (netif == inp) {
 80103ec:	693a      	ldr	r2, [r7, #16]
 80103ee:	683b      	ldr	r3, [r7, #0]
 80103f0:	429a      	cmp	r2, r3
 80103f2:	d006      	beq.n	8010402 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80103f4:	6938      	ldr	r0, [r7, #16]
 80103f6:	f7ff ff5b 	bl	80102b0 <ip4_input_accept>
 80103fa:	4603      	mov	r3, r0
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d108      	bne.n	8010412 <ip4_input+0x10e>
 8010400:	e000      	b.n	8010404 <ip4_input+0x100>
            continue;
 8010402:	bf00      	nop
        NETIF_FOREACH(netif) {
 8010404:	693b      	ldr	r3, [r7, #16]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	613b      	str	r3, [r7, #16]
 801040a:	693b      	ldr	r3, [r7, #16]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d1ed      	bne.n	80103ec <ip4_input+0xe8>
 8010410:	e000      	b.n	8010414 <ip4_input+0x110>
            break;
 8010412:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010414:	4b4b      	ldr	r3, [pc, #300]	@ (8010544 <ip4_input+0x240>)
 8010416:	691b      	ldr	r3, [r3, #16]
 8010418:	6839      	ldr	r1, [r7, #0]
 801041a:	4618      	mov	r0, r3
 801041c:	f000 f96e 	bl	80106fc <ip4_addr_isbroadcast_u32>
 8010420:	4603      	mov	r3, r0
 8010422:	2b00      	cmp	r3, #0
 8010424:	d105      	bne.n	8010432 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8010426:	4b47      	ldr	r3, [pc, #284]	@ (8010544 <ip4_input+0x240>)
 8010428:	691b      	ldr	r3, [r3, #16]
 801042a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801042e:	2be0      	cmp	r3, #224	@ 0xe0
 8010430:	d104      	bne.n	801043c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8010432:	6878      	ldr	r0, [r7, #4]
 8010434:	f7f8 fec6 	bl	80091c4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8010438:	2300      	movs	r3, #0
 801043a:	e07e      	b.n	801053a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801043c:	693b      	ldr	r3, [r7, #16]
 801043e:	2b00      	cmp	r3, #0
 8010440:	d104      	bne.n	801044c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8010442:	6878      	ldr	r0, [r7, #4]
 8010444:	f7f8 febe 	bl	80091c4 <pbuf_free>
    return ERR_OK;
 8010448:	2300      	movs	r3, #0
 801044a:	e076      	b.n	801053a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801044c:	697b      	ldr	r3, [r7, #20]
 801044e:	88db      	ldrh	r3, [r3, #6]
 8010450:	b29b      	uxth	r3, r3
 8010452:	461a      	mov	r2, r3
 8010454:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8010458:	4013      	ands	r3, r2
 801045a:	2b00      	cmp	r3, #0
 801045c:	d00b      	beq.n	8010476 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801045e:	6878      	ldr	r0, [r7, #4]
 8010460:	f000 fc92 	bl	8010d88 <ip4_reass>
 8010464:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d101      	bne.n	8010470 <ip4_input+0x16c>
      return ERR_OK;
 801046c:	2300      	movs	r3, #0
 801046e:	e064      	b.n	801053a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	685b      	ldr	r3, [r3, #4]
 8010474:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8010476:	4a33      	ldr	r2, [pc, #204]	@ (8010544 <ip4_input+0x240>)
 8010478:	693b      	ldr	r3, [r7, #16]
 801047a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801047c:	4a31      	ldr	r2, [pc, #196]	@ (8010544 <ip4_input+0x240>)
 801047e:	683b      	ldr	r3, [r7, #0]
 8010480:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8010482:	4a30      	ldr	r2, [pc, #192]	@ (8010544 <ip4_input+0x240>)
 8010484:	697b      	ldr	r3, [r7, #20]
 8010486:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8010488:	697b      	ldr	r3, [r7, #20]
 801048a:	781b      	ldrb	r3, [r3, #0]
 801048c:	f003 030f 	and.w	r3, r3, #15
 8010490:	b2db      	uxtb	r3, r3
 8010492:	009b      	lsls	r3, r3, #2
 8010494:	b2db      	uxtb	r3, r3
 8010496:	461a      	mov	r2, r3
 8010498:	4b2a      	ldr	r3, [pc, #168]	@ (8010544 <ip4_input+0x240>)
 801049a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801049c:	89fb      	ldrh	r3, [r7, #14]
 801049e:	4619      	mov	r1, r3
 80104a0:	6878      	ldr	r0, [r7, #4]
 80104a2:	f7f8 fe09 	bl	80090b8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80104a6:	697b      	ldr	r3, [r7, #20]
 80104a8:	7a5b      	ldrb	r3, [r3, #9]
 80104aa:	2b11      	cmp	r3, #17
 80104ac:	d006      	beq.n	80104bc <ip4_input+0x1b8>
 80104ae:	2b11      	cmp	r3, #17
 80104b0:	dc13      	bgt.n	80104da <ip4_input+0x1d6>
 80104b2:	2b01      	cmp	r3, #1
 80104b4:	d00c      	beq.n	80104d0 <ip4_input+0x1cc>
 80104b6:	2b06      	cmp	r3, #6
 80104b8:	d005      	beq.n	80104c6 <ip4_input+0x1c2>
 80104ba:	e00e      	b.n	80104da <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80104bc:	6839      	ldr	r1, [r7, #0]
 80104be:	6878      	ldr	r0, [r7, #4]
 80104c0:	f7fe fc68 	bl	800ed94 <udp_input>
        break;
 80104c4:	e026      	b.n	8010514 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80104c6:	6839      	ldr	r1, [r7, #0]
 80104c8:	6878      	ldr	r0, [r7, #4]
 80104ca:	f7fa fcb5 	bl	800ae38 <tcp_input>
        break;
 80104ce:	e021      	b.n	8010514 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80104d0:	6839      	ldr	r1, [r7, #0]
 80104d2:	6878      	ldr	r0, [r7, #4]
 80104d4:	f7ff fcee 	bl	800feb4 <icmp_input>
        break;
 80104d8:	e01c      	b.n	8010514 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80104da:	4b1a      	ldr	r3, [pc, #104]	@ (8010544 <ip4_input+0x240>)
 80104dc:	695b      	ldr	r3, [r3, #20]
 80104de:	6939      	ldr	r1, [r7, #16]
 80104e0:	4618      	mov	r0, r3
 80104e2:	f000 f90b 	bl	80106fc <ip4_addr_isbroadcast_u32>
 80104e6:	4603      	mov	r3, r0
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d10f      	bne.n	801050c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80104ec:	4b15      	ldr	r3, [pc, #84]	@ (8010544 <ip4_input+0x240>)
 80104ee:	695b      	ldr	r3, [r3, #20]
 80104f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80104f4:	2be0      	cmp	r3, #224	@ 0xe0
 80104f6:	d009      	beq.n	801050c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80104f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80104fc:	4619      	mov	r1, r3
 80104fe:	6878      	ldr	r0, [r7, #4]
 8010500:	f7f8 fe4d 	bl	800919e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8010504:	2102      	movs	r1, #2
 8010506:	6878      	ldr	r0, [r7, #4]
 8010508:	f7ff fdd8 	bl	80100bc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801050c:	6878      	ldr	r0, [r7, #4]
 801050e:	f7f8 fe59 	bl	80091c4 <pbuf_free>
        break;
 8010512:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8010514:	4b0b      	ldr	r3, [pc, #44]	@ (8010544 <ip4_input+0x240>)
 8010516:	2200      	movs	r2, #0
 8010518:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801051a:	4b0a      	ldr	r3, [pc, #40]	@ (8010544 <ip4_input+0x240>)
 801051c:	2200      	movs	r2, #0
 801051e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8010520:	4b08      	ldr	r3, [pc, #32]	@ (8010544 <ip4_input+0x240>)
 8010522:	2200      	movs	r2, #0
 8010524:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8010526:	4b07      	ldr	r3, [pc, #28]	@ (8010544 <ip4_input+0x240>)
 8010528:	2200      	movs	r2, #0
 801052a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801052c:	4b05      	ldr	r3, [pc, #20]	@ (8010544 <ip4_input+0x240>)
 801052e:	2200      	movs	r2, #0
 8010530:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8010532:	4b04      	ldr	r3, [pc, #16]	@ (8010544 <ip4_input+0x240>)
 8010534:	2200      	movs	r2, #0
 8010536:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8010538:	2300      	movs	r3, #0
}
 801053a:	4618      	mov	r0, r3
 801053c:	3718      	adds	r7, #24
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}
 8010542:	bf00      	nop
 8010544:	200092d8 	.word	0x200092d8
 8010548:	2000fd9c 	.word	0x2000fd9c

0801054c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b08a      	sub	sp, #40	@ 0x28
 8010550:	af04      	add	r7, sp, #16
 8010552:	60f8      	str	r0, [r7, #12]
 8010554:	60b9      	str	r1, [r7, #8]
 8010556:	607a      	str	r2, [r7, #4]
 8010558:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801055a:	68bb      	ldr	r3, [r7, #8]
 801055c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d009      	beq.n	8010578 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8010564:	68bb      	ldr	r3, [r7, #8]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d003      	beq.n	8010572 <ip4_output_if+0x26>
 801056a:	68bb      	ldr	r3, [r7, #8]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d102      	bne.n	8010578 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8010572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010574:	3304      	adds	r3, #4
 8010576:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8010578:	78fa      	ldrb	r2, [r7, #3]
 801057a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801057c:	9302      	str	r3, [sp, #8]
 801057e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010582:	9301      	str	r3, [sp, #4]
 8010584:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010588:	9300      	str	r3, [sp, #0]
 801058a:	4613      	mov	r3, r2
 801058c:	687a      	ldr	r2, [r7, #4]
 801058e:	6979      	ldr	r1, [r7, #20]
 8010590:	68f8      	ldr	r0, [r7, #12]
 8010592:	f000 f805 	bl	80105a0 <ip4_output_if_src>
 8010596:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8010598:	4618      	mov	r0, r3
 801059a:	3718      	adds	r7, #24
 801059c:	46bd      	mov	sp, r7
 801059e:	bd80      	pop	{r7, pc}

080105a0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b088      	sub	sp, #32
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	60f8      	str	r0, [r7, #12]
 80105a8:	60b9      	str	r1, [r7, #8]
 80105aa:	607a      	str	r2, [r7, #4]
 80105ac:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	7b9b      	ldrb	r3, [r3, #14]
 80105b2:	2b01      	cmp	r3, #1
 80105b4:	d006      	beq.n	80105c4 <ip4_output_if_src+0x24>
 80105b6:	4b4b      	ldr	r3, [pc, #300]	@ (80106e4 <ip4_output_if_src+0x144>)
 80105b8:	f44f 7255 	mov.w	r2, #852	@ 0x354
 80105bc:	494a      	ldr	r1, [pc, #296]	@ (80106e8 <ip4_output_if_src+0x148>)
 80105be:	484b      	ldr	r0, [pc, #300]	@ (80106ec <ip4_output_if_src+0x14c>)
 80105c0:	f001 fa08 	bl	80119d4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d060      	beq.n	801068c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80105ca:	2314      	movs	r3, #20
 80105cc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80105ce:	2114      	movs	r1, #20
 80105d0:	68f8      	ldr	r0, [r7, #12]
 80105d2:	f7f8 fd61 	bl	8009098 <pbuf_add_header>
 80105d6:	4603      	mov	r3, r0
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d002      	beq.n	80105e2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80105dc:	f06f 0301 	mvn.w	r3, #1
 80105e0:	e07c      	b.n	80106dc <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	685b      	ldr	r3, [r3, #4]
 80105e6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	895b      	ldrh	r3, [r3, #10]
 80105ec:	2b13      	cmp	r3, #19
 80105ee:	d806      	bhi.n	80105fe <ip4_output_if_src+0x5e>
 80105f0:	4b3c      	ldr	r3, [pc, #240]	@ (80106e4 <ip4_output_if_src+0x144>)
 80105f2:	f44f 7262 	mov.w	r2, #904	@ 0x388
 80105f6:	493e      	ldr	r1, [pc, #248]	@ (80106f0 <ip4_output_if_src+0x150>)
 80105f8:	483c      	ldr	r0, [pc, #240]	@ (80106ec <ip4_output_if_src+0x14c>)
 80105fa:	f001 f9eb 	bl	80119d4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80105fe:	69fb      	ldr	r3, [r7, #28]
 8010600:	78fa      	ldrb	r2, [r7, #3]
 8010602:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8010604:	69fb      	ldr	r3, [r7, #28]
 8010606:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801060a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681a      	ldr	r2, [r3, #0]
 8010610:	69fb      	ldr	r3, [r7, #28]
 8010612:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8010614:	8b7b      	ldrh	r3, [r7, #26]
 8010616:	089b      	lsrs	r3, r3, #2
 8010618:	b29b      	uxth	r3, r3
 801061a:	b2db      	uxtb	r3, r3
 801061c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010620:	b2da      	uxtb	r2, r3
 8010622:	69fb      	ldr	r3, [r7, #28]
 8010624:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8010626:	69fb      	ldr	r3, [r7, #28]
 8010628:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801062c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	891b      	ldrh	r3, [r3, #8]
 8010632:	4618      	mov	r0, r3
 8010634:	f7f7 f9c4 	bl	80079c0 <lwip_htons>
 8010638:	4603      	mov	r3, r0
 801063a:	461a      	mov	r2, r3
 801063c:	69fb      	ldr	r3, [r7, #28]
 801063e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8010640:	69fb      	ldr	r3, [r7, #28]
 8010642:	2200      	movs	r2, #0
 8010644:	719a      	strb	r2, [r3, #6]
 8010646:	2200      	movs	r2, #0
 8010648:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801064a:	4b2a      	ldr	r3, [pc, #168]	@ (80106f4 <ip4_output_if_src+0x154>)
 801064c:	881b      	ldrh	r3, [r3, #0]
 801064e:	4618      	mov	r0, r3
 8010650:	f7f7 f9b6 	bl	80079c0 <lwip_htons>
 8010654:	4603      	mov	r3, r0
 8010656:	461a      	mov	r2, r3
 8010658:	69fb      	ldr	r3, [r7, #28]
 801065a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801065c:	4b25      	ldr	r3, [pc, #148]	@ (80106f4 <ip4_output_if_src+0x154>)
 801065e:	881b      	ldrh	r3, [r3, #0]
 8010660:	3301      	adds	r3, #1
 8010662:	b29a      	uxth	r2, r3
 8010664:	4b23      	ldr	r3, [pc, #140]	@ (80106f4 <ip4_output_if_src+0x154>)
 8010666:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8010668:	68bb      	ldr	r3, [r7, #8]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d104      	bne.n	8010678 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801066e:	4b22      	ldr	r3, [pc, #136]	@ (80106f8 <ip4_output_if_src+0x158>)
 8010670:	681a      	ldr	r2, [r3, #0]
 8010672:	69fb      	ldr	r3, [r7, #28]
 8010674:	60da      	str	r2, [r3, #12]
 8010676:	e003      	b.n	8010680 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	681a      	ldr	r2, [r3, #0]
 801067c:	69fb      	ldr	r3, [r7, #28]
 801067e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8010680:	69fb      	ldr	r3, [r7, #28]
 8010682:	2200      	movs	r2, #0
 8010684:	729a      	strb	r2, [r3, #10]
 8010686:	2200      	movs	r2, #0
 8010688:	72da      	strb	r2, [r3, #11]
 801068a:	e00f      	b.n	80106ac <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	895b      	ldrh	r3, [r3, #10]
 8010690:	2b13      	cmp	r3, #19
 8010692:	d802      	bhi.n	801069a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010694:	f06f 0301 	mvn.w	r3, #1
 8010698:	e020      	b.n	80106dc <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	685b      	ldr	r3, [r3, #4]
 801069e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80106a0:	69fb      	ldr	r3, [r7, #28]
 80106a2:	691b      	ldr	r3, [r3, #16]
 80106a4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80106a6:	f107 0314 	add.w	r3, r7, #20
 80106aa:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80106ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106ae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d00c      	beq.n	80106ce <ip4_output_if_src+0x12e>
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	891a      	ldrh	r2, [r3, #8]
 80106b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106ba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80106bc:	429a      	cmp	r2, r3
 80106be:	d906      	bls.n	80106ce <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80106c0:	687a      	ldr	r2, [r7, #4]
 80106c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80106c4:	68f8      	ldr	r0, [r7, #12]
 80106c6:	f000 fd53 	bl	8011170 <ip4_frag>
 80106ca:	4603      	mov	r3, r0
 80106cc:	e006      	b.n	80106dc <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80106ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106d0:	695b      	ldr	r3, [r3, #20]
 80106d2:	687a      	ldr	r2, [r7, #4]
 80106d4:	68f9      	ldr	r1, [r7, #12]
 80106d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80106d8:	4798      	blx	r3
 80106da:	4603      	mov	r3, r0
}
 80106dc:	4618      	mov	r0, r3
 80106de:	3720      	adds	r7, #32
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}
 80106e4:	0801502c 	.word	0x0801502c
 80106e8:	08015060 	.word	0x08015060
 80106ec:	0801506c 	.word	0x0801506c
 80106f0:	08015094 	.word	0x08015094
 80106f4:	2000fefa 	.word	0x2000fefa
 80106f8:	080154b4 	.word	0x080154b4

080106fc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80106fc:	b480      	push	{r7}
 80106fe:	b085      	sub	sp, #20
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
 8010704:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010710:	d002      	beq.n	8010718 <ip4_addr_isbroadcast_u32+0x1c>
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d101      	bne.n	801071c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010718:	2301      	movs	r3, #1
 801071a:	e02a      	b.n	8010772 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801071c:	683b      	ldr	r3, [r7, #0]
 801071e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010722:	f003 0302 	and.w	r3, r3, #2
 8010726:	2b00      	cmp	r3, #0
 8010728:	d101      	bne.n	801072e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801072a:	2300      	movs	r3, #0
 801072c:	e021      	b.n	8010772 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801072e:	683b      	ldr	r3, [r7, #0]
 8010730:	3304      	adds	r3, #4
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	687a      	ldr	r2, [r7, #4]
 8010736:	429a      	cmp	r2, r3
 8010738:	d101      	bne.n	801073e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801073a:	2300      	movs	r3, #0
 801073c:	e019      	b.n	8010772 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801073e:	68fa      	ldr	r2, [r7, #12]
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	3304      	adds	r3, #4
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	405a      	eors	r2, r3
 8010748:	683b      	ldr	r3, [r7, #0]
 801074a:	3308      	adds	r3, #8
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	4013      	ands	r3, r2
 8010750:	2b00      	cmp	r3, #0
 8010752:	d10d      	bne.n	8010770 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010754:	683b      	ldr	r3, [r7, #0]
 8010756:	3308      	adds	r3, #8
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	43da      	mvns	r2, r3
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	3308      	adds	r3, #8
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010768:	429a      	cmp	r2, r3
 801076a:	d101      	bne.n	8010770 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801076c:	2301      	movs	r3, #1
 801076e:	e000      	b.n	8010772 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8010770:	2300      	movs	r3, #0
  }
}
 8010772:	4618      	mov	r0, r3
 8010774:	3714      	adds	r7, #20
 8010776:	46bd      	mov	sp, r7
 8010778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077c:	4770      	bx	lr
	...

08010780 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8010780:	b580      	push	{r7, lr}
 8010782:	b084      	sub	sp, #16
 8010784:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8010786:	2300      	movs	r3, #0
 8010788:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801078a:	4b12      	ldr	r3, [pc, #72]	@ (80107d4 <ip_reass_tmr+0x54>)
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8010790:	e018      	b.n	80107c4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	7fdb      	ldrb	r3, [r3, #31]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d00b      	beq.n	80107b2 <ip_reass_tmr+0x32>
      r->timer--;
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	7fdb      	ldrb	r3, [r3, #31]
 801079e:	3b01      	subs	r3, #1
 80107a0:	b2da      	uxtb	r2, r3
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	60fb      	str	r3, [r7, #12]
 80107b0:	e008      	b.n	80107c4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80107bc:	68b9      	ldr	r1, [r7, #8]
 80107be:	6878      	ldr	r0, [r7, #4]
 80107c0:	f000 f80a 	bl	80107d8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d1e3      	bne.n	8010792 <ip_reass_tmr+0x12>
    }
  }
}
 80107ca:	bf00      	nop
 80107cc:	bf00      	nop
 80107ce:	3710      	adds	r7, #16
 80107d0:	46bd      	mov	sp, r7
 80107d2:	bd80      	pop	{r7, pc}
 80107d4:	2000fefc 	.word	0x2000fefc

080107d8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80107d8:	b580      	push	{r7, lr}
 80107da:	b088      	sub	sp, #32
 80107dc:	af00      	add	r7, sp, #0
 80107de:	6078      	str	r0, [r7, #4]
 80107e0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80107e2:	2300      	movs	r3, #0
 80107e4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80107e6:	683a      	ldr	r2, [r7, #0]
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	429a      	cmp	r2, r3
 80107ec:	d105      	bne.n	80107fa <ip_reass_free_complete_datagram+0x22>
 80107ee:	4b45      	ldr	r3, [pc, #276]	@ (8010904 <ip_reass_free_complete_datagram+0x12c>)
 80107f0:	22ab      	movs	r2, #171	@ 0xab
 80107f2:	4945      	ldr	r1, [pc, #276]	@ (8010908 <ip_reass_free_complete_datagram+0x130>)
 80107f4:	4845      	ldr	r0, [pc, #276]	@ (801090c <ip_reass_free_complete_datagram+0x134>)
 80107f6:	f001 f8ed 	bl	80119d4 <iprintf>
  if (prev != NULL) {
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d00a      	beq.n	8010816 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	687a      	ldr	r2, [r7, #4]
 8010806:	429a      	cmp	r2, r3
 8010808:	d005      	beq.n	8010816 <ip_reass_free_complete_datagram+0x3e>
 801080a:	4b3e      	ldr	r3, [pc, #248]	@ (8010904 <ip_reass_free_complete_datagram+0x12c>)
 801080c:	22ad      	movs	r2, #173	@ 0xad
 801080e:	4940      	ldr	r1, [pc, #256]	@ (8010910 <ip_reass_free_complete_datagram+0x138>)
 8010810:	483e      	ldr	r0, [pc, #248]	@ (801090c <ip_reass_free_complete_datagram+0x134>)
 8010812:	f001 f8df 	bl	80119d4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	685b      	ldr	r3, [r3, #4]
 801081a:	685b      	ldr	r3, [r3, #4]
 801081c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801081e:	697b      	ldr	r3, [r7, #20]
 8010820:	889b      	ldrh	r3, [r3, #4]
 8010822:	b29b      	uxth	r3, r3
 8010824:	2b00      	cmp	r3, #0
 8010826:	d12a      	bne.n	801087e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	685b      	ldr	r3, [r3, #4]
 801082c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801082e:	697b      	ldr	r3, [r7, #20]
 8010830:	681a      	ldr	r2, [r3, #0]
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8010836:	69bb      	ldr	r3, [r7, #24]
 8010838:	6858      	ldr	r0, [r3, #4]
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	3308      	adds	r3, #8
 801083e:	2214      	movs	r2, #20
 8010840:	4619      	mov	r1, r3
 8010842:	f001 f9a2 	bl	8011b8a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8010846:	2101      	movs	r1, #1
 8010848:	69b8      	ldr	r0, [r7, #24]
 801084a:	f7ff fc47 	bl	80100dc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801084e:	69b8      	ldr	r0, [r7, #24]
 8010850:	f7f8 fd46 	bl	80092e0 <pbuf_clen>
 8010854:	4603      	mov	r3, r0
 8010856:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010858:	8bfa      	ldrh	r2, [r7, #30]
 801085a:	8a7b      	ldrh	r3, [r7, #18]
 801085c:	4413      	add	r3, r2
 801085e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010862:	db05      	blt.n	8010870 <ip_reass_free_complete_datagram+0x98>
 8010864:	4b27      	ldr	r3, [pc, #156]	@ (8010904 <ip_reass_free_complete_datagram+0x12c>)
 8010866:	22bc      	movs	r2, #188	@ 0xbc
 8010868:	492a      	ldr	r1, [pc, #168]	@ (8010914 <ip_reass_free_complete_datagram+0x13c>)
 801086a:	4828      	ldr	r0, [pc, #160]	@ (801090c <ip_reass_free_complete_datagram+0x134>)
 801086c:	f001 f8b2 	bl	80119d4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010870:	8bfa      	ldrh	r2, [r7, #30]
 8010872:	8a7b      	ldrh	r3, [r7, #18]
 8010874:	4413      	add	r3, r2
 8010876:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8010878:	69b8      	ldr	r0, [r7, #24]
 801087a:	f7f8 fca3 	bl	80091c4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	685b      	ldr	r3, [r3, #4]
 8010882:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8010884:	e01f      	b.n	80108c6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8010886:	69bb      	ldr	r3, [r7, #24]
 8010888:	685b      	ldr	r3, [r3, #4]
 801088a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801088c:	69bb      	ldr	r3, [r7, #24]
 801088e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8010890:	697b      	ldr	r3, [r7, #20]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8010896:	68f8      	ldr	r0, [r7, #12]
 8010898:	f7f8 fd22 	bl	80092e0 <pbuf_clen>
 801089c:	4603      	mov	r3, r0
 801089e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80108a0:	8bfa      	ldrh	r2, [r7, #30]
 80108a2:	8a7b      	ldrh	r3, [r7, #18]
 80108a4:	4413      	add	r3, r2
 80108a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80108aa:	db05      	blt.n	80108b8 <ip_reass_free_complete_datagram+0xe0>
 80108ac:	4b15      	ldr	r3, [pc, #84]	@ (8010904 <ip_reass_free_complete_datagram+0x12c>)
 80108ae:	22cc      	movs	r2, #204	@ 0xcc
 80108b0:	4918      	ldr	r1, [pc, #96]	@ (8010914 <ip_reass_free_complete_datagram+0x13c>)
 80108b2:	4816      	ldr	r0, [pc, #88]	@ (801090c <ip_reass_free_complete_datagram+0x134>)
 80108b4:	f001 f88e 	bl	80119d4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80108b8:	8bfa      	ldrh	r2, [r7, #30]
 80108ba:	8a7b      	ldrh	r3, [r7, #18]
 80108bc:	4413      	add	r3, r2
 80108be:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80108c0:	68f8      	ldr	r0, [r7, #12]
 80108c2:	f7f8 fc7f 	bl	80091c4 <pbuf_free>
  while (p != NULL) {
 80108c6:	69bb      	ldr	r3, [r7, #24]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d1dc      	bne.n	8010886 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80108cc:	6839      	ldr	r1, [r7, #0]
 80108ce:	6878      	ldr	r0, [r7, #4]
 80108d0:	f000 f8c2 	bl	8010a58 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80108d4:	4b10      	ldr	r3, [pc, #64]	@ (8010918 <ip_reass_free_complete_datagram+0x140>)
 80108d6:	881b      	ldrh	r3, [r3, #0]
 80108d8:	8bfa      	ldrh	r2, [r7, #30]
 80108da:	429a      	cmp	r2, r3
 80108dc:	d905      	bls.n	80108ea <ip_reass_free_complete_datagram+0x112>
 80108de:	4b09      	ldr	r3, [pc, #36]	@ (8010904 <ip_reass_free_complete_datagram+0x12c>)
 80108e0:	22d2      	movs	r2, #210	@ 0xd2
 80108e2:	490e      	ldr	r1, [pc, #56]	@ (801091c <ip_reass_free_complete_datagram+0x144>)
 80108e4:	4809      	ldr	r0, [pc, #36]	@ (801090c <ip_reass_free_complete_datagram+0x134>)
 80108e6:	f001 f875 	bl	80119d4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80108ea:	4b0b      	ldr	r3, [pc, #44]	@ (8010918 <ip_reass_free_complete_datagram+0x140>)
 80108ec:	881a      	ldrh	r2, [r3, #0]
 80108ee:	8bfb      	ldrh	r3, [r7, #30]
 80108f0:	1ad3      	subs	r3, r2, r3
 80108f2:	b29a      	uxth	r2, r3
 80108f4:	4b08      	ldr	r3, [pc, #32]	@ (8010918 <ip_reass_free_complete_datagram+0x140>)
 80108f6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80108f8:	8bfb      	ldrh	r3, [r7, #30]
}
 80108fa:	4618      	mov	r0, r3
 80108fc:	3720      	adds	r7, #32
 80108fe:	46bd      	mov	sp, r7
 8010900:	bd80      	pop	{r7, pc}
 8010902:	bf00      	nop
 8010904:	080150c4 	.word	0x080150c4
 8010908:	08015100 	.word	0x08015100
 801090c:	0801510c 	.word	0x0801510c
 8010910:	08015134 	.word	0x08015134
 8010914:	08015148 	.word	0x08015148
 8010918:	2000ff00 	.word	0x2000ff00
 801091c:	08015168 	.word	0x08015168

08010920 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8010920:	b580      	push	{r7, lr}
 8010922:	b08a      	sub	sp, #40	@ 0x28
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
 8010928:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801092a:	2300      	movs	r3, #0
 801092c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801092e:	2300      	movs	r3, #0
 8010930:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8010932:	2300      	movs	r3, #0
 8010934:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8010936:	2300      	movs	r3, #0
 8010938:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801093a:	2300      	movs	r3, #0
 801093c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801093e:	4b28      	ldr	r3, [pc, #160]	@ (80109e0 <ip_reass_remove_oldest_datagram+0xc0>)
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8010944:	e030      	b.n	80109a8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8010946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010948:	695a      	ldr	r2, [r3, #20]
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	68db      	ldr	r3, [r3, #12]
 801094e:	429a      	cmp	r2, r3
 8010950:	d10c      	bne.n	801096c <ip_reass_remove_oldest_datagram+0x4c>
 8010952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010954:	699a      	ldr	r2, [r3, #24]
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	691b      	ldr	r3, [r3, #16]
 801095a:	429a      	cmp	r2, r3
 801095c:	d106      	bne.n	801096c <ip_reass_remove_oldest_datagram+0x4c>
 801095e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010960:	899a      	ldrh	r2, [r3, #12]
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	889b      	ldrh	r3, [r3, #4]
 8010966:	b29b      	uxth	r3, r3
 8010968:	429a      	cmp	r2, r3
 801096a:	d014      	beq.n	8010996 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801096c:	693b      	ldr	r3, [r7, #16]
 801096e:	3301      	adds	r3, #1
 8010970:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8010972:	6a3b      	ldr	r3, [r7, #32]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d104      	bne.n	8010982 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8010978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801097a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801097c:	69fb      	ldr	r3, [r7, #28]
 801097e:	61bb      	str	r3, [r7, #24]
 8010980:	e009      	b.n	8010996 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8010982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010984:	7fda      	ldrb	r2, [r3, #31]
 8010986:	6a3b      	ldr	r3, [r7, #32]
 8010988:	7fdb      	ldrb	r3, [r3, #31]
 801098a:	429a      	cmp	r2, r3
 801098c:	d803      	bhi.n	8010996 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801098e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010990:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010992:	69fb      	ldr	r3, [r7, #28]
 8010994:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8010996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d001      	beq.n	80109a2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801099e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109a0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80109a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80109a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d1cb      	bne.n	8010946 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80109ae:	6a3b      	ldr	r3, [r7, #32]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d008      	beq.n	80109c6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80109b4:	69b9      	ldr	r1, [r7, #24]
 80109b6:	6a38      	ldr	r0, [r7, #32]
 80109b8:	f7ff ff0e 	bl	80107d8 <ip_reass_free_complete_datagram>
 80109bc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80109be:	697a      	ldr	r2, [r7, #20]
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	4413      	add	r3, r2
 80109c4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80109c6:	697a      	ldr	r2, [r7, #20]
 80109c8:	683b      	ldr	r3, [r7, #0]
 80109ca:	429a      	cmp	r2, r3
 80109cc:	da02      	bge.n	80109d4 <ip_reass_remove_oldest_datagram+0xb4>
 80109ce:	693b      	ldr	r3, [r7, #16]
 80109d0:	2b01      	cmp	r3, #1
 80109d2:	dcac      	bgt.n	801092e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80109d4:	697b      	ldr	r3, [r7, #20]
}
 80109d6:	4618      	mov	r0, r3
 80109d8:	3728      	adds	r7, #40	@ 0x28
 80109da:	46bd      	mov	sp, r7
 80109dc:	bd80      	pop	{r7, pc}
 80109de:	bf00      	nop
 80109e0:	2000fefc 	.word	0x2000fefc

080109e4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b084      	sub	sp, #16
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
 80109ec:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80109ee:	2004      	movs	r0, #4
 80109f0:	f7f7 fcca 	bl	8008388 <memp_malloc>
 80109f4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d110      	bne.n	8010a1e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80109fc:	6839      	ldr	r1, [r7, #0]
 80109fe:	6878      	ldr	r0, [r7, #4]
 8010a00:	f7ff ff8e 	bl	8010920 <ip_reass_remove_oldest_datagram>
 8010a04:	4602      	mov	r2, r0
 8010a06:	683b      	ldr	r3, [r7, #0]
 8010a08:	4293      	cmp	r3, r2
 8010a0a:	dc03      	bgt.n	8010a14 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010a0c:	2004      	movs	r0, #4
 8010a0e:	f7f7 fcbb 	bl	8008388 <memp_malloc>
 8010a12:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d101      	bne.n	8010a1e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	e016      	b.n	8010a4c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8010a1e:	2220      	movs	r2, #32
 8010a20:	2100      	movs	r1, #0
 8010a22:	68f8      	ldr	r0, [r7, #12]
 8010a24:	f001 f83b 	bl	8011a9e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	220f      	movs	r2, #15
 8010a2c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8010a2e:	4b09      	ldr	r3, [pc, #36]	@ (8010a54 <ip_reass_enqueue_new_datagram+0x70>)
 8010a30:	681a      	ldr	r2, [r3, #0]
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8010a36:	4a07      	ldr	r2, [pc, #28]	@ (8010a54 <ip_reass_enqueue_new_datagram+0x70>)
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	3308      	adds	r3, #8
 8010a40:	2214      	movs	r2, #20
 8010a42:	6879      	ldr	r1, [r7, #4]
 8010a44:	4618      	mov	r0, r3
 8010a46:	f001 f8a0 	bl	8011b8a <memcpy>
  return ipr;
 8010a4a:	68fb      	ldr	r3, [r7, #12]
}
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	3710      	adds	r7, #16
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bd80      	pop	{r7, pc}
 8010a54:	2000fefc 	.word	0x2000fefc

08010a58 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b082      	sub	sp, #8
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
 8010a60:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8010a62:	4b10      	ldr	r3, [pc, #64]	@ (8010aa4 <ip_reass_dequeue_datagram+0x4c>)
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	687a      	ldr	r2, [r7, #4]
 8010a68:	429a      	cmp	r2, r3
 8010a6a:	d104      	bne.n	8010a76 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	4a0c      	ldr	r2, [pc, #48]	@ (8010aa4 <ip_reass_dequeue_datagram+0x4c>)
 8010a72:	6013      	str	r3, [r2, #0]
 8010a74:	e00d      	b.n	8010a92 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8010a76:	683b      	ldr	r3, [r7, #0]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d106      	bne.n	8010a8a <ip_reass_dequeue_datagram+0x32>
 8010a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8010aa8 <ip_reass_dequeue_datagram+0x50>)
 8010a7e:	f240 1245 	movw	r2, #325	@ 0x145
 8010a82:	490a      	ldr	r1, [pc, #40]	@ (8010aac <ip_reass_dequeue_datagram+0x54>)
 8010a84:	480a      	ldr	r0, [pc, #40]	@ (8010ab0 <ip_reass_dequeue_datagram+0x58>)
 8010a86:	f000 ffa5 	bl	80119d4 <iprintf>
    prev->next = ipr->next;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	681a      	ldr	r2, [r3, #0]
 8010a8e:	683b      	ldr	r3, [r7, #0]
 8010a90:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8010a92:	6879      	ldr	r1, [r7, #4]
 8010a94:	2004      	movs	r0, #4
 8010a96:	f7f7 fced 	bl	8008474 <memp_free>
}
 8010a9a:	bf00      	nop
 8010a9c:	3708      	adds	r7, #8
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	bd80      	pop	{r7, pc}
 8010aa2:	bf00      	nop
 8010aa4:	2000fefc 	.word	0x2000fefc
 8010aa8:	080150c4 	.word	0x080150c4
 8010aac:	0801518c 	.word	0x0801518c
 8010ab0:	0801510c 	.word	0x0801510c

08010ab4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b08c      	sub	sp, #48	@ 0x30
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	60f8      	str	r0, [r7, #12]
 8010abc:	60b9      	str	r1, [r7, #8]
 8010abe:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8010ac4:	2301      	movs	r3, #1
 8010ac6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8010ac8:	68bb      	ldr	r3, [r7, #8]
 8010aca:	685b      	ldr	r3, [r3, #4]
 8010acc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010ace:	69fb      	ldr	r3, [r7, #28]
 8010ad0:	885b      	ldrh	r3, [r3, #2]
 8010ad2:	b29b      	uxth	r3, r3
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	f7f6 ff73 	bl	80079c0 <lwip_htons>
 8010ada:	4603      	mov	r3, r0
 8010adc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8010ade:	69fb      	ldr	r3, [r7, #28]
 8010ae0:	781b      	ldrb	r3, [r3, #0]
 8010ae2:	f003 030f 	and.w	r3, r3, #15
 8010ae6:	b2db      	uxtb	r3, r3
 8010ae8:	009b      	lsls	r3, r3, #2
 8010aea:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8010aec:	7e7b      	ldrb	r3, [r7, #25]
 8010aee:	b29b      	uxth	r3, r3
 8010af0:	8b7a      	ldrh	r2, [r7, #26]
 8010af2:	429a      	cmp	r2, r3
 8010af4:	d202      	bcs.n	8010afc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010af6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010afa:	e135      	b.n	8010d68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8010afc:	7e7b      	ldrb	r3, [r7, #25]
 8010afe:	b29b      	uxth	r3, r3
 8010b00:	8b7a      	ldrh	r2, [r7, #26]
 8010b02:	1ad3      	subs	r3, r2, r3
 8010b04:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8010b06:	69fb      	ldr	r3, [r7, #28]
 8010b08:	88db      	ldrh	r3, [r3, #6]
 8010b0a:	b29b      	uxth	r3, r3
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	f7f6 ff57 	bl	80079c0 <lwip_htons>
 8010b12:	4603      	mov	r3, r0
 8010b14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010b18:	b29b      	uxth	r3, r3
 8010b1a:	00db      	lsls	r3, r3, #3
 8010b1c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010b1e:	68bb      	ldr	r3, [r7, #8]
 8010b20:	685b      	ldr	r3, [r3, #4]
 8010b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8010b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b26:	2200      	movs	r2, #0
 8010b28:	701a      	strb	r2, [r3, #0]
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	705a      	strb	r2, [r3, #1]
 8010b2e:	2200      	movs	r2, #0
 8010b30:	709a      	strb	r2, [r3, #2]
 8010b32:	2200      	movs	r2, #0
 8010b34:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8010b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b38:	8afa      	ldrh	r2, [r7, #22]
 8010b3a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010b3c:	8afa      	ldrh	r2, [r7, #22]
 8010b3e:	8b7b      	ldrh	r3, [r7, #26]
 8010b40:	4413      	add	r3, r2
 8010b42:	b29a      	uxth	r2, r3
 8010b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b46:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8010b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b4a:	88db      	ldrh	r3, [r3, #6]
 8010b4c:	b29b      	uxth	r3, r3
 8010b4e:	8afa      	ldrh	r2, [r7, #22]
 8010b50:	429a      	cmp	r2, r3
 8010b52:	d902      	bls.n	8010b5a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010b54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010b58:	e106      	b.n	8010d68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	685b      	ldr	r3, [r3, #4]
 8010b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8010b60:	e068      	b.n	8010c34 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8010b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b64:	685b      	ldr	r3, [r3, #4]
 8010b66:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8010b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b6a:	889b      	ldrh	r3, [r3, #4]
 8010b6c:	b29a      	uxth	r2, r3
 8010b6e:	693b      	ldr	r3, [r7, #16]
 8010b70:	889b      	ldrh	r3, [r3, #4]
 8010b72:	b29b      	uxth	r3, r3
 8010b74:	429a      	cmp	r2, r3
 8010b76:	d235      	bcs.n	8010be4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8010b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010b7c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8010b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d020      	beq.n	8010bc6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8010b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b86:	889b      	ldrh	r3, [r3, #4]
 8010b88:	b29a      	uxth	r2, r3
 8010b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b8c:	88db      	ldrh	r3, [r3, #6]
 8010b8e:	b29b      	uxth	r3, r3
 8010b90:	429a      	cmp	r2, r3
 8010b92:	d307      	bcc.n	8010ba4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8010b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b96:	88db      	ldrh	r3, [r3, #6]
 8010b98:	b29a      	uxth	r2, r3
 8010b9a:	693b      	ldr	r3, [r7, #16]
 8010b9c:	889b      	ldrh	r3, [r3, #4]
 8010b9e:	b29b      	uxth	r3, r3
 8010ba0:	429a      	cmp	r2, r3
 8010ba2:	d902      	bls.n	8010baa <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010ba4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010ba8:	e0de      	b.n	8010d68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8010baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bac:	68ba      	ldr	r2, [r7, #8]
 8010bae:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8010bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bb2:	88db      	ldrh	r3, [r3, #6]
 8010bb4:	b29a      	uxth	r2, r3
 8010bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bb8:	889b      	ldrh	r3, [r3, #4]
 8010bba:	b29b      	uxth	r3, r3
 8010bbc:	429a      	cmp	r2, r3
 8010bbe:	d03d      	beq.n	8010c3c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8010bc4:	e03a      	b.n	8010c3c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8010bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bc8:	88db      	ldrh	r3, [r3, #6]
 8010bca:	b29a      	uxth	r2, r3
 8010bcc:	693b      	ldr	r3, [r7, #16]
 8010bce:	889b      	ldrh	r3, [r3, #4]
 8010bd0:	b29b      	uxth	r3, r3
 8010bd2:	429a      	cmp	r2, r3
 8010bd4:	d902      	bls.n	8010bdc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010bd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010bda:	e0c5      	b.n	8010d68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	68ba      	ldr	r2, [r7, #8]
 8010be0:	605a      	str	r2, [r3, #4]
      break;
 8010be2:	e02b      	b.n	8010c3c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8010be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010be6:	889b      	ldrh	r3, [r3, #4]
 8010be8:	b29a      	uxth	r2, r3
 8010bea:	693b      	ldr	r3, [r7, #16]
 8010bec:	889b      	ldrh	r3, [r3, #4]
 8010bee:	b29b      	uxth	r3, r3
 8010bf0:	429a      	cmp	r2, r3
 8010bf2:	d102      	bne.n	8010bfa <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010bf4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010bf8:	e0b6      	b.n	8010d68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8010bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bfc:	889b      	ldrh	r3, [r3, #4]
 8010bfe:	b29a      	uxth	r2, r3
 8010c00:	693b      	ldr	r3, [r7, #16]
 8010c02:	88db      	ldrh	r3, [r3, #6]
 8010c04:	b29b      	uxth	r3, r3
 8010c06:	429a      	cmp	r2, r3
 8010c08:	d202      	bcs.n	8010c10 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010c0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010c0e:	e0ab      	b.n	8010d68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8010c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d009      	beq.n	8010c2a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8010c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c18:	88db      	ldrh	r3, [r3, #6]
 8010c1a:	b29a      	uxth	r2, r3
 8010c1c:	693b      	ldr	r3, [r7, #16]
 8010c1e:	889b      	ldrh	r3, [r3, #4]
 8010c20:	b29b      	uxth	r3, r3
 8010c22:	429a      	cmp	r2, r3
 8010c24:	d001      	beq.n	8010c2a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010c26:	2300      	movs	r3, #0
 8010c28:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8010c2a:	693b      	ldr	r3, [r7, #16]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8010c30:	693b      	ldr	r3, [r7, #16]
 8010c32:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8010c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d193      	bne.n	8010b62 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8010c3a:	e000      	b.n	8010c3e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010c3c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8010c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d12d      	bne.n	8010ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8010c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d01c      	beq.n	8010c84 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c4c:	88db      	ldrh	r3, [r3, #6]
 8010c4e:	b29a      	uxth	r2, r3
 8010c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c52:	889b      	ldrh	r3, [r3, #4]
 8010c54:	b29b      	uxth	r3, r3
 8010c56:	429a      	cmp	r2, r3
 8010c58:	d906      	bls.n	8010c68 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8010c5a:	4b45      	ldr	r3, [pc, #276]	@ (8010d70 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010c5c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8010c60:	4944      	ldr	r1, [pc, #272]	@ (8010d74 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8010c62:	4845      	ldr	r0, [pc, #276]	@ (8010d78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010c64:	f000 feb6 	bl	80119d4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8010c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c6a:	68ba      	ldr	r2, [r7, #8]
 8010c6c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8010c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c70:	88db      	ldrh	r3, [r3, #6]
 8010c72:	b29a      	uxth	r2, r3
 8010c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c76:	889b      	ldrh	r3, [r3, #4]
 8010c78:	b29b      	uxth	r3, r3
 8010c7a:	429a      	cmp	r2, r3
 8010c7c:	d010      	beq.n	8010ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8010c7e:	2300      	movs	r3, #0
 8010c80:	623b      	str	r3, [r7, #32]
 8010c82:	e00d      	b.n	8010ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	685b      	ldr	r3, [r3, #4]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d006      	beq.n	8010c9a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010c8c:	4b38      	ldr	r3, [pc, #224]	@ (8010d70 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010c8e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8010c92:	493a      	ldr	r1, [pc, #232]	@ (8010d7c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8010c94:	4838      	ldr	r0, [pc, #224]	@ (8010d78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010c96:	f000 fe9d 	bl	80119d4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	68ba      	ldr	r2, [r7, #8]
 8010c9e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d105      	bne.n	8010cb2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	7f9b      	ldrb	r3, [r3, #30]
 8010caa:	f003 0301 	and.w	r3, r3, #1
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d059      	beq.n	8010d66 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8010cb2:	6a3b      	ldr	r3, [r7, #32]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d04f      	beq.n	8010d58 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	685b      	ldr	r3, [r3, #4]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d006      	beq.n	8010cce <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	685b      	ldr	r3, [r3, #4]
 8010cc4:	685b      	ldr	r3, [r3, #4]
 8010cc6:	889b      	ldrh	r3, [r3, #4]
 8010cc8:	b29b      	uxth	r3, r3
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d002      	beq.n	8010cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8010cce:	2300      	movs	r3, #0
 8010cd0:	623b      	str	r3, [r7, #32]
 8010cd2:	e041      	b.n	8010d58 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8010cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8010cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8010cde:	e012      	b.n	8010d06 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8010ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ce2:	685b      	ldr	r3, [r3, #4]
 8010ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8010ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ce8:	88db      	ldrh	r3, [r3, #6]
 8010cea:	b29a      	uxth	r2, r3
 8010cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cee:	889b      	ldrh	r3, [r3, #4]
 8010cf0:	b29b      	uxth	r3, r3
 8010cf2:	429a      	cmp	r2, r3
 8010cf4:	d002      	beq.n	8010cfc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	623b      	str	r3, [r7, #32]
            break;
 8010cfa:	e007      	b.n	8010d0c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8010cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8010d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8010d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d1e9      	bne.n	8010ce0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8010d0c:	6a3b      	ldr	r3, [r7, #32]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d022      	beq.n	8010d58 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	685b      	ldr	r3, [r3, #4]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d106      	bne.n	8010d28 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8010d1a:	4b15      	ldr	r3, [pc, #84]	@ (8010d70 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010d1c:	f240 12df 	movw	r2, #479	@ 0x1df
 8010d20:	4917      	ldr	r1, [pc, #92]	@ (8010d80 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010d22:	4815      	ldr	r0, [pc, #84]	@ (8010d78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010d24:	f000 fe56 	bl	80119d4 <iprintf>
          LWIP_ASSERT("sanity check",
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	685b      	ldr	r3, [r3, #4]
 8010d2c:	685b      	ldr	r3, [r3, #4]
 8010d2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d30:	429a      	cmp	r2, r3
 8010d32:	d106      	bne.n	8010d42 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8010d34:	4b0e      	ldr	r3, [pc, #56]	@ (8010d70 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010d36:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8010d3a:	4911      	ldr	r1, [pc, #68]	@ (8010d80 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010d3c:	480e      	ldr	r0, [pc, #56]	@ (8010d78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010d3e:	f000 fe49 	bl	80119d4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8010d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d006      	beq.n	8010d58 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8010d4a:	4b09      	ldr	r3, [pc, #36]	@ (8010d70 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010d4c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8010d50:	490c      	ldr	r1, [pc, #48]	@ (8010d84 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8010d52:	4809      	ldr	r0, [pc, #36]	@ (8010d78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010d54:	f000 fe3e 	bl	80119d4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8010d58:	6a3b      	ldr	r3, [r7, #32]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	bf14      	ite	ne
 8010d5e:	2301      	movne	r3, #1
 8010d60:	2300      	moveq	r3, #0
 8010d62:	b2db      	uxtb	r3, r3
 8010d64:	e000      	b.n	8010d68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8010d66:	2300      	movs	r3, #0
}
 8010d68:	4618      	mov	r0, r3
 8010d6a:	3730      	adds	r7, #48	@ 0x30
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bd80      	pop	{r7, pc}
 8010d70:	080150c4 	.word	0x080150c4
 8010d74:	080151a8 	.word	0x080151a8
 8010d78:	0801510c 	.word	0x0801510c
 8010d7c:	080151c8 	.word	0x080151c8
 8010d80:	08015200 	.word	0x08015200
 8010d84:	08015210 	.word	0x08015210

08010d88 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b08e      	sub	sp, #56	@ 0x38
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	685b      	ldr	r3, [r3, #4]
 8010d94:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8010d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d98:	781b      	ldrb	r3, [r3, #0]
 8010d9a:	f003 030f 	and.w	r3, r3, #15
 8010d9e:	b2db      	uxtb	r3, r3
 8010da0:	009b      	lsls	r3, r3, #2
 8010da2:	b2db      	uxtb	r3, r3
 8010da4:	2b14      	cmp	r3, #20
 8010da6:	f040 8171 	bne.w	801108c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8010daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dac:	88db      	ldrh	r3, [r3, #6]
 8010dae:	b29b      	uxth	r3, r3
 8010db0:	4618      	mov	r0, r3
 8010db2:	f7f6 fe05 	bl	80079c0 <lwip_htons>
 8010db6:	4603      	mov	r3, r0
 8010db8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010dbc:	b29b      	uxth	r3, r3
 8010dbe:	00db      	lsls	r3, r3, #3
 8010dc0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dc4:	885b      	ldrh	r3, [r3, #2]
 8010dc6:	b29b      	uxth	r3, r3
 8010dc8:	4618      	mov	r0, r3
 8010dca:	f7f6 fdf9 	bl	80079c0 <lwip_htons>
 8010dce:	4603      	mov	r3, r0
 8010dd0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8010dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dd4:	781b      	ldrb	r3, [r3, #0]
 8010dd6:	f003 030f 	and.w	r3, r3, #15
 8010dda:	b2db      	uxtb	r3, r3
 8010ddc:	009b      	lsls	r3, r3, #2
 8010dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8010de2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010de6:	b29b      	uxth	r3, r3
 8010de8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010dea:	429a      	cmp	r2, r3
 8010dec:	f0c0 8150 	bcc.w	8011090 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8010df0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010df4:	b29b      	uxth	r3, r3
 8010df6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010df8:	1ad3      	subs	r3, r2, r3
 8010dfa:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8010dfc:	6878      	ldr	r0, [r7, #4]
 8010dfe:	f7f8 fa6f 	bl	80092e0 <pbuf_clen>
 8010e02:	4603      	mov	r3, r0
 8010e04:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8010e06:	4b8c      	ldr	r3, [pc, #560]	@ (8011038 <ip4_reass+0x2b0>)
 8010e08:	881b      	ldrh	r3, [r3, #0]
 8010e0a:	461a      	mov	r2, r3
 8010e0c:	8c3b      	ldrh	r3, [r7, #32]
 8010e0e:	4413      	add	r3, r2
 8010e10:	2b0a      	cmp	r3, #10
 8010e12:	dd10      	ble.n	8010e36 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010e14:	8c3b      	ldrh	r3, [r7, #32]
 8010e16:	4619      	mov	r1, r3
 8010e18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010e1a:	f7ff fd81 	bl	8010920 <ip_reass_remove_oldest_datagram>
 8010e1e:	4603      	mov	r3, r0
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	f000 8137 	beq.w	8011094 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8010e26:	4b84      	ldr	r3, [pc, #528]	@ (8011038 <ip4_reass+0x2b0>)
 8010e28:	881b      	ldrh	r3, [r3, #0]
 8010e2a:	461a      	mov	r2, r3
 8010e2c:	8c3b      	ldrh	r3, [r7, #32]
 8010e2e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010e30:	2b0a      	cmp	r3, #10
 8010e32:	f300 812f 	bgt.w	8011094 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010e36:	4b81      	ldr	r3, [pc, #516]	@ (801103c <ip4_reass+0x2b4>)
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8010e3c:	e015      	b.n	8010e6a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e40:	695a      	ldr	r2, [r3, #20]
 8010e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e44:	68db      	ldr	r3, [r3, #12]
 8010e46:	429a      	cmp	r2, r3
 8010e48:	d10c      	bne.n	8010e64 <ip4_reass+0xdc>
 8010e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e4c:	699a      	ldr	r2, [r3, #24]
 8010e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e50:	691b      	ldr	r3, [r3, #16]
 8010e52:	429a      	cmp	r2, r3
 8010e54:	d106      	bne.n	8010e64 <ip4_reass+0xdc>
 8010e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e58:	899a      	ldrh	r2, [r3, #12]
 8010e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e5c:	889b      	ldrh	r3, [r3, #4]
 8010e5e:	b29b      	uxth	r3, r3
 8010e60:	429a      	cmp	r2, r3
 8010e62:	d006      	beq.n	8010e72 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	633b      	str	r3, [r7, #48]	@ 0x30
 8010e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d1e6      	bne.n	8010e3e <ip4_reass+0xb6>
 8010e70:	e000      	b.n	8010e74 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8010e72:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8010e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d109      	bne.n	8010e8e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8010e7a:	8c3b      	ldrh	r3, [r7, #32]
 8010e7c:	4619      	mov	r1, r3
 8010e7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010e80:	f7ff fdb0 	bl	80109e4 <ip_reass_enqueue_new_datagram>
 8010e84:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8010e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d11c      	bne.n	8010ec6 <ip4_reass+0x13e>
      goto nullreturn;
 8010e8c:	e105      	b.n	801109a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e90:	88db      	ldrh	r3, [r3, #6]
 8010e92:	b29b      	uxth	r3, r3
 8010e94:	4618      	mov	r0, r3
 8010e96:	f7f6 fd93 	bl	80079c0 <lwip_htons>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d110      	bne.n	8010ec6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8010ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ea6:	89db      	ldrh	r3, [r3, #14]
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f7f6 fd89 	bl	80079c0 <lwip_htons>
 8010eae:	4603      	mov	r3, r0
 8010eb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d006      	beq.n	8010ec6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8010eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010eba:	3308      	adds	r3, #8
 8010ebc:	2214      	movs	r2, #20
 8010ebe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	f000 fe62 	bl	8011b8a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8010ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ec8:	88db      	ldrh	r3, [r3, #6]
 8010eca:	b29b      	uxth	r3, r3
 8010ecc:	f003 0320 	and.w	r3, r3, #32
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	bf0c      	ite	eq
 8010ed4:	2301      	moveq	r3, #1
 8010ed6:	2300      	movne	r3, #0
 8010ed8:	b2db      	uxtb	r3, r3
 8010eda:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8010edc:	69fb      	ldr	r3, [r7, #28]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d00e      	beq.n	8010f00 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8010ee2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8010ee4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010ee6:	4413      	add	r3, r2
 8010ee8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8010eea:	8b7a      	ldrh	r2, [r7, #26]
 8010eec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010eee:	429a      	cmp	r2, r3
 8010ef0:	f0c0 80a0 	bcc.w	8011034 <ip4_reass+0x2ac>
 8010ef4:	8b7b      	ldrh	r3, [r7, #26]
 8010ef6:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8010efa:	4293      	cmp	r3, r2
 8010efc:	f200 809a 	bhi.w	8011034 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8010f00:	69fa      	ldr	r2, [r7, #28]
 8010f02:	6879      	ldr	r1, [r7, #4]
 8010f04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010f06:	f7ff fdd5 	bl	8010ab4 <ip_reass_chain_frag_into_datagram_and_validate>
 8010f0a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010f0c:	697b      	ldr	r3, [r7, #20]
 8010f0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010f12:	f000 809b 	beq.w	801104c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010f16:	4b48      	ldr	r3, [pc, #288]	@ (8011038 <ip4_reass+0x2b0>)
 8010f18:	881a      	ldrh	r2, [r3, #0]
 8010f1a:	8c3b      	ldrh	r3, [r7, #32]
 8010f1c:	4413      	add	r3, r2
 8010f1e:	b29a      	uxth	r2, r3
 8010f20:	4b45      	ldr	r3, [pc, #276]	@ (8011038 <ip4_reass+0x2b0>)
 8010f22:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8010f24:	69fb      	ldr	r3, [r7, #28]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d00d      	beq.n	8010f46 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8010f2a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8010f2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010f2e:	4413      	add	r3, r2
 8010f30:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8010f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f34:	8a7a      	ldrh	r2, [r7, #18]
 8010f36:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f3a:	7f9b      	ldrb	r3, [r3, #30]
 8010f3c:	f043 0301 	orr.w	r3, r3, #1
 8010f40:	b2da      	uxtb	r2, r3
 8010f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f44:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8010f46:	697b      	ldr	r3, [r7, #20]
 8010f48:	2b01      	cmp	r3, #1
 8010f4a:	d171      	bne.n	8011030 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f4e:	8b9b      	ldrh	r3, [r3, #28]
 8010f50:	3314      	adds	r3, #20
 8010f52:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f56:	685b      	ldr	r3, [r3, #4]
 8010f58:	685b      	ldr	r3, [r3, #4]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8010f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f60:	685b      	ldr	r3, [r3, #4]
 8010f62:	685b      	ldr	r3, [r3, #4]
 8010f64:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f68:	3308      	adds	r3, #8
 8010f6a:	2214      	movs	r2, #20
 8010f6c:	4619      	mov	r1, r3
 8010f6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010f70:	f000 fe0b 	bl	8011b8a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010f74:	8a3b      	ldrh	r3, [r7, #16]
 8010f76:	4618      	mov	r0, r3
 8010f78:	f7f6 fd22 	bl	80079c0 <lwip_htons>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	461a      	mov	r2, r3
 8010f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f82:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8010f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f86:	2200      	movs	r2, #0
 8010f88:	719a      	strb	r2, [r3, #6]
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f90:	2200      	movs	r2, #0
 8010f92:	729a      	strb	r2, [r3, #10]
 8010f94:	2200      	movs	r2, #0
 8010f96:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8010f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f9a:	685b      	ldr	r3, [r3, #4]
 8010f9c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8010f9e:	e00d      	b.n	8010fbc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8010fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fa2:	685b      	ldr	r3, [r3, #4]
 8010fa4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8010fa6:	2114      	movs	r1, #20
 8010fa8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8010faa:	f7f8 f885 	bl	80090b8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8010fae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010fb0:	6878      	ldr	r0, [r7, #4]
 8010fb2:	f7f8 f9d5 	bl	8009360 <pbuf_cat>
      r = iprh->next_pbuf;
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8010fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d1ee      	bne.n	8010fa0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8010fc2:	4b1e      	ldr	r3, [pc, #120]	@ (801103c <ip4_reass+0x2b4>)
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010fc8:	429a      	cmp	r2, r3
 8010fca:	d102      	bne.n	8010fd2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8010fcc:	2300      	movs	r3, #0
 8010fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010fd0:	e010      	b.n	8010ff4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010fd2:	4b1a      	ldr	r3, [pc, #104]	@ (801103c <ip4_reass+0x2b4>)
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010fd8:	e007      	b.n	8010fea <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8010fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010fe0:	429a      	cmp	r2, r3
 8010fe2:	d006      	beq.n	8010ff2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d1f4      	bne.n	8010fda <ip4_reass+0x252>
 8010ff0:	e000      	b.n	8010ff4 <ip4_reass+0x26c>
          break;
 8010ff2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8010ff4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010ff6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010ff8:	f7ff fd2e 	bl	8010a58 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8010ffc:	6878      	ldr	r0, [r7, #4]
 8010ffe:	f7f8 f96f 	bl	80092e0 <pbuf_clen>
 8011002:	4603      	mov	r3, r0
 8011004:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8011006:	4b0c      	ldr	r3, [pc, #48]	@ (8011038 <ip4_reass+0x2b0>)
 8011008:	881b      	ldrh	r3, [r3, #0]
 801100a:	8c3a      	ldrh	r2, [r7, #32]
 801100c:	429a      	cmp	r2, r3
 801100e:	d906      	bls.n	801101e <ip4_reass+0x296>
 8011010:	4b0b      	ldr	r3, [pc, #44]	@ (8011040 <ip4_reass+0x2b8>)
 8011012:	f240 229b 	movw	r2, #667	@ 0x29b
 8011016:	490b      	ldr	r1, [pc, #44]	@ (8011044 <ip4_reass+0x2bc>)
 8011018:	480b      	ldr	r0, [pc, #44]	@ (8011048 <ip4_reass+0x2c0>)
 801101a:	f000 fcdb 	bl	80119d4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801101e:	4b06      	ldr	r3, [pc, #24]	@ (8011038 <ip4_reass+0x2b0>)
 8011020:	881a      	ldrh	r2, [r3, #0]
 8011022:	8c3b      	ldrh	r3, [r7, #32]
 8011024:	1ad3      	subs	r3, r2, r3
 8011026:	b29a      	uxth	r2, r3
 8011028:	4b03      	ldr	r3, [pc, #12]	@ (8011038 <ip4_reass+0x2b0>)
 801102a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	e038      	b.n	80110a2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8011030:	2300      	movs	r3, #0
 8011032:	e036      	b.n	80110a2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8011034:	bf00      	nop
 8011036:	e00a      	b.n	801104e <ip4_reass+0x2c6>
 8011038:	2000ff00 	.word	0x2000ff00
 801103c:	2000fefc 	.word	0x2000fefc
 8011040:	080150c4 	.word	0x080150c4
 8011044:	08015234 	.word	0x08015234
 8011048:	0801510c 	.word	0x0801510c
    goto nullreturn_ipr;
 801104c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801104e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011050:	2b00      	cmp	r3, #0
 8011052:	d106      	bne.n	8011062 <ip4_reass+0x2da>
 8011054:	4b15      	ldr	r3, [pc, #84]	@ (80110ac <ip4_reass+0x324>)
 8011056:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801105a:	4915      	ldr	r1, [pc, #84]	@ (80110b0 <ip4_reass+0x328>)
 801105c:	4815      	ldr	r0, [pc, #84]	@ (80110b4 <ip4_reass+0x32c>)
 801105e:	f000 fcb9 	bl	80119d4 <iprintf>
  if (ipr->p == NULL) {
 8011062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011064:	685b      	ldr	r3, [r3, #4]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d116      	bne.n	8011098 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801106a:	4b13      	ldr	r3, [pc, #76]	@ (80110b8 <ip4_reass+0x330>)
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011070:	429a      	cmp	r2, r3
 8011072:	d006      	beq.n	8011082 <ip4_reass+0x2fa>
 8011074:	4b0d      	ldr	r3, [pc, #52]	@ (80110ac <ip4_reass+0x324>)
 8011076:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801107a:	4910      	ldr	r1, [pc, #64]	@ (80110bc <ip4_reass+0x334>)
 801107c:	480d      	ldr	r0, [pc, #52]	@ (80110b4 <ip4_reass+0x32c>)
 801107e:	f000 fca9 	bl	80119d4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8011082:	2100      	movs	r1, #0
 8011084:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011086:	f7ff fce7 	bl	8010a58 <ip_reass_dequeue_datagram>
 801108a:	e006      	b.n	801109a <ip4_reass+0x312>
    goto nullreturn;
 801108c:	bf00      	nop
 801108e:	e004      	b.n	801109a <ip4_reass+0x312>
    goto nullreturn;
 8011090:	bf00      	nop
 8011092:	e002      	b.n	801109a <ip4_reass+0x312>
      goto nullreturn;
 8011094:	bf00      	nop
 8011096:	e000      	b.n	801109a <ip4_reass+0x312>
  }

nullreturn:
 8011098:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801109a:	6878      	ldr	r0, [r7, #4]
 801109c:	f7f8 f892 	bl	80091c4 <pbuf_free>
  return NULL;
 80110a0:	2300      	movs	r3, #0
}
 80110a2:	4618      	mov	r0, r3
 80110a4:	3738      	adds	r7, #56	@ 0x38
 80110a6:	46bd      	mov	sp, r7
 80110a8:	bd80      	pop	{r7, pc}
 80110aa:	bf00      	nop
 80110ac:	080150c4 	.word	0x080150c4
 80110b0:	08015250 	.word	0x08015250
 80110b4:	0801510c 	.word	0x0801510c
 80110b8:	2000fefc 	.word	0x2000fefc
 80110bc:	0801525c 	.word	0x0801525c

080110c0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80110c4:	2005      	movs	r0, #5
 80110c6:	f7f7 f95f 	bl	8008388 <memp_malloc>
 80110ca:	4603      	mov	r3, r0
}
 80110cc:	4618      	mov	r0, r3
 80110ce:	bd80      	pop	{r7, pc}

080110d0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b082      	sub	sp, #8
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d106      	bne.n	80110ec <ip_frag_free_pbuf_custom_ref+0x1c>
 80110de:	4b07      	ldr	r3, [pc, #28]	@ (80110fc <ip_frag_free_pbuf_custom_ref+0x2c>)
 80110e0:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 80110e4:	4906      	ldr	r1, [pc, #24]	@ (8011100 <ip_frag_free_pbuf_custom_ref+0x30>)
 80110e6:	4807      	ldr	r0, [pc, #28]	@ (8011104 <ip_frag_free_pbuf_custom_ref+0x34>)
 80110e8:	f000 fc74 	bl	80119d4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80110ec:	6879      	ldr	r1, [r7, #4]
 80110ee:	2005      	movs	r0, #5
 80110f0:	f7f7 f9c0 	bl	8008474 <memp_free>
}
 80110f4:	bf00      	nop
 80110f6:	3708      	adds	r7, #8
 80110f8:	46bd      	mov	sp, r7
 80110fa:	bd80      	pop	{r7, pc}
 80110fc:	080150c4 	.word	0x080150c4
 8011100:	0801527c 	.word	0x0801527c
 8011104:	0801510c 	.word	0x0801510c

08011108 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b084      	sub	sp, #16
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d106      	bne.n	8011128 <ipfrag_free_pbuf_custom+0x20>
 801111a:	4b11      	ldr	r3, [pc, #68]	@ (8011160 <ipfrag_free_pbuf_custom+0x58>)
 801111c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8011120:	4910      	ldr	r1, [pc, #64]	@ (8011164 <ipfrag_free_pbuf_custom+0x5c>)
 8011122:	4811      	ldr	r0, [pc, #68]	@ (8011168 <ipfrag_free_pbuf_custom+0x60>)
 8011124:	f000 fc56 	bl	80119d4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8011128:	68fa      	ldr	r2, [r7, #12]
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	429a      	cmp	r2, r3
 801112e:	d006      	beq.n	801113e <ipfrag_free_pbuf_custom+0x36>
 8011130:	4b0b      	ldr	r3, [pc, #44]	@ (8011160 <ipfrag_free_pbuf_custom+0x58>)
 8011132:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8011136:	490d      	ldr	r1, [pc, #52]	@ (801116c <ipfrag_free_pbuf_custom+0x64>)
 8011138:	480b      	ldr	r0, [pc, #44]	@ (8011168 <ipfrag_free_pbuf_custom+0x60>)
 801113a:	f000 fc4b 	bl	80119d4 <iprintf>
  if (pcr->original != NULL) {
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	695b      	ldr	r3, [r3, #20]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d004      	beq.n	8011150 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	695b      	ldr	r3, [r3, #20]
 801114a:	4618      	mov	r0, r3
 801114c:	f7f8 f83a 	bl	80091c4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8011150:	68f8      	ldr	r0, [r7, #12]
 8011152:	f7ff ffbd 	bl	80110d0 <ip_frag_free_pbuf_custom_ref>
}
 8011156:	bf00      	nop
 8011158:	3710      	adds	r7, #16
 801115a:	46bd      	mov	sp, r7
 801115c:	bd80      	pop	{r7, pc}
 801115e:	bf00      	nop
 8011160:	080150c4 	.word	0x080150c4
 8011164:	08015288 	.word	0x08015288
 8011168:	0801510c 	.word	0x0801510c
 801116c:	08015294 	.word	0x08015294

08011170 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8011170:	b580      	push	{r7, lr}
 8011172:	b094      	sub	sp, #80	@ 0x50
 8011174:	af02      	add	r7, sp, #8
 8011176:	60f8      	str	r0, [r7, #12]
 8011178:	60b9      	str	r1, [r7, #8]
 801117a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801117c:	2300      	movs	r3, #0
 801117e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8011182:	68bb      	ldr	r3, [r7, #8]
 8011184:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011186:	3b14      	subs	r3, #20
 8011188:	2b00      	cmp	r3, #0
 801118a:	da00      	bge.n	801118e <ip4_frag+0x1e>
 801118c:	3307      	adds	r3, #7
 801118e:	10db      	asrs	r3, r3, #3
 8011190:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8011192:	2314      	movs	r3, #20
 8011194:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	685b      	ldr	r3, [r3, #4]
 801119a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801119c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801119e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80111a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111a2:	781b      	ldrb	r3, [r3, #0]
 80111a4:	f003 030f 	and.w	r3, r3, #15
 80111a8:	b2db      	uxtb	r3, r3
 80111aa:	009b      	lsls	r3, r3, #2
 80111ac:	b2db      	uxtb	r3, r3
 80111ae:	2b14      	cmp	r3, #20
 80111b0:	d002      	beq.n	80111b8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80111b2:	f06f 0305 	mvn.w	r3, #5
 80111b6:	e110      	b.n	80113da <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	895b      	ldrh	r3, [r3, #10]
 80111bc:	2b13      	cmp	r3, #19
 80111be:	d809      	bhi.n	80111d4 <ip4_frag+0x64>
 80111c0:	4b88      	ldr	r3, [pc, #544]	@ (80113e4 <ip4_frag+0x274>)
 80111c2:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80111c6:	4988      	ldr	r1, [pc, #544]	@ (80113e8 <ip4_frag+0x278>)
 80111c8:	4888      	ldr	r0, [pc, #544]	@ (80113ec <ip4_frag+0x27c>)
 80111ca:	f000 fc03 	bl	80119d4 <iprintf>
 80111ce:	f06f 0305 	mvn.w	r3, #5
 80111d2:	e102      	b.n	80113da <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80111d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111d6:	88db      	ldrh	r3, [r3, #6]
 80111d8:	b29b      	uxth	r3, r3
 80111da:	4618      	mov	r0, r3
 80111dc:	f7f6 fbf0 	bl	80079c0 <lwip_htons>
 80111e0:	4603      	mov	r3, r0
 80111e2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 80111e4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80111e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80111ea:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80111ee:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80111f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80111f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	891b      	ldrh	r3, [r3, #8]
 80111fa:	3b14      	subs	r3, #20
 80111fc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8011200:	e0e1      	b.n	80113c6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8011202:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011204:	00db      	lsls	r3, r3, #3
 8011206:	b29b      	uxth	r3, r3
 8011208:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801120c:	4293      	cmp	r3, r2
 801120e:	bf28      	it	cs
 8011210:	4613      	movcs	r3, r2
 8011212:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8011214:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011218:	2114      	movs	r1, #20
 801121a:	200e      	movs	r0, #14
 801121c:	f7f7 fcea 	bl	8008bf4 <pbuf_alloc>
 8011220:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8011222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011224:	2b00      	cmp	r3, #0
 8011226:	f000 80d5 	beq.w	80113d4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801122a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801122c:	895b      	ldrh	r3, [r3, #10]
 801122e:	2b13      	cmp	r3, #19
 8011230:	d806      	bhi.n	8011240 <ip4_frag+0xd0>
 8011232:	4b6c      	ldr	r3, [pc, #432]	@ (80113e4 <ip4_frag+0x274>)
 8011234:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8011238:	496d      	ldr	r1, [pc, #436]	@ (80113f0 <ip4_frag+0x280>)
 801123a:	486c      	ldr	r0, [pc, #432]	@ (80113ec <ip4_frag+0x27c>)
 801123c:	f000 fbca 	bl	80119d4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8011240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011242:	685b      	ldr	r3, [r3, #4]
 8011244:	2214      	movs	r2, #20
 8011246:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8011248:	4618      	mov	r0, r3
 801124a:	f000 fc9e 	bl	8011b8a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801124e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011250:	685b      	ldr	r3, [r3, #4]
 8011252:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8011254:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011256:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801125a:	e064      	b.n	8011326 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	895a      	ldrh	r2, [r3, #10]
 8011260:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011262:	1ad3      	subs	r3, r2, r3
 8011264:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	895b      	ldrh	r3, [r3, #10]
 801126a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801126c:	429a      	cmp	r2, r3
 801126e:	d906      	bls.n	801127e <ip4_frag+0x10e>
 8011270:	4b5c      	ldr	r3, [pc, #368]	@ (80113e4 <ip4_frag+0x274>)
 8011272:	f240 322d 	movw	r2, #813	@ 0x32d
 8011276:	495f      	ldr	r1, [pc, #380]	@ (80113f4 <ip4_frag+0x284>)
 8011278:	485c      	ldr	r0, [pc, #368]	@ (80113ec <ip4_frag+0x27c>)
 801127a:	f000 fbab 	bl	80119d4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801127e:	8bfa      	ldrh	r2, [r7, #30]
 8011280:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8011284:	4293      	cmp	r3, r2
 8011286:	bf28      	it	cs
 8011288:	4613      	movcs	r3, r2
 801128a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801128e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011292:	2b00      	cmp	r3, #0
 8011294:	d105      	bne.n	80112a2 <ip4_frag+0x132>
        poff = 0;
 8011296:	2300      	movs	r3, #0
 8011298:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	60fb      	str	r3, [r7, #12]
        continue;
 80112a0:	e041      	b.n	8011326 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80112a2:	f7ff ff0d 	bl	80110c0 <ip_frag_alloc_pbuf_custom_ref>
 80112a6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80112a8:	69bb      	ldr	r3, [r7, #24]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d103      	bne.n	80112b6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80112ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80112b0:	f7f7 ff88 	bl	80091c4 <pbuf_free>
        goto memerr;
 80112b4:	e08f      	b.n	80113d6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80112b6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80112bc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80112be:	4413      	add	r3, r2
 80112c0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80112c4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80112c8:	9201      	str	r2, [sp, #4]
 80112ca:	9300      	str	r3, [sp, #0]
 80112cc:	4603      	mov	r3, r0
 80112ce:	2241      	movs	r2, #65	@ 0x41
 80112d0:	2000      	movs	r0, #0
 80112d2:	f7f7 fdbd 	bl	8008e50 <pbuf_alloced_custom>
 80112d6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80112d8:	697b      	ldr	r3, [r7, #20]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d106      	bne.n	80112ec <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80112de:	69b8      	ldr	r0, [r7, #24]
 80112e0:	f7ff fef6 	bl	80110d0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80112e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80112e6:	f7f7 ff6d 	bl	80091c4 <pbuf_free>
        goto memerr;
 80112ea:	e074      	b.n	80113d6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80112ec:	68f8      	ldr	r0, [r7, #12]
 80112ee:	f7f8 f80f 	bl	8009310 <pbuf_ref>
      pcr->original = p;
 80112f2:	69bb      	ldr	r3, [r7, #24]
 80112f4:	68fa      	ldr	r2, [r7, #12]
 80112f6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80112f8:	69bb      	ldr	r3, [r7, #24]
 80112fa:	4a3f      	ldr	r2, [pc, #252]	@ (80113f8 <ip4_frag+0x288>)
 80112fc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80112fe:	6979      	ldr	r1, [r7, #20]
 8011300:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011302:	f7f8 f82d 	bl	8009360 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8011306:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801130a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801130e:	1ad3      	subs	r3, r2, r3
 8011310:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8011314:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8011318:	2b00      	cmp	r3, #0
 801131a:	d004      	beq.n	8011326 <ip4_frag+0x1b6>
        poff = 0;
 801131c:	2300      	movs	r3, #0
 801131e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8011326:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801132a:	2b00      	cmp	r3, #0
 801132c:	d196      	bne.n	801125c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801132e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8011330:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011334:	4413      	add	r3, r2
 8011336:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8011338:	68bb      	ldr	r3, [r7, #8]
 801133a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801133c:	f1a3 0213 	sub.w	r2, r3, #19
 8011340:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011344:	429a      	cmp	r2, r3
 8011346:	bfcc      	ite	gt
 8011348:	2301      	movgt	r3, #1
 801134a:	2300      	movle	r3, #0
 801134c:	b2db      	uxtb	r3, r3
 801134e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8011350:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011354:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011358:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801135a:	6a3b      	ldr	r3, [r7, #32]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d002      	beq.n	8011366 <ip4_frag+0x1f6>
 8011360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011362:	2b00      	cmp	r3, #0
 8011364:	d003      	beq.n	801136e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8011366:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011368:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801136c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801136e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011370:	4618      	mov	r0, r3
 8011372:	f7f6 fb25 	bl	80079c0 <lwip_htons>
 8011376:	4603      	mov	r3, r0
 8011378:	461a      	mov	r2, r3
 801137a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801137c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801137e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011380:	3314      	adds	r3, #20
 8011382:	b29b      	uxth	r3, r3
 8011384:	4618      	mov	r0, r3
 8011386:	f7f6 fb1b 	bl	80079c0 <lwip_htons>
 801138a:	4603      	mov	r3, r0
 801138c:	461a      	mov	r2, r3
 801138e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011390:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8011392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011394:	2200      	movs	r2, #0
 8011396:	729a      	strb	r2, [r3, #10]
 8011398:	2200      	movs	r2, #0
 801139a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801139c:	68bb      	ldr	r3, [r7, #8]
 801139e:	695b      	ldr	r3, [r3, #20]
 80113a0:	687a      	ldr	r2, [r7, #4]
 80113a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80113a4:	68b8      	ldr	r0, [r7, #8]
 80113a6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80113a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80113aa:	f7f7 ff0b 	bl	80091c4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80113ae:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80113b2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80113b4:	1ad3      	subs	r3, r2, r3
 80113b6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 80113ba:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80113be:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80113c0:	4413      	add	r3, r2
 80113c2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 80113c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	f47f af19 	bne.w	8011202 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80113d0:	2300      	movs	r3, #0
 80113d2:	e002      	b.n	80113da <ip4_frag+0x26a>
      goto memerr;
 80113d4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80113d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80113da:	4618      	mov	r0, r3
 80113dc:	3748      	adds	r7, #72	@ 0x48
 80113de:	46bd      	mov	sp, r7
 80113e0:	bd80      	pop	{r7, pc}
 80113e2:	bf00      	nop
 80113e4:	080150c4 	.word	0x080150c4
 80113e8:	080152a0 	.word	0x080152a0
 80113ec:	0801510c 	.word	0x0801510c
 80113f0:	080152bc 	.word	0x080152bc
 80113f4:	080152dc 	.word	0x080152dc
 80113f8:	08011109 	.word	0x08011109

080113fc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b086      	sub	sp, #24
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
 8011404:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8011406:	230e      	movs	r3, #14
 8011408:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	895b      	ldrh	r3, [r3, #10]
 801140e:	2b0e      	cmp	r3, #14
 8011410:	d96e      	bls.n	80114f0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	7bdb      	ldrb	r3, [r3, #15]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d106      	bne.n	8011428 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801141a:	683b      	ldr	r3, [r7, #0]
 801141c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011420:	3301      	adds	r3, #1
 8011422:	b2da      	uxtb	r2, r3
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	685b      	ldr	r3, [r3, #4]
 801142c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801142e:	693b      	ldr	r3, [r7, #16]
 8011430:	7b1a      	ldrb	r2, [r3, #12]
 8011432:	7b5b      	ldrb	r3, [r3, #13]
 8011434:	021b      	lsls	r3, r3, #8
 8011436:	4313      	orrs	r3, r2
 8011438:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801143a:	693b      	ldr	r3, [r7, #16]
 801143c:	781b      	ldrb	r3, [r3, #0]
 801143e:	f003 0301 	and.w	r3, r3, #1
 8011442:	2b00      	cmp	r3, #0
 8011444:	d023      	beq.n	801148e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8011446:	693b      	ldr	r3, [r7, #16]
 8011448:	781b      	ldrb	r3, [r3, #0]
 801144a:	2b01      	cmp	r3, #1
 801144c:	d10f      	bne.n	801146e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801144e:	693b      	ldr	r3, [r7, #16]
 8011450:	785b      	ldrb	r3, [r3, #1]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d11b      	bne.n	801148e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8011456:	693b      	ldr	r3, [r7, #16]
 8011458:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801145a:	2b5e      	cmp	r3, #94	@ 0x5e
 801145c:	d117      	bne.n	801148e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	7b5b      	ldrb	r3, [r3, #13]
 8011462:	f043 0310 	orr.w	r3, r3, #16
 8011466:	b2da      	uxtb	r2, r3
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	735a      	strb	r2, [r3, #13]
 801146c:	e00f      	b.n	801148e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801146e:	693b      	ldr	r3, [r7, #16]
 8011470:	2206      	movs	r2, #6
 8011472:	4928      	ldr	r1, [pc, #160]	@ (8011514 <ethernet_input+0x118>)
 8011474:	4618      	mov	r0, r3
 8011476:	f000 fb02 	bl	8011a7e <memcmp>
 801147a:	4603      	mov	r3, r0
 801147c:	2b00      	cmp	r3, #0
 801147e:	d106      	bne.n	801148e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	7b5b      	ldrb	r3, [r3, #13]
 8011484:	f043 0308 	orr.w	r3, r3, #8
 8011488:	b2da      	uxtb	r2, r3
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801148e:	89fb      	ldrh	r3, [r7, #14]
 8011490:	2b08      	cmp	r3, #8
 8011492:	d003      	beq.n	801149c <ethernet_input+0xa0>
 8011494:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8011498:	d014      	beq.n	80114c4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801149a:	e032      	b.n	8011502 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801149c:	683b      	ldr	r3, [r7, #0]
 801149e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80114a2:	f003 0308 	and.w	r3, r3, #8
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d024      	beq.n	80114f4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80114aa:	8afb      	ldrh	r3, [r7, #22]
 80114ac:	4619      	mov	r1, r3
 80114ae:	6878      	ldr	r0, [r7, #4]
 80114b0:	f7f7 fe02 	bl	80090b8 <pbuf_remove_header>
 80114b4:	4603      	mov	r3, r0
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d11e      	bne.n	80114f8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80114ba:	6839      	ldr	r1, [r7, #0]
 80114bc:	6878      	ldr	r0, [r7, #4]
 80114be:	f7fe ff21 	bl	8010304 <ip4_input>
      break;
 80114c2:	e013      	b.n	80114ec <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80114c4:	683b      	ldr	r3, [r7, #0]
 80114c6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80114ca:	f003 0308 	and.w	r3, r3, #8
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d014      	beq.n	80114fc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80114d2:	8afb      	ldrh	r3, [r7, #22]
 80114d4:	4619      	mov	r1, r3
 80114d6:	6878      	ldr	r0, [r7, #4]
 80114d8:	f7f7 fdee 	bl	80090b8 <pbuf_remove_header>
 80114dc:	4603      	mov	r3, r0
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d10e      	bne.n	8011500 <ethernet_input+0x104>
        etharp_input(p, netif);
 80114e2:	6839      	ldr	r1, [r7, #0]
 80114e4:	6878      	ldr	r0, [r7, #4]
 80114e6:	f7fe f8c1 	bl	800f66c <etharp_input>
      break;
 80114ea:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80114ec:	2300      	movs	r3, #0
 80114ee:	e00c      	b.n	801150a <ethernet_input+0x10e>
    goto free_and_return;
 80114f0:	bf00      	nop
 80114f2:	e006      	b.n	8011502 <ethernet_input+0x106>
        goto free_and_return;
 80114f4:	bf00      	nop
 80114f6:	e004      	b.n	8011502 <ethernet_input+0x106>
        goto free_and_return;
 80114f8:	bf00      	nop
 80114fa:	e002      	b.n	8011502 <ethernet_input+0x106>
        goto free_and_return;
 80114fc:	bf00      	nop
 80114fe:	e000      	b.n	8011502 <ethernet_input+0x106>
        goto free_and_return;
 8011500:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8011502:	6878      	ldr	r0, [r7, #4]
 8011504:	f7f7 fe5e 	bl	80091c4 <pbuf_free>
  return ERR_OK;
 8011508:	2300      	movs	r3, #0
}
 801150a:	4618      	mov	r0, r3
 801150c:	3718      	adds	r7, #24
 801150e:	46bd      	mov	sp, r7
 8011510:	bd80      	pop	{r7, pc}
 8011512:	bf00      	nop
 8011514:	080154b8 	.word	0x080154b8

08011518 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8011518:	b580      	push	{r7, lr}
 801151a:	b086      	sub	sp, #24
 801151c:	af00      	add	r7, sp, #0
 801151e:	60f8      	str	r0, [r7, #12]
 8011520:	60b9      	str	r1, [r7, #8]
 8011522:	607a      	str	r2, [r7, #4]
 8011524:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8011526:	8c3b      	ldrh	r3, [r7, #32]
 8011528:	4618      	mov	r0, r3
 801152a:	f7f6 fa49 	bl	80079c0 <lwip_htons>
 801152e:	4603      	mov	r3, r0
 8011530:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8011532:	210e      	movs	r1, #14
 8011534:	68b8      	ldr	r0, [r7, #8]
 8011536:	f7f7 fdaf 	bl	8009098 <pbuf_add_header>
 801153a:	4603      	mov	r3, r0
 801153c:	2b00      	cmp	r3, #0
 801153e:	d125      	bne.n	801158c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8011540:	68bb      	ldr	r3, [r7, #8]
 8011542:	685b      	ldr	r3, [r3, #4]
 8011544:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8011546:	693b      	ldr	r3, [r7, #16]
 8011548:	8afa      	ldrh	r2, [r7, #22]
 801154a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801154c:	693b      	ldr	r3, [r7, #16]
 801154e:	2206      	movs	r2, #6
 8011550:	6839      	ldr	r1, [r7, #0]
 8011552:	4618      	mov	r0, r3
 8011554:	f000 fb19 	bl	8011b8a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8011558:	693b      	ldr	r3, [r7, #16]
 801155a:	3306      	adds	r3, #6
 801155c:	2206      	movs	r2, #6
 801155e:	6879      	ldr	r1, [r7, #4]
 8011560:	4618      	mov	r0, r3
 8011562:	f000 fb12 	bl	8011b8a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801156c:	2b06      	cmp	r3, #6
 801156e:	d006      	beq.n	801157e <ethernet_output+0x66>
 8011570:	4b0a      	ldr	r3, [pc, #40]	@ (801159c <ethernet_output+0x84>)
 8011572:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8011576:	490a      	ldr	r1, [pc, #40]	@ (80115a0 <ethernet_output+0x88>)
 8011578:	480a      	ldr	r0, [pc, #40]	@ (80115a4 <ethernet_output+0x8c>)
 801157a:	f000 fa2b 	bl	80119d4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	699b      	ldr	r3, [r3, #24]
 8011582:	68b9      	ldr	r1, [r7, #8]
 8011584:	68f8      	ldr	r0, [r7, #12]
 8011586:	4798      	blx	r3
 8011588:	4603      	mov	r3, r0
 801158a:	e002      	b.n	8011592 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801158c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801158e:	f06f 0301 	mvn.w	r3, #1
}
 8011592:	4618      	mov	r0, r3
 8011594:	3718      	adds	r7, #24
 8011596:	46bd      	mov	sp, r7
 8011598:	bd80      	pop	{r7, pc}
 801159a:	bf00      	nop
 801159c:	080152ec 	.word	0x080152ec
 80115a0:	08015324 	.word	0x08015324
 80115a4:	08015358 	.word	0x08015358

080115a8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b086      	sub	sp, #24
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	6078      	str	r0, [r7, #4]
 80115b0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80115b2:	683b      	ldr	r3, [r7, #0]
 80115b4:	60bb      	str	r3, [r7, #8]
 80115b6:	2304      	movs	r3, #4
 80115b8:	60fb      	str	r3, [r7, #12]
 80115ba:	2300      	movs	r3, #0
 80115bc:	613b      	str	r3, [r7, #16]
 80115be:	2300      	movs	r3, #0
 80115c0:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80115c2:	f107 0308 	add.w	r3, r7, #8
 80115c6:	2100      	movs	r1, #0
 80115c8:	4618      	mov	r0, r3
 80115ca:	f7f3 fa1b 	bl	8004a04 <osMessageCreate>
 80115ce:	4602      	mov	r2, r0
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d102      	bne.n	80115e2 <sys_mbox_new+0x3a>
    return ERR_MEM;
 80115dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80115e0:	e000      	b.n	80115e4 <sys_mbox_new+0x3c>

  return ERR_OK;
 80115e2:	2300      	movs	r3, #0
}
 80115e4:	4618      	mov	r0, r3
 80115e6:	3718      	adds	r7, #24
 80115e8:	46bd      	mov	sp, r7
 80115ea:	bd80      	pop	{r7, pc}

080115ec <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b084      	sub	sp, #16
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
 80115f4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	6839      	ldr	r1, [r7, #0]
 80115fc:	2200      	movs	r2, #0
 80115fe:	4618      	mov	r0, r3
 8011600:	f7f3 fa28 	bl	8004a54 <osMessagePut>
 8011604:	4603      	mov	r3, r0
 8011606:	2b00      	cmp	r3, #0
 8011608:	d102      	bne.n	8011610 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801160a:	2300      	movs	r3, #0
 801160c:	73fb      	strb	r3, [r7, #15]
 801160e:	e001      	b.n	8011614 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8011610:	23ff      	movs	r3, #255	@ 0xff
 8011612:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8011614:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011618:	4618      	mov	r0, r3
 801161a:	3710      	adds	r7, #16
 801161c:	46bd      	mov	sp, r7
 801161e:	bd80      	pop	{r7, pc}

08011620 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8011620:	b580      	push	{r7, lr}
 8011622:	b08c      	sub	sp, #48	@ 0x30
 8011624:	af00      	add	r7, sp, #0
 8011626:	61f8      	str	r0, [r7, #28]
 8011628:	61b9      	str	r1, [r7, #24]
 801162a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801162c:	f7f3 f81b 	bl	8004666 <osKernelSysTick>
 8011630:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8011632:	697b      	ldr	r3, [r7, #20]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d017      	beq.n	8011668 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8011638:	69fb      	ldr	r3, [r7, #28]
 801163a:	6819      	ldr	r1, [r3, #0]
 801163c:	f107 0320 	add.w	r3, r7, #32
 8011640:	697a      	ldr	r2, [r7, #20]
 8011642:	4618      	mov	r0, r3
 8011644:	f7f3 fa46 	bl	8004ad4 <osMessageGet>

    if(event.status == osEventMessage)
 8011648:	6a3b      	ldr	r3, [r7, #32]
 801164a:	2b10      	cmp	r3, #16
 801164c:	d109      	bne.n	8011662 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801164e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011650:	461a      	mov	r2, r3
 8011652:	69bb      	ldr	r3, [r7, #24]
 8011654:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8011656:	f7f3 f806 	bl	8004666 <osKernelSysTick>
 801165a:	4602      	mov	r2, r0
 801165c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801165e:	1ad3      	subs	r3, r2, r3
 8011660:	e019      	b.n	8011696 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8011662:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011666:	e016      	b.n	8011696 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8011668:	69fb      	ldr	r3, [r7, #28]
 801166a:	6819      	ldr	r1, [r3, #0]
 801166c:	463b      	mov	r3, r7
 801166e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011672:	4618      	mov	r0, r3
 8011674:	f7f3 fa2e 	bl	8004ad4 <osMessageGet>
 8011678:	f107 0320 	add.w	r3, r7, #32
 801167c:	463a      	mov	r2, r7
 801167e:	ca07      	ldmia	r2, {r0, r1, r2}
 8011680:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8011684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011686:	461a      	mov	r2, r3
 8011688:	69bb      	ldr	r3, [r7, #24]
 801168a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801168c:	f7f2 ffeb 	bl	8004666 <osKernelSysTick>
 8011690:	4602      	mov	r2, r0
 8011692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011694:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8011696:	4618      	mov	r0, r3
 8011698:	3730      	adds	r7, #48	@ 0x30
 801169a:	46bd      	mov	sp, r7
 801169c:	bd80      	pop	{r7, pc}

0801169e <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801169e:	b480      	push	{r7}
 80116a0:	b083      	sub	sp, #12
 80116a2:	af00      	add	r7, sp, #0
 80116a4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d101      	bne.n	80116b2 <sys_mbox_valid+0x14>
    return 0;
 80116ae:	2300      	movs	r3, #0
 80116b0:	e000      	b.n	80116b4 <sys_mbox_valid+0x16>
  else
    return 1;
 80116b2:	2301      	movs	r3, #1
}
 80116b4:	4618      	mov	r0, r3
 80116b6:	370c      	adds	r7, #12
 80116b8:	46bd      	mov	sp, r7
 80116ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116be:	4770      	bx	lr

080116c0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80116c4:	4803      	ldr	r0, [pc, #12]	@ (80116d4 <sys_init+0x14>)
 80116c6:	f7f3 f84a 	bl	800475e <osMutexCreate>
 80116ca:	4603      	mov	r3, r0
 80116cc:	4a02      	ldr	r2, [pc, #8]	@ (80116d8 <sys_init+0x18>)
 80116ce:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80116d0:	bf00      	nop
 80116d2:	bd80      	pop	{r7, pc}
 80116d4:	080154c8 	.word	0x080154c8
 80116d8:	2000ff08 	.word	0x2000ff08

080116dc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80116dc:	b580      	push	{r7, lr}
 80116de:	b084      	sub	sp, #16
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80116e4:	2300      	movs	r3, #0
 80116e6:	60bb      	str	r3, [r7, #8]
 80116e8:	2300      	movs	r3, #0
 80116ea:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80116ec:	f107 0308 	add.w	r3, r7, #8
 80116f0:	4618      	mov	r0, r3
 80116f2:	f7f3 f834 	bl	800475e <osMutexCreate>
 80116f6:	4602      	mov	r2, r0
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d102      	bne.n	801170a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8011704:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011708:	e000      	b.n	801170c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801170a:	2300      	movs	r3, #0
}
 801170c:	4618      	mov	r0, r3
 801170e:	3710      	adds	r7, #16
 8011710:	46bd      	mov	sp, r7
 8011712:	bd80      	pop	{r7, pc}

08011714 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b082      	sub	sp, #8
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8011724:	4618      	mov	r0, r3
 8011726:	f7f3 f833 	bl	8004790 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801172a:	bf00      	nop
 801172c:	3708      	adds	r7, #8
 801172e:	46bd      	mov	sp, r7
 8011730:	bd80      	pop	{r7, pc}

08011732 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8011732:	b580      	push	{r7, lr}
 8011734:	b082      	sub	sp, #8
 8011736:	af00      	add	r7, sp, #0
 8011738:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	4618      	mov	r0, r3
 8011740:	f7f3 f874 	bl	800482c <osMutexRelease>
}
 8011744:	bf00      	nop
 8011746:	3708      	adds	r7, #8
 8011748:	46bd      	mov	sp, r7
 801174a:	bd80      	pop	{r7, pc}

0801174c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801174c:	b580      	push	{r7, lr}
 801174e:	b08c      	sub	sp, #48	@ 0x30
 8011750:	af00      	add	r7, sp, #0
 8011752:	60f8      	str	r0, [r7, #12]
 8011754:	60b9      	str	r1, [r7, #8]
 8011756:	607a      	str	r2, [r7, #4]
 8011758:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801175a:	f107 0314 	add.w	r3, r7, #20
 801175e:	2200      	movs	r2, #0
 8011760:	601a      	str	r2, [r3, #0]
 8011762:	605a      	str	r2, [r3, #4]
 8011764:	609a      	str	r2, [r3, #8]
 8011766:	60da      	str	r2, [r3, #12]
 8011768:	611a      	str	r2, [r3, #16]
 801176a:	615a      	str	r2, [r3, #20]
 801176c:	619a      	str	r2, [r3, #24]
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	617b      	str	r3, [r7, #20]
 8011772:	68bb      	ldr	r3, [r7, #8]
 8011774:	61bb      	str	r3, [r7, #24]
 8011776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011778:	b21b      	sxth	r3, r3
 801177a:	83bb      	strh	r3, [r7, #28]
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8011780:	f107 0314 	add.w	r3, r7, #20
 8011784:	6879      	ldr	r1, [r7, #4]
 8011786:	4618      	mov	r0, r3
 8011788:	f7f2 ff7d 	bl	8004686 <osThreadCreate>
 801178c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801178e:	4618      	mov	r0, r3
 8011790:	3730      	adds	r7, #48	@ 0x30
 8011792:	46bd      	mov	sp, r7
 8011794:	bd80      	pop	{r7, pc}
	...

08011798 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8011798:	b580      	push	{r7, lr}
 801179a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801179c:	4b04      	ldr	r3, [pc, #16]	@ (80117b0 <sys_arch_protect+0x18>)
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80117a4:	4618      	mov	r0, r3
 80117a6:	f7f2 fff3 	bl	8004790 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80117aa:	2301      	movs	r3, #1
}
 80117ac:	4618      	mov	r0, r3
 80117ae:	bd80      	pop	{r7, pc}
 80117b0:	2000ff08 	.word	0x2000ff08

080117b4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b082      	sub	sp, #8
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80117bc:	4b04      	ldr	r3, [pc, #16]	@ (80117d0 <sys_arch_unprotect+0x1c>)
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	4618      	mov	r0, r3
 80117c2:	f7f3 f833 	bl	800482c <osMutexRelease>
}
 80117c6:	bf00      	nop
 80117c8:	3708      	adds	r7, #8
 80117ca:	46bd      	mov	sp, r7
 80117cc:	bd80      	pop	{r7, pc}
 80117ce:	bf00      	nop
 80117d0:	2000ff08 	.word	0x2000ff08

080117d4 <rand>:
 80117d4:	4b16      	ldr	r3, [pc, #88]	@ (8011830 <rand+0x5c>)
 80117d6:	b510      	push	{r4, lr}
 80117d8:	681c      	ldr	r4, [r3, #0]
 80117da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80117dc:	b9b3      	cbnz	r3, 801180c <rand+0x38>
 80117de:	2018      	movs	r0, #24
 80117e0:	f000 fa00 	bl	8011be4 <malloc>
 80117e4:	4602      	mov	r2, r0
 80117e6:	6320      	str	r0, [r4, #48]	@ 0x30
 80117e8:	b920      	cbnz	r0, 80117f4 <rand+0x20>
 80117ea:	4b12      	ldr	r3, [pc, #72]	@ (8011834 <rand+0x60>)
 80117ec:	4812      	ldr	r0, [pc, #72]	@ (8011838 <rand+0x64>)
 80117ee:	2152      	movs	r1, #82	@ 0x52
 80117f0:	f000 f9da 	bl	8011ba8 <__assert_func>
 80117f4:	4911      	ldr	r1, [pc, #68]	@ (801183c <rand+0x68>)
 80117f6:	4b12      	ldr	r3, [pc, #72]	@ (8011840 <rand+0x6c>)
 80117f8:	e9c0 1300 	strd	r1, r3, [r0]
 80117fc:	4b11      	ldr	r3, [pc, #68]	@ (8011844 <rand+0x70>)
 80117fe:	6083      	str	r3, [r0, #8]
 8011800:	230b      	movs	r3, #11
 8011802:	8183      	strh	r3, [r0, #12]
 8011804:	2100      	movs	r1, #0
 8011806:	2001      	movs	r0, #1
 8011808:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801180c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801180e:	480e      	ldr	r0, [pc, #56]	@ (8011848 <rand+0x74>)
 8011810:	690b      	ldr	r3, [r1, #16]
 8011812:	694c      	ldr	r4, [r1, #20]
 8011814:	4a0d      	ldr	r2, [pc, #52]	@ (801184c <rand+0x78>)
 8011816:	4358      	muls	r0, r3
 8011818:	fb02 0004 	mla	r0, r2, r4, r0
 801181c:	fba3 3202 	umull	r3, r2, r3, r2
 8011820:	3301      	adds	r3, #1
 8011822:	eb40 0002 	adc.w	r0, r0, r2
 8011826:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801182a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801182e:	bd10      	pop	{r4, pc}
 8011830:	2000003c 	.word	0x2000003c
 8011834:	080154d0 	.word	0x080154d0
 8011838:	080154e7 	.word	0x080154e7
 801183c:	abcd330e 	.word	0xabcd330e
 8011840:	e66d1234 	.word	0xe66d1234
 8011844:	0005deec 	.word	0x0005deec
 8011848:	5851f42d 	.word	0x5851f42d
 801184c:	4c957f2d 	.word	0x4c957f2d

08011850 <std>:
 8011850:	2300      	movs	r3, #0
 8011852:	b510      	push	{r4, lr}
 8011854:	4604      	mov	r4, r0
 8011856:	e9c0 3300 	strd	r3, r3, [r0]
 801185a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801185e:	6083      	str	r3, [r0, #8]
 8011860:	8181      	strh	r1, [r0, #12]
 8011862:	6643      	str	r3, [r0, #100]	@ 0x64
 8011864:	81c2      	strh	r2, [r0, #14]
 8011866:	6183      	str	r3, [r0, #24]
 8011868:	4619      	mov	r1, r3
 801186a:	2208      	movs	r2, #8
 801186c:	305c      	adds	r0, #92	@ 0x5c
 801186e:	f000 f916 	bl	8011a9e <memset>
 8011872:	4b0d      	ldr	r3, [pc, #52]	@ (80118a8 <std+0x58>)
 8011874:	6263      	str	r3, [r4, #36]	@ 0x24
 8011876:	4b0d      	ldr	r3, [pc, #52]	@ (80118ac <std+0x5c>)
 8011878:	62a3      	str	r3, [r4, #40]	@ 0x28
 801187a:	4b0d      	ldr	r3, [pc, #52]	@ (80118b0 <std+0x60>)
 801187c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801187e:	4b0d      	ldr	r3, [pc, #52]	@ (80118b4 <std+0x64>)
 8011880:	6323      	str	r3, [r4, #48]	@ 0x30
 8011882:	4b0d      	ldr	r3, [pc, #52]	@ (80118b8 <std+0x68>)
 8011884:	6224      	str	r4, [r4, #32]
 8011886:	429c      	cmp	r4, r3
 8011888:	d006      	beq.n	8011898 <std+0x48>
 801188a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801188e:	4294      	cmp	r4, r2
 8011890:	d002      	beq.n	8011898 <std+0x48>
 8011892:	33d0      	adds	r3, #208	@ 0xd0
 8011894:	429c      	cmp	r4, r3
 8011896:	d105      	bne.n	80118a4 <std+0x54>
 8011898:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801189c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118a0:	f000 b970 	b.w	8011b84 <__retarget_lock_init_recursive>
 80118a4:	bd10      	pop	{r4, pc}
 80118a6:	bf00      	nop
 80118a8:	080119f9 	.word	0x080119f9
 80118ac:	08011a1b 	.word	0x08011a1b
 80118b0:	08011a53 	.word	0x08011a53
 80118b4:	08011a77 	.word	0x08011a77
 80118b8:	2000ff0c 	.word	0x2000ff0c

080118bc <stdio_exit_handler>:
 80118bc:	4a02      	ldr	r2, [pc, #8]	@ (80118c8 <stdio_exit_handler+0xc>)
 80118be:	4903      	ldr	r1, [pc, #12]	@ (80118cc <stdio_exit_handler+0x10>)
 80118c0:	4803      	ldr	r0, [pc, #12]	@ (80118d0 <stdio_exit_handler+0x14>)
 80118c2:	f000 b869 	b.w	8011998 <_fwalk_sglue>
 80118c6:	bf00      	nop
 80118c8:	20000030 	.word	0x20000030
 80118cc:	080123f9 	.word	0x080123f9
 80118d0:	20000040 	.word	0x20000040

080118d4 <cleanup_stdio>:
 80118d4:	6841      	ldr	r1, [r0, #4]
 80118d6:	4b0c      	ldr	r3, [pc, #48]	@ (8011908 <cleanup_stdio+0x34>)
 80118d8:	4299      	cmp	r1, r3
 80118da:	b510      	push	{r4, lr}
 80118dc:	4604      	mov	r4, r0
 80118de:	d001      	beq.n	80118e4 <cleanup_stdio+0x10>
 80118e0:	f000 fd8a 	bl	80123f8 <_fflush_r>
 80118e4:	68a1      	ldr	r1, [r4, #8]
 80118e6:	4b09      	ldr	r3, [pc, #36]	@ (801190c <cleanup_stdio+0x38>)
 80118e8:	4299      	cmp	r1, r3
 80118ea:	d002      	beq.n	80118f2 <cleanup_stdio+0x1e>
 80118ec:	4620      	mov	r0, r4
 80118ee:	f000 fd83 	bl	80123f8 <_fflush_r>
 80118f2:	68e1      	ldr	r1, [r4, #12]
 80118f4:	4b06      	ldr	r3, [pc, #24]	@ (8011910 <cleanup_stdio+0x3c>)
 80118f6:	4299      	cmp	r1, r3
 80118f8:	d004      	beq.n	8011904 <cleanup_stdio+0x30>
 80118fa:	4620      	mov	r0, r4
 80118fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011900:	f000 bd7a 	b.w	80123f8 <_fflush_r>
 8011904:	bd10      	pop	{r4, pc}
 8011906:	bf00      	nop
 8011908:	2000ff0c 	.word	0x2000ff0c
 801190c:	2000ff74 	.word	0x2000ff74
 8011910:	2000ffdc 	.word	0x2000ffdc

08011914 <global_stdio_init.part.0>:
 8011914:	b510      	push	{r4, lr}
 8011916:	4b0b      	ldr	r3, [pc, #44]	@ (8011944 <global_stdio_init.part.0+0x30>)
 8011918:	4c0b      	ldr	r4, [pc, #44]	@ (8011948 <global_stdio_init.part.0+0x34>)
 801191a:	4a0c      	ldr	r2, [pc, #48]	@ (801194c <global_stdio_init.part.0+0x38>)
 801191c:	601a      	str	r2, [r3, #0]
 801191e:	4620      	mov	r0, r4
 8011920:	2200      	movs	r2, #0
 8011922:	2104      	movs	r1, #4
 8011924:	f7ff ff94 	bl	8011850 <std>
 8011928:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801192c:	2201      	movs	r2, #1
 801192e:	2109      	movs	r1, #9
 8011930:	f7ff ff8e 	bl	8011850 <std>
 8011934:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011938:	2202      	movs	r2, #2
 801193a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801193e:	2112      	movs	r1, #18
 8011940:	f7ff bf86 	b.w	8011850 <std>
 8011944:	20010044 	.word	0x20010044
 8011948:	2000ff0c 	.word	0x2000ff0c
 801194c:	080118bd 	.word	0x080118bd

08011950 <__sfp_lock_acquire>:
 8011950:	4801      	ldr	r0, [pc, #4]	@ (8011958 <__sfp_lock_acquire+0x8>)
 8011952:	f000 b918 	b.w	8011b86 <__retarget_lock_acquire_recursive>
 8011956:	bf00      	nop
 8011958:	20010049 	.word	0x20010049

0801195c <__sfp_lock_release>:
 801195c:	4801      	ldr	r0, [pc, #4]	@ (8011964 <__sfp_lock_release+0x8>)
 801195e:	f000 b913 	b.w	8011b88 <__retarget_lock_release_recursive>
 8011962:	bf00      	nop
 8011964:	20010049 	.word	0x20010049

08011968 <__sinit>:
 8011968:	b510      	push	{r4, lr}
 801196a:	4604      	mov	r4, r0
 801196c:	f7ff fff0 	bl	8011950 <__sfp_lock_acquire>
 8011970:	6a23      	ldr	r3, [r4, #32]
 8011972:	b11b      	cbz	r3, 801197c <__sinit+0x14>
 8011974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011978:	f7ff bff0 	b.w	801195c <__sfp_lock_release>
 801197c:	4b04      	ldr	r3, [pc, #16]	@ (8011990 <__sinit+0x28>)
 801197e:	6223      	str	r3, [r4, #32]
 8011980:	4b04      	ldr	r3, [pc, #16]	@ (8011994 <__sinit+0x2c>)
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d1f5      	bne.n	8011974 <__sinit+0xc>
 8011988:	f7ff ffc4 	bl	8011914 <global_stdio_init.part.0>
 801198c:	e7f2      	b.n	8011974 <__sinit+0xc>
 801198e:	bf00      	nop
 8011990:	080118d5 	.word	0x080118d5
 8011994:	20010044 	.word	0x20010044

08011998 <_fwalk_sglue>:
 8011998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801199c:	4607      	mov	r7, r0
 801199e:	4688      	mov	r8, r1
 80119a0:	4614      	mov	r4, r2
 80119a2:	2600      	movs	r6, #0
 80119a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80119a8:	f1b9 0901 	subs.w	r9, r9, #1
 80119ac:	d505      	bpl.n	80119ba <_fwalk_sglue+0x22>
 80119ae:	6824      	ldr	r4, [r4, #0]
 80119b0:	2c00      	cmp	r4, #0
 80119b2:	d1f7      	bne.n	80119a4 <_fwalk_sglue+0xc>
 80119b4:	4630      	mov	r0, r6
 80119b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119ba:	89ab      	ldrh	r3, [r5, #12]
 80119bc:	2b01      	cmp	r3, #1
 80119be:	d907      	bls.n	80119d0 <_fwalk_sglue+0x38>
 80119c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80119c4:	3301      	adds	r3, #1
 80119c6:	d003      	beq.n	80119d0 <_fwalk_sglue+0x38>
 80119c8:	4629      	mov	r1, r5
 80119ca:	4638      	mov	r0, r7
 80119cc:	47c0      	blx	r8
 80119ce:	4306      	orrs	r6, r0
 80119d0:	3568      	adds	r5, #104	@ 0x68
 80119d2:	e7e9      	b.n	80119a8 <_fwalk_sglue+0x10>

080119d4 <iprintf>:
 80119d4:	b40f      	push	{r0, r1, r2, r3}
 80119d6:	b507      	push	{r0, r1, r2, lr}
 80119d8:	4906      	ldr	r1, [pc, #24]	@ (80119f4 <iprintf+0x20>)
 80119da:	ab04      	add	r3, sp, #16
 80119dc:	6808      	ldr	r0, [r1, #0]
 80119de:	f853 2b04 	ldr.w	r2, [r3], #4
 80119e2:	6881      	ldr	r1, [r0, #8]
 80119e4:	9301      	str	r3, [sp, #4]
 80119e6:	f000 f9dd 	bl	8011da4 <_vfiprintf_r>
 80119ea:	b003      	add	sp, #12
 80119ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80119f0:	b004      	add	sp, #16
 80119f2:	4770      	bx	lr
 80119f4:	2000003c 	.word	0x2000003c

080119f8 <__sread>:
 80119f8:	b510      	push	{r4, lr}
 80119fa:	460c      	mov	r4, r1
 80119fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a00:	f000 f878 	bl	8011af4 <_read_r>
 8011a04:	2800      	cmp	r0, #0
 8011a06:	bfab      	itete	ge
 8011a08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011a0a:	89a3      	ldrhlt	r3, [r4, #12]
 8011a0c:	181b      	addge	r3, r3, r0
 8011a0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011a12:	bfac      	ite	ge
 8011a14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011a16:	81a3      	strhlt	r3, [r4, #12]
 8011a18:	bd10      	pop	{r4, pc}

08011a1a <__swrite>:
 8011a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a1e:	461f      	mov	r7, r3
 8011a20:	898b      	ldrh	r3, [r1, #12]
 8011a22:	05db      	lsls	r3, r3, #23
 8011a24:	4605      	mov	r5, r0
 8011a26:	460c      	mov	r4, r1
 8011a28:	4616      	mov	r6, r2
 8011a2a:	d505      	bpl.n	8011a38 <__swrite+0x1e>
 8011a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a30:	2302      	movs	r3, #2
 8011a32:	2200      	movs	r2, #0
 8011a34:	f000 f84c 	bl	8011ad0 <_lseek_r>
 8011a38:	89a3      	ldrh	r3, [r4, #12]
 8011a3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011a42:	81a3      	strh	r3, [r4, #12]
 8011a44:	4632      	mov	r2, r6
 8011a46:	463b      	mov	r3, r7
 8011a48:	4628      	mov	r0, r5
 8011a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a4e:	f000 b863 	b.w	8011b18 <_write_r>

08011a52 <__sseek>:
 8011a52:	b510      	push	{r4, lr}
 8011a54:	460c      	mov	r4, r1
 8011a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a5a:	f000 f839 	bl	8011ad0 <_lseek_r>
 8011a5e:	1c43      	adds	r3, r0, #1
 8011a60:	89a3      	ldrh	r3, [r4, #12]
 8011a62:	bf15      	itete	ne
 8011a64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011a66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011a6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011a6e:	81a3      	strheq	r3, [r4, #12]
 8011a70:	bf18      	it	ne
 8011a72:	81a3      	strhne	r3, [r4, #12]
 8011a74:	bd10      	pop	{r4, pc}

08011a76 <__sclose>:
 8011a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a7a:	f000 b819 	b.w	8011ab0 <_close_r>

08011a7e <memcmp>:
 8011a7e:	b510      	push	{r4, lr}
 8011a80:	3901      	subs	r1, #1
 8011a82:	4402      	add	r2, r0
 8011a84:	4290      	cmp	r0, r2
 8011a86:	d101      	bne.n	8011a8c <memcmp+0xe>
 8011a88:	2000      	movs	r0, #0
 8011a8a:	e005      	b.n	8011a98 <memcmp+0x1a>
 8011a8c:	7803      	ldrb	r3, [r0, #0]
 8011a8e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011a92:	42a3      	cmp	r3, r4
 8011a94:	d001      	beq.n	8011a9a <memcmp+0x1c>
 8011a96:	1b18      	subs	r0, r3, r4
 8011a98:	bd10      	pop	{r4, pc}
 8011a9a:	3001      	adds	r0, #1
 8011a9c:	e7f2      	b.n	8011a84 <memcmp+0x6>

08011a9e <memset>:
 8011a9e:	4402      	add	r2, r0
 8011aa0:	4603      	mov	r3, r0
 8011aa2:	4293      	cmp	r3, r2
 8011aa4:	d100      	bne.n	8011aa8 <memset+0xa>
 8011aa6:	4770      	bx	lr
 8011aa8:	f803 1b01 	strb.w	r1, [r3], #1
 8011aac:	e7f9      	b.n	8011aa2 <memset+0x4>
	...

08011ab0 <_close_r>:
 8011ab0:	b538      	push	{r3, r4, r5, lr}
 8011ab2:	4d06      	ldr	r5, [pc, #24]	@ (8011acc <_close_r+0x1c>)
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	4604      	mov	r4, r0
 8011ab8:	4608      	mov	r0, r1
 8011aba:	602b      	str	r3, [r5, #0]
 8011abc:	f7ee ffd6 	bl	8000a6c <_close>
 8011ac0:	1c43      	adds	r3, r0, #1
 8011ac2:	d102      	bne.n	8011aca <_close_r+0x1a>
 8011ac4:	682b      	ldr	r3, [r5, #0]
 8011ac6:	b103      	cbz	r3, 8011aca <_close_r+0x1a>
 8011ac8:	6023      	str	r3, [r4, #0]
 8011aca:	bd38      	pop	{r3, r4, r5, pc}
 8011acc:	2000ff04 	.word	0x2000ff04

08011ad0 <_lseek_r>:
 8011ad0:	b538      	push	{r3, r4, r5, lr}
 8011ad2:	4d07      	ldr	r5, [pc, #28]	@ (8011af0 <_lseek_r+0x20>)
 8011ad4:	4604      	mov	r4, r0
 8011ad6:	4608      	mov	r0, r1
 8011ad8:	4611      	mov	r1, r2
 8011ada:	2200      	movs	r2, #0
 8011adc:	602a      	str	r2, [r5, #0]
 8011ade:	461a      	mov	r2, r3
 8011ae0:	f7ee ffeb 	bl	8000aba <_lseek>
 8011ae4:	1c43      	adds	r3, r0, #1
 8011ae6:	d102      	bne.n	8011aee <_lseek_r+0x1e>
 8011ae8:	682b      	ldr	r3, [r5, #0]
 8011aea:	b103      	cbz	r3, 8011aee <_lseek_r+0x1e>
 8011aec:	6023      	str	r3, [r4, #0]
 8011aee:	bd38      	pop	{r3, r4, r5, pc}
 8011af0:	2000ff04 	.word	0x2000ff04

08011af4 <_read_r>:
 8011af4:	b538      	push	{r3, r4, r5, lr}
 8011af6:	4d07      	ldr	r5, [pc, #28]	@ (8011b14 <_read_r+0x20>)
 8011af8:	4604      	mov	r4, r0
 8011afa:	4608      	mov	r0, r1
 8011afc:	4611      	mov	r1, r2
 8011afe:	2200      	movs	r2, #0
 8011b00:	602a      	str	r2, [r5, #0]
 8011b02:	461a      	mov	r2, r3
 8011b04:	f7ee ff79 	bl	80009fa <_read>
 8011b08:	1c43      	adds	r3, r0, #1
 8011b0a:	d102      	bne.n	8011b12 <_read_r+0x1e>
 8011b0c:	682b      	ldr	r3, [r5, #0]
 8011b0e:	b103      	cbz	r3, 8011b12 <_read_r+0x1e>
 8011b10:	6023      	str	r3, [r4, #0]
 8011b12:	bd38      	pop	{r3, r4, r5, pc}
 8011b14:	2000ff04 	.word	0x2000ff04

08011b18 <_write_r>:
 8011b18:	b538      	push	{r3, r4, r5, lr}
 8011b1a:	4d07      	ldr	r5, [pc, #28]	@ (8011b38 <_write_r+0x20>)
 8011b1c:	4604      	mov	r4, r0
 8011b1e:	4608      	mov	r0, r1
 8011b20:	4611      	mov	r1, r2
 8011b22:	2200      	movs	r2, #0
 8011b24:	602a      	str	r2, [r5, #0]
 8011b26:	461a      	mov	r2, r3
 8011b28:	f7ee ff84 	bl	8000a34 <_write>
 8011b2c:	1c43      	adds	r3, r0, #1
 8011b2e:	d102      	bne.n	8011b36 <_write_r+0x1e>
 8011b30:	682b      	ldr	r3, [r5, #0]
 8011b32:	b103      	cbz	r3, 8011b36 <_write_r+0x1e>
 8011b34:	6023      	str	r3, [r4, #0]
 8011b36:	bd38      	pop	{r3, r4, r5, pc}
 8011b38:	2000ff04 	.word	0x2000ff04

08011b3c <__libc_init_array>:
 8011b3c:	b570      	push	{r4, r5, r6, lr}
 8011b3e:	4d0d      	ldr	r5, [pc, #52]	@ (8011b74 <__libc_init_array+0x38>)
 8011b40:	4c0d      	ldr	r4, [pc, #52]	@ (8011b78 <__libc_init_array+0x3c>)
 8011b42:	1b64      	subs	r4, r4, r5
 8011b44:	10a4      	asrs	r4, r4, #2
 8011b46:	2600      	movs	r6, #0
 8011b48:	42a6      	cmp	r6, r4
 8011b4a:	d109      	bne.n	8011b60 <__libc_init_array+0x24>
 8011b4c:	4d0b      	ldr	r5, [pc, #44]	@ (8011b7c <__libc_init_array+0x40>)
 8011b4e:	4c0c      	ldr	r4, [pc, #48]	@ (8011b80 <__libc_init_array+0x44>)
 8011b50:	f000 fe4a 	bl	80127e8 <_init>
 8011b54:	1b64      	subs	r4, r4, r5
 8011b56:	10a4      	asrs	r4, r4, #2
 8011b58:	2600      	movs	r6, #0
 8011b5a:	42a6      	cmp	r6, r4
 8011b5c:	d105      	bne.n	8011b6a <__libc_init_array+0x2e>
 8011b5e:	bd70      	pop	{r4, r5, r6, pc}
 8011b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b64:	4798      	blx	r3
 8011b66:	3601      	adds	r6, #1
 8011b68:	e7ee      	b.n	8011b48 <__libc_init_array+0xc>
 8011b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b6e:	4798      	blx	r3
 8011b70:	3601      	adds	r6, #1
 8011b72:	e7f2      	b.n	8011b5a <__libc_init_array+0x1e>
 8011b74:	080155b8 	.word	0x080155b8
 8011b78:	080155b8 	.word	0x080155b8
 8011b7c:	080155b8 	.word	0x080155b8
 8011b80:	080155bc 	.word	0x080155bc

08011b84 <__retarget_lock_init_recursive>:
 8011b84:	4770      	bx	lr

08011b86 <__retarget_lock_acquire_recursive>:
 8011b86:	4770      	bx	lr

08011b88 <__retarget_lock_release_recursive>:
 8011b88:	4770      	bx	lr

08011b8a <memcpy>:
 8011b8a:	440a      	add	r2, r1
 8011b8c:	4291      	cmp	r1, r2
 8011b8e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8011b92:	d100      	bne.n	8011b96 <memcpy+0xc>
 8011b94:	4770      	bx	lr
 8011b96:	b510      	push	{r4, lr}
 8011b98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011b9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011ba0:	4291      	cmp	r1, r2
 8011ba2:	d1f9      	bne.n	8011b98 <memcpy+0xe>
 8011ba4:	bd10      	pop	{r4, pc}
	...

08011ba8 <__assert_func>:
 8011ba8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011baa:	4614      	mov	r4, r2
 8011bac:	461a      	mov	r2, r3
 8011bae:	4b09      	ldr	r3, [pc, #36]	@ (8011bd4 <__assert_func+0x2c>)
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	4605      	mov	r5, r0
 8011bb4:	68d8      	ldr	r0, [r3, #12]
 8011bb6:	b954      	cbnz	r4, 8011bce <__assert_func+0x26>
 8011bb8:	4b07      	ldr	r3, [pc, #28]	@ (8011bd8 <__assert_func+0x30>)
 8011bba:	461c      	mov	r4, r3
 8011bbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011bc0:	9100      	str	r1, [sp, #0]
 8011bc2:	462b      	mov	r3, r5
 8011bc4:	4905      	ldr	r1, [pc, #20]	@ (8011bdc <__assert_func+0x34>)
 8011bc6:	f000 fc3f 	bl	8012448 <fiprintf>
 8011bca:	f000 fcf3 	bl	80125b4 <abort>
 8011bce:	4b04      	ldr	r3, [pc, #16]	@ (8011be0 <__assert_func+0x38>)
 8011bd0:	e7f4      	b.n	8011bbc <__assert_func+0x14>
 8011bd2:	bf00      	nop
 8011bd4:	2000003c 	.word	0x2000003c
 8011bd8:	0801557a 	.word	0x0801557a
 8011bdc:	0801554c 	.word	0x0801554c
 8011be0:	0801553f 	.word	0x0801553f

08011be4 <malloc>:
 8011be4:	4b02      	ldr	r3, [pc, #8]	@ (8011bf0 <malloc+0xc>)
 8011be6:	4601      	mov	r1, r0
 8011be8:	6818      	ldr	r0, [r3, #0]
 8011bea:	f000 b825 	b.w	8011c38 <_malloc_r>
 8011bee:	bf00      	nop
 8011bf0:	2000003c 	.word	0x2000003c

08011bf4 <sbrk_aligned>:
 8011bf4:	b570      	push	{r4, r5, r6, lr}
 8011bf6:	4e0f      	ldr	r6, [pc, #60]	@ (8011c34 <sbrk_aligned+0x40>)
 8011bf8:	460c      	mov	r4, r1
 8011bfa:	6831      	ldr	r1, [r6, #0]
 8011bfc:	4605      	mov	r5, r0
 8011bfe:	b911      	cbnz	r1, 8011c06 <sbrk_aligned+0x12>
 8011c00:	f000 fcc8 	bl	8012594 <_sbrk_r>
 8011c04:	6030      	str	r0, [r6, #0]
 8011c06:	4621      	mov	r1, r4
 8011c08:	4628      	mov	r0, r5
 8011c0a:	f000 fcc3 	bl	8012594 <_sbrk_r>
 8011c0e:	1c43      	adds	r3, r0, #1
 8011c10:	d103      	bne.n	8011c1a <sbrk_aligned+0x26>
 8011c12:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8011c16:	4620      	mov	r0, r4
 8011c18:	bd70      	pop	{r4, r5, r6, pc}
 8011c1a:	1cc4      	adds	r4, r0, #3
 8011c1c:	f024 0403 	bic.w	r4, r4, #3
 8011c20:	42a0      	cmp	r0, r4
 8011c22:	d0f8      	beq.n	8011c16 <sbrk_aligned+0x22>
 8011c24:	1a21      	subs	r1, r4, r0
 8011c26:	4628      	mov	r0, r5
 8011c28:	f000 fcb4 	bl	8012594 <_sbrk_r>
 8011c2c:	3001      	adds	r0, #1
 8011c2e:	d1f2      	bne.n	8011c16 <sbrk_aligned+0x22>
 8011c30:	e7ef      	b.n	8011c12 <sbrk_aligned+0x1e>
 8011c32:	bf00      	nop
 8011c34:	2001004c 	.word	0x2001004c

08011c38 <_malloc_r>:
 8011c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c3c:	1ccd      	adds	r5, r1, #3
 8011c3e:	f025 0503 	bic.w	r5, r5, #3
 8011c42:	3508      	adds	r5, #8
 8011c44:	2d0c      	cmp	r5, #12
 8011c46:	bf38      	it	cc
 8011c48:	250c      	movcc	r5, #12
 8011c4a:	2d00      	cmp	r5, #0
 8011c4c:	4606      	mov	r6, r0
 8011c4e:	db01      	blt.n	8011c54 <_malloc_r+0x1c>
 8011c50:	42a9      	cmp	r1, r5
 8011c52:	d904      	bls.n	8011c5e <_malloc_r+0x26>
 8011c54:	230c      	movs	r3, #12
 8011c56:	6033      	str	r3, [r6, #0]
 8011c58:	2000      	movs	r0, #0
 8011c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011d34 <_malloc_r+0xfc>
 8011c62:	f000 f869 	bl	8011d38 <__malloc_lock>
 8011c66:	f8d8 3000 	ldr.w	r3, [r8]
 8011c6a:	461c      	mov	r4, r3
 8011c6c:	bb44      	cbnz	r4, 8011cc0 <_malloc_r+0x88>
 8011c6e:	4629      	mov	r1, r5
 8011c70:	4630      	mov	r0, r6
 8011c72:	f7ff ffbf 	bl	8011bf4 <sbrk_aligned>
 8011c76:	1c43      	adds	r3, r0, #1
 8011c78:	4604      	mov	r4, r0
 8011c7a:	d158      	bne.n	8011d2e <_malloc_r+0xf6>
 8011c7c:	f8d8 4000 	ldr.w	r4, [r8]
 8011c80:	4627      	mov	r7, r4
 8011c82:	2f00      	cmp	r7, #0
 8011c84:	d143      	bne.n	8011d0e <_malloc_r+0xd6>
 8011c86:	2c00      	cmp	r4, #0
 8011c88:	d04b      	beq.n	8011d22 <_malloc_r+0xea>
 8011c8a:	6823      	ldr	r3, [r4, #0]
 8011c8c:	4639      	mov	r1, r7
 8011c8e:	4630      	mov	r0, r6
 8011c90:	eb04 0903 	add.w	r9, r4, r3
 8011c94:	f000 fc7e 	bl	8012594 <_sbrk_r>
 8011c98:	4581      	cmp	r9, r0
 8011c9a:	d142      	bne.n	8011d22 <_malloc_r+0xea>
 8011c9c:	6821      	ldr	r1, [r4, #0]
 8011c9e:	1a6d      	subs	r5, r5, r1
 8011ca0:	4629      	mov	r1, r5
 8011ca2:	4630      	mov	r0, r6
 8011ca4:	f7ff ffa6 	bl	8011bf4 <sbrk_aligned>
 8011ca8:	3001      	adds	r0, #1
 8011caa:	d03a      	beq.n	8011d22 <_malloc_r+0xea>
 8011cac:	6823      	ldr	r3, [r4, #0]
 8011cae:	442b      	add	r3, r5
 8011cb0:	6023      	str	r3, [r4, #0]
 8011cb2:	f8d8 3000 	ldr.w	r3, [r8]
 8011cb6:	685a      	ldr	r2, [r3, #4]
 8011cb8:	bb62      	cbnz	r2, 8011d14 <_malloc_r+0xdc>
 8011cba:	f8c8 7000 	str.w	r7, [r8]
 8011cbe:	e00f      	b.n	8011ce0 <_malloc_r+0xa8>
 8011cc0:	6822      	ldr	r2, [r4, #0]
 8011cc2:	1b52      	subs	r2, r2, r5
 8011cc4:	d420      	bmi.n	8011d08 <_malloc_r+0xd0>
 8011cc6:	2a0b      	cmp	r2, #11
 8011cc8:	d917      	bls.n	8011cfa <_malloc_r+0xc2>
 8011cca:	1961      	adds	r1, r4, r5
 8011ccc:	42a3      	cmp	r3, r4
 8011cce:	6025      	str	r5, [r4, #0]
 8011cd0:	bf18      	it	ne
 8011cd2:	6059      	strne	r1, [r3, #4]
 8011cd4:	6863      	ldr	r3, [r4, #4]
 8011cd6:	bf08      	it	eq
 8011cd8:	f8c8 1000 	streq.w	r1, [r8]
 8011cdc:	5162      	str	r2, [r4, r5]
 8011cde:	604b      	str	r3, [r1, #4]
 8011ce0:	4630      	mov	r0, r6
 8011ce2:	f000 f82f 	bl	8011d44 <__malloc_unlock>
 8011ce6:	f104 000b 	add.w	r0, r4, #11
 8011cea:	1d23      	adds	r3, r4, #4
 8011cec:	f020 0007 	bic.w	r0, r0, #7
 8011cf0:	1ac2      	subs	r2, r0, r3
 8011cf2:	bf1c      	itt	ne
 8011cf4:	1a1b      	subne	r3, r3, r0
 8011cf6:	50a3      	strne	r3, [r4, r2]
 8011cf8:	e7af      	b.n	8011c5a <_malloc_r+0x22>
 8011cfa:	6862      	ldr	r2, [r4, #4]
 8011cfc:	42a3      	cmp	r3, r4
 8011cfe:	bf0c      	ite	eq
 8011d00:	f8c8 2000 	streq.w	r2, [r8]
 8011d04:	605a      	strne	r2, [r3, #4]
 8011d06:	e7eb      	b.n	8011ce0 <_malloc_r+0xa8>
 8011d08:	4623      	mov	r3, r4
 8011d0a:	6864      	ldr	r4, [r4, #4]
 8011d0c:	e7ae      	b.n	8011c6c <_malloc_r+0x34>
 8011d0e:	463c      	mov	r4, r7
 8011d10:	687f      	ldr	r7, [r7, #4]
 8011d12:	e7b6      	b.n	8011c82 <_malloc_r+0x4a>
 8011d14:	461a      	mov	r2, r3
 8011d16:	685b      	ldr	r3, [r3, #4]
 8011d18:	42a3      	cmp	r3, r4
 8011d1a:	d1fb      	bne.n	8011d14 <_malloc_r+0xdc>
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	6053      	str	r3, [r2, #4]
 8011d20:	e7de      	b.n	8011ce0 <_malloc_r+0xa8>
 8011d22:	230c      	movs	r3, #12
 8011d24:	6033      	str	r3, [r6, #0]
 8011d26:	4630      	mov	r0, r6
 8011d28:	f000 f80c 	bl	8011d44 <__malloc_unlock>
 8011d2c:	e794      	b.n	8011c58 <_malloc_r+0x20>
 8011d2e:	6005      	str	r5, [r0, #0]
 8011d30:	e7d6      	b.n	8011ce0 <_malloc_r+0xa8>
 8011d32:	bf00      	nop
 8011d34:	20010050 	.word	0x20010050

08011d38 <__malloc_lock>:
 8011d38:	4801      	ldr	r0, [pc, #4]	@ (8011d40 <__malloc_lock+0x8>)
 8011d3a:	f7ff bf24 	b.w	8011b86 <__retarget_lock_acquire_recursive>
 8011d3e:	bf00      	nop
 8011d40:	20010048 	.word	0x20010048

08011d44 <__malloc_unlock>:
 8011d44:	4801      	ldr	r0, [pc, #4]	@ (8011d4c <__malloc_unlock+0x8>)
 8011d46:	f7ff bf1f 	b.w	8011b88 <__retarget_lock_release_recursive>
 8011d4a:	bf00      	nop
 8011d4c:	20010048 	.word	0x20010048

08011d50 <__sfputc_r>:
 8011d50:	6893      	ldr	r3, [r2, #8]
 8011d52:	3b01      	subs	r3, #1
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	b410      	push	{r4}
 8011d58:	6093      	str	r3, [r2, #8]
 8011d5a:	da08      	bge.n	8011d6e <__sfputc_r+0x1e>
 8011d5c:	6994      	ldr	r4, [r2, #24]
 8011d5e:	42a3      	cmp	r3, r4
 8011d60:	db01      	blt.n	8011d66 <__sfputc_r+0x16>
 8011d62:	290a      	cmp	r1, #10
 8011d64:	d103      	bne.n	8011d6e <__sfputc_r+0x1e>
 8011d66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d6a:	f000 bb7f 	b.w	801246c <__swbuf_r>
 8011d6e:	6813      	ldr	r3, [r2, #0]
 8011d70:	1c58      	adds	r0, r3, #1
 8011d72:	6010      	str	r0, [r2, #0]
 8011d74:	7019      	strb	r1, [r3, #0]
 8011d76:	4608      	mov	r0, r1
 8011d78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d7c:	4770      	bx	lr

08011d7e <__sfputs_r>:
 8011d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d80:	4606      	mov	r6, r0
 8011d82:	460f      	mov	r7, r1
 8011d84:	4614      	mov	r4, r2
 8011d86:	18d5      	adds	r5, r2, r3
 8011d88:	42ac      	cmp	r4, r5
 8011d8a:	d101      	bne.n	8011d90 <__sfputs_r+0x12>
 8011d8c:	2000      	movs	r0, #0
 8011d8e:	e007      	b.n	8011da0 <__sfputs_r+0x22>
 8011d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d94:	463a      	mov	r2, r7
 8011d96:	4630      	mov	r0, r6
 8011d98:	f7ff ffda 	bl	8011d50 <__sfputc_r>
 8011d9c:	1c43      	adds	r3, r0, #1
 8011d9e:	d1f3      	bne.n	8011d88 <__sfputs_r+0xa>
 8011da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011da4 <_vfiprintf_r>:
 8011da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011da8:	460d      	mov	r5, r1
 8011daa:	b09d      	sub	sp, #116	@ 0x74
 8011dac:	4614      	mov	r4, r2
 8011dae:	4698      	mov	r8, r3
 8011db0:	4606      	mov	r6, r0
 8011db2:	b118      	cbz	r0, 8011dbc <_vfiprintf_r+0x18>
 8011db4:	6a03      	ldr	r3, [r0, #32]
 8011db6:	b90b      	cbnz	r3, 8011dbc <_vfiprintf_r+0x18>
 8011db8:	f7ff fdd6 	bl	8011968 <__sinit>
 8011dbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011dbe:	07d9      	lsls	r1, r3, #31
 8011dc0:	d405      	bmi.n	8011dce <_vfiprintf_r+0x2a>
 8011dc2:	89ab      	ldrh	r3, [r5, #12]
 8011dc4:	059a      	lsls	r2, r3, #22
 8011dc6:	d402      	bmi.n	8011dce <_vfiprintf_r+0x2a>
 8011dc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011dca:	f7ff fedc 	bl	8011b86 <__retarget_lock_acquire_recursive>
 8011dce:	89ab      	ldrh	r3, [r5, #12]
 8011dd0:	071b      	lsls	r3, r3, #28
 8011dd2:	d501      	bpl.n	8011dd8 <_vfiprintf_r+0x34>
 8011dd4:	692b      	ldr	r3, [r5, #16]
 8011dd6:	b99b      	cbnz	r3, 8011e00 <_vfiprintf_r+0x5c>
 8011dd8:	4629      	mov	r1, r5
 8011dda:	4630      	mov	r0, r6
 8011ddc:	f000 fb84 	bl	80124e8 <__swsetup_r>
 8011de0:	b170      	cbz	r0, 8011e00 <_vfiprintf_r+0x5c>
 8011de2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011de4:	07dc      	lsls	r4, r3, #31
 8011de6:	d504      	bpl.n	8011df2 <_vfiprintf_r+0x4e>
 8011de8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011dec:	b01d      	add	sp, #116	@ 0x74
 8011dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011df2:	89ab      	ldrh	r3, [r5, #12]
 8011df4:	0598      	lsls	r0, r3, #22
 8011df6:	d4f7      	bmi.n	8011de8 <_vfiprintf_r+0x44>
 8011df8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011dfa:	f7ff fec5 	bl	8011b88 <__retarget_lock_release_recursive>
 8011dfe:	e7f3      	b.n	8011de8 <_vfiprintf_r+0x44>
 8011e00:	2300      	movs	r3, #0
 8011e02:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e04:	2320      	movs	r3, #32
 8011e06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011e0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e0e:	2330      	movs	r3, #48	@ 0x30
 8011e10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011fc0 <_vfiprintf_r+0x21c>
 8011e14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011e18:	f04f 0901 	mov.w	r9, #1
 8011e1c:	4623      	mov	r3, r4
 8011e1e:	469a      	mov	sl, r3
 8011e20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e24:	b10a      	cbz	r2, 8011e2a <_vfiprintf_r+0x86>
 8011e26:	2a25      	cmp	r2, #37	@ 0x25
 8011e28:	d1f9      	bne.n	8011e1e <_vfiprintf_r+0x7a>
 8011e2a:	ebba 0b04 	subs.w	fp, sl, r4
 8011e2e:	d00b      	beq.n	8011e48 <_vfiprintf_r+0xa4>
 8011e30:	465b      	mov	r3, fp
 8011e32:	4622      	mov	r2, r4
 8011e34:	4629      	mov	r1, r5
 8011e36:	4630      	mov	r0, r6
 8011e38:	f7ff ffa1 	bl	8011d7e <__sfputs_r>
 8011e3c:	3001      	adds	r0, #1
 8011e3e:	f000 80a7 	beq.w	8011f90 <_vfiprintf_r+0x1ec>
 8011e42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011e44:	445a      	add	r2, fp
 8011e46:	9209      	str	r2, [sp, #36]	@ 0x24
 8011e48:	f89a 3000 	ldrb.w	r3, [sl]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	f000 809f 	beq.w	8011f90 <_vfiprintf_r+0x1ec>
 8011e52:	2300      	movs	r3, #0
 8011e54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011e58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e5c:	f10a 0a01 	add.w	sl, sl, #1
 8011e60:	9304      	str	r3, [sp, #16]
 8011e62:	9307      	str	r3, [sp, #28]
 8011e64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011e68:	931a      	str	r3, [sp, #104]	@ 0x68
 8011e6a:	4654      	mov	r4, sl
 8011e6c:	2205      	movs	r2, #5
 8011e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e72:	4853      	ldr	r0, [pc, #332]	@ (8011fc0 <_vfiprintf_r+0x21c>)
 8011e74:	f7ee f9e4 	bl	8000240 <memchr>
 8011e78:	9a04      	ldr	r2, [sp, #16]
 8011e7a:	b9d8      	cbnz	r0, 8011eb4 <_vfiprintf_r+0x110>
 8011e7c:	06d1      	lsls	r1, r2, #27
 8011e7e:	bf44      	itt	mi
 8011e80:	2320      	movmi	r3, #32
 8011e82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011e86:	0713      	lsls	r3, r2, #28
 8011e88:	bf44      	itt	mi
 8011e8a:	232b      	movmi	r3, #43	@ 0x2b
 8011e8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011e90:	f89a 3000 	ldrb.w	r3, [sl]
 8011e94:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e96:	d015      	beq.n	8011ec4 <_vfiprintf_r+0x120>
 8011e98:	9a07      	ldr	r2, [sp, #28]
 8011e9a:	4654      	mov	r4, sl
 8011e9c:	2000      	movs	r0, #0
 8011e9e:	f04f 0c0a 	mov.w	ip, #10
 8011ea2:	4621      	mov	r1, r4
 8011ea4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ea8:	3b30      	subs	r3, #48	@ 0x30
 8011eaa:	2b09      	cmp	r3, #9
 8011eac:	d94b      	bls.n	8011f46 <_vfiprintf_r+0x1a2>
 8011eae:	b1b0      	cbz	r0, 8011ede <_vfiprintf_r+0x13a>
 8011eb0:	9207      	str	r2, [sp, #28]
 8011eb2:	e014      	b.n	8011ede <_vfiprintf_r+0x13a>
 8011eb4:	eba0 0308 	sub.w	r3, r0, r8
 8011eb8:	fa09 f303 	lsl.w	r3, r9, r3
 8011ebc:	4313      	orrs	r3, r2
 8011ebe:	9304      	str	r3, [sp, #16]
 8011ec0:	46a2      	mov	sl, r4
 8011ec2:	e7d2      	b.n	8011e6a <_vfiprintf_r+0xc6>
 8011ec4:	9b03      	ldr	r3, [sp, #12]
 8011ec6:	1d19      	adds	r1, r3, #4
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	9103      	str	r1, [sp, #12]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	bfbb      	ittet	lt
 8011ed0:	425b      	neglt	r3, r3
 8011ed2:	f042 0202 	orrlt.w	r2, r2, #2
 8011ed6:	9307      	strge	r3, [sp, #28]
 8011ed8:	9307      	strlt	r3, [sp, #28]
 8011eda:	bfb8      	it	lt
 8011edc:	9204      	strlt	r2, [sp, #16]
 8011ede:	7823      	ldrb	r3, [r4, #0]
 8011ee0:	2b2e      	cmp	r3, #46	@ 0x2e
 8011ee2:	d10a      	bne.n	8011efa <_vfiprintf_r+0x156>
 8011ee4:	7863      	ldrb	r3, [r4, #1]
 8011ee6:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ee8:	d132      	bne.n	8011f50 <_vfiprintf_r+0x1ac>
 8011eea:	9b03      	ldr	r3, [sp, #12]
 8011eec:	1d1a      	adds	r2, r3, #4
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	9203      	str	r2, [sp, #12]
 8011ef2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011ef6:	3402      	adds	r4, #2
 8011ef8:	9305      	str	r3, [sp, #20]
 8011efa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011fd0 <_vfiprintf_r+0x22c>
 8011efe:	7821      	ldrb	r1, [r4, #0]
 8011f00:	2203      	movs	r2, #3
 8011f02:	4650      	mov	r0, sl
 8011f04:	f7ee f99c 	bl	8000240 <memchr>
 8011f08:	b138      	cbz	r0, 8011f1a <_vfiprintf_r+0x176>
 8011f0a:	9b04      	ldr	r3, [sp, #16]
 8011f0c:	eba0 000a 	sub.w	r0, r0, sl
 8011f10:	2240      	movs	r2, #64	@ 0x40
 8011f12:	4082      	lsls	r2, r0
 8011f14:	4313      	orrs	r3, r2
 8011f16:	3401      	adds	r4, #1
 8011f18:	9304      	str	r3, [sp, #16]
 8011f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f1e:	4829      	ldr	r0, [pc, #164]	@ (8011fc4 <_vfiprintf_r+0x220>)
 8011f20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011f24:	2206      	movs	r2, #6
 8011f26:	f7ee f98b 	bl	8000240 <memchr>
 8011f2a:	2800      	cmp	r0, #0
 8011f2c:	d03f      	beq.n	8011fae <_vfiprintf_r+0x20a>
 8011f2e:	4b26      	ldr	r3, [pc, #152]	@ (8011fc8 <_vfiprintf_r+0x224>)
 8011f30:	bb1b      	cbnz	r3, 8011f7a <_vfiprintf_r+0x1d6>
 8011f32:	9b03      	ldr	r3, [sp, #12]
 8011f34:	3307      	adds	r3, #7
 8011f36:	f023 0307 	bic.w	r3, r3, #7
 8011f3a:	3308      	adds	r3, #8
 8011f3c:	9303      	str	r3, [sp, #12]
 8011f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f40:	443b      	add	r3, r7
 8011f42:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f44:	e76a      	b.n	8011e1c <_vfiprintf_r+0x78>
 8011f46:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f4a:	460c      	mov	r4, r1
 8011f4c:	2001      	movs	r0, #1
 8011f4e:	e7a8      	b.n	8011ea2 <_vfiprintf_r+0xfe>
 8011f50:	2300      	movs	r3, #0
 8011f52:	3401      	adds	r4, #1
 8011f54:	9305      	str	r3, [sp, #20]
 8011f56:	4619      	mov	r1, r3
 8011f58:	f04f 0c0a 	mov.w	ip, #10
 8011f5c:	4620      	mov	r0, r4
 8011f5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f62:	3a30      	subs	r2, #48	@ 0x30
 8011f64:	2a09      	cmp	r2, #9
 8011f66:	d903      	bls.n	8011f70 <_vfiprintf_r+0x1cc>
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d0c6      	beq.n	8011efa <_vfiprintf_r+0x156>
 8011f6c:	9105      	str	r1, [sp, #20]
 8011f6e:	e7c4      	b.n	8011efa <_vfiprintf_r+0x156>
 8011f70:	fb0c 2101 	mla	r1, ip, r1, r2
 8011f74:	4604      	mov	r4, r0
 8011f76:	2301      	movs	r3, #1
 8011f78:	e7f0      	b.n	8011f5c <_vfiprintf_r+0x1b8>
 8011f7a:	ab03      	add	r3, sp, #12
 8011f7c:	9300      	str	r3, [sp, #0]
 8011f7e:	462a      	mov	r2, r5
 8011f80:	4b12      	ldr	r3, [pc, #72]	@ (8011fcc <_vfiprintf_r+0x228>)
 8011f82:	a904      	add	r1, sp, #16
 8011f84:	4630      	mov	r0, r6
 8011f86:	f3af 8000 	nop.w
 8011f8a:	4607      	mov	r7, r0
 8011f8c:	1c78      	adds	r0, r7, #1
 8011f8e:	d1d6      	bne.n	8011f3e <_vfiprintf_r+0x19a>
 8011f90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011f92:	07d9      	lsls	r1, r3, #31
 8011f94:	d405      	bmi.n	8011fa2 <_vfiprintf_r+0x1fe>
 8011f96:	89ab      	ldrh	r3, [r5, #12]
 8011f98:	059a      	lsls	r2, r3, #22
 8011f9a:	d402      	bmi.n	8011fa2 <_vfiprintf_r+0x1fe>
 8011f9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011f9e:	f7ff fdf3 	bl	8011b88 <__retarget_lock_release_recursive>
 8011fa2:	89ab      	ldrh	r3, [r5, #12]
 8011fa4:	065b      	lsls	r3, r3, #25
 8011fa6:	f53f af1f 	bmi.w	8011de8 <_vfiprintf_r+0x44>
 8011faa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011fac:	e71e      	b.n	8011dec <_vfiprintf_r+0x48>
 8011fae:	ab03      	add	r3, sp, #12
 8011fb0:	9300      	str	r3, [sp, #0]
 8011fb2:	462a      	mov	r2, r5
 8011fb4:	4b05      	ldr	r3, [pc, #20]	@ (8011fcc <_vfiprintf_r+0x228>)
 8011fb6:	a904      	add	r1, sp, #16
 8011fb8:	4630      	mov	r0, r6
 8011fba:	f000 f879 	bl	80120b0 <_printf_i>
 8011fbe:	e7e4      	b.n	8011f8a <_vfiprintf_r+0x1e6>
 8011fc0:	0801557b 	.word	0x0801557b
 8011fc4:	08015585 	.word	0x08015585
 8011fc8:	00000000 	.word	0x00000000
 8011fcc:	08011d7f 	.word	0x08011d7f
 8011fd0:	08015581 	.word	0x08015581

08011fd4 <_printf_common>:
 8011fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fd8:	4616      	mov	r6, r2
 8011fda:	4698      	mov	r8, r3
 8011fdc:	688a      	ldr	r2, [r1, #8]
 8011fde:	690b      	ldr	r3, [r1, #16]
 8011fe0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011fe4:	4293      	cmp	r3, r2
 8011fe6:	bfb8      	it	lt
 8011fe8:	4613      	movlt	r3, r2
 8011fea:	6033      	str	r3, [r6, #0]
 8011fec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011ff0:	4607      	mov	r7, r0
 8011ff2:	460c      	mov	r4, r1
 8011ff4:	b10a      	cbz	r2, 8011ffa <_printf_common+0x26>
 8011ff6:	3301      	adds	r3, #1
 8011ff8:	6033      	str	r3, [r6, #0]
 8011ffa:	6823      	ldr	r3, [r4, #0]
 8011ffc:	0699      	lsls	r1, r3, #26
 8011ffe:	bf42      	ittt	mi
 8012000:	6833      	ldrmi	r3, [r6, #0]
 8012002:	3302      	addmi	r3, #2
 8012004:	6033      	strmi	r3, [r6, #0]
 8012006:	6825      	ldr	r5, [r4, #0]
 8012008:	f015 0506 	ands.w	r5, r5, #6
 801200c:	d106      	bne.n	801201c <_printf_common+0x48>
 801200e:	f104 0a19 	add.w	sl, r4, #25
 8012012:	68e3      	ldr	r3, [r4, #12]
 8012014:	6832      	ldr	r2, [r6, #0]
 8012016:	1a9b      	subs	r3, r3, r2
 8012018:	42ab      	cmp	r3, r5
 801201a:	dc26      	bgt.n	801206a <_printf_common+0x96>
 801201c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012020:	6822      	ldr	r2, [r4, #0]
 8012022:	3b00      	subs	r3, #0
 8012024:	bf18      	it	ne
 8012026:	2301      	movne	r3, #1
 8012028:	0692      	lsls	r2, r2, #26
 801202a:	d42b      	bmi.n	8012084 <_printf_common+0xb0>
 801202c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012030:	4641      	mov	r1, r8
 8012032:	4638      	mov	r0, r7
 8012034:	47c8      	blx	r9
 8012036:	3001      	adds	r0, #1
 8012038:	d01e      	beq.n	8012078 <_printf_common+0xa4>
 801203a:	6823      	ldr	r3, [r4, #0]
 801203c:	6922      	ldr	r2, [r4, #16]
 801203e:	f003 0306 	and.w	r3, r3, #6
 8012042:	2b04      	cmp	r3, #4
 8012044:	bf02      	ittt	eq
 8012046:	68e5      	ldreq	r5, [r4, #12]
 8012048:	6833      	ldreq	r3, [r6, #0]
 801204a:	1aed      	subeq	r5, r5, r3
 801204c:	68a3      	ldr	r3, [r4, #8]
 801204e:	bf0c      	ite	eq
 8012050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012054:	2500      	movne	r5, #0
 8012056:	4293      	cmp	r3, r2
 8012058:	bfc4      	itt	gt
 801205a:	1a9b      	subgt	r3, r3, r2
 801205c:	18ed      	addgt	r5, r5, r3
 801205e:	2600      	movs	r6, #0
 8012060:	341a      	adds	r4, #26
 8012062:	42b5      	cmp	r5, r6
 8012064:	d11a      	bne.n	801209c <_printf_common+0xc8>
 8012066:	2000      	movs	r0, #0
 8012068:	e008      	b.n	801207c <_printf_common+0xa8>
 801206a:	2301      	movs	r3, #1
 801206c:	4652      	mov	r2, sl
 801206e:	4641      	mov	r1, r8
 8012070:	4638      	mov	r0, r7
 8012072:	47c8      	blx	r9
 8012074:	3001      	adds	r0, #1
 8012076:	d103      	bne.n	8012080 <_printf_common+0xac>
 8012078:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801207c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012080:	3501      	adds	r5, #1
 8012082:	e7c6      	b.n	8012012 <_printf_common+0x3e>
 8012084:	18e1      	adds	r1, r4, r3
 8012086:	1c5a      	adds	r2, r3, #1
 8012088:	2030      	movs	r0, #48	@ 0x30
 801208a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801208e:	4422      	add	r2, r4
 8012090:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012094:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012098:	3302      	adds	r3, #2
 801209a:	e7c7      	b.n	801202c <_printf_common+0x58>
 801209c:	2301      	movs	r3, #1
 801209e:	4622      	mov	r2, r4
 80120a0:	4641      	mov	r1, r8
 80120a2:	4638      	mov	r0, r7
 80120a4:	47c8      	blx	r9
 80120a6:	3001      	adds	r0, #1
 80120a8:	d0e6      	beq.n	8012078 <_printf_common+0xa4>
 80120aa:	3601      	adds	r6, #1
 80120ac:	e7d9      	b.n	8012062 <_printf_common+0x8e>
	...

080120b0 <_printf_i>:
 80120b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80120b4:	7e0f      	ldrb	r7, [r1, #24]
 80120b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80120b8:	2f78      	cmp	r7, #120	@ 0x78
 80120ba:	4691      	mov	r9, r2
 80120bc:	4680      	mov	r8, r0
 80120be:	460c      	mov	r4, r1
 80120c0:	469a      	mov	sl, r3
 80120c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80120c6:	d807      	bhi.n	80120d8 <_printf_i+0x28>
 80120c8:	2f62      	cmp	r7, #98	@ 0x62
 80120ca:	d80a      	bhi.n	80120e2 <_printf_i+0x32>
 80120cc:	2f00      	cmp	r7, #0
 80120ce:	f000 80d2 	beq.w	8012276 <_printf_i+0x1c6>
 80120d2:	2f58      	cmp	r7, #88	@ 0x58
 80120d4:	f000 80b9 	beq.w	801224a <_printf_i+0x19a>
 80120d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80120dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80120e0:	e03a      	b.n	8012158 <_printf_i+0xa8>
 80120e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80120e6:	2b15      	cmp	r3, #21
 80120e8:	d8f6      	bhi.n	80120d8 <_printf_i+0x28>
 80120ea:	a101      	add	r1, pc, #4	@ (adr r1, 80120f0 <_printf_i+0x40>)
 80120ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80120f0:	08012149 	.word	0x08012149
 80120f4:	0801215d 	.word	0x0801215d
 80120f8:	080120d9 	.word	0x080120d9
 80120fc:	080120d9 	.word	0x080120d9
 8012100:	080120d9 	.word	0x080120d9
 8012104:	080120d9 	.word	0x080120d9
 8012108:	0801215d 	.word	0x0801215d
 801210c:	080120d9 	.word	0x080120d9
 8012110:	080120d9 	.word	0x080120d9
 8012114:	080120d9 	.word	0x080120d9
 8012118:	080120d9 	.word	0x080120d9
 801211c:	0801225d 	.word	0x0801225d
 8012120:	08012187 	.word	0x08012187
 8012124:	08012217 	.word	0x08012217
 8012128:	080120d9 	.word	0x080120d9
 801212c:	080120d9 	.word	0x080120d9
 8012130:	0801227f 	.word	0x0801227f
 8012134:	080120d9 	.word	0x080120d9
 8012138:	08012187 	.word	0x08012187
 801213c:	080120d9 	.word	0x080120d9
 8012140:	080120d9 	.word	0x080120d9
 8012144:	0801221f 	.word	0x0801221f
 8012148:	6833      	ldr	r3, [r6, #0]
 801214a:	1d1a      	adds	r2, r3, #4
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	6032      	str	r2, [r6, #0]
 8012150:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012154:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012158:	2301      	movs	r3, #1
 801215a:	e09d      	b.n	8012298 <_printf_i+0x1e8>
 801215c:	6833      	ldr	r3, [r6, #0]
 801215e:	6820      	ldr	r0, [r4, #0]
 8012160:	1d19      	adds	r1, r3, #4
 8012162:	6031      	str	r1, [r6, #0]
 8012164:	0606      	lsls	r6, r0, #24
 8012166:	d501      	bpl.n	801216c <_printf_i+0xbc>
 8012168:	681d      	ldr	r5, [r3, #0]
 801216a:	e003      	b.n	8012174 <_printf_i+0xc4>
 801216c:	0645      	lsls	r5, r0, #25
 801216e:	d5fb      	bpl.n	8012168 <_printf_i+0xb8>
 8012170:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012174:	2d00      	cmp	r5, #0
 8012176:	da03      	bge.n	8012180 <_printf_i+0xd0>
 8012178:	232d      	movs	r3, #45	@ 0x2d
 801217a:	426d      	negs	r5, r5
 801217c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012180:	4859      	ldr	r0, [pc, #356]	@ (80122e8 <_printf_i+0x238>)
 8012182:	230a      	movs	r3, #10
 8012184:	e011      	b.n	80121aa <_printf_i+0xfa>
 8012186:	6821      	ldr	r1, [r4, #0]
 8012188:	6833      	ldr	r3, [r6, #0]
 801218a:	0608      	lsls	r0, r1, #24
 801218c:	f853 5b04 	ldr.w	r5, [r3], #4
 8012190:	d402      	bmi.n	8012198 <_printf_i+0xe8>
 8012192:	0649      	lsls	r1, r1, #25
 8012194:	bf48      	it	mi
 8012196:	b2ad      	uxthmi	r5, r5
 8012198:	2f6f      	cmp	r7, #111	@ 0x6f
 801219a:	4853      	ldr	r0, [pc, #332]	@ (80122e8 <_printf_i+0x238>)
 801219c:	6033      	str	r3, [r6, #0]
 801219e:	bf14      	ite	ne
 80121a0:	230a      	movne	r3, #10
 80121a2:	2308      	moveq	r3, #8
 80121a4:	2100      	movs	r1, #0
 80121a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80121aa:	6866      	ldr	r6, [r4, #4]
 80121ac:	60a6      	str	r6, [r4, #8]
 80121ae:	2e00      	cmp	r6, #0
 80121b0:	bfa2      	ittt	ge
 80121b2:	6821      	ldrge	r1, [r4, #0]
 80121b4:	f021 0104 	bicge.w	r1, r1, #4
 80121b8:	6021      	strge	r1, [r4, #0]
 80121ba:	b90d      	cbnz	r5, 80121c0 <_printf_i+0x110>
 80121bc:	2e00      	cmp	r6, #0
 80121be:	d04b      	beq.n	8012258 <_printf_i+0x1a8>
 80121c0:	4616      	mov	r6, r2
 80121c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80121c6:	fb03 5711 	mls	r7, r3, r1, r5
 80121ca:	5dc7      	ldrb	r7, [r0, r7]
 80121cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80121d0:	462f      	mov	r7, r5
 80121d2:	42bb      	cmp	r3, r7
 80121d4:	460d      	mov	r5, r1
 80121d6:	d9f4      	bls.n	80121c2 <_printf_i+0x112>
 80121d8:	2b08      	cmp	r3, #8
 80121da:	d10b      	bne.n	80121f4 <_printf_i+0x144>
 80121dc:	6823      	ldr	r3, [r4, #0]
 80121de:	07df      	lsls	r7, r3, #31
 80121e0:	d508      	bpl.n	80121f4 <_printf_i+0x144>
 80121e2:	6923      	ldr	r3, [r4, #16]
 80121e4:	6861      	ldr	r1, [r4, #4]
 80121e6:	4299      	cmp	r1, r3
 80121e8:	bfde      	ittt	le
 80121ea:	2330      	movle	r3, #48	@ 0x30
 80121ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80121f0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80121f4:	1b92      	subs	r2, r2, r6
 80121f6:	6122      	str	r2, [r4, #16]
 80121f8:	f8cd a000 	str.w	sl, [sp]
 80121fc:	464b      	mov	r3, r9
 80121fe:	aa03      	add	r2, sp, #12
 8012200:	4621      	mov	r1, r4
 8012202:	4640      	mov	r0, r8
 8012204:	f7ff fee6 	bl	8011fd4 <_printf_common>
 8012208:	3001      	adds	r0, #1
 801220a:	d14a      	bne.n	80122a2 <_printf_i+0x1f2>
 801220c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012210:	b004      	add	sp, #16
 8012212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012216:	6823      	ldr	r3, [r4, #0]
 8012218:	f043 0320 	orr.w	r3, r3, #32
 801221c:	6023      	str	r3, [r4, #0]
 801221e:	4833      	ldr	r0, [pc, #204]	@ (80122ec <_printf_i+0x23c>)
 8012220:	2778      	movs	r7, #120	@ 0x78
 8012222:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012226:	6823      	ldr	r3, [r4, #0]
 8012228:	6831      	ldr	r1, [r6, #0]
 801222a:	061f      	lsls	r7, r3, #24
 801222c:	f851 5b04 	ldr.w	r5, [r1], #4
 8012230:	d402      	bmi.n	8012238 <_printf_i+0x188>
 8012232:	065f      	lsls	r7, r3, #25
 8012234:	bf48      	it	mi
 8012236:	b2ad      	uxthmi	r5, r5
 8012238:	6031      	str	r1, [r6, #0]
 801223a:	07d9      	lsls	r1, r3, #31
 801223c:	bf44      	itt	mi
 801223e:	f043 0320 	orrmi.w	r3, r3, #32
 8012242:	6023      	strmi	r3, [r4, #0]
 8012244:	b11d      	cbz	r5, 801224e <_printf_i+0x19e>
 8012246:	2310      	movs	r3, #16
 8012248:	e7ac      	b.n	80121a4 <_printf_i+0xf4>
 801224a:	4827      	ldr	r0, [pc, #156]	@ (80122e8 <_printf_i+0x238>)
 801224c:	e7e9      	b.n	8012222 <_printf_i+0x172>
 801224e:	6823      	ldr	r3, [r4, #0]
 8012250:	f023 0320 	bic.w	r3, r3, #32
 8012254:	6023      	str	r3, [r4, #0]
 8012256:	e7f6      	b.n	8012246 <_printf_i+0x196>
 8012258:	4616      	mov	r6, r2
 801225a:	e7bd      	b.n	80121d8 <_printf_i+0x128>
 801225c:	6833      	ldr	r3, [r6, #0]
 801225e:	6825      	ldr	r5, [r4, #0]
 8012260:	6961      	ldr	r1, [r4, #20]
 8012262:	1d18      	adds	r0, r3, #4
 8012264:	6030      	str	r0, [r6, #0]
 8012266:	062e      	lsls	r6, r5, #24
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	d501      	bpl.n	8012270 <_printf_i+0x1c0>
 801226c:	6019      	str	r1, [r3, #0]
 801226e:	e002      	b.n	8012276 <_printf_i+0x1c6>
 8012270:	0668      	lsls	r0, r5, #25
 8012272:	d5fb      	bpl.n	801226c <_printf_i+0x1bc>
 8012274:	8019      	strh	r1, [r3, #0]
 8012276:	2300      	movs	r3, #0
 8012278:	6123      	str	r3, [r4, #16]
 801227a:	4616      	mov	r6, r2
 801227c:	e7bc      	b.n	80121f8 <_printf_i+0x148>
 801227e:	6833      	ldr	r3, [r6, #0]
 8012280:	1d1a      	adds	r2, r3, #4
 8012282:	6032      	str	r2, [r6, #0]
 8012284:	681e      	ldr	r6, [r3, #0]
 8012286:	6862      	ldr	r2, [r4, #4]
 8012288:	2100      	movs	r1, #0
 801228a:	4630      	mov	r0, r6
 801228c:	f7ed ffd8 	bl	8000240 <memchr>
 8012290:	b108      	cbz	r0, 8012296 <_printf_i+0x1e6>
 8012292:	1b80      	subs	r0, r0, r6
 8012294:	6060      	str	r0, [r4, #4]
 8012296:	6863      	ldr	r3, [r4, #4]
 8012298:	6123      	str	r3, [r4, #16]
 801229a:	2300      	movs	r3, #0
 801229c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80122a0:	e7aa      	b.n	80121f8 <_printf_i+0x148>
 80122a2:	6923      	ldr	r3, [r4, #16]
 80122a4:	4632      	mov	r2, r6
 80122a6:	4649      	mov	r1, r9
 80122a8:	4640      	mov	r0, r8
 80122aa:	47d0      	blx	sl
 80122ac:	3001      	adds	r0, #1
 80122ae:	d0ad      	beq.n	801220c <_printf_i+0x15c>
 80122b0:	6823      	ldr	r3, [r4, #0]
 80122b2:	079b      	lsls	r3, r3, #30
 80122b4:	d413      	bmi.n	80122de <_printf_i+0x22e>
 80122b6:	68e0      	ldr	r0, [r4, #12]
 80122b8:	9b03      	ldr	r3, [sp, #12]
 80122ba:	4298      	cmp	r0, r3
 80122bc:	bfb8      	it	lt
 80122be:	4618      	movlt	r0, r3
 80122c0:	e7a6      	b.n	8012210 <_printf_i+0x160>
 80122c2:	2301      	movs	r3, #1
 80122c4:	4632      	mov	r2, r6
 80122c6:	4649      	mov	r1, r9
 80122c8:	4640      	mov	r0, r8
 80122ca:	47d0      	blx	sl
 80122cc:	3001      	adds	r0, #1
 80122ce:	d09d      	beq.n	801220c <_printf_i+0x15c>
 80122d0:	3501      	adds	r5, #1
 80122d2:	68e3      	ldr	r3, [r4, #12]
 80122d4:	9903      	ldr	r1, [sp, #12]
 80122d6:	1a5b      	subs	r3, r3, r1
 80122d8:	42ab      	cmp	r3, r5
 80122da:	dcf2      	bgt.n	80122c2 <_printf_i+0x212>
 80122dc:	e7eb      	b.n	80122b6 <_printf_i+0x206>
 80122de:	2500      	movs	r5, #0
 80122e0:	f104 0619 	add.w	r6, r4, #25
 80122e4:	e7f5      	b.n	80122d2 <_printf_i+0x222>
 80122e6:	bf00      	nop
 80122e8:	0801558c 	.word	0x0801558c
 80122ec:	0801559d 	.word	0x0801559d

080122f0 <__sflush_r>:
 80122f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80122f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122f8:	0716      	lsls	r6, r2, #28
 80122fa:	4605      	mov	r5, r0
 80122fc:	460c      	mov	r4, r1
 80122fe:	d454      	bmi.n	80123aa <__sflush_r+0xba>
 8012300:	684b      	ldr	r3, [r1, #4]
 8012302:	2b00      	cmp	r3, #0
 8012304:	dc02      	bgt.n	801230c <__sflush_r+0x1c>
 8012306:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012308:	2b00      	cmp	r3, #0
 801230a:	dd48      	ble.n	801239e <__sflush_r+0xae>
 801230c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801230e:	2e00      	cmp	r6, #0
 8012310:	d045      	beq.n	801239e <__sflush_r+0xae>
 8012312:	2300      	movs	r3, #0
 8012314:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012318:	682f      	ldr	r7, [r5, #0]
 801231a:	6a21      	ldr	r1, [r4, #32]
 801231c:	602b      	str	r3, [r5, #0]
 801231e:	d030      	beq.n	8012382 <__sflush_r+0x92>
 8012320:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012322:	89a3      	ldrh	r3, [r4, #12]
 8012324:	0759      	lsls	r1, r3, #29
 8012326:	d505      	bpl.n	8012334 <__sflush_r+0x44>
 8012328:	6863      	ldr	r3, [r4, #4]
 801232a:	1ad2      	subs	r2, r2, r3
 801232c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801232e:	b10b      	cbz	r3, 8012334 <__sflush_r+0x44>
 8012330:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012332:	1ad2      	subs	r2, r2, r3
 8012334:	2300      	movs	r3, #0
 8012336:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012338:	6a21      	ldr	r1, [r4, #32]
 801233a:	4628      	mov	r0, r5
 801233c:	47b0      	blx	r6
 801233e:	1c43      	adds	r3, r0, #1
 8012340:	89a3      	ldrh	r3, [r4, #12]
 8012342:	d106      	bne.n	8012352 <__sflush_r+0x62>
 8012344:	6829      	ldr	r1, [r5, #0]
 8012346:	291d      	cmp	r1, #29
 8012348:	d82b      	bhi.n	80123a2 <__sflush_r+0xb2>
 801234a:	4a2a      	ldr	r2, [pc, #168]	@ (80123f4 <__sflush_r+0x104>)
 801234c:	410a      	asrs	r2, r1
 801234e:	07d6      	lsls	r6, r2, #31
 8012350:	d427      	bmi.n	80123a2 <__sflush_r+0xb2>
 8012352:	2200      	movs	r2, #0
 8012354:	6062      	str	r2, [r4, #4]
 8012356:	04d9      	lsls	r1, r3, #19
 8012358:	6922      	ldr	r2, [r4, #16]
 801235a:	6022      	str	r2, [r4, #0]
 801235c:	d504      	bpl.n	8012368 <__sflush_r+0x78>
 801235e:	1c42      	adds	r2, r0, #1
 8012360:	d101      	bne.n	8012366 <__sflush_r+0x76>
 8012362:	682b      	ldr	r3, [r5, #0]
 8012364:	b903      	cbnz	r3, 8012368 <__sflush_r+0x78>
 8012366:	6560      	str	r0, [r4, #84]	@ 0x54
 8012368:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801236a:	602f      	str	r7, [r5, #0]
 801236c:	b1b9      	cbz	r1, 801239e <__sflush_r+0xae>
 801236e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012372:	4299      	cmp	r1, r3
 8012374:	d002      	beq.n	801237c <__sflush_r+0x8c>
 8012376:	4628      	mov	r0, r5
 8012378:	f000 f924 	bl	80125c4 <_free_r>
 801237c:	2300      	movs	r3, #0
 801237e:	6363      	str	r3, [r4, #52]	@ 0x34
 8012380:	e00d      	b.n	801239e <__sflush_r+0xae>
 8012382:	2301      	movs	r3, #1
 8012384:	4628      	mov	r0, r5
 8012386:	47b0      	blx	r6
 8012388:	4602      	mov	r2, r0
 801238a:	1c50      	adds	r0, r2, #1
 801238c:	d1c9      	bne.n	8012322 <__sflush_r+0x32>
 801238e:	682b      	ldr	r3, [r5, #0]
 8012390:	2b00      	cmp	r3, #0
 8012392:	d0c6      	beq.n	8012322 <__sflush_r+0x32>
 8012394:	2b1d      	cmp	r3, #29
 8012396:	d001      	beq.n	801239c <__sflush_r+0xac>
 8012398:	2b16      	cmp	r3, #22
 801239a:	d11e      	bne.n	80123da <__sflush_r+0xea>
 801239c:	602f      	str	r7, [r5, #0]
 801239e:	2000      	movs	r0, #0
 80123a0:	e022      	b.n	80123e8 <__sflush_r+0xf8>
 80123a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80123a6:	b21b      	sxth	r3, r3
 80123a8:	e01b      	b.n	80123e2 <__sflush_r+0xf2>
 80123aa:	690f      	ldr	r7, [r1, #16]
 80123ac:	2f00      	cmp	r7, #0
 80123ae:	d0f6      	beq.n	801239e <__sflush_r+0xae>
 80123b0:	0793      	lsls	r3, r2, #30
 80123b2:	680e      	ldr	r6, [r1, #0]
 80123b4:	bf08      	it	eq
 80123b6:	694b      	ldreq	r3, [r1, #20]
 80123b8:	600f      	str	r7, [r1, #0]
 80123ba:	bf18      	it	ne
 80123bc:	2300      	movne	r3, #0
 80123be:	eba6 0807 	sub.w	r8, r6, r7
 80123c2:	608b      	str	r3, [r1, #8]
 80123c4:	f1b8 0f00 	cmp.w	r8, #0
 80123c8:	dde9      	ble.n	801239e <__sflush_r+0xae>
 80123ca:	6a21      	ldr	r1, [r4, #32]
 80123cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80123ce:	4643      	mov	r3, r8
 80123d0:	463a      	mov	r2, r7
 80123d2:	4628      	mov	r0, r5
 80123d4:	47b0      	blx	r6
 80123d6:	2800      	cmp	r0, #0
 80123d8:	dc08      	bgt.n	80123ec <__sflush_r+0xfc>
 80123da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80123e2:	81a3      	strh	r3, [r4, #12]
 80123e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80123e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123ec:	4407      	add	r7, r0
 80123ee:	eba8 0800 	sub.w	r8, r8, r0
 80123f2:	e7e7      	b.n	80123c4 <__sflush_r+0xd4>
 80123f4:	dfbffffe 	.word	0xdfbffffe

080123f8 <_fflush_r>:
 80123f8:	b538      	push	{r3, r4, r5, lr}
 80123fa:	690b      	ldr	r3, [r1, #16]
 80123fc:	4605      	mov	r5, r0
 80123fe:	460c      	mov	r4, r1
 8012400:	b913      	cbnz	r3, 8012408 <_fflush_r+0x10>
 8012402:	2500      	movs	r5, #0
 8012404:	4628      	mov	r0, r5
 8012406:	bd38      	pop	{r3, r4, r5, pc}
 8012408:	b118      	cbz	r0, 8012412 <_fflush_r+0x1a>
 801240a:	6a03      	ldr	r3, [r0, #32]
 801240c:	b90b      	cbnz	r3, 8012412 <_fflush_r+0x1a>
 801240e:	f7ff faab 	bl	8011968 <__sinit>
 8012412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d0f3      	beq.n	8012402 <_fflush_r+0xa>
 801241a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801241c:	07d0      	lsls	r0, r2, #31
 801241e:	d404      	bmi.n	801242a <_fflush_r+0x32>
 8012420:	0599      	lsls	r1, r3, #22
 8012422:	d402      	bmi.n	801242a <_fflush_r+0x32>
 8012424:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012426:	f7ff fbae 	bl	8011b86 <__retarget_lock_acquire_recursive>
 801242a:	4628      	mov	r0, r5
 801242c:	4621      	mov	r1, r4
 801242e:	f7ff ff5f 	bl	80122f0 <__sflush_r>
 8012432:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012434:	07da      	lsls	r2, r3, #31
 8012436:	4605      	mov	r5, r0
 8012438:	d4e4      	bmi.n	8012404 <_fflush_r+0xc>
 801243a:	89a3      	ldrh	r3, [r4, #12]
 801243c:	059b      	lsls	r3, r3, #22
 801243e:	d4e1      	bmi.n	8012404 <_fflush_r+0xc>
 8012440:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012442:	f7ff fba1 	bl	8011b88 <__retarget_lock_release_recursive>
 8012446:	e7dd      	b.n	8012404 <_fflush_r+0xc>

08012448 <fiprintf>:
 8012448:	b40e      	push	{r1, r2, r3}
 801244a:	b503      	push	{r0, r1, lr}
 801244c:	4601      	mov	r1, r0
 801244e:	ab03      	add	r3, sp, #12
 8012450:	4805      	ldr	r0, [pc, #20]	@ (8012468 <fiprintf+0x20>)
 8012452:	f853 2b04 	ldr.w	r2, [r3], #4
 8012456:	6800      	ldr	r0, [r0, #0]
 8012458:	9301      	str	r3, [sp, #4]
 801245a:	f7ff fca3 	bl	8011da4 <_vfiprintf_r>
 801245e:	b002      	add	sp, #8
 8012460:	f85d eb04 	ldr.w	lr, [sp], #4
 8012464:	b003      	add	sp, #12
 8012466:	4770      	bx	lr
 8012468:	2000003c 	.word	0x2000003c

0801246c <__swbuf_r>:
 801246c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801246e:	460e      	mov	r6, r1
 8012470:	4614      	mov	r4, r2
 8012472:	4605      	mov	r5, r0
 8012474:	b118      	cbz	r0, 801247e <__swbuf_r+0x12>
 8012476:	6a03      	ldr	r3, [r0, #32]
 8012478:	b90b      	cbnz	r3, 801247e <__swbuf_r+0x12>
 801247a:	f7ff fa75 	bl	8011968 <__sinit>
 801247e:	69a3      	ldr	r3, [r4, #24]
 8012480:	60a3      	str	r3, [r4, #8]
 8012482:	89a3      	ldrh	r3, [r4, #12]
 8012484:	071a      	lsls	r2, r3, #28
 8012486:	d501      	bpl.n	801248c <__swbuf_r+0x20>
 8012488:	6923      	ldr	r3, [r4, #16]
 801248a:	b943      	cbnz	r3, 801249e <__swbuf_r+0x32>
 801248c:	4621      	mov	r1, r4
 801248e:	4628      	mov	r0, r5
 8012490:	f000 f82a 	bl	80124e8 <__swsetup_r>
 8012494:	b118      	cbz	r0, 801249e <__swbuf_r+0x32>
 8012496:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801249a:	4638      	mov	r0, r7
 801249c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801249e:	6823      	ldr	r3, [r4, #0]
 80124a0:	6922      	ldr	r2, [r4, #16]
 80124a2:	1a98      	subs	r0, r3, r2
 80124a4:	6963      	ldr	r3, [r4, #20]
 80124a6:	b2f6      	uxtb	r6, r6
 80124a8:	4283      	cmp	r3, r0
 80124aa:	4637      	mov	r7, r6
 80124ac:	dc05      	bgt.n	80124ba <__swbuf_r+0x4e>
 80124ae:	4621      	mov	r1, r4
 80124b0:	4628      	mov	r0, r5
 80124b2:	f7ff ffa1 	bl	80123f8 <_fflush_r>
 80124b6:	2800      	cmp	r0, #0
 80124b8:	d1ed      	bne.n	8012496 <__swbuf_r+0x2a>
 80124ba:	68a3      	ldr	r3, [r4, #8]
 80124bc:	3b01      	subs	r3, #1
 80124be:	60a3      	str	r3, [r4, #8]
 80124c0:	6823      	ldr	r3, [r4, #0]
 80124c2:	1c5a      	adds	r2, r3, #1
 80124c4:	6022      	str	r2, [r4, #0]
 80124c6:	701e      	strb	r6, [r3, #0]
 80124c8:	6962      	ldr	r2, [r4, #20]
 80124ca:	1c43      	adds	r3, r0, #1
 80124cc:	429a      	cmp	r2, r3
 80124ce:	d004      	beq.n	80124da <__swbuf_r+0x6e>
 80124d0:	89a3      	ldrh	r3, [r4, #12]
 80124d2:	07db      	lsls	r3, r3, #31
 80124d4:	d5e1      	bpl.n	801249a <__swbuf_r+0x2e>
 80124d6:	2e0a      	cmp	r6, #10
 80124d8:	d1df      	bne.n	801249a <__swbuf_r+0x2e>
 80124da:	4621      	mov	r1, r4
 80124dc:	4628      	mov	r0, r5
 80124de:	f7ff ff8b 	bl	80123f8 <_fflush_r>
 80124e2:	2800      	cmp	r0, #0
 80124e4:	d0d9      	beq.n	801249a <__swbuf_r+0x2e>
 80124e6:	e7d6      	b.n	8012496 <__swbuf_r+0x2a>

080124e8 <__swsetup_r>:
 80124e8:	b538      	push	{r3, r4, r5, lr}
 80124ea:	4b29      	ldr	r3, [pc, #164]	@ (8012590 <__swsetup_r+0xa8>)
 80124ec:	4605      	mov	r5, r0
 80124ee:	6818      	ldr	r0, [r3, #0]
 80124f0:	460c      	mov	r4, r1
 80124f2:	b118      	cbz	r0, 80124fc <__swsetup_r+0x14>
 80124f4:	6a03      	ldr	r3, [r0, #32]
 80124f6:	b90b      	cbnz	r3, 80124fc <__swsetup_r+0x14>
 80124f8:	f7ff fa36 	bl	8011968 <__sinit>
 80124fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012500:	0719      	lsls	r1, r3, #28
 8012502:	d422      	bmi.n	801254a <__swsetup_r+0x62>
 8012504:	06da      	lsls	r2, r3, #27
 8012506:	d407      	bmi.n	8012518 <__swsetup_r+0x30>
 8012508:	2209      	movs	r2, #9
 801250a:	602a      	str	r2, [r5, #0]
 801250c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012510:	81a3      	strh	r3, [r4, #12]
 8012512:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012516:	e033      	b.n	8012580 <__swsetup_r+0x98>
 8012518:	0758      	lsls	r0, r3, #29
 801251a:	d512      	bpl.n	8012542 <__swsetup_r+0x5a>
 801251c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801251e:	b141      	cbz	r1, 8012532 <__swsetup_r+0x4a>
 8012520:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012524:	4299      	cmp	r1, r3
 8012526:	d002      	beq.n	801252e <__swsetup_r+0x46>
 8012528:	4628      	mov	r0, r5
 801252a:	f000 f84b 	bl	80125c4 <_free_r>
 801252e:	2300      	movs	r3, #0
 8012530:	6363      	str	r3, [r4, #52]	@ 0x34
 8012532:	89a3      	ldrh	r3, [r4, #12]
 8012534:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012538:	81a3      	strh	r3, [r4, #12]
 801253a:	2300      	movs	r3, #0
 801253c:	6063      	str	r3, [r4, #4]
 801253e:	6923      	ldr	r3, [r4, #16]
 8012540:	6023      	str	r3, [r4, #0]
 8012542:	89a3      	ldrh	r3, [r4, #12]
 8012544:	f043 0308 	orr.w	r3, r3, #8
 8012548:	81a3      	strh	r3, [r4, #12]
 801254a:	6923      	ldr	r3, [r4, #16]
 801254c:	b94b      	cbnz	r3, 8012562 <__swsetup_r+0x7a>
 801254e:	89a3      	ldrh	r3, [r4, #12]
 8012550:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012554:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012558:	d003      	beq.n	8012562 <__swsetup_r+0x7a>
 801255a:	4621      	mov	r1, r4
 801255c:	4628      	mov	r0, r5
 801255e:	f000 f8a1 	bl	80126a4 <__smakebuf_r>
 8012562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012566:	f013 0201 	ands.w	r2, r3, #1
 801256a:	d00a      	beq.n	8012582 <__swsetup_r+0x9a>
 801256c:	2200      	movs	r2, #0
 801256e:	60a2      	str	r2, [r4, #8]
 8012570:	6962      	ldr	r2, [r4, #20]
 8012572:	4252      	negs	r2, r2
 8012574:	61a2      	str	r2, [r4, #24]
 8012576:	6922      	ldr	r2, [r4, #16]
 8012578:	b942      	cbnz	r2, 801258c <__swsetup_r+0xa4>
 801257a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801257e:	d1c5      	bne.n	801250c <__swsetup_r+0x24>
 8012580:	bd38      	pop	{r3, r4, r5, pc}
 8012582:	0799      	lsls	r1, r3, #30
 8012584:	bf58      	it	pl
 8012586:	6962      	ldrpl	r2, [r4, #20]
 8012588:	60a2      	str	r2, [r4, #8]
 801258a:	e7f4      	b.n	8012576 <__swsetup_r+0x8e>
 801258c:	2000      	movs	r0, #0
 801258e:	e7f7      	b.n	8012580 <__swsetup_r+0x98>
 8012590:	2000003c 	.word	0x2000003c

08012594 <_sbrk_r>:
 8012594:	b538      	push	{r3, r4, r5, lr}
 8012596:	4d06      	ldr	r5, [pc, #24]	@ (80125b0 <_sbrk_r+0x1c>)
 8012598:	2300      	movs	r3, #0
 801259a:	4604      	mov	r4, r0
 801259c:	4608      	mov	r0, r1
 801259e:	602b      	str	r3, [r5, #0]
 80125a0:	f7ee fa98 	bl	8000ad4 <_sbrk>
 80125a4:	1c43      	adds	r3, r0, #1
 80125a6:	d102      	bne.n	80125ae <_sbrk_r+0x1a>
 80125a8:	682b      	ldr	r3, [r5, #0]
 80125aa:	b103      	cbz	r3, 80125ae <_sbrk_r+0x1a>
 80125ac:	6023      	str	r3, [r4, #0]
 80125ae:	bd38      	pop	{r3, r4, r5, pc}
 80125b0:	2000ff04 	.word	0x2000ff04

080125b4 <abort>:
 80125b4:	b508      	push	{r3, lr}
 80125b6:	2006      	movs	r0, #6
 80125b8:	f000 f8d8 	bl	801276c <raise>
 80125bc:	2001      	movs	r0, #1
 80125be:	f7ee fa11 	bl	80009e4 <_exit>
	...

080125c4 <_free_r>:
 80125c4:	b538      	push	{r3, r4, r5, lr}
 80125c6:	4605      	mov	r5, r0
 80125c8:	2900      	cmp	r1, #0
 80125ca:	d041      	beq.n	8012650 <_free_r+0x8c>
 80125cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80125d0:	1f0c      	subs	r4, r1, #4
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	bfb8      	it	lt
 80125d6:	18e4      	addlt	r4, r4, r3
 80125d8:	f7ff fbae 	bl	8011d38 <__malloc_lock>
 80125dc:	4a1d      	ldr	r2, [pc, #116]	@ (8012654 <_free_r+0x90>)
 80125de:	6813      	ldr	r3, [r2, #0]
 80125e0:	b933      	cbnz	r3, 80125f0 <_free_r+0x2c>
 80125e2:	6063      	str	r3, [r4, #4]
 80125e4:	6014      	str	r4, [r2, #0]
 80125e6:	4628      	mov	r0, r5
 80125e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80125ec:	f7ff bbaa 	b.w	8011d44 <__malloc_unlock>
 80125f0:	42a3      	cmp	r3, r4
 80125f2:	d908      	bls.n	8012606 <_free_r+0x42>
 80125f4:	6820      	ldr	r0, [r4, #0]
 80125f6:	1821      	adds	r1, r4, r0
 80125f8:	428b      	cmp	r3, r1
 80125fa:	bf01      	itttt	eq
 80125fc:	6819      	ldreq	r1, [r3, #0]
 80125fe:	685b      	ldreq	r3, [r3, #4]
 8012600:	1809      	addeq	r1, r1, r0
 8012602:	6021      	streq	r1, [r4, #0]
 8012604:	e7ed      	b.n	80125e2 <_free_r+0x1e>
 8012606:	461a      	mov	r2, r3
 8012608:	685b      	ldr	r3, [r3, #4]
 801260a:	b10b      	cbz	r3, 8012610 <_free_r+0x4c>
 801260c:	42a3      	cmp	r3, r4
 801260e:	d9fa      	bls.n	8012606 <_free_r+0x42>
 8012610:	6811      	ldr	r1, [r2, #0]
 8012612:	1850      	adds	r0, r2, r1
 8012614:	42a0      	cmp	r0, r4
 8012616:	d10b      	bne.n	8012630 <_free_r+0x6c>
 8012618:	6820      	ldr	r0, [r4, #0]
 801261a:	4401      	add	r1, r0
 801261c:	1850      	adds	r0, r2, r1
 801261e:	4283      	cmp	r3, r0
 8012620:	6011      	str	r1, [r2, #0]
 8012622:	d1e0      	bne.n	80125e6 <_free_r+0x22>
 8012624:	6818      	ldr	r0, [r3, #0]
 8012626:	685b      	ldr	r3, [r3, #4]
 8012628:	6053      	str	r3, [r2, #4]
 801262a:	4408      	add	r0, r1
 801262c:	6010      	str	r0, [r2, #0]
 801262e:	e7da      	b.n	80125e6 <_free_r+0x22>
 8012630:	d902      	bls.n	8012638 <_free_r+0x74>
 8012632:	230c      	movs	r3, #12
 8012634:	602b      	str	r3, [r5, #0]
 8012636:	e7d6      	b.n	80125e6 <_free_r+0x22>
 8012638:	6820      	ldr	r0, [r4, #0]
 801263a:	1821      	adds	r1, r4, r0
 801263c:	428b      	cmp	r3, r1
 801263e:	bf04      	itt	eq
 8012640:	6819      	ldreq	r1, [r3, #0]
 8012642:	685b      	ldreq	r3, [r3, #4]
 8012644:	6063      	str	r3, [r4, #4]
 8012646:	bf04      	itt	eq
 8012648:	1809      	addeq	r1, r1, r0
 801264a:	6021      	streq	r1, [r4, #0]
 801264c:	6054      	str	r4, [r2, #4]
 801264e:	e7ca      	b.n	80125e6 <_free_r+0x22>
 8012650:	bd38      	pop	{r3, r4, r5, pc}
 8012652:	bf00      	nop
 8012654:	20010050 	.word	0x20010050

08012658 <__swhatbuf_r>:
 8012658:	b570      	push	{r4, r5, r6, lr}
 801265a:	460c      	mov	r4, r1
 801265c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012660:	2900      	cmp	r1, #0
 8012662:	b096      	sub	sp, #88	@ 0x58
 8012664:	4615      	mov	r5, r2
 8012666:	461e      	mov	r6, r3
 8012668:	da0d      	bge.n	8012686 <__swhatbuf_r+0x2e>
 801266a:	89a3      	ldrh	r3, [r4, #12]
 801266c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012670:	f04f 0100 	mov.w	r1, #0
 8012674:	bf14      	ite	ne
 8012676:	2340      	movne	r3, #64	@ 0x40
 8012678:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801267c:	2000      	movs	r0, #0
 801267e:	6031      	str	r1, [r6, #0]
 8012680:	602b      	str	r3, [r5, #0]
 8012682:	b016      	add	sp, #88	@ 0x58
 8012684:	bd70      	pop	{r4, r5, r6, pc}
 8012686:	466a      	mov	r2, sp
 8012688:	f000 f878 	bl	801277c <_fstat_r>
 801268c:	2800      	cmp	r0, #0
 801268e:	dbec      	blt.n	801266a <__swhatbuf_r+0x12>
 8012690:	9901      	ldr	r1, [sp, #4]
 8012692:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012696:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801269a:	4259      	negs	r1, r3
 801269c:	4159      	adcs	r1, r3
 801269e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80126a2:	e7eb      	b.n	801267c <__swhatbuf_r+0x24>

080126a4 <__smakebuf_r>:
 80126a4:	898b      	ldrh	r3, [r1, #12]
 80126a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80126a8:	079d      	lsls	r5, r3, #30
 80126aa:	4606      	mov	r6, r0
 80126ac:	460c      	mov	r4, r1
 80126ae:	d507      	bpl.n	80126c0 <__smakebuf_r+0x1c>
 80126b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80126b4:	6023      	str	r3, [r4, #0]
 80126b6:	6123      	str	r3, [r4, #16]
 80126b8:	2301      	movs	r3, #1
 80126ba:	6163      	str	r3, [r4, #20]
 80126bc:	b003      	add	sp, #12
 80126be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126c0:	ab01      	add	r3, sp, #4
 80126c2:	466a      	mov	r2, sp
 80126c4:	f7ff ffc8 	bl	8012658 <__swhatbuf_r>
 80126c8:	9f00      	ldr	r7, [sp, #0]
 80126ca:	4605      	mov	r5, r0
 80126cc:	4639      	mov	r1, r7
 80126ce:	4630      	mov	r0, r6
 80126d0:	f7ff fab2 	bl	8011c38 <_malloc_r>
 80126d4:	b948      	cbnz	r0, 80126ea <__smakebuf_r+0x46>
 80126d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80126da:	059a      	lsls	r2, r3, #22
 80126dc:	d4ee      	bmi.n	80126bc <__smakebuf_r+0x18>
 80126de:	f023 0303 	bic.w	r3, r3, #3
 80126e2:	f043 0302 	orr.w	r3, r3, #2
 80126e6:	81a3      	strh	r3, [r4, #12]
 80126e8:	e7e2      	b.n	80126b0 <__smakebuf_r+0xc>
 80126ea:	89a3      	ldrh	r3, [r4, #12]
 80126ec:	6020      	str	r0, [r4, #0]
 80126ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80126f2:	81a3      	strh	r3, [r4, #12]
 80126f4:	9b01      	ldr	r3, [sp, #4]
 80126f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80126fa:	b15b      	cbz	r3, 8012714 <__smakebuf_r+0x70>
 80126fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012700:	4630      	mov	r0, r6
 8012702:	f000 f84d 	bl	80127a0 <_isatty_r>
 8012706:	b128      	cbz	r0, 8012714 <__smakebuf_r+0x70>
 8012708:	89a3      	ldrh	r3, [r4, #12]
 801270a:	f023 0303 	bic.w	r3, r3, #3
 801270e:	f043 0301 	orr.w	r3, r3, #1
 8012712:	81a3      	strh	r3, [r4, #12]
 8012714:	89a3      	ldrh	r3, [r4, #12]
 8012716:	431d      	orrs	r5, r3
 8012718:	81a5      	strh	r5, [r4, #12]
 801271a:	e7cf      	b.n	80126bc <__smakebuf_r+0x18>

0801271c <_raise_r>:
 801271c:	291f      	cmp	r1, #31
 801271e:	b538      	push	{r3, r4, r5, lr}
 8012720:	4605      	mov	r5, r0
 8012722:	460c      	mov	r4, r1
 8012724:	d904      	bls.n	8012730 <_raise_r+0x14>
 8012726:	2316      	movs	r3, #22
 8012728:	6003      	str	r3, [r0, #0]
 801272a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801272e:	bd38      	pop	{r3, r4, r5, pc}
 8012730:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012732:	b112      	cbz	r2, 801273a <_raise_r+0x1e>
 8012734:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012738:	b94b      	cbnz	r3, 801274e <_raise_r+0x32>
 801273a:	4628      	mov	r0, r5
 801273c:	f000 f852 	bl	80127e4 <_getpid_r>
 8012740:	4622      	mov	r2, r4
 8012742:	4601      	mov	r1, r0
 8012744:	4628      	mov	r0, r5
 8012746:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801274a:	f000 b839 	b.w	80127c0 <_kill_r>
 801274e:	2b01      	cmp	r3, #1
 8012750:	d00a      	beq.n	8012768 <_raise_r+0x4c>
 8012752:	1c59      	adds	r1, r3, #1
 8012754:	d103      	bne.n	801275e <_raise_r+0x42>
 8012756:	2316      	movs	r3, #22
 8012758:	6003      	str	r3, [r0, #0]
 801275a:	2001      	movs	r0, #1
 801275c:	e7e7      	b.n	801272e <_raise_r+0x12>
 801275e:	2100      	movs	r1, #0
 8012760:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012764:	4620      	mov	r0, r4
 8012766:	4798      	blx	r3
 8012768:	2000      	movs	r0, #0
 801276a:	e7e0      	b.n	801272e <_raise_r+0x12>

0801276c <raise>:
 801276c:	4b02      	ldr	r3, [pc, #8]	@ (8012778 <raise+0xc>)
 801276e:	4601      	mov	r1, r0
 8012770:	6818      	ldr	r0, [r3, #0]
 8012772:	f7ff bfd3 	b.w	801271c <_raise_r>
 8012776:	bf00      	nop
 8012778:	2000003c 	.word	0x2000003c

0801277c <_fstat_r>:
 801277c:	b538      	push	{r3, r4, r5, lr}
 801277e:	4d07      	ldr	r5, [pc, #28]	@ (801279c <_fstat_r+0x20>)
 8012780:	2300      	movs	r3, #0
 8012782:	4604      	mov	r4, r0
 8012784:	4608      	mov	r0, r1
 8012786:	4611      	mov	r1, r2
 8012788:	602b      	str	r3, [r5, #0]
 801278a:	f7ee f97b 	bl	8000a84 <_fstat>
 801278e:	1c43      	adds	r3, r0, #1
 8012790:	d102      	bne.n	8012798 <_fstat_r+0x1c>
 8012792:	682b      	ldr	r3, [r5, #0]
 8012794:	b103      	cbz	r3, 8012798 <_fstat_r+0x1c>
 8012796:	6023      	str	r3, [r4, #0]
 8012798:	bd38      	pop	{r3, r4, r5, pc}
 801279a:	bf00      	nop
 801279c:	2000ff04 	.word	0x2000ff04

080127a0 <_isatty_r>:
 80127a0:	b538      	push	{r3, r4, r5, lr}
 80127a2:	4d06      	ldr	r5, [pc, #24]	@ (80127bc <_isatty_r+0x1c>)
 80127a4:	2300      	movs	r3, #0
 80127a6:	4604      	mov	r4, r0
 80127a8:	4608      	mov	r0, r1
 80127aa:	602b      	str	r3, [r5, #0]
 80127ac:	f7ee f97a 	bl	8000aa4 <_isatty>
 80127b0:	1c43      	adds	r3, r0, #1
 80127b2:	d102      	bne.n	80127ba <_isatty_r+0x1a>
 80127b4:	682b      	ldr	r3, [r5, #0]
 80127b6:	b103      	cbz	r3, 80127ba <_isatty_r+0x1a>
 80127b8:	6023      	str	r3, [r4, #0]
 80127ba:	bd38      	pop	{r3, r4, r5, pc}
 80127bc:	2000ff04 	.word	0x2000ff04

080127c0 <_kill_r>:
 80127c0:	b538      	push	{r3, r4, r5, lr}
 80127c2:	4d07      	ldr	r5, [pc, #28]	@ (80127e0 <_kill_r+0x20>)
 80127c4:	2300      	movs	r3, #0
 80127c6:	4604      	mov	r4, r0
 80127c8:	4608      	mov	r0, r1
 80127ca:	4611      	mov	r1, r2
 80127cc:	602b      	str	r3, [r5, #0]
 80127ce:	f7ee f8f7 	bl	80009c0 <_kill>
 80127d2:	1c43      	adds	r3, r0, #1
 80127d4:	d102      	bne.n	80127dc <_kill_r+0x1c>
 80127d6:	682b      	ldr	r3, [r5, #0]
 80127d8:	b103      	cbz	r3, 80127dc <_kill_r+0x1c>
 80127da:	6023      	str	r3, [r4, #0]
 80127dc:	bd38      	pop	{r3, r4, r5, pc}
 80127de:	bf00      	nop
 80127e0:	2000ff04 	.word	0x2000ff04

080127e4 <_getpid_r>:
 80127e4:	f7ee b8e4 	b.w	80009b0 <_getpid>

080127e8 <_init>:
 80127e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127ea:	bf00      	nop
 80127ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80127ee:	bc08      	pop	{r3}
 80127f0:	469e      	mov	lr, r3
 80127f2:	4770      	bx	lr

080127f4 <_fini>:
 80127f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127f6:	bf00      	nop
 80127f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80127fa:	bc08      	pop	{r3}
 80127fc:	469e      	mov	lr, r3
 80127fe:	4770      	bx	lr
