// Generated by gencpp from file tauv_msgs/GetTrajRequest.msg
// DO NOT EDIT!


#ifndef TAUV_MSGS_MESSAGE_GETTRAJREQUEST_H
#define TAUV_MSGS_MESSAGE_GETTRAJREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Twist.h>

namespace tauv_msgs
{
template <class ContainerAllocator>
struct GetTrajRequest_
{
  typedef GetTrajRequest_<ContainerAllocator> Type;

  GetTrajRequest_()
    : header()
    , curr_pose()
    , curr_twist()
    , curr_time()
    , len(0)
    , dt(0.0)  {
    }
  GetTrajRequest_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , curr_pose(_alloc)
    , curr_twist(_alloc)
    , curr_time()
    , len(0)
    , dt(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _curr_pose_type;
  _curr_pose_type curr_pose;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _curr_twist_type;
  _curr_twist_type curr_twist;

   typedef ros::Time _curr_time_type;
  _curr_time_type curr_time;

   typedef int32_t _len_type;
  _len_type len;

   typedef float _dt_type;
  _dt_type dt;





  typedef boost::shared_ptr< ::tauv_msgs::GetTrajRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tauv_msgs::GetTrajRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetTrajRequest_

typedef ::tauv_msgs::GetTrajRequest_<std::allocator<void> > GetTrajRequest;

typedef boost::shared_ptr< ::tauv_msgs::GetTrajRequest > GetTrajRequestPtr;
typedef boost::shared_ptr< ::tauv_msgs::GetTrajRequest const> GetTrajRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tauv_msgs::GetTrajRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tauv_msgs::GetTrajRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tauv_msgs::GetTrajRequest_<ContainerAllocator1> & lhs, const ::tauv_msgs::GetTrajRequest_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.curr_pose == rhs.curr_pose &&
    lhs.curr_twist == rhs.curr_twist &&
    lhs.curr_time == rhs.curr_time &&
    lhs.len == rhs.len &&
    lhs.dt == rhs.dt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tauv_msgs::GetTrajRequest_<ContainerAllocator1> & lhs, const ::tauv_msgs::GetTrajRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tauv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tauv_msgs::GetTrajRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tauv_msgs::GetTrajRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tauv_msgs::GetTrajRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tauv_msgs::GetTrajRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tauv_msgs::GetTrajRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tauv_msgs::GetTrajRequest_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tauv_msgs::GetTrajRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d20d43afe10933a453d78bb46d60acf3";
  }

  static const char* value(const ::tauv_msgs::GetTrajRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd20d43afe10933a4ULL;
  static const uint64_t static_value2 = 0x53d78bb46d60acf3ULL;
};

template<class ContainerAllocator>
struct DataType< ::tauv_msgs::GetTrajRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tauv_msgs/GetTrajRequest";
  }

  static const char* value(const ::tauv_msgs::GetTrajRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tauv_msgs::GetTrajRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Note: Angular velocities outside of yaw (z axis) are currently unused.\n"
"\n"
"std_msgs/Header header\n"
"geometry_msgs/Pose curr_pose  # Current positions\n"
"geometry_msgs/Twist curr_twist  # Current velocities (in world frame! Not body velocities!)\n"
"time curr_time\n"
"int32 len  # Number of samples to look ahead on the trajectory. (First sample corresponds to current time, second is time + dt, etc)\n"
"float32 dt  # time difference between samples\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::tauv_msgs::GetTrajRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tauv_msgs::GetTrajRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.curr_pose);
      stream.next(m.curr_twist);
      stream.next(m.curr_time);
      stream.next(m.len);
      stream.next(m.dt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetTrajRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tauv_msgs::GetTrajRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tauv_msgs::GetTrajRequest_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "curr_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.curr_pose);
    s << indent << "curr_twist: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.curr_twist);
    s << indent << "curr_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.curr_time);
    s << indent << "len: ";
    Printer<int32_t>::stream(s, indent + "  ", v.len);
    s << indent << "dt: ";
    Printer<float>::stream(s, indent + "  ", v.dt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TAUV_MSGS_MESSAGE_GETTRAJREQUEST_H
