// Generated by gencpp from file tauv_msgs/ControllerCmd.msg
// DO NOT EDIT!


#ifndef TAUV_MSGS_MESSAGE_CONTROLLERCMD_H
#define TAUV_MSGS_MESSAGE_CONTROLLERCMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tauv_msgs
{
template <class ContainerAllocator>
struct ControllerCmd_
{
  typedef ControllerCmd_<ContainerAllocator> Type;

  ControllerCmd_()
    : a_x(0.0)
    , a_y(0.0)
    , a_z(0.0)
    , a_yaw(0.0)
    , p_roll(0.0)
    , p_pitch(0.0)  {
    }
  ControllerCmd_(const ContainerAllocator& _alloc)
    : a_x(0.0)
    , a_y(0.0)
    , a_z(0.0)
    , a_yaw(0.0)
    , p_roll(0.0)
    , p_pitch(0.0)  {
  (void)_alloc;
    }



   typedef float _a_x_type;
  _a_x_type a_x;

   typedef float _a_y_type;
  _a_y_type a_y;

   typedef float _a_z_type;
  _a_z_type a_z;

   typedef float _a_yaw_type;
  _a_yaw_type a_yaw;

   typedef float _p_roll_type;
  _p_roll_type p_roll;

   typedef float _p_pitch_type;
  _p_pitch_type p_pitch;





  typedef boost::shared_ptr< ::tauv_msgs::ControllerCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tauv_msgs::ControllerCmd_<ContainerAllocator> const> ConstPtr;

}; // struct ControllerCmd_

typedef ::tauv_msgs::ControllerCmd_<std::allocator<void> > ControllerCmd;

typedef boost::shared_ptr< ::tauv_msgs::ControllerCmd > ControllerCmdPtr;
typedef boost::shared_ptr< ::tauv_msgs::ControllerCmd const> ControllerCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tauv_msgs::ControllerCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tauv_msgs::ControllerCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tauv_msgs::ControllerCmd_<ContainerAllocator1> & lhs, const ::tauv_msgs::ControllerCmd_<ContainerAllocator2> & rhs)
{
  return lhs.a_x == rhs.a_x &&
    lhs.a_y == rhs.a_y &&
    lhs.a_z == rhs.a_z &&
    lhs.a_yaw == rhs.a_yaw &&
    lhs.p_roll == rhs.p_roll &&
    lhs.p_pitch == rhs.p_pitch;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tauv_msgs::ControllerCmd_<ContainerAllocator1> & lhs, const ::tauv_msgs::ControllerCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tauv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tauv_msgs::ControllerCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tauv_msgs::ControllerCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tauv_msgs::ControllerCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tauv_msgs::ControllerCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tauv_msgs::ControllerCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tauv_msgs::ControllerCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tauv_msgs::ControllerCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c0612f34c73db057150c241e2726f1e9";
  }

  static const char* value(const ::tauv_msgs::ControllerCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc0612f34c73db057ULL;
  static const uint64_t static_value2 = 0x150c241e2726f1e9ULL;
};

template<class ContainerAllocator>
struct DataType< ::tauv_msgs::ControllerCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tauv_msgs/ControllerCmd";
  }

  static const char* value(const ::tauv_msgs::ControllerCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tauv_msgs::ControllerCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 a_x  # Acceleration in fixed frame x direction\n"
"float32 a_y  # Acceleration in fixed frame y direction\n"
"float32 a_z  # Acceleration in fixed frame z direction\n"
"float32 a_yaw  # Acceleration in fixed frame yaw direction\n"
"float32 p_roll  # roll target\n"
"float32 p_pitch  # pitch target\n"
;
  }

  static const char* value(const ::tauv_msgs::ControllerCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tauv_msgs::ControllerCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.a_x);
      stream.next(m.a_y);
      stream.next(m.a_z);
      stream.next(m.a_yaw);
      stream.next(m.p_roll);
      stream.next(m.p_pitch);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControllerCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tauv_msgs::ControllerCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tauv_msgs::ControllerCmd_<ContainerAllocator>& v)
  {
    s << indent << "a_x: ";
    Printer<float>::stream(s, indent + "  ", v.a_x);
    s << indent << "a_y: ";
    Printer<float>::stream(s, indent + "  ", v.a_y);
    s << indent << "a_z: ";
    Printer<float>::stream(s, indent + "  ", v.a_z);
    s << indent << "a_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.a_yaw);
    s << indent << "p_roll: ";
    Printer<float>::stream(s, indent + "  ", v.p_roll);
    s << indent << "p_pitch: ";
    Printer<float>::stream(s, indent + "  ", v.p_pitch);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TAUV_MSGS_MESSAGE_CONTROLLERCMD_H
