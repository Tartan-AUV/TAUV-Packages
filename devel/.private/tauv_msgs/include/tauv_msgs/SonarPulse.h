// Generated by gencpp from file tauv_msgs/SonarPulse.msg
// DO NOT EDIT!


#ifndef TAUV_MSGS_MESSAGE_SONARPULSE_H
#define TAUV_MSGS_MESSAGE_SONARPULSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace tauv_msgs
{
template <class ContainerAllocator>
struct SonarPulse_
{
  typedef SonarPulse_<ContainerAllocator> Type;

  SonarPulse_()
    : header()
    , mode(0)
    , gain_setting(0)
    , angle(0.0)
    , transmit_duration(0.0)
    , sample_period(0.0)
    , transmit_frequency(0.0)
    , number_of_samples(0)
    , data_length(0)
    , data()  {
    }
  SonarPulse_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , mode(0)
    , gain_setting(0)
    , angle(0.0)
    , transmit_duration(0.0)
    , sample_period(0.0)
    , transmit_frequency(0.0)
    , number_of_samples(0)
    , data_length(0)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef uint8_t _gain_setting_type;
  _gain_setting_type gain_setting;

   typedef float _angle_type;
  _angle_type angle;

   typedef float _transmit_duration_type;
  _transmit_duration_type transmit_duration;

   typedef float _sample_period_type;
  _sample_period_type sample_period;

   typedef float _transmit_frequency_type;
  _transmit_frequency_type transmit_frequency;

   typedef uint16_t _number_of_samples_type;
  _number_of_samples_type number_of_samples;

   typedef uint16_t _data_length_type;
  _data_length_type data_length;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::tauv_msgs::SonarPulse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tauv_msgs::SonarPulse_<ContainerAllocator> const> ConstPtr;

}; // struct SonarPulse_

typedef ::tauv_msgs::SonarPulse_<std::allocator<void> > SonarPulse;

typedef boost::shared_ptr< ::tauv_msgs::SonarPulse > SonarPulsePtr;
typedef boost::shared_ptr< ::tauv_msgs::SonarPulse const> SonarPulseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tauv_msgs::SonarPulse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tauv_msgs::SonarPulse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tauv_msgs::SonarPulse_<ContainerAllocator1> & lhs, const ::tauv_msgs::SonarPulse_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.mode == rhs.mode &&
    lhs.gain_setting == rhs.gain_setting &&
    lhs.angle == rhs.angle &&
    lhs.transmit_duration == rhs.transmit_duration &&
    lhs.sample_period == rhs.sample_period &&
    lhs.transmit_frequency == rhs.transmit_frequency &&
    lhs.number_of_samples == rhs.number_of_samples &&
    lhs.data_length == rhs.data_length &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tauv_msgs::SonarPulse_<ContainerAllocator1> & lhs, const ::tauv_msgs::SonarPulse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tauv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tauv_msgs::SonarPulse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tauv_msgs::SonarPulse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tauv_msgs::SonarPulse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tauv_msgs::SonarPulse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tauv_msgs::SonarPulse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tauv_msgs::SonarPulse_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tauv_msgs::SonarPulse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5a4534993e7634b0f0c3a4e8eec771be";
  }

  static const char* value(const ::tauv_msgs::SonarPulse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5a4534993e7634b0ULL;
  static const uint64_t static_value2 = 0xf0c3a4e8eec771beULL;
};

template<class ContainerAllocator>
struct DataType< ::tauv_msgs::SonarPulse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tauv_msgs/SonarPulse";
  }

  static const char* value(const ::tauv_msgs::SonarPulse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tauv_msgs::SonarPulse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"uint8 mode\n"
"uint8 gain_setting\n"
"float32 angle\n"
"float32 transmit_duration\n"
"float32 sample_period\n"
"float32 transmit_frequency\n"
"uint16 number_of_samples\n"
"\n"
"uint16 data_length\n"
"uint8[] data\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::tauv_msgs::SonarPulse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tauv_msgs::SonarPulse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.mode);
      stream.next(m.gain_setting);
      stream.next(m.angle);
      stream.next(m.transmit_duration);
      stream.next(m.sample_period);
      stream.next(m.transmit_frequency);
      stream.next(m.number_of_samples);
      stream.next(m.data_length);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SonarPulse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tauv_msgs::SonarPulse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tauv_msgs::SonarPulse_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "gain_setting: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gain_setting);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
    s << indent << "transmit_duration: ";
    Printer<float>::stream(s, indent + "  ", v.transmit_duration);
    s << indent << "sample_period: ";
    Printer<float>::stream(s, indent + "  ", v.sample_period);
    s << indent << "transmit_frequency: ";
    Printer<float>::stream(s, indent + "  ", v.transmit_frequency);
    s << indent << "number_of_samples: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.number_of_samples);
    s << indent << "data_length: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.data_length);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TAUV_MSGS_MESSAGE_SONARPULSE_H
