// Generated by gencpp from file tauv_msgs/TunePidRequest.msg
// DO NOT EDIT!


#ifndef TAUV_MSGS_MESSAGE_TUNEPIDREQUEST_H
#define TAUV_MSGS_MESSAGE_TUNEPIDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <tauv_msgs/PidVals.h>

namespace tauv_msgs
{
template <class ContainerAllocator>
struct TunePidRequest_
{
  typedef TunePidRequest_<ContainerAllocator> Type;

  TunePidRequest_()
    : vals()  {
    }
  TunePidRequest_(const ContainerAllocator& _alloc)
    : vals(_alloc)  {
  (void)_alloc;
    }



   typedef  ::tauv_msgs::PidVals_<ContainerAllocator>  _vals_type;
  _vals_type vals;





  typedef boost::shared_ptr< ::tauv_msgs::TunePidRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tauv_msgs::TunePidRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TunePidRequest_

typedef ::tauv_msgs::TunePidRequest_<std::allocator<void> > TunePidRequest;

typedef boost::shared_ptr< ::tauv_msgs::TunePidRequest > TunePidRequestPtr;
typedef boost::shared_ptr< ::tauv_msgs::TunePidRequest const> TunePidRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tauv_msgs::TunePidRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tauv_msgs::TunePidRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tauv_msgs::TunePidRequest_<ContainerAllocator1> & lhs, const ::tauv_msgs::TunePidRequest_<ContainerAllocator2> & rhs)
{
  return lhs.vals == rhs.vals;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tauv_msgs::TunePidRequest_<ContainerAllocator1> & lhs, const ::tauv_msgs::TunePidRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tauv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tauv_msgs::TunePidRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tauv_msgs::TunePidRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tauv_msgs::TunePidRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tauv_msgs::TunePidRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tauv_msgs::TunePidRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tauv_msgs::TunePidRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tauv_msgs::TunePidRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4c7aa6b5ba42b455483bf8587b081bd9";
  }

  static const char* value(const ::tauv_msgs::TunePidRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4c7aa6b5ba42b455ULL;
  static const uint64_t static_value2 = 0x483bf8587b081bd9ULL;
};

template<class ContainerAllocator>
struct DataType< ::tauv_msgs::TunePidRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tauv_msgs/TunePidRequest";
  }

  static const char* value(const ::tauv_msgs::TunePidRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tauv_msgs::TunePidRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tauv_msgs/PidVals vals\n"
"\n"
"================================================================================\n"
"MSG: tauv_msgs/PidVals\n"
"float32 a_p\n"
"float32 a_i\n"
"float32 a_d\n"
"float32 a_sat\n"
"float32 l_p\n"
"float32 l_i\n"
"float32 l_d\n"
"float32 l_sat\n"
;
  }

  static const char* value(const ::tauv_msgs::TunePidRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tauv_msgs::TunePidRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vals);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TunePidRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tauv_msgs::TunePidRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tauv_msgs::TunePidRequest_<ContainerAllocator>& v)
  {
    s << indent << "vals: ";
    s << std::endl;
    Printer< ::tauv_msgs::PidVals_<ContainerAllocator> >::stream(s, indent + "  ", v.vals);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TAUV_MSGS_MESSAGE_TUNEPIDREQUEST_H
