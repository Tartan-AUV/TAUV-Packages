// Generated by gencpp from file tauv_msgs/GetTrajResponse.msg
// DO NOT EDIT!


#ifndef TAUV_MSGS_MESSAGE_GETTRAJRESPONSE_H
#define TAUV_MSGS_MESSAGE_GETTRAJRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Twist.h>

namespace tauv_msgs
{
template <class ContainerAllocator>
struct GetTrajResponse_
{
  typedef GetTrajResponse_<ContainerAllocator> Type;

  GetTrajResponse_()
    : poses()
    , twists()
    , auto_twists(false)
    , success(false)  {
    }
  GetTrajResponse_(const ContainerAllocator& _alloc)
    : poses(_alloc)
    , twists(_alloc)
    , auto_twists(false)
    , success(false)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _poses_type;
  _poses_type poses;

   typedef std::vector< ::geometry_msgs::Twist_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Twist_<ContainerAllocator> >::other >  _twists_type;
  _twists_type twists;

   typedef uint8_t _auto_twists_type;
  _auto_twists_type auto_twists;

   typedef uint8_t _success_type;
  _success_type success;





  typedef boost::shared_ptr< ::tauv_msgs::GetTrajResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tauv_msgs::GetTrajResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetTrajResponse_

typedef ::tauv_msgs::GetTrajResponse_<std::allocator<void> > GetTrajResponse;

typedef boost::shared_ptr< ::tauv_msgs::GetTrajResponse > GetTrajResponsePtr;
typedef boost::shared_ptr< ::tauv_msgs::GetTrajResponse const> GetTrajResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tauv_msgs::GetTrajResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tauv_msgs::GetTrajResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tauv_msgs::GetTrajResponse_<ContainerAllocator1> & lhs, const ::tauv_msgs::GetTrajResponse_<ContainerAllocator2> & rhs)
{
  return lhs.poses == rhs.poses &&
    lhs.twists == rhs.twists &&
    lhs.auto_twists == rhs.auto_twists &&
    lhs.success == rhs.success;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tauv_msgs::GetTrajResponse_<ContainerAllocator1> & lhs, const ::tauv_msgs::GetTrajResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tauv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tauv_msgs::GetTrajResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tauv_msgs::GetTrajResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tauv_msgs::GetTrajResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tauv_msgs::GetTrajResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tauv_msgs::GetTrajResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tauv_msgs::GetTrajResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tauv_msgs::GetTrajResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b240a3414e64f3ca2a1d3c8c70c7beee";
  }

  static const char* value(const ::tauv_msgs::GetTrajResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb240a3414e64f3caULL;
  static const uint64_t static_value2 = 0x2a1d3c8c70c7beeeULL;
};

template<class ContainerAllocator>
struct DataType< ::tauv_msgs::GetTrajResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tauv_msgs/GetTrajResponse";
  }

  static const char* value(const ::tauv_msgs::GetTrajResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tauv_msgs::GetTrajResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"geometry_msgs/Pose[] poses  # list of poses on trajectory\n"
"geometry_msgs/Twist[] twists  # list of twists on trajectory (in world frame! Not body velocities!)\n"
"bool auto_twists  # set to True to automatically calculate the twists from the poses, rather than providing them.\n"
"bool success  # false indicates some sort of failure\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::tauv_msgs::GetTrajResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tauv_msgs::GetTrajResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.poses);
      stream.next(m.twists);
      stream.next(m.auto_twists);
      stream.next(m.success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetTrajResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tauv_msgs::GetTrajResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tauv_msgs::GetTrajResponse_<ContainerAllocator>& v)
  {
    s << indent << "poses[]" << std::endl;
    for (size_t i = 0; i < v.poses.size(); ++i)
    {
      s << indent << "  poses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.poses[i]);
    }
    s << indent << "twists[]" << std::endl;
    for (size_t i = 0; i < v.twists.size(); ++i)
    {
      s << indent << "  twists[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "    ", v.twists[i]);
    }
    s << indent << "auto_twists: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.auto_twists);
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TAUV_MSGS_MESSAGE_GETTRAJRESPONSE_H
