// Generated by gencpp from file tauv_msgs/PidVals.msg
// DO NOT EDIT!


#ifndef TAUV_MSGS_MESSAGE_PIDVALS_H
#define TAUV_MSGS_MESSAGE_PIDVALS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tauv_msgs
{
template <class ContainerAllocator>
struct PidVals_
{
  typedef PidVals_<ContainerAllocator> Type;

  PidVals_()
    : a_p(0.0)
    , a_i(0.0)
    , a_d(0.0)
    , a_sat(0.0)
    , l_p(0.0)
    , l_i(0.0)
    , l_d(0.0)
    , l_sat(0.0)  {
    }
  PidVals_(const ContainerAllocator& _alloc)
    : a_p(0.0)
    , a_i(0.0)
    , a_d(0.0)
    , a_sat(0.0)
    , l_p(0.0)
    , l_i(0.0)
    , l_d(0.0)
    , l_sat(0.0)  {
  (void)_alloc;
    }



   typedef float _a_p_type;
  _a_p_type a_p;

   typedef float _a_i_type;
  _a_i_type a_i;

   typedef float _a_d_type;
  _a_d_type a_d;

   typedef float _a_sat_type;
  _a_sat_type a_sat;

   typedef float _l_p_type;
  _l_p_type l_p;

   typedef float _l_i_type;
  _l_i_type l_i;

   typedef float _l_d_type;
  _l_d_type l_d;

   typedef float _l_sat_type;
  _l_sat_type l_sat;





  typedef boost::shared_ptr< ::tauv_msgs::PidVals_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tauv_msgs::PidVals_<ContainerAllocator> const> ConstPtr;

}; // struct PidVals_

typedef ::tauv_msgs::PidVals_<std::allocator<void> > PidVals;

typedef boost::shared_ptr< ::tauv_msgs::PidVals > PidValsPtr;
typedef boost::shared_ptr< ::tauv_msgs::PidVals const> PidValsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tauv_msgs::PidVals_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tauv_msgs::PidVals_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tauv_msgs::PidVals_<ContainerAllocator1> & lhs, const ::tauv_msgs::PidVals_<ContainerAllocator2> & rhs)
{
  return lhs.a_p == rhs.a_p &&
    lhs.a_i == rhs.a_i &&
    lhs.a_d == rhs.a_d &&
    lhs.a_sat == rhs.a_sat &&
    lhs.l_p == rhs.l_p &&
    lhs.l_i == rhs.l_i &&
    lhs.l_d == rhs.l_d &&
    lhs.l_sat == rhs.l_sat;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tauv_msgs::PidVals_<ContainerAllocator1> & lhs, const ::tauv_msgs::PidVals_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tauv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tauv_msgs::PidVals_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tauv_msgs::PidVals_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tauv_msgs::PidVals_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tauv_msgs::PidVals_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tauv_msgs::PidVals_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tauv_msgs::PidVals_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tauv_msgs::PidVals_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d4db47770a0caf47edbb925bd3a9269a";
  }

  static const char* value(const ::tauv_msgs::PidVals_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd4db47770a0caf47ULL;
  static const uint64_t static_value2 = 0xedbb925bd3a9269aULL;
};

template<class ContainerAllocator>
struct DataType< ::tauv_msgs::PidVals_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tauv_msgs/PidVals";
  }

  static const char* value(const ::tauv_msgs::PidVals_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tauv_msgs::PidVals_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 a_p\n"
"float32 a_i\n"
"float32 a_d\n"
"float32 a_sat\n"
"float32 l_p\n"
"float32 l_i\n"
"float32 l_d\n"
"float32 l_sat\n"
;
  }

  static const char* value(const ::tauv_msgs::PidVals_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tauv_msgs::PidVals_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.a_p);
      stream.next(m.a_i);
      stream.next(m.a_d);
      stream.next(m.a_sat);
      stream.next(m.l_p);
      stream.next(m.l_i);
      stream.next(m.l_d);
      stream.next(m.l_sat);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PidVals_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tauv_msgs::PidVals_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tauv_msgs::PidVals_<ContainerAllocator>& v)
  {
    s << indent << "a_p: ";
    Printer<float>::stream(s, indent + "  ", v.a_p);
    s << indent << "a_i: ";
    Printer<float>::stream(s, indent + "  ", v.a_i);
    s << indent << "a_d: ";
    Printer<float>::stream(s, indent + "  ", v.a_d);
    s << indent << "a_sat: ";
    Printer<float>::stream(s, indent + "  ", v.a_sat);
    s << indent << "l_p: ";
    Printer<float>::stream(s, indent + "  ", v.l_p);
    s << indent << "l_i: ";
    Printer<float>::stream(s, indent + "  ", v.l_i);
    s << indent << "l_d: ";
    Printer<float>::stream(s, indent + "  ", v.l_d);
    s << indent << "l_sat: ";
    Printer<float>::stream(s, indent + "  ", v.l_sat);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TAUV_MSGS_MESSAGE_PIDVALS_H
