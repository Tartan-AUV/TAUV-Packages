// Generated by gencpp from file tauv_msgs/TuneInertialRequest.msg
// DO NOT EDIT!


#ifndef TAUV_MSGS_MESSAGE_TUNEINERTIALREQUEST_H
#define TAUV_MSGS_MESSAGE_TUNEINERTIALREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <tauv_msgs/InertialVals.h>

namespace tauv_msgs
{
template <class ContainerAllocator>
struct TuneInertialRequest_
{
  typedef TuneInertialRequest_<ContainerAllocator> Type;

  TuneInertialRequest_()
    : vals()  {
    }
  TuneInertialRequest_(const ContainerAllocator& _alloc)
    : vals(_alloc)  {
  (void)_alloc;
    }



   typedef  ::tauv_msgs::InertialVals_<ContainerAllocator>  _vals_type;
  _vals_type vals;





  typedef boost::shared_ptr< ::tauv_msgs::TuneInertialRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tauv_msgs::TuneInertialRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TuneInertialRequest_

typedef ::tauv_msgs::TuneInertialRequest_<std::allocator<void> > TuneInertialRequest;

typedef boost::shared_ptr< ::tauv_msgs::TuneInertialRequest > TuneInertialRequestPtr;
typedef boost::shared_ptr< ::tauv_msgs::TuneInertialRequest const> TuneInertialRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tauv_msgs::TuneInertialRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tauv_msgs::TuneInertialRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tauv_msgs::TuneInertialRequest_<ContainerAllocator1> & lhs, const ::tauv_msgs::TuneInertialRequest_<ContainerAllocator2> & rhs)
{
  return lhs.vals == rhs.vals;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tauv_msgs::TuneInertialRequest_<ContainerAllocator1> & lhs, const ::tauv_msgs::TuneInertialRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tauv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tauv_msgs::TuneInertialRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tauv_msgs::TuneInertialRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tauv_msgs::TuneInertialRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tauv_msgs::TuneInertialRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tauv_msgs::TuneInertialRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tauv_msgs::TuneInertialRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tauv_msgs::TuneInertialRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ab258f28927b44cb5b309830480cef99";
  }

  static const char* value(const ::tauv_msgs::TuneInertialRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xab258f28927b44cbULL;
  static const uint64_t static_value2 = 0x5b309830480cef99ULL;
};

template<class ContainerAllocator>
struct DataType< ::tauv_msgs::TuneInertialRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tauv_msgs/TuneInertialRequest";
  }

  static const char* value(const ::tauv_msgs::TuneInertialRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tauv_msgs::TuneInertialRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tauv_msgs/InertialVals vals\n"
"\n"
"================================================================================\n"
"MSG: tauv_msgs/InertialVals\n"
"float32 mass\n"
"float32 buoyancy\n"
"float32 ixx\n"
"float32 iyy\n"
"float32 izz\n"
;
  }

  static const char* value(const ::tauv_msgs::TuneInertialRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tauv_msgs::TuneInertialRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vals);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TuneInertialRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tauv_msgs::TuneInertialRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tauv_msgs::TuneInertialRequest_<ContainerAllocator>& v)
  {
    s << indent << "vals: ";
    s << std::endl;
    Printer< ::tauv_msgs::InertialVals_<ContainerAllocator> >::stream(s, indent + "  ", v.vals);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TAUV_MSGS_MESSAGE_TUNEINERTIALREQUEST_H
