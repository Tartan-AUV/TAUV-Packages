// Generated by gencpp from file tauv_msgs/InertialVals.msg
// DO NOT EDIT!


#ifndef TAUV_MSGS_MESSAGE_INERTIALVALS_H
#define TAUV_MSGS_MESSAGE_INERTIALVALS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tauv_msgs
{
template <class ContainerAllocator>
struct InertialVals_
{
  typedef InertialVals_<ContainerAllocator> Type;

  InertialVals_()
    : mass(0.0)
    , buoyancy(0.0)
    , ixx(0.0)
    , iyy(0.0)
    , izz(0.0)  {
    }
  InertialVals_(const ContainerAllocator& _alloc)
    : mass(0.0)
    , buoyancy(0.0)
    , ixx(0.0)
    , iyy(0.0)
    , izz(0.0)  {
  (void)_alloc;
    }



   typedef float _mass_type;
  _mass_type mass;

   typedef float _buoyancy_type;
  _buoyancy_type buoyancy;

   typedef float _ixx_type;
  _ixx_type ixx;

   typedef float _iyy_type;
  _iyy_type iyy;

   typedef float _izz_type;
  _izz_type izz;





  typedef boost::shared_ptr< ::tauv_msgs::InertialVals_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tauv_msgs::InertialVals_<ContainerAllocator> const> ConstPtr;

}; // struct InertialVals_

typedef ::tauv_msgs::InertialVals_<std::allocator<void> > InertialVals;

typedef boost::shared_ptr< ::tauv_msgs::InertialVals > InertialValsPtr;
typedef boost::shared_ptr< ::tauv_msgs::InertialVals const> InertialValsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tauv_msgs::InertialVals_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tauv_msgs::InertialVals_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tauv_msgs::InertialVals_<ContainerAllocator1> & lhs, const ::tauv_msgs::InertialVals_<ContainerAllocator2> & rhs)
{
  return lhs.mass == rhs.mass &&
    lhs.buoyancy == rhs.buoyancy &&
    lhs.ixx == rhs.ixx &&
    lhs.iyy == rhs.iyy &&
    lhs.izz == rhs.izz;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tauv_msgs::InertialVals_<ContainerAllocator1> & lhs, const ::tauv_msgs::InertialVals_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tauv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tauv_msgs::InertialVals_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tauv_msgs::InertialVals_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tauv_msgs::InertialVals_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tauv_msgs::InertialVals_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tauv_msgs::InertialVals_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tauv_msgs::InertialVals_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tauv_msgs::InertialVals_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dc905a6a26bfe30465ae55cdfc3db94e";
  }

  static const char* value(const ::tauv_msgs::InertialVals_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdc905a6a26bfe304ULL;
  static const uint64_t static_value2 = 0x65ae55cdfc3db94eULL;
};

template<class ContainerAllocator>
struct DataType< ::tauv_msgs::InertialVals_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tauv_msgs/InertialVals";
  }

  static const char* value(const ::tauv_msgs::InertialVals_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tauv_msgs::InertialVals_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 mass\n"
"float32 buoyancy\n"
"float32 ixx\n"
"float32 iyy\n"
"float32 izz\n"
;
  }

  static const char* value(const ::tauv_msgs::InertialVals_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tauv_msgs::InertialVals_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mass);
      stream.next(m.buoyancy);
      stream.next(m.ixx);
      stream.next(m.iyy);
      stream.next(m.izz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct InertialVals_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tauv_msgs::InertialVals_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tauv_msgs::InertialVals_<ContainerAllocator>& v)
  {
    s << indent << "mass: ";
    Printer<float>::stream(s, indent + "  ", v.mass);
    s << indent << "buoyancy: ";
    Printer<float>::stream(s, indent + "  ", v.buoyancy);
    s << indent << "ixx: ";
    Printer<float>::stream(s, indent + "  ", v.ixx);
    s << indent << "iyy: ";
    Printer<float>::stream(s, indent + "  ", v.iyy);
    s << indent << "izz: ";
    Printer<float>::stream(s, indent + "  ", v.izz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TAUV_MSGS_MESSAGE_INERTIALVALS_H
