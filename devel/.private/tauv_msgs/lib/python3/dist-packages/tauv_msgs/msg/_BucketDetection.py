# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tauv_msgs/BucketDetection.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import jsk_recognition_msgs.msg
import sensor_msgs.msg
import std_msgs.msg
import vision_msgs.msg

class BucketDetection(genpy.Message):
  _md5sum = "41448fa5d4f902dafc6c1063c8e50467"
  _type = "tauv_msgs/BucketDetection"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
geometry_msgs/Point position
float32 length
float32 width
float32 height
geometry_msgs/Vector3 normal
sensor_msgs/Image image
vision_msgs/BoundingBox2D bbox_2d
jsk_recognition_msgs/BoundingBox bbox_3d
string tag
uint32 detection_number
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of camera
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: vision_msgs/BoundingBox2D
# A 2D bounding box that can be rotated about its center.
# All dimensions are in pixels, but represented using floating-point
#   values to allow sub-pixel precision. If an exact pixel crop is required
#   for a rotated bounding box, it can be calculated using Bresenham's line
#   algorithm.

# The 2D position (in pixels) and orientation of the bounding box center.
geometry_msgs/Pose2D center

# The size (in pixels) of the bounding box surrounding the object relative
#   to the pose of its center.
float64 size_x
float64 size_y

================================================================================
MSG: geometry_msgs/Pose2D
# Deprecated
# Please use the full 3D pose.

# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.

# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.


# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta

================================================================================
MSG: jsk_recognition_msgs/BoundingBox
# BoundingBox represents a oriented bounding box.
Header header
geometry_msgs/Pose pose
geometry_msgs/Vector3 dimensions  # size of bounding box (x, y, z)
# You can use this field to hold value such as likelihood
float32 value
uint32 label

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['header','position','length','width','height','normal','image','bbox_2d','bbox_3d','tag','detection_number']
  _slot_types = ['std_msgs/Header','geometry_msgs/Point','float32','float32','float32','geometry_msgs/Vector3','sensor_msgs/Image','vision_msgs/BoundingBox2D','jsk_recognition_msgs/BoundingBox','string','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,position,length,width,height,normal,image,bbox_2d,bbox_3d,tag,detection_number

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BucketDetection, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.length is None:
        self.length = 0.
      if self.width is None:
        self.width = 0.
      if self.height is None:
        self.height = 0.
      if self.normal is None:
        self.normal = geometry_msgs.msg.Vector3()
      if self.image is None:
        self.image = sensor_msgs.msg.Image()
      if self.bbox_2d is None:
        self.bbox_2d = vision_msgs.msg.BoundingBox2D()
      if self.bbox_3d is None:
        self.bbox_3d = jsk_recognition_msgs.msg.BoundingBox()
      if self.tag is None:
        self.tag = ''
      if self.detection_number is None:
        self.detection_number = 0
    else:
      self.header = std_msgs.msg.Header()
      self.position = geometry_msgs.msg.Point()
      self.length = 0.
      self.width = 0.
      self.height = 0.
      self.normal = geometry_msgs.msg.Vector3()
      self.image = sensor_msgs.msg.Image()
      self.bbox_2d = vision_msgs.msg.BoundingBox2D()
      self.bbox_3d = jsk_recognition_msgs.msg.BoundingBox()
      self.tag = ''
      self.detection_number = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3d3f3d3I().pack(_x.position.x, _x.position.y, _x.position.z, _x.length, _x.width, _x.height, _x.normal.x, _x.normal.y, _x.normal.z, _x.image.header.seq, _x.image.header.stamp.secs, _x.image.header.stamp.nsecs))
      _x = self.image.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.image.height, _x.image.width))
      _x = self.image.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.image.is_bigendian, _x.image.step))
      _x = self.image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5d3I().pack(_x.bbox_2d.center.x, _x.bbox_2d.center.y, _x.bbox_2d.center.theta, _x.bbox_2d.size_x, _x.bbox_2d.size_y, _x.bbox_3d.header.seq, _x.bbox_3d.header.stamp.secs, _x.bbox_3d.header.stamp.nsecs))
      _x = self.bbox_3d.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_10dfI().pack(_x.bbox_3d.pose.position.x, _x.bbox_3d.pose.position.y, _x.bbox_3d.pose.position.z, _x.bbox_3d.pose.orientation.x, _x.bbox_3d.pose.orientation.y, _x.bbox_3d.pose.orientation.z, _x.bbox_3d.pose.orientation.w, _x.bbox_3d.dimensions.x, _x.bbox_3d.dimensions.y, _x.bbox_3d.dimensions.z, _x.bbox_3d.value, _x.bbox_3d.label))
      _x = self.tag
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.detection_number
      buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.normal is None:
        self.normal = geometry_msgs.msg.Vector3()
      if self.image is None:
        self.image = sensor_msgs.msg.Image()
      if self.bbox_2d is None:
        self.bbox_2d = vision_msgs.msg.BoundingBox2D()
      if self.bbox_3d is None:
        self.bbox_3d = jsk_recognition_msgs.msg.BoundingBox()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.position.x, _x.position.y, _x.position.z, _x.length, _x.width, _x.height, _x.normal.x, _x.normal.y, _x.normal.z, _x.image.header.seq, _x.image.header.stamp.secs, _x.image.header.stamp.nsecs,) = _get_struct_3d3f3d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.image.height, _x.image.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image.encoding = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.image.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.image.is_bigendian, _x.image.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.image.data = str[start:end]
      _x = self
      start = end
      end += 52
      (_x.bbox_2d.center.x, _x.bbox_2d.center.y, _x.bbox_2d.center.theta, _x.bbox_2d.size_x, _x.bbox_2d.size_y, _x.bbox_3d.header.seq, _x.bbox_3d.header.stamp.secs, _x.bbox_3d.header.stamp.nsecs,) = _get_struct_5d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bbox_3d.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.bbox_3d.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 88
      (_x.bbox_3d.pose.position.x, _x.bbox_3d.pose.position.y, _x.bbox_3d.pose.position.z, _x.bbox_3d.pose.orientation.x, _x.bbox_3d.pose.orientation.y, _x.bbox_3d.pose.orientation.z, _x.bbox_3d.pose.orientation.w, _x.bbox_3d.dimensions.x, _x.bbox_3d.dimensions.y, _x.bbox_3d.dimensions.z, _x.bbox_3d.value, _x.bbox_3d.label,) = _get_struct_10dfI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tag = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.tag = str[start:end]
      start = end
      end += 4
      (self.detection_number,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3d3f3d3I().pack(_x.position.x, _x.position.y, _x.position.z, _x.length, _x.width, _x.height, _x.normal.x, _x.normal.y, _x.normal.z, _x.image.header.seq, _x.image.header.stamp.secs, _x.image.header.stamp.nsecs))
      _x = self.image.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.image.height, _x.image.width))
      _x = self.image.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.image.is_bigendian, _x.image.step))
      _x = self.image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5d3I().pack(_x.bbox_2d.center.x, _x.bbox_2d.center.y, _x.bbox_2d.center.theta, _x.bbox_2d.size_x, _x.bbox_2d.size_y, _x.bbox_3d.header.seq, _x.bbox_3d.header.stamp.secs, _x.bbox_3d.header.stamp.nsecs))
      _x = self.bbox_3d.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_10dfI().pack(_x.bbox_3d.pose.position.x, _x.bbox_3d.pose.position.y, _x.bbox_3d.pose.position.z, _x.bbox_3d.pose.orientation.x, _x.bbox_3d.pose.orientation.y, _x.bbox_3d.pose.orientation.z, _x.bbox_3d.pose.orientation.w, _x.bbox_3d.dimensions.x, _x.bbox_3d.dimensions.y, _x.bbox_3d.dimensions.z, _x.bbox_3d.value, _x.bbox_3d.label))
      _x = self.tag
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.detection_number
      buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.normal is None:
        self.normal = geometry_msgs.msg.Vector3()
      if self.image is None:
        self.image = sensor_msgs.msg.Image()
      if self.bbox_2d is None:
        self.bbox_2d = vision_msgs.msg.BoundingBox2D()
      if self.bbox_3d is None:
        self.bbox_3d = jsk_recognition_msgs.msg.BoundingBox()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.position.x, _x.position.y, _x.position.z, _x.length, _x.width, _x.height, _x.normal.x, _x.normal.y, _x.normal.z, _x.image.header.seq, _x.image.header.stamp.secs, _x.image.header.stamp.nsecs,) = _get_struct_3d3f3d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.image.height, _x.image.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image.encoding = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.image.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.image.is_bigendian, _x.image.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.image.data = str[start:end]
      _x = self
      start = end
      end += 52
      (_x.bbox_2d.center.x, _x.bbox_2d.center.y, _x.bbox_2d.center.theta, _x.bbox_2d.size_x, _x.bbox_2d.size_y, _x.bbox_3d.header.seq, _x.bbox_3d.header.stamp.secs, _x.bbox_3d.header.stamp.nsecs,) = _get_struct_5d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bbox_3d.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.bbox_3d.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 88
      (_x.bbox_3d.pose.position.x, _x.bbox_3d.pose.position.y, _x.bbox_3d.pose.position.z, _x.bbox_3d.pose.orientation.x, _x.bbox_3d.pose.orientation.y, _x.bbox_3d.pose.orientation.z, _x.bbox_3d.pose.orientation.w, _x.bbox_3d.dimensions.x, _x.bbox_3d.dimensions.y, _x.bbox_3d.dimensions.z, _x.bbox_3d.value, _x.bbox_3d.label,) = _get_struct_10dfI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tag = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.tag = str[start:end]
      start = end
      end += 4
      (self.detection_number,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10dfI = None
def _get_struct_10dfI():
    global _struct_10dfI
    if _struct_10dfI is None:
        _struct_10dfI = struct.Struct("<10dfI")
    return _struct_10dfI
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d3f3d3I = None
def _get_struct_3d3f3d3I():
    global _struct_3d3f3d3I
    if _struct_3d3f3d3I is None:
        _struct_3d3f3d3I = struct.Struct("<3d3f3d3I")
    return _struct_3d3f3d3I
_struct_5d3I = None
def _get_struct_5d3I():
    global _struct_5d3I
    if _struct_5d3I is None:
        _struct_5d3I = struct.Struct("<5d3I")
    return _struct_5d3I
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
