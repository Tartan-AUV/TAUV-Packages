# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tauv_msgs/GetTrajRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import std_msgs.msg

class GetTrajRequest(genpy.Message):
  _md5sum = "d20d43afe10933a453d78bb46d60acf3"
  _type = "tauv_msgs/GetTrajRequest"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# Note: Angular velocities outside of yaw (z axis) are currently unused.

std_msgs/Header header
geometry_msgs/Pose curr_pose  # Current positions
geometry_msgs/Twist curr_twist  # Current velocities (in world frame! Not body velocities!)
time curr_time
int32 len  # Number of samples to look ahead on the trajectory. (First sample corresponds to current time, second is time + dt, etc)
float32 dt  # time difference between samples


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['header','curr_pose','curr_twist','curr_time','len','dt']
  _slot_types = ['std_msgs/Header','geometry_msgs/Pose','geometry_msgs/Twist','time','int32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,curr_pose,curr_twist,curr_time,len,dt

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetTrajRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.curr_pose is None:
        self.curr_pose = geometry_msgs.msg.Pose()
      if self.curr_twist is None:
        self.curr_twist = geometry_msgs.msg.Twist()
      if self.curr_time is None:
        self.curr_time = genpy.Time()
      if self.len is None:
        self.len = 0
      if self.dt is None:
        self.dt = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.curr_pose = geometry_msgs.msg.Pose()
      self.curr_twist = geometry_msgs.msg.Twist()
      self.curr_time = genpy.Time()
      self.len = 0
      self.dt = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_13d2Iif().pack(_x.curr_pose.position.x, _x.curr_pose.position.y, _x.curr_pose.position.z, _x.curr_pose.orientation.x, _x.curr_pose.orientation.y, _x.curr_pose.orientation.z, _x.curr_pose.orientation.w, _x.curr_twist.linear.x, _x.curr_twist.linear.y, _x.curr_twist.linear.z, _x.curr_twist.angular.x, _x.curr_twist.angular.y, _x.curr_twist.angular.z, _x.curr_time.secs, _x.curr_time.nsecs, _x.len, _x.dt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.curr_pose is None:
        self.curr_pose = geometry_msgs.msg.Pose()
      if self.curr_twist is None:
        self.curr_twist = geometry_msgs.msg.Twist()
      if self.curr_time is None:
        self.curr_time = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 120
      (_x.curr_pose.position.x, _x.curr_pose.position.y, _x.curr_pose.position.z, _x.curr_pose.orientation.x, _x.curr_pose.orientation.y, _x.curr_pose.orientation.z, _x.curr_pose.orientation.w, _x.curr_twist.linear.x, _x.curr_twist.linear.y, _x.curr_twist.linear.z, _x.curr_twist.angular.x, _x.curr_twist.angular.y, _x.curr_twist.angular.z, _x.curr_time.secs, _x.curr_time.nsecs, _x.len, _x.dt,) = _get_struct_13d2Iif().unpack(str[start:end])
      self.curr_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_13d2Iif().pack(_x.curr_pose.position.x, _x.curr_pose.position.y, _x.curr_pose.position.z, _x.curr_pose.orientation.x, _x.curr_pose.orientation.y, _x.curr_pose.orientation.z, _x.curr_pose.orientation.w, _x.curr_twist.linear.x, _x.curr_twist.linear.y, _x.curr_twist.linear.z, _x.curr_twist.angular.x, _x.curr_twist.angular.y, _x.curr_twist.angular.z, _x.curr_time.secs, _x.curr_time.nsecs, _x.len, _x.dt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.curr_pose is None:
        self.curr_pose = geometry_msgs.msg.Pose()
      if self.curr_twist is None:
        self.curr_twist = geometry_msgs.msg.Twist()
      if self.curr_time is None:
        self.curr_time = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 120
      (_x.curr_pose.position.x, _x.curr_pose.position.y, _x.curr_pose.position.z, _x.curr_pose.orientation.x, _x.curr_pose.orientation.y, _x.curr_pose.orientation.z, _x.curr_pose.orientation.w, _x.curr_twist.linear.x, _x.curr_twist.linear.y, _x.curr_twist.linear.z, _x.curr_twist.angular.x, _x.curr_twist.angular.y, _x.curr_twist.angular.z, _x.curr_time.secs, _x.curr_time.nsecs, _x.len, _x.dt,) = _get_struct_13d2Iif().unpack(str[start:end])
      self.curr_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_13d2Iif = None
def _get_struct_13d2Iif():
    global _struct_13d2Iif
    if _struct_13d2Iif is None:
        _struct_13d2Iif = struct.Struct("<13d2Iif")
    return _struct_13d2Iif
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tauv_msgs/GetTrajResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class GetTrajResponse(genpy.Message):
  _md5sum = "b240a3414e64f3ca2a1d3c8c70c7beee"
  _type = "tauv_msgs/GetTrajResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
geometry_msgs/Pose[] poses  # list of poses on trajectory
geometry_msgs/Twist[] twists  # list of twists on trajectory (in world frame! Not body velocities!)
bool auto_twists  # set to True to automatically calculate the twists from the poses, rather than providing them.
bool success  # false indicates some sort of failure

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['poses','twists','auto_twists','success']
  _slot_types = ['geometry_msgs/Pose[]','geometry_msgs/Twist[]','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       poses,twists,auto_twists,success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetTrajResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.poses is None:
        self.poses = []
      if self.twists is None:
        self.twists = []
      if self.auto_twists is None:
        self.auto_twists = False
      if self.success is None:
        self.success = False
    else:
      self.poses = []
      self.twists = []
      self.auto_twists = False
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.poses:
        _v1 = val1.position
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.orientation
        _x = _v2
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.twists)
      buff.write(_struct_I.pack(length))
      for val1 in self.twists:
        _v3 = val1.linear
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v4 = val1.angular
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_2B().pack(_x.auto_twists, _x.success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.poses is None:
        self.poses = None
      if self.twists is None:
        self.twists = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v5 = val1.position
        _x = _v5
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v6 = val1.orientation
        _x = _v6
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.twists = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v7 = val1.linear
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v8 = val1.angular
        _x = _v8
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.twists.append(val1)
      _x = self
      start = end
      end += 2
      (_x.auto_twists, _x.success,) = _get_struct_2B().unpack(str[start:end])
      self.auto_twists = bool(self.auto_twists)
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.poses:
        _v9 = val1.position
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v10 = val1.orientation
        _x = _v10
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.twists)
      buff.write(_struct_I.pack(length))
      for val1 in self.twists:
        _v11 = val1.linear
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v12 = val1.angular
        _x = _v12
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_2B().pack(_x.auto_twists, _x.success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.poses is None:
        self.poses = None
      if self.twists is None:
        self.twists = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v13 = val1.position
        _x = _v13
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v14 = val1.orientation
        _x = _v14
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.twists = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v15 = val1.linear
        _x = _v15
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v16 = val1.angular
        _x = _v16
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.twists.append(val1)
      _x = self
      start = end
      end += 2
      (_x.auto_twists, _x.success,) = _get_struct_2B().unpack(str[start:end])
      self.auto_twists = bool(self.auto_twists)
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
class GetTraj(object):
  _type          = 'tauv_msgs/GetTraj'
  _md5sum = 'e104c1c4c7e7c1d03d3c9b5d5780f143'
  _request_class  = GetTrajRequest
  _response_class = GetTrajResponse
