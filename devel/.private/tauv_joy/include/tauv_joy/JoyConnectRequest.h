// Generated by gencpp from file tauv_joy/JoyConnectRequest.msg
// DO NOT EDIT!


#ifndef TAUV_JOY_MESSAGE_JOYCONNECTREQUEST_H
#define TAUV_JOY_MESSAGE_JOYCONNECTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tauv_joy
{
template <class ContainerAllocator>
struct JoyConnectRequest_
{
  typedef JoyConnectRequest_<ContainerAllocator> Type;

  JoyConnectRequest_()
    : dev()  {
    }
  JoyConnectRequest_(const ContainerAllocator& _alloc)
    : dev(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _dev_type;
  _dev_type dev;





  typedef boost::shared_ptr< ::tauv_joy::JoyConnectRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tauv_joy::JoyConnectRequest_<ContainerAllocator> const> ConstPtr;

}; // struct JoyConnectRequest_

typedef ::tauv_joy::JoyConnectRequest_<std::allocator<void> > JoyConnectRequest;

typedef boost::shared_ptr< ::tauv_joy::JoyConnectRequest > JoyConnectRequestPtr;
typedef boost::shared_ptr< ::tauv_joy::JoyConnectRequest const> JoyConnectRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tauv_joy::JoyConnectRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tauv_joy::JoyConnectRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tauv_joy::JoyConnectRequest_<ContainerAllocator1> & lhs, const ::tauv_joy::JoyConnectRequest_<ContainerAllocator2> & rhs)
{
  return lhs.dev == rhs.dev;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tauv_joy::JoyConnectRequest_<ContainerAllocator1> & lhs, const ::tauv_joy::JoyConnectRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tauv_joy

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tauv_joy::JoyConnectRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tauv_joy::JoyConnectRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tauv_joy::JoyConnectRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tauv_joy::JoyConnectRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tauv_joy::JoyConnectRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tauv_joy::JoyConnectRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tauv_joy::JoyConnectRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7534365f649860cedcb8e14b3bba3af2";
  }

  static const char* value(const ::tauv_joy::JoyConnectRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7534365f649860ceULL;
  static const uint64_t static_value2 = 0xdcb8e14b3bba3af2ULL;
};

template<class ContainerAllocator>
struct DataType< ::tauv_joy::JoyConnectRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tauv_joy/JoyConnectRequest";
  }

  static const char* value(const ::tauv_joy::JoyConnectRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tauv_joy::JoyConnectRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string dev # device file path\n"
;
  }

  static const char* value(const ::tauv_joy::JoyConnectRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tauv_joy::JoyConnectRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dev);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JoyConnectRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tauv_joy::JoyConnectRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tauv_joy::JoyConnectRequest_<ContainerAllocator>& v)
  {
    s << indent << "dev: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.dev);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TAUV_JOY_MESSAGE_JOYCONNECTREQUEST_H
