<launch>
    <!-- This launchfile launches the full Guidance, Navigation, and Control system. -->
    <!-- This includes the cascaded pid controller, teleop node, and (TODO) the trajectory planner. -->

    <!-- Name of the robot model  -->
    <arg name="model_name" default="kingfisher"/>
    <!-- path to config package  -->
    <arg name="config_pkg" default="$(eval find(arg('model_name') + '_description'))"/>

    <arg name="debug" default="none" />

    <arg name="teleop" default="false" />

    <node pkg="tauv_common" type="thruster_manager" name="thruster_manager" output="screen">
        <rosparam command="load" file="$(arg config_pkg)/yaml/thruster_manager.yaml" />
    </node>

    <node pkg="tauv_common" type="controller" name="controller" output="screen">
        <rosparam command="load" file="$(arg config_pkg)/yaml/controller.yaml" />
    </node>

    <node
        pkg="tauv_common"
        type="state_estimation_cpp"
        name="state_estimation"
        output="screen"
        launch-prefix="$(eval 'gdb -ex \'break main\' -ex run --args' if arg('debug') == 'gdb' else 'valgrind --leak-check=full --track-origins=yes' if arg('debug') == 'valgrind' else 'valgrind --tool=callgrind --callgrind-out-file=/home/theo/catkin_ws/callgrind-out' if arg('debug') == 'callgrind' else '')"
    >
        <rosparam command="load" file="$(arg config_pkg)/yaml/state_estimation_cpp.yaml" />
    </node>

    <node
       pkg="tauv_common"
       type="pid_planner"
       name="pid_planner"
       output="screen"
    >
        <rosparam command="load" file="$(arg config_pkg)/yaml/pid_planner.yaml" />
        <remap if="$(arg teleop)" from="gnc/controller_command" to="gnc/planner_command" />
    </node>

    <group if="$(arg teleop)">
        <node
            pkg="tauv_common"
            type="teleop_planner"
            name="teleop_planner"
            output="screen"
        >
            <rosparam command="load" file="$(arg config_pkg)/yaml/teleop_planner.yaml" />
        </node>
    </group>
</launch>
