#!/usr/bin/env python3

from utils.pointEstimation import *
import numpy as np
import cv2 as cv
import rospy
from sensor_msgs.msg import Image, CameraInfo
from tauv_msgs.msg import Pose, GateDetection
from cv_bridge import CvBridge

distanceThresh = 5 #need to be within 5 meters of gate to log
displacementThresh = 10 #ignore detections when we are farther than some distance from start
gateWidth = 1

#TODO: write ros node to listen to both camera images
#relative pose estimate of the graph, PNP: https://docs.opencv.org/4.x/d5/d1f/calib3d_solvePnP.html
#https://docs.opencv.org/4.x/d9/d0c/group__calib3d.html#ga1b2f149ee4b033c4dfe539f87338e243
class GateDetector():
    def __init__(self):
        rospy.init_node('gate_detector')

        self.bridge = CvBridge()

        self.active = True
        self.dist = 0

        #consider changing this to rectified side-by-side images
        self.leftImage = None
        self.rightImage = None
        self.new = False

        #subscribe to needed ros nodes
        #self.cameraLeftP = rospy.wait_for_message("zedm_A/zed_node_A/left/camera_info",CameraInfo).P
        #self.cameraRightP = rospy.wait_for_message("zedm_A/zed_node_A/right/camera_info",CameraInfo).P #change to right

        self.cameraLeftP = np.array([[1, 0, 0, 0], [0,1,0,0],[0,0,1,0],[0,0,0,1]], dtype=np.float)
        self.cameraRightP = np.array([[1, 0, 0, .175], [0,1,0,0],[0,0,1,0],[0,0,0,1]], dtype=np.float)

        #rospy.Subscriber("/zedm_A/zed_node_A/left/image_rect_color",Image, self.setLeftImage)
        #rospy.Subscriber("/zedm_A/zed_node_A/right/image_rect_color",Image, self.setRightImage)

        rospy.Subscriber("/zedm/zed_node/left/image_rect_color",Image, self.setLeftImage)
        rospy.Subscriber("/zedm/zed_node/right/image_rect_color",Image, self.setRightImage)

        rospy.Subscriber("gnc/pose", Pose, self.updatePose)

        self.publisher = rospy.Publisher("/gate_detector/", GateDetection, queue_size=10)

        print("initialized")


    def findGatePoints(self, img):
        filt = colorFilter(img, hue = "black", thresh = 0, NMS = True, itr=1)

        visualizeImage(filt)

        (lines,pts) = findPoints(filt, numLineInt=3, numPointInt=1)

        print(lines)

        #did not find enough points
        if(len(pts)<3):
            return (None,[])

        ptLines = []
        #find and return points along one line

        return (lines,pts)


    def scanForGate(self):
        if((not self.active) or (self.dist>displacementThresh)):
            return

        (leftLines,leftPts) = self.findGatePoints(self.leftImage)
        (rightLines, rightPts) = self.findGatePoints(self.rightImage)

        visualizeParamLines(leftLines, leftPts, self.leftImage)
        visualizeParamLines(rightLines, rightPts, self.rightImage)

        #gate not correctly detected in frame
        if(len(leftPts)<3 or len(rightPts)<3):
            return

        """projMat1 = mtx1 @ cv2.hconcat([np.eye(3), np.zeros((3,1))]) # Cam1 is the origin
            projMat2 = mtx2 @ cv2.hconcat([R, T]) # R, T from stereoCalibrate

            # points1 is a (N, 1, 2) float32 from cornerSubPix
            points1u = cv2.undistortPoints(points1, mtx1, dist1, None, mtx1)
            points2u = cv2.undistortPoints(points2, mtx2, dist2, None, mtx2)

            points4d = cv2.triangulatePoints(projMat1, projMat2, points1u, points2u)
            points3d = (points4d[:3, :]/points4d[3, :]).T"""

        #find the pose and publish
        pts = cv.triangulatePoints(self.cameraLeftP, self.cameraRightP, leftPts, rightPts)

        #if the points are farther than our thresh, return
        
        #curate the gate detection message
        detection = GateDetection()
        detection.leftCorner = pts[0][0:3]
        detection.rightCorner = pts[2][0:3]
        detection.centerPoint = pts[1][0:3]

        print(pts)

        self.publisher.publish(detection)


    def setLeftImage(self, image):
        self.leftImage = np.asarray(self.bridge.imgmsg_to_cv2(image))
        self.new = True

    def setRightImage(self, image):
        self.rightImage = np.asarray(self.bridge.imgmsg_to_cv2(image))

        if self.new:
            self.scanForGate()

        self.new=False

    def updatePose(self, data):
        pose = data.position
        self.dist = np.sqrt(pose.x**2+pose.y**2+pose.z**2)
    
    def activate(self):
        self.active = True

    def deactivate(self):
        self.active = False


GateDetector()
rospy.spin()