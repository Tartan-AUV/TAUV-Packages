#!/usr/bin/env python3
# from alarm_util import AlarmType, FailureLevel
import yaml
import argparse
from datetime import datetime

def generate_python(yaml_path, output):
    with open(yaml_path, 'r') as file:
        conf = yaml.safe_load(file)
    alarms = conf['Alarms']

    python  = '# **THIS IS AN AUTOGENERATED FILE, DO NOT EDIT MANUALLY**\n'
    python += '# \n'
    python += '# Generated by generate_alarms.py (Tom Scherlis 2022)\n'
    python += '# This file is generated whenever tauv_common is built using catkin build.\n'
    python += '# See alarms/CMakeLists.txt for configuring the autogen build step\n'
    python += '# \n'
    python +=f'# Generated on {datetime.now().ctime()}\n'
    python += '\n'
    python += 'from .alarm_util import AlarmMeta, AlarmType, FailureLevel\n'
    python += '\n'
    python += 'class Alarm(metaclass=AlarmMeta):\n'
    
    names = set()
    ids = set()
    for a in alarms:
        name = list(a.keys())[0]
        entry = list(a.values())[0]
        id = entry['id']
        if id in ids:
            raise Exception(f"Error: duplicate alarm id {id} in alarms.yaml. Alarm ids MUST be unique!")
        ids.add(id)
        if name in names:
            raise Exception(f"Error: duplicate alarm name {name} in alarms.yaml. Alarm names MUST be unique!")
        names.add(name)

        python += f'    {name} = AlarmType(\n'
        python += f'        name="{name}",\n'
        python += f'        id={id},\n'
        python += f'        failure_level=FailureLevel.{entry["failure_level"]},\n'
        python += f'        default_set={entry["default_set"]},\n'
        python += f'        description="{entry["description"]}",\n'
        python += f'        author="{entry["author"]}",\n'
        python += f'    )\n'
        python += f'    \n'

    python += '\n'
    with open(output, 'w') as file:
        file.write(python)

def generate_cpp(yaml_path, output):
    with open(yaml_path, 'r') as file:
        conf = yaml.safe_load(file)
    alarms = conf['Alarms']

    cpp  = '// **THIS IS AN AUTOGENERATED FILE, DO NOT EDIT MANUALLY**\n'
    cpp += '// \n'
    cpp += '// Generated by generate_alarms.py (Tom Scherlis 2022)\n'
    cpp += '// This file is generated whenever tauv_common is built using catkin build.\n'
    cpp += '// See alarms/CMakeLists.txt for configuring the autogen build step\n'
    cpp += '// \n'
    cpp +=f'// Generated on {datetime.now().ctime()}\n'
    cpp += '\n'
    cpp += '#pragma once\n'
    cpp += '\n'
    cpp += 'namespace tauv_alarms {\n'
    cpp += '  enum AlarmType {\n'
    for a in alarms:
        name = list(a.keys())[0]
        entry = list(a.values())[0]
        id = entry['id']

        cpp += f'     {name}={id}, \n'
    cpp += '  };\n'
    cpp += '}\n'

    with open(output, 'w') as file:
        file.write(cpp)

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('yaml_path', type=str)
    parser.add_argument('--py', type=str)
    parser.add_argument('--cpp', type=str)
    a = parser.parse_args()
    generate_python(a.yaml_path, a.py)
    generate_cpp(a.yaml_path, a.cpp)
