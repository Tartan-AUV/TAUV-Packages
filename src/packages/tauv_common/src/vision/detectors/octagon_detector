#!/usr/bin/env python

import cv2 as cv
import numpy as np
import rospy
from darknet_ros_msgs.msg import BoundingBoxes, BoundingBox

class OctagonDetector():
    def __init__(self):
        self.lower = np.array([80,95,70])
        self.upper = np.array([165,165,150])

        self.ksize = (25, 25)

        self.octagon_offset = 1

        rospy.Subscriber("/zedm_A/zed_node_A/left/image_rect_color", Image, self.find)
        self.publisher = rospy.Publisher("/color_detector", BoundingBoxes)

    def find(self, image)
        img = cv.blur(image, self.ksize)

        mask = cv.inRange(img,self.lower,self.upper)
        result = cv.bitwise_and(img,img,mask = mask)

        gray_image = cv.cvtColor(result, cv.COLOR_BGR2GRAY)
        ret, thresh_image = cv.threshold(gray_image, 0, 255, cv.THRESH_BINARY)

        contours, hierarchy = cv.findContours(image = thresh_image, mode = cv.RETR_TREE, method = cv.CHAIN_APPROX_SIMPLE)

        boxes = BoundingBoxes()

        boxes.bounding_boxes = []

        for i in contours:
            x,y,w,h = cv.boundingRect(i)

            box = BoundingBox()
            box.xmin = x + self.octagon_offset
            box.xmax = x + w + self.octagon_offset
            box.ymin = y
            box.ymax = y + h

            box.tag = "color"

            boxes.bounding_boxes.append(box)

        self.publisher.publish(boxes)


def listen():
    s = OctagonDetector()
    rospy.spin()

if __name__=='__main__':
    listen()
