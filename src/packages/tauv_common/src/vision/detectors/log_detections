#!/usr/bin/env python3

import rospy
from tauv_msgs.msg import Pose, BucketDetection, BucketList, RegisterObjectDetections
from std_msgs.msg import Header
import numpy as numpy
import cv2
from cv_bridge import CvBridge
from darknet_ros_msgs.msg import BoundingBoxes, BoundingBox
from sensor_msgs.msg import Image, CameraInfo
from vision.depth_estimation.depth_estimation import DepthEstimator
from geometry_msgs.msg import Point
from vision.detector_bucket.detector_bucket import Detector_Bucket
import math
from tauv_util import transforms
from tauv_util import types
from scipy.spatial.transform import Rotation

class LogDetections():
    def __init__(self):
        self.cur_position = (0,0,0)
        self.cur_orientation = (0,0,0)

        self.data = None

        self.depth_image = None
        self.data = None
        self.created= False

        self.new_image = False

        rospy.init_node('image_detector', anonymous = True)

        self.depth_camera_info = CameraInfo()
        self.bounding_boxes = BoundingBoxes()
        self.cv_bridge = CvBridge()
        self.detector_bucket = Detector_Bucket()
        
        rospy.Subscriber("zedm_A/zed_node_A/depth/depth_registered",Image,self.depth_callback)
        rospy.Subscriber("/zedm_A/zed_node_A/left/camera_info",CameraInfo, self.camera_info_callback)
        rospy.Subscriber("/darknet_ros/bounding_boxes", BoundingBoxes, self.bbox_callback)
        self.detector = rospy.Publisher("register_object_detection", RegisterObjectDetections,
                                              queue_size=10)
        
        rospy.Timer(rospy.Duration(2),self.publish)

        rospy.Subscriber("gnc/pose", Pose, self.update_position)
        
    def publish(self, event):
        self.detector_bucket.publish()

    def find(self, tag):
        return self.detector_bucket.find_by_tag(tag)

    def update_position(self,data):
        self.cur_position = (data.position.x, data.position.y, data.position.z)
        self.cur_orientation = (data.orientation.x, data.orientation.y, data.orientation.z)
        self.data = data

    def camera_info_callback(self, msg):
        self.depth_camera_info = msg

    def depth_callback(self, msg):
        self.depth_image = self.cv_bridge.imgmsg_to_cv2(msg, "passthrough")
        self.created=True

    def calc_pos(self, relative):
        if (self.data is None):
            return

        #roll = self.cur_orientation [0]
        #pitch = self.cur_orientation [1]
        #yaw = self.cur_orientation [2]

        R = Rotation.from_euler('ZYX', numpy.flip(types.tl(self.data.orientation))).inv()
        new = numpy.array(types.tl(self.data.position)) + R.apply(relative)


        rospy.loginfo(f"global orientation {self.cur_orientation}\n")
        rospy.loginfo(f"global position {self.cur_position}\n")

        # (xrpy, yrpy, zrpy) = (relative[0]*math.cos(yaw)-zrp*math.sin(yaw), yrp, xrp*math.sin(yaw)+zrp*math.cos(yaw))
        # (xrp, yrp, zrp) = (xr, yr*math.cos(pitch)+zr*math.sin(pitch),zr*math.cos(pitch)-yr*math.sin(pitch))
        # (xr,yr,zr) = (relative[0]*math.cos(roll) - relative[1]*math.sin(roll), relative[0]*math.sin(roll)+relative[1]*math.cos(roll), relative[2])
        

        return types.tm(new, Point)

    def bbox_callback(self, bboxes):
        if(not self.created):
            return

        objects = RegisterObjectDetections()
        objects.objdets = list()

        for bbox in bboxes.bounding_boxes:
            objdet = BucketDetection()
            objdet.tag = bbox.Class

            if(not self.created):
                continue

            relative_pos = DepthEstimator.estimate_absolute_depth(self.depth_image, bbox, self.depth_camera_info)

            #rospy.loginfo(f"current pos: {self.cur_position}\n")

            #rospy.loginfo(f"depth pos: {relative_pos}\n")

            objdet.position = self.calc_pos(relative_pos)

            #rospy.loginfo(f"calculated pos: {objdet.position}\n")

            if(numpy.isnan(objdet.position.x) or numpy.isnan(objdet.position.y) or numpy.isnan(objdet.position.z)):
                continue

            objects.objdets.append(objdet)

        objects.detector_tag = "camera"

        self.detector.publish(objects)


def listen():
    s = LogDetections()
    rospy.spin()


if __name__=='__main__':
    listen()
