#!/usr/bin/env python3

import rospy
from tauv_msgs.msg import Pose, BucketDetection, BucketList, RegisterObjectDetections
from std_msgs.msg import Header
import numpy as numpy
import cv2
from cv_bridge import CvBridge
from darknet_ros_msgs.msg import BoundingBoxes, BoundingBox
from sensor_msgs.msg import Image, CameraInfo
from vision.depth_estimation.depth_estimation import DepthEstimator
from geometry_msgs.msg import Point
from vision.detector_bucket.detector_bucket import Detector_Bucket
import math

class LogDetections():
    def __init__(self):
        self.cur_position = (0,0,0)
        self.cur_orientation = (0,0,0)
        self.depth_image = None
        self.created= False

        self.new_image = False

        rospy.init_node('image_detector', anonymous = True)

        self.depth_camera_info = CameraInfo()
        self.bounding_boxes = BoundingBoxes()
        self.cv_bridge = CvBridge()
        self.detector_bucket = Detector_Bucket()
        
        self.depth_image_streamer = rospy.Subscriber("zedm_A/zed_node_A/depth/depth_registered",Image,self.depth_callback)
        self.depth_camera_info = rospy.Subscriber("/zedm_A/zed_node_A/left/camera_info",CameraInfo, self.camera_info_callback)
        self.bounding_boxes = rospy.Subscriber("/darknet_ros/bounding_boxes", BoundingBoxes, self.bbox_callback)
        self.detector = rospy.Publisher("register_object_detection", RegisterObjectDetections,
                                              queue_size=10)

        rospy.Subscriber("gnc/pose", Pose, self.update_position)
        
    def find(self, tag):
        return self.detector_bucket.find_by_tag(tag)

    def update_position(self,data):
        self.cur_position = (data.position.x, data.position.y, data.position.z)
        self.cur_orientation = (data.orientation.x, data.orientation.y, data.orientation.z)

    def camera_info_callback(self, msg):
        self.depth_camera_info = msg

    def depth_callback(self, msg):
        self.depth_image = self.cv_bridge.imgmsg_to_cv2(msg, "passthrough")
        self.created=True

    def calc_pos(self, relative):
        roll = self.cur_orientation [0]
        pitch = self.cur_orientation [1]
        yaw = self.cur_orientation [2]

        #rospy.loginfo(f"global orientation {self.cur_orientation}\n")
        #rospy.loginfo(f"global position {self.cur_position}\n")

        (xr,yr,zr) = (relative[0]*math.cos(roll) - relative[1]*math.sin(roll), relative[0]*math.sin(roll)+relative[1]*math.cos(roll), relative[2])
        (xrp, yrp, zrp) = (xr, yr*math.cos(pitch)+zr*math.sin(pitch),zr*math.cos(pitch)-yr*math.sin(pitch))
        (xrpy, yrpy, zrpy) = (xrp*math.cos(yaw)-zrp*math.sin(yaw), yrp, xrp*math.sin(yaw)+zrp*math.cos(yaw))

        return Point(self.cur_position[0] + zrpy, self.cur_position[1] + xrpy, self.cur_position[2] + yrpy)

    def bbox_callback(self, bboxes):
        if(not self.created):
            return

        objects = RegisterObjectDetections()
        objects.objdets = list()

        for bbox in bboxes.bounding_boxes:
            objdet = BucketDetection()
            objdet.tag = bbox.Class

            relative_pos = DepthEstimator.estimate_absolute_depth(self.depth_image, bbox, self.depth_camera_info)

            objdet.position = self.calc_pos(relative_pos)

            if(numpy.isnan(objdet.position.x)):
                continue

            objects.objdets.append(objdet)

        objects.detector_tag = "camera"

        self.detector.publish(objects)


def listen():
    s = LogDetections()
    rospy.spin()
    rospy.loginfo("here!!!\n")

if __name__=='__main__':
    listen()