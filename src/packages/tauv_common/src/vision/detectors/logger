#!/usr/bin/env python3

import rospy
from tauv_msgs.msg import FeatureDetections, FeatureDetection
from tauv_msgs.srv import MapFind, MapFindClosest, SonarControl
from std_msgs.msg import Int8
from visualization_msgs.msg import MarkerArray, Marker
from geometry_msgs.msg import Point
import numpy as np

TIME = 1

def getColor(tag, trans=False):
    color = [0,0,0,0]

    if(tag=="phone"):
        color = [1,0,0,1]

    if(tag=="badge"):
        color = [0,1,0,1]

    if(tag=="notebook"):
        color = [0,0,1,1]

    if(tag=="unknown"):
        color = [0,0,0,1]

    if(not trans):
        color[3] = 0.5

    return color

def makeMarker(id, detection, color, scale = 0.5, shape = Marker.SPHERE, time = rospy.Duration(1.0)):
    marker = Marker()
    marker.header.frame_id = "map"
    marker.header.stamp = rospy.Time()
    marker.ns = "my_namespace"
    marker.id = id
    marker.type = shape
    marker.action = Marker.ADD
    marker.pose.position.x = detection.position.x
    marker.pose.position.y = detection.position.y
    marker.pose.position.z = detection.position.z
    marker.pose.orientation.x = 0.0
    marker.pose.orientation.y = 0.0
    marker.pose.orientation.z = 0.0
    marker.pose.orientation.w = 1.0
    marker.scale.x = scale
    marker.scale.y = scale
    marker.scale.z = scale
    marker.color.a = color[3]
    marker.color.r = color[0]
    marker.color.g = color[1]
    marker.color.b = color[2]
    marker.lifetime = time
    
    return marker


class Logger():
    def __init__(self):
        rospy.init_node('logger')
        rospy.Subscriber("/feature_detectionsS", FeatureDetections,
                                                self.callback)

        rospy.Subscriber("/global_map/find", FeatureDetections,
                                        self.visualize)

        rospy.wait_for_service("/global_map/find")
        self.find = rospy.ServiceProxy("/global_map/find", MapFind)

        self.pub = rospy.Publisher("/feature_detections", FeatureDetections,
                                                queue_size=10)
        self.viz = rospy.Publisher("/visualization_marker_array", MarkerArray, queue_size=100)

        rospy.wait_for_service("/sonar/map/")
        self.findSonar = rospy.ServiceProxy("/sonar/map/", SonarControl)
        
        
        self.arr = [self.getObj1, self.getObj2, self.getObj3, self.getObj4, self.getObj5]
        self.arrInd = [0,1,2,3,4]

        self.count=0
        self.ind = 10000
        self.ind1=5000

        #var 2 = 2*(2^2) <= 8 mahalanobis (10)
        self.var1 = 2
        self.var2 = 1

        rospy.Timer(rospy.Duration(1.0/10.0), self.publish)
        #rospy.Timer(rospy.Duration(30), self.publish6)
        #rospy.Timer(rospy.Duration(30.1), self.publish6)
        #rospy.Timer(rospy.Duration(30.2), self.publish6)

        rospy.Timer(rospy.Duration(1), self.publishS)
        rospy.Timer(rospy.Duration(TIME), self.visualize, False)

    def publishS(self, t):
        res = self.findSonar(2)
        self.count+=1
        #print(res)

    def callback(self, data):
        markers = []
        for ind in range(len(data.detections)):
            det = data.detections[ind]
            markers.append(makeMarker(self.ind1, det, getColor(det.tag, True)))
            self.ind1+=1
        OBJ = MarkerArray()
        OBJ.markers = markers

        self.viz.publish(OBJ)
        #print("CALLBACK")
        #print(data)

    def visualize(self, time):
        #buckets = bucketList.bucket_list
        buckets1 = self.find("badge").detections
        buckets2 = self.find("phone").detections
        buckets3 = self.find("notebook").detections
        buckets4 = self.find("unknown").detections

        #print(buckets1)
        #print(buckets2)
        #print(buckets3)
        #print(buckets4)

        markers = []
        for ind in range(len(buckets1)):
            det = buckets1[ind]
            markers.append(makeMarker(ind, det, getColor(det.tag), 1, Marker.CUBE, rospy.Duration(TIME)))

        for ind in range(len(buckets2)):
            det = buckets2[ind]
            markers.append(makeMarker(ind+len(buckets1), det, getColor(det.tag), 1, Marker.CUBE, rospy.Duration(TIME)))

        for ind in range(len(buckets3)):
            det = buckets3[ind]
            markers.append(makeMarker(ind+len(buckets1)+len(buckets2), det, getColor(det.tag), 1, Marker.CUBE, rospy.Duration(TIME)))

        for ind in range(len(buckets4)):
            det = buckets4[ind]
            markers.append(makeMarker(ind+len(buckets1)+len(buckets2)+len(buckets3), det, getColor(det.tag),1, Marker.CUBE, rospy.Duration(TIME)))

        OBJ = MarkerArray()
        OBJ.markers = markers

        #print(markers)

        self.viz.publish(OBJ)

    def publish(self, time):
        if self.count<15:
            return

        objInd = np.random.choice(self.arrInd, np.random.randint(1, high=5), replace=False)

        detections = []
        markers = []
        for ind in objInd:
            detection = self.arr[ind]()
            detections.append(detection)

            markers.append(makeMarker(self.ind, detection, getColor(detection.tag, True)))
            self.ind+=1

        objDets = FeatureDetections()
        objDets.detections = detections
        objDets.detector_tag = "yolo"
        self.pub.publish(objDets)

        markersPub = MarkerArray()
        markersPub.markers = markers
        self.viz.publish(markersPub)

    def publish6(self, time):
        objDets = FeatureDetections()
        det = self.getObj6()
        objDets.detections = [det]
        self.pub.publish(objDets)

        markersPub = MarkerArray()
        markersPub.markers = [makeMarker(self.ind, det, getColor(det.tag, True))]
        self.ind+=1
        self.viz.publish(markersPub)

    def makeDetection(self, tag, pos):
        detection = FeatureDetection()
        detection.position = pos
        detection.orientation = Point(0,0,0)
        detection.tag = tag
        detection.confidence = 0.85
        return detection

    def getObj1(self):
        return self.makeDetection("badge",Point(np.random.normal(loc=1.0, scale=self.var2),np.random.normal(loc=1.0, scale=self.var2),np.random.normal(loc=1.0, scale=self.var2)))

    def getObj2(self):
        return self.makeDetection("badge",Point(np.random.normal(loc=15.5, scale=self.var2),np.random.normal(loc=15.5, scale=self.var2),np.random.normal(loc=15.5, scale=self.var2)))

    def getObj3(self):
        position = Point(np.random.normal(loc=1.5, scale=self.var1),np.random.normal(loc=1.5, scale=self.var1),np.random.normal(loc=1.5, scale=self.var1))
        tag = "notebook"

        return self.makeDetection(tag,position)
        
    def getObj4(self):
        return self.makeDetection("notebook", Point(np.random.normal(loc=20.5, scale=self.var1),np.random.normal(loc=20.5, scale=self.var1),np.random.normal(loc=5, scale=self.var2)))

    def getObj5(self):
        position = Point(np.random.normal(loc=10.5, scale=self.var1),np.random.normal(loc=10.5, scale=self.var1),np.random.normal(loc=5, scale=self.var2))
        tag = "phone"

        return self.makeDetection(tag,position)

    def getObj6(self):
        position = Point(np.random.normal(loc=30, scale=self.var1),np.random.normal(loc=30, scale=self.var1),np.random.normal(loc=5, scale=self.var1))
        tag = "badge"

        return self.makeDetection(tag,position)

s = Logger()
rospy.spin()