#!/usr/bin/env python3

import rospy
import depthai
import cv2 as cv
from sensor_msgs.msg import Image, CameraInfo
import numpy as np
from cv_bridge import CvBridge, CvBridgeError

NODENAME = "oakd_ros"
QUEUE_SIZE = 100
# node to create oakd ros nodes from oakd api
# publishes depth map and color image

class OAKDNode:
    def __init__(self):

        rospy.init_node(NODENAME, anonymous = True)

        self.pipeline = depthai.Pipeline()

        self.cam_rgb = self.pipeline.create(depthai.node.ColorCamera)
        self.stereo = self.pipeline.create(depthai.node.StereoDepth)
        self.left = self.pipeline.create(depthai.node.MonoCamera)
        self.right = self.pipeline.create(depthai.node.MonoCamera)

        self.left.setBoardSocket(depthai.CameraBoardSocket.LEFT)
        self.right.setBoardSocket(depthai.CameraBoardSocket.RIGHT)

        self.xout_color = self.pipeline.create(depthai.node.XLinkOut)
        self.xout_depth = self.pipeline.create(depthai.node.XLinkOut)

        self.xout_color.setStreamName("rgb")
        self.xout_depth.setStreamName("depth")

        self.left.setResolution(depthai.MonoCameraProperties.SensorResolution.THE_400_P)
        self.left.setBoardSocket(depthai.CameraBoardSocket.LEFT)

        self.right.setResolution(depthai.MonoCameraProperties.SensorResolution.THE_400_P)
        self.right.setBoardSocket(depthai.CameraBoardSocket.RIGHT)

        self.cam_rgb.setBoardSocket(depthai.CameraBoardSocket.RGB)
        self.cam_rgb.setResolution(depthai.ColorCameraProperties.SensorResolution.THE_1080_P)
        self.cam_rgb.setInterleaved(False)
        self.cam_rgb.setColorOrder(depthai.ColorCameraProperties.ColorOrder.RGB)
        
        self.stereo.setLeftRightCheck(False)
        self.stereo.setExtendedDisparity(False)
        self.stereo.setSubpixel(False)
        self.stereo.setDepthAlign(depthai.CameraBoardSocket.RGB)
        self.stereo.setDefaultProfilePreset(depthai.node.StereoDepth.PresetMode.HIGH_ACCURACY)
        self.stereo.initialConfig.setMedianFilter(depthai.MedianFilter.KERNEL_7x7)

        self.left.out.link(self.stereo.left)
        self.right.out.link(self.stereo.right)
        self.stereo.depth.link(self.xout_depth.input)
        self.cam_rgb.video.link(self.xout_color.input)

        self.depthPub = rospy.Publisher("/oakd/oakd_front/depth_map", Image, queue_size=10)
        self.colorPub = rospy.Publisher("/oakd/oakd_front/color_image", Image, queue_size=10)
        self.cameraInfoPub = rospy.Publisher("/oakd/oakd_front/camera_info", CameraInfo, queue_size=10)

        self.device = depthai.Device(self.pipeline)
        self.calibData = self.device.readCalibration()
        self.camera_info = CameraInfo()
        self.camera_info.K = np.array(self.calibData.getCameraIntrinsics(depthai.CameraBoardSocket.RGB))

        self.bridge = CvBridge()

        self.spin()

    def spin(self):
        qRgb = self.device.getOutputQueue(name="rgb", maxSize=QUEUE_SIZE, blocking=False)
        qDepth = self.device.getOutputQueue(name="depth", maxSize=QUEUE_SIZE, blocking=False)

        while True:
            rgb = qRgb.tryGet()
            depth = qDepth.tryGet()
            self.cameraInfoPub.publish(self.camera_info)

            if rgb is not None:
                try:
                    self.colorPub.publish(self.bridge.cv2_to_imgmsg(rgb.getCvFrame(), "rgb8"))
                except CvBridgeError as e:
                    rospy.loginfo("OAKD frame error")

            if depth is not None:
                try:
                    self.depthPub.publish(self.bridge.cv2_to_imgmsg(depth.getCvFrame(), "passthrough"))
                except CvBridgeError as e:
                    rospy.loginfo("OAKD frame error")

def main():
    OAKDNode()
    rospy.spin()

main()